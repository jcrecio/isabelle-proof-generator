{"file_name": "/home/qj213/afp-2021-10-22/thys/AODV/variants/b_fwdrreps/B_Aodv_Loop_Freedom.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AODV", "problem_names": ["lemma par_step_no_change_on_send_or_receive:\n    fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\"", "lemma par_nhop_quality_increases:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith ((=)) {i} (orecvmsg (\\<lambda>\\<sigma> m.\n                                    msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                                  other quality_increases {i} \\<rightarrow>)\n                        global (\\<lambda>\\<sigma>. \\<forall>dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"", "lemma par_rreq_rrep_sn_quality_increases:\n  \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\"", "lemma par_rreq_rrep_nsqn_fresh_any_step:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                                   other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                  globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\"", "lemma par_anycast_msg_zhops:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                  globala (\\<lambda>(_, a, _). anycast msg_zhops a)\"", "lemma node_step_no_change_on_send_or_receive:\n  assumes \"((\\<sigma>, NodeS i P R), a, (\\<sigma>', NodeS i' P' R')) \\<in> onode_sos\n                                      (oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G))\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\"", "lemma node_nhop_quality_increases:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\n           (otherwith ((=)) {i}\n              (oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n              other quality_increases {i}\n            \\<rightarrow>) global (\\<lambda>\\<sigma>. \\<forall>dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                  in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                     \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"", "lemma node_quality_increases:\n  \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                                         other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\"", "lemma node_rreq_rrep_nsqn_fresh_any_step:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n          (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (msg_fresh \\<sigma>) a)\"", "lemma node_anycast_msg_zhops:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n          (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(_, a, _). castmsg msg_zhops a)\"", "lemma node_silent_change_only:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>,\n                                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a \\<noteq> \\<tau> \\<longrightarrow> \\<sigma>' i = \\<sigma> i)\"", "lemma arrive_rreq_rrep_nsqn_fresh_inc_sn [simp]:\n  assumes \"oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> P \\<sigma> m) \\<sigma> m\"\n    shows \"oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> m\"", "lemma opnet_nhop_quality_increases:\n  shows \"opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) p \\<Turnstile>\n           (otherwith ((=)) (net_tree_ips p)\n              (oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n               other quality_increases (net_tree_ips p) \\<rightarrow>)\n              global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p. \\<forall>dip.\n                          let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"", "lemma onet_nhop_quality_increases:\n  shows \"oclosed (opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) p)\n           \\<Turnstile> (\\<lambda>_ _ _. True, other quality_increases (net_tree_ips p) \\<rightarrow>)\n              global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p. \\<forall>dip.\n                          let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"\n  (is \"_ \\<Turnstile> (_, ?U \\<rightarrow>) ?inv\")", "lemma net_nhop_quality_increases:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal\n                           (\\<lambda>\\<sigma>. \\<forall>i dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                        in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                            \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"\n        (is \"_ \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. ?inv \\<sigma> i)\")", "theorem aodv_loop_freedom:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>dip. irrefl ((rt_graph \\<sigma> dip)\\<^sup>+))\""], "translations": [["", "lemma par_step_no_change_on_send_or_receive:\n    fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n  a \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by (rule qmsg_no_change_on_send_or_receive)"], ["", "lemma par_nhop_quality_increases:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith ((=)) {i} (orecvmsg (\\<lambda>\\<sigma> m.\n                                    msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                                  other quality_increases {i} \\<rightarrow>)\n                        global (\\<lambda>\\<sigma>. \\<forall>dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith (=)\n                         {i}\n                         (orecvmsg\n                           (\\<lambda>\\<sigma> m.\n                               msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                        other quality_increases {i} \\<rightarrow>)\n                        global\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "proof (rule lift_into_qmsg [OF seq_nhop_quality_increases])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       \\<xi> = \\<xi>' \\<Longrightarrow> quality_increases \\<xi> \\<xi>'\n 3. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>\\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j);\n        msg_fresh \\<sigma> m \\<and> msg_zhops m\\<rbrakk>\n       \\<Longrightarrow> msg_fresh \\<sigma>' m \\<and> msg_zhops m\n 4. opaodv\n     i \\<Turnstile>\\<^sub>A (otherwith (=) {i}\n                              (orecvmsg\n                                (\\<lambda>\\<sigma> m.\n                                    msg_fresh \\<sigma> m \\<and>\n                                    msg_zhops m)),\n                             other quality_increases {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  quality_increases (\\<sigma> i)\n                                   (\\<sigma>' i))", "show \"opaodv i \\<Turnstile>\\<^sub>A (otherwith ((=)) {i}\n                         (orecvmsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                        other quality_increases {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<Turnstile>\\<^sub>A (otherwith (=) {i}\n                              (orecvmsg\n                                (\\<lambda>\\<sigma> m.\n                                    msg_fresh \\<sigma> m \\<and>\n                                    msg_zhops m)),\n                             other quality_increases {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  quality_increases (\\<sigma> i)\n                                   (\\<sigma>' i))", "proof (rule ostep_invariant_weakenE [OF oquality_increases], simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), uu_, \\<sigma>', uu_).\n            \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j))\n        t \\<Longrightarrow>\n       quality_increases (fst (fst t) i) (fst (snd (snd t)) i)\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "fix t :: \"(((nat \\<Rightarrow> state) \\<times> (state, msg, pseqp, pseqp label) seqp), msg seq_action) transition\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), uu_, \\<sigma>', uu_).\n            \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j))\n        t \\<Longrightarrow>\n       quality_increases (fst (fst t) i) (fst (snd (snd t)) i)\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "assume \"onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V (\\<lambda>((\\<sigma>, _), _, (\\<sigma>', _)). \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j)) t\""], ["proof (state)\nthis:\n  onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n   (\\<lambda>((\\<sigma>, uu_), uu_, \\<sigma>', uu_).\n       \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j))\n   t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), uu_, \\<sigma>', uu_).\n            \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j))\n        t \\<Longrightarrow>\n       quality_increases (fst (fst t) i) (fst (snd (snd t)) i)\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "thus \"quality_increases (fst (fst t) i) (fst (snd (snd t)) i)\""], ["proof (prove)\nusing this:\n  onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n   (\\<lambda>((\\<sigma>, uu_), uu_, \\<sigma>', uu_).\n       \\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j))\n   t\n\ngoal (1 subgoal):\n 1. quality_increases (fst (fst t) i) (fst (snd (snd t)) i)", "by (cases t) (clarsimp dest!: onllD, metis aodv_ex_label)"], ["proof (state)\nthis:\n  quality_increases (fst (fst t) i) (fst (snd (snd t)) i)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "fix \\<sigma> \\<sigma>' a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "assume \"otherwith ((=)) {i}\n                (orecvmsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)) \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  otherwith (=) {i}\n   (orecvmsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n   \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       otherwith (=) {i}\n        (orecvmsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        \\<sigma> \\<sigma>' a \\<Longrightarrow>\n       otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n        \\<sigma> \\<sigma>' a", "thus \"otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn)) \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  otherwith (=) {i}\n   (orecvmsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n   \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n     \\<sigma> \\<sigma>' a", "by - (erule weaken_otherwith, auto)"], ["proof (state)\nthis:\n  otherwith quality_increases {i} (orecvmsg (\\<lambda>_. rreq_rrep_sn))\n   \\<sigma> \\<sigma>' a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (otherwith (=) {i}\n                            (orecvmsg\n                              (\\<lambda>\\<sigma> m.\n                                  msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                           other quality_increases {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                quality_increases (\\<sigma> i)\n                                 (\\<sigma>' i))\n\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       \\<xi> = \\<xi>' \\<Longrightarrow> quality_increases \\<xi> \\<xi>'\n 3. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>\\<forall>j. quality_increases (\\<sigma> j) (\\<sigma>' j);\n        msg_fresh \\<sigma> m \\<and> msg_zhops m\\<rbrakk>\n       \\<Longrightarrow> msg_fresh \\<sigma>' m \\<and> msg_zhops m", "qed auto"], ["", "lemma par_rreq_rrep_sn_quality_increases:\n  \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "have \"opaodv i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                 \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  quality_increases (\\<sigma> i)\n                                   (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF olocal_quality_increases])\n         (auto dest!: onllD seqllD elim!: aodv_ex_labelE)"], ["proof (state)\nthis:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                quality_increases (\\<sigma> i)\n                                 (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "hence \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                   globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                quality_increases (\\<sigma> i)\n                                 (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "by (rule lift_step_into_qmsg_statelessassm) simp_all"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   quality_increases (\\<sigma> i)\n                                    (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   quality_increases (\\<sigma> i)\n                                    (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     quality_increases (\\<sigma> i)\n(\\<sigma>' i))", "by rule auto"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   quality_increases (\\<sigma> i)\n                                    (\\<sigma>' i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma par_rreq_rrep_nsqn_fresh_any_step:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                                   other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                  globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "have \"opaodv i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. (orecvmsg (\\<lambda>_. rreq_rrep_sn)) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                 \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                  anycast (msg_fresh \\<sigma>) a)", "proof (rule ostep_invariant_weakenE [OF rreq_rrep_nsqn_fresh_any_step_invariant])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), a, uu_). anycast (msg_fresh \\<sigma>) a)\n        t \\<Longrightarrow>\n       globala\n        (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\n        t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act (recvmsg rreq_rrep_sn) \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other ?A1 {i} \\<sigma> \\<sigma>'", "fix t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), a, uu_). anycast (msg_fresh \\<sigma>) a)\n        t \\<Longrightarrow>\n       globala\n        (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\n        t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act (recvmsg rreq_rrep_sn) \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other ?A1 {i} \\<sigma> \\<sigma>'", "assume \"onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V (\\<lambda>((\\<sigma>, _), a, _). anycast (msg_fresh \\<sigma>) a) t\""], ["proof (state)\nthis:\n  onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n   (\\<lambda>((\\<sigma>, uu_), a, uu_). anycast (msg_fresh \\<sigma>) a) t\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n        (\\<lambda>((\\<sigma>, uu_), a, uu_). anycast (msg_fresh \\<sigma>) a)\n        t \\<Longrightarrow>\n       globala\n        (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\n        t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act (recvmsg rreq_rrep_sn) \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other ?A1 {i} \\<sigma> \\<sigma>'", "thus \"globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a) t\""], ["proof (prove)\nusing this:\n  onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n   (\\<lambda>((\\<sigma>, uu_), a, uu_). anycast (msg_fresh \\<sigma>) a) t\n\ngoal (1 subgoal):\n 1. globala\n     (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a) t", "by (cases t) (clarsimp dest!: onllD, metis aodv_ex_label)"], ["proof (state)\nthis:\n  globala\n   (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a) t\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act (recvmsg rreq_rrep_sn) \\<sigma> \\<sigma>' a\n 2. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other ?A1 {i} \\<sigma> \\<sigma>'", "qed auto"], ["proof (state)\nthis:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                anycast (msg_fresh \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "hence \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. (orecvmsg (\\<lambda>_. rreq_rrep_sn)) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                    globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (msg_fresh \\<sigma>) a)\""], ["proof (prove)\nusing this:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                anycast (msg_fresh \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "by (rule lift_step_into_qmsg_statelessassm) simp_all"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   anycast (msg_fresh \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   anycast (msg_fresh \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     anycast (msg_fresh \\<sigma>) a)", "by rule auto"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   anycast (msg_fresh \\<sigma>) a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma par_anycast_msg_zhops:\n  shows \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                  globala (\\<lambda>(_, a, _). anycast msg_zhops a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "from anycast_msg_zhops initiali_aodv oaodv_trans aodv_trans"], ["proof (chain)\npicking this:\n  paodv\n   ?i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                             (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n  initiali ?i (init (opaodv ?i)) (init (paodv ?i))\n  automaton.trans (opaodv ?i) =\n  oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V ?i\n  automaton.trans (paodv ?i) =\n  seqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V", "have \"opaodv i \\<Turnstile>\\<^sub>A (act TT, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                         seqll i (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V (\\<lambda>(_, a, _). anycast msg_zhops a))\""], ["proof (prove)\nusing this:\n  paodv\n   ?i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                             (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n  initiali ?i (init (opaodv ?i)) (init (paodv ?i))\n  automaton.trans (opaodv ?i) =\n  oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V ?i\n  automaton.trans (paodv ?i) =\n  seqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<Turnstile>\\<^sub>A (act TT,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             seqll i\n                              (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                                (\\<lambda>(uu_, a, uu_).\n                                    anycast msg_zhops a))", "by (rule open_seq_step_invariant)"], ["proof (state)\nthis:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (act TT,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           seqll i\n                            (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                              (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "hence \"opaodv i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(_, a, _). anycast msg_zhops a)\""], ["proof (prove)\nusing this:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (act TT,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           seqll i\n                            (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                              (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                 \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)", "proof (rule ostep_invariant_weakenE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       seqll i\n        (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n          (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n        t \\<Longrightarrow>\n       globala (\\<lambda>(uu_, a, uu_). anycast msg_zhops a) t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act TT \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>'", "fix t :: \"(((nat \\<Rightarrow> state) \\<times> (state, msg, pseqp, pseqp label) seqp), msg seq_action) transition\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       seqll i\n        (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n          (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n        t \\<Longrightarrow>\n       globala (\\<lambda>(uu_, a, uu_). anycast msg_zhops a) t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act TT \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>'", "assume \"seqll i (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V (\\<lambda>(_, a, _). anycast msg_zhops a)) t\""], ["proof (state)\nthis:\n  seqll i\n   (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n     (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n   t\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       seqll i\n        (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n          (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n        t \\<Longrightarrow>\n       globala (\\<lambda>(uu_, a, uu_). anycast msg_zhops a) t\n 2. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act TT \\<sigma> \\<sigma>' a\n 3. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>'", "thus \"globala (\\<lambda>(_, a, _). anycast msg_zhops a) t\""], ["proof (prove)\nusing this:\n  seqll i\n   (onll \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n     (\\<lambda>(uu_, a, uu_). anycast msg_zhops a))\n   t\n\ngoal (1 subgoal):\n 1. globala (\\<lambda>(uu_, a, uu_). anycast msg_zhops a) t", "by (cases t) (clarsimp dest!: seqllD onllD, metis aodv_ex_label)"], ["proof (state)\nthis:\n  globala (\\<lambda>(uu_, a, uu_). anycast msg_zhops a) t\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a \\<Longrightarrow>\n       act TT \\<sigma> \\<sigma>' a\n 2. \\<And>\\<sigma> \\<sigma>'.\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n       other (\\<lambda>_ _. True) {i} \\<sigma> \\<sigma>'", "qed simp_all"], ["proof (state)\nthis:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "hence \"opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                     globala (\\<lambda>(_, a, _). anycast msg_zhops a)\""], ["proof (prove)\nusing this:\n  opaodv\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "by (rule lift_step_into_qmsg_statelessassm) simp_all"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n\ngoal (1 subgoal):\n 1. opaodv\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(uu_, a, uu_).\n                                     anycast msg_zhops a)", "by rule auto"], ["proof (state)\nthis:\n  opaodv\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_. rreq_rrep_sn)\n                                     \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(uu_, a, uu_). anycast msg_zhops a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lift to nodes\\<close>"], ["", "lemma node_step_no_change_on_send_or_receive:\n  assumes \"((\\<sigma>, NodeS i P R), a, (\\<sigma>', NodeS i' P' R')) \\<in> onode_sos\n                                      (oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G))\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i P R), a, \\<sigma>', NodeS i' P' R')\n  \\<in> onode_sos\n         (oparp_sos i (oseqp_sos \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i)\n           (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G))\n  a \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by (cases a) (auto elim!: par_step_no_change_on_send_or_receive)"], ["", "lemma node_nhop_quality_increases:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\n           (otherwith ((=)) {i}\n              (oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n              other quality_increases {i}\n            \\<rightarrow>) global (\\<lambda>\\<sigma>. \\<forall>dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                  in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                     \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile> (otherwith\n                     (=) {i}\n                     (oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                    other quality_increases {i} \\<rightarrow>)\n                    global\n                     (\\<lambda>\\<sigma>.\n                         \\<forall>dip.\n                            let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                            in dip\n                               \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                                     vD (rt (\\<sigma> nhip)) \\<and>\n                               nhip \\<noteq> dip \\<longrightarrow>\n                               rt (\\<sigma> i)\n                               \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                         (\\<sigma> nhip))", "by (rule node_lift [OF par_nhop_quality_increases]) auto"], ["", "lemma node_quality_increases:\n  \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                                         other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                   \\<sigma>,\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                 quality_increases (\\<sigma> i)\n                                  (\\<sigma>' i))", "by (rule node_lift_step_statelessassm [OF par_rreq_rrep_sn_quality_increases]) simp"], ["", "lemma node_rreq_rrep_nsqn_fresh_any_step:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n          (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (msg_fresh \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                   \\<sigma>,\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 castmsg (msg_fresh \\<sigma>) a)", "by (rule node_lift_anycast_statelessassm [OF par_rreq_rrep_nsqn_fresh_any_step])"], ["", "lemma node_anycast_msg_zhops:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n          (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(_, a, _). castmsg msg_zhops a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                   \\<sigma>,\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(uu_, a, uu_). castmsg msg_zhops a)", "by (rule node_lift_anycast_statelessassm [OF par_anycast_msg_zhops])"], ["", "lemma node_silent_change_only:\n  shows \"\\<langle> i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i \\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>,\n                                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n          globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a \\<noteq> \\<tau> \\<longrightarrow> \\<sigma>' i = \\<sigma> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>,\n                                    other (\\<lambda>_ _. True)\n                                     {i} \\<rightarrow>)\n                                    globala\n                                     (\\<lambda>(\\<sigma>, a, \\<sigma>').\n   a \\<noteq> \\<tau> \\<longrightarrow> \\<sigma>' i = \\<sigma> i)", "proof (rule ostep_invariantI, simp (no_asm), rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_ _. True) \\<sigma> a;\n        a \\<noteq> \\<tau>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "fix \\<sigma> \\<zeta> a \\<sigma>' \\<zeta>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_ _. True) \\<sigma> a;\n        a \\<noteq> \\<tau>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "assume or: \"(\\<sigma>, \\<zeta>) \\<in> oreachable (\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                    (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                                    (other (\\<lambda>_ _. True) {i})\"\n      and tr: \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n      and \"a \\<noteq> \\<tau>\\<^sub>n\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n  a \\<noteq> \\<tau>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_ _. True) \\<sigma> a;\n        a \\<noteq> \\<tau>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "from or"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})", "obtain p R where \"\\<zeta> = NodeS i p R\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<And>p R.\n        \\<zeta> = NodeS i p R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule node_net_state, metis)"], ["proof (state)\nthis:\n  \\<zeta> = NodeS i p R\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_ _. True) \\<sigma> a;\n        a \\<noteq> \\<tau>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "with tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n  \\<zeta> = NodeS i p R", "have \"((\\<sigma>, NodeS i p R), a, (\\<sigma>', \\<zeta>'))\n                     \\<in> onode_sos (oparp_sos i (trans (opaodv i)) (trans qmsg))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n  \\<zeta> = NodeS i p R\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i p R), a, \\<sigma>', \\<zeta>')\n    \\<in> onode_sos\n           (oparp_sos i (automaton.trans (opaodv i)) (automaton.trans qmsg))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i p R), a, \\<sigma>', \\<zeta>')\n  \\<in> onode_sos\n         (oparp_sos i (automaton.trans (opaodv i)) (automaton.trans qmsg))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_ _. True) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_ _. True) \\<sigma> a;\n        a \\<noteq> \\<tau>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "thus \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i p R), a, \\<sigma>', \\<zeta>')\n  \\<in> onode_sos\n         (oparp_sos i (automaton.trans (opaodv i)) (automaton.trans qmsg))\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "using \\<open>a \\<noteq> \\<tau>\\<^sub>n\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i p R), a, \\<sigma>', \\<zeta>')\n  \\<in> onode_sos\n         (oparp_sos i (automaton.trans (opaodv i)) (automaton.trans qmsg))\n  a \\<noteq> \\<tau>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by (cases rule: onode_sos.cases)\n         (auto elim: qmsg_no_change_on_send_or_receive)"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lift to partial networks\\<close>"], ["", "lemma arrive_rreq_rrep_nsqn_fresh_inc_sn [simp]:\n  assumes \"oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> P \\<sigma> m) \\<sigma> m\"\n    shows \"oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> m", "using assms"], ["proof (prove)\nusing this:\n  oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> P \\<sigma> m)\n   \\<sigma> m\n\ngoal (1 subgoal):\n 1. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> m", "by (cases m) auto"], ["", "lemma opnet_nhop_quality_increases:\n  shows \"opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) p \\<Turnstile>\n           (otherwith ((=)) (net_tree_ips p)\n              (oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n               other quality_increases (net_tree_ips p) \\<rightarrow>)\n              global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p. \\<forall>dip.\n                          let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     p \\<Turnstile> (otherwith (=) (net_tree_ips p)\n                      (oarrivemsg\n                        (\\<lambda>\\<sigma> m.\n                            msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                     other quality_increases (net_tree_ips p) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips p.\n                             \\<forall>dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "proof (rule pnet_lift [OF node_nhop_quality_increases])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg\n                                     (\\<lambda>m.\n   msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                     a)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 5. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "fix i R"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg\n                                     (\\<lambda>m.\n   msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                     a)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 5. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "have \"\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>,\n                                              other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, \\<sigma>').\n            castmsg (\\<lambda>m. msg_fresh \\<sigma> m \\<and> msg_zhops m) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                   \\<sigma>,\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 castmsg\n                                  (\\<lambda>m.\nmsg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                  a)", "proof (rule ostep_invariantI, simp (no_asm))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "assume or: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                                      (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                                      (other (\\<lambda>_ _. True) {i})\"\n         and tr: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\"\n         and am: \"oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _.\n             oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n  oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "from or tr am"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _.\n             oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n  oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a", "have \"castmsg (msg_fresh \\<sigma>) a\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _.\n             oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n  oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\n\ngoal (1 subgoal):\n 1. castmsg (msg_fresh \\<sigma>) a", "by (auto dest!: ostep_invariantD [OF node_rreq_rrep_nsqn_fresh_any_step])"], ["proof (state)\nthis:\n  castmsg (msg_fresh \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "moreover"], ["proof (state)\nthis:\n  castmsg (msg_fresh \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "from or tr am"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _.\n             oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n  oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a", "have \"castmsg (msg_zhops) a\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _.\n             oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : opaodv\n                        i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n  oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\n\ngoal (1 subgoal):\n 1. castmsg msg_zhops a", "by (auto dest!: ostep_invariantD [OF node_anycast_msg_zhops])"], ["proof (state)\nthis:\n  castmsg msg_zhops a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : opaodv\ni \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _.\n                           oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma>)\n                       (other (\\<lambda>_ _. True) {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : opaodv\n                              i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o);\n        oarrivemsg (\\<lambda>_. rreq_rrep_sn) \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> castmsg\n                          (\\<lambda>m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          a", "ultimately"], ["proof (chain)\npicking this:\n  castmsg (msg_fresh \\<sigma>) a\n  castmsg msg_zhops a", "show \"castmsg (\\<lambda>m. msg_fresh \\<sigma> m \\<and> msg_zhops m) a\""], ["proof (prove)\nusing this:\n  castmsg (msg_fresh \\<sigma>) a\n  castmsg msg_zhops a\n\ngoal (1 subgoal):\n 1. castmsg (\\<lambda>m. msg_fresh \\<sigma> m \\<and> msg_zhops m) a", "by (case_tac a) auto"], ["proof (state)\nthis:\n  castmsg (\\<lambda>m. msg_fresh \\<sigma> m \\<and> msg_zhops m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>i : opaodv\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                 \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               castmsg\n                                (\\<lambda>m.\n                                    msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg\n                                     (\\<lambda>m.\n   msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                     a)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 5. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "thus \"\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n            (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n             other quality_increases {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, _).\n               castmsg (\\<lambda>m. msg_fresh \\<sigma> m \\<and> msg_zhops m) a)\""], ["proof (prove)\nusing this:\n  \\<langle>i : opaodv\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg (\\<lambda>_. rreq_rrep_sn)\n                                 \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               castmsg\n                                (\\<lambda>m.\n                                    msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg\n                                   (\\<lambda>\\<sigma> m.\n msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                   \\<sigma>,\n                            other quality_increases {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, uu_).\n                                 castmsg\n                                  (\\<lambda>m.\nmsg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                  a)", "by rule auto"], ["proof (state)\nthis:\n  \\<langle>i : opaodv\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg\n                                 (\\<lambda>\\<sigma> m.\n                                     msg_fresh \\<sigma> m \\<and>\n                                     msg_zhops m)\n                                 \\<sigma>,\n                          other quality_increases {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, uu_).\n                               castmsg\n                                (\\<lambda>m.\n                                    msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                a)\n\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "fix i R"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    \\<sigma> i = \\<sigma>' i)\n 4. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "show \"\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n            (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n             other quality_increases {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, \\<sigma>').\n               a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> \\<sigma> i = \\<sigma>' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg\n                                   (\\<lambda>\\<sigma> m.\n msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                   \\<sigma>,\n                            other quality_increases {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 a \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>d.\n                                     a \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 \\<sigma> i = \\<sigma>' i)", "by (rule ostep_invariant_weakenE [OF node_silent_change_only]) auto"], ["proof (state)\nthis:\n  \\<langle>i : opaodv\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg\n                                 (\\<lambda>\\<sigma> m.\n                                     msg_fresh \\<sigma> m \\<and>\n                                     msg_zhops m)\n                                 \\<sigma>,\n                          other quality_increases {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               a \\<noteq> \\<tau> \\<and>\n                               (\\<forall>d.\n                                   a \\<noteq>\n                                   i:deliver(d)) \\<longrightarrow>\n                               \\<sigma> i = \\<sigma>' i)\n\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "fix i R"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : opaodv\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg\n(\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n                               other quality_increases {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    quality_increases (\\<sigma> i)\n                                     (\\<sigma>' i))", "show \"\\<langle>i : opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A\n            (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>,\n             other quality_increases {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, \\<sigma>').\n               a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> quality_increases (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : opaodv\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg\n                                   (\\<lambda>\\<sigma> m.\n msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                                   \\<sigma>,\n                            other quality_increases {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 a = \\<tau> \\<or>\n                                 (\\<exists>d.\n                                     a = i:deliver(d)) \\<longrightarrow>\n                                 quality_increases (\\<sigma> i)\n                                  (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF node_quality_increases]) auto"], ["proof (state)\nthis:\n  \\<langle>i : opaodv\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg\n                                 (\\<lambda>\\<sigma> m.\n                                     msg_fresh \\<sigma> m \\<and>\n                                     msg_zhops m)\n                                 \\<sigma>,\n                          other quality_increases {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               a = \\<tau> \\<or>\n                               (\\<exists>d.\n                                   a = i:deliver(d)) \\<longrightarrow>\n                               quality_increases (\\<sigma> i) (\\<sigma>' i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<xi>. \\<xi> = \\<xi>\n 2. \\<And>\\<xi>. quality_increases \\<xi> \\<xi>", "qed simp_all"], ["", "subsection \\<open>Lift to closed networks\\<close>"], ["", "lemma onet_nhop_quality_increases:\n  shows \"oclosed (opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) p)\n           \\<Turnstile> (\\<lambda>_ _ _. True, other quality_increases (net_tree_ips p) \\<rightarrow>)\n              global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p. \\<forall>dip.\n                          let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                          in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                             \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"\n  (is \"_ \\<Turnstile> (_, ?U \\<rightarrow>) ?inv\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. oclosed\n     (opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n       p) \\<Turnstile> (\\<lambda>_ _ _. True,\n                        other quality_increases\n                         (net_tree_ips p) \\<rightarrow>)\n                        global\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i\\<in>net_tree_ips p.\n                                \\<forall>dip.\n                                   let nhip =\n   the (nhop (rt (\\<sigma> i)) dip)\n                                   in dip\n\\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and>\nnhip \\<noteq> dip \\<longrightarrow>\nrt (\\<sigma> i) \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))", "proof (rule inclosed_closed)"], ["proof (state)\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     p \\<Turnstile> (otherwith (=) (net_tree_ips p) inoclosed,\n                     other quality_increases (net_tree_ips p) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips p.\n                             \\<forall>dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "from opnet_nhop_quality_increases"], ["proof (chain)\npicking this:\n  opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n   ?p \\<Turnstile> (otherwith (=) (net_tree_ips ?p)\n                     (oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                    other quality_increases (net_tree_ips ?p) \\<rightarrow>)\n                    global\n                     (\\<lambda>\\<sigma>.\n                         \\<forall>i\\<in>net_tree_ips ?p.\n                            \\<forall>dip.\n                               let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                               in dip\n                                  \\<in> vD (rt (\\<sigma> i)) \\<inter>\n  vD (rt (\\<sigma> nhip)) \\<and>\n                                  nhip \\<noteq> dip \\<longrightarrow>\n                                  rt (\\<sigma> i)\n                                  \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                            (\\<sigma> nhip))", "show \"opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) p\n               \\<Turnstile> (otherwith ((=)) (net_tree_ips p) inoclosed, ?U \\<rightarrow>) ?inv\""], ["proof (prove)\nusing this:\n  opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n   ?p \\<Turnstile> (otherwith (=) (net_tree_ips ?p)\n                     (oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)),\n                    other quality_increases (net_tree_ips ?p) \\<rightarrow>)\n                    global\n                     (\\<lambda>\\<sigma>.\n                         \\<forall>i\\<in>net_tree_ips ?p.\n                            \\<forall>dip.\n                               let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                               in dip\n                                  \\<in> vD (rt (\\<sigma> i)) \\<inter>\n  vD (rt (\\<sigma> nhip)) \\<and>\n                                  nhip \\<noteq> dip \\<longrightarrow>\n                                  rt (\\<sigma> i)\n                                  \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                            (\\<sigma> nhip))\n\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     p \\<Turnstile> (otherwith (=) (net_tree_ips p) inoclosed,\n                     other quality_increases (net_tree_ips p) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips p.\n                             \\<forall>dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "proof (rule oinvariant_weakenE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips p) inoclosed s s' a \\<Longrightarrow>\n       otherwith (=) (net_tree_ips p)\n        (oarrivemsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        s s' a\n 3. \\<And>s s'.\n       other quality_increases (net_tree_ips p) s s' \\<Longrightarrow>\n       other quality_increases (net_tree_ips p) s s'", "fix \\<sigma> \\<sigma>' :: \"ip \\<Rightarrow> state\" and a :: \"msg node_action\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips p) inoclosed s s' a \\<Longrightarrow>\n       otherwith (=) (net_tree_ips p)\n        (oarrivemsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        s s' a\n 3. \\<And>s s'.\n       other quality_increases (net_tree_ips p) s s' \\<Longrightarrow>\n       other quality_increases (net_tree_ips p) s s'", "assume \"otherwith ((=)) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' a\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips p) inoclosed s s' a \\<Longrightarrow>\n       otherwith (=) (net_tree_ips p)\n        (oarrivemsg\n          (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n        s s' a\n 3. \\<And>s s'.\n       other quality_increases (net_tree_ips p) s s' \\<Longrightarrow>\n       other quality_increases (net_tree_ips p) s s'", "thus \"otherwith ((=)) (net_tree_ips p)\n              (oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)) \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith (=) (net_tree_ips p)\n     (oarrivemsg\n       (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n     \\<sigma> \\<sigma>' a", "proof (rule otherwithEI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> a.\n       inoclosed \\<sigma> a \\<Longrightarrow>\n       oarrivemsg\n        (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)\n        \\<sigma> a", "fix \\<sigma> :: \"ip \\<Rightarrow> state\" and a :: \"msg node_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> a.\n       inoclosed \\<sigma> a \\<Longrightarrow>\n       oarrivemsg\n        (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)\n        \\<sigma> a", "assume \"inoclosed \\<sigma> a\""], ["proof (state)\nthis:\n  inoclosed \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> a.\n       inoclosed \\<sigma> a \\<Longrightarrow>\n       oarrivemsg\n        (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)\n        \\<sigma> a", "thus \"oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma> a\""], ["proof (prove)\nusing this:\n  inoclosed \\<sigma> a\n\ngoal (1 subgoal):\n 1. oarrivemsg\n     (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>\n     a", "proof (cases a)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x31\\<not>x32:arrive(x33)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 7. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "fix ii ni ms"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x31\\<not>x32:arrive(x33)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 7. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "assume \"a = ii\\<not>ni:arrive(ms)\""], ["proof (state)\nthis:\n  a = ii\\<not>ni:arrive(ms)\n\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x31\\<not>x32:arrive(x33)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 7. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "moreover"], ["proof (state)\nthis:\n  a = ii\\<not>ni:arrive(ms)\n\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x31\\<not>x32:arrive(x33)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 7. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "with \\<open>inoclosed \\<sigma> a\\<close>"], ["proof (chain)\npicking this:\n  inoclosed \\<sigma> a\n  a = ii\\<not>ni:arrive(ms)", "obtain d di where \"ms = newpkt(d, di)\""], ["proof (prove)\nusing this:\n  inoclosed \\<sigma> a\n  a = ii\\<not>ni:arrive(ms)\n\ngoal (1 subgoal):\n 1. (\\<And>d di.\n        ms = newpkt (d, di) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ms) auto"], ["proof (state)\nthis:\n  ms = newpkt (d, di)\n\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x31\\<not>x32:arrive(x33)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 7. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "ultimately"], ["proof (chain)\npicking this:\n  a = ii\\<not>ni:arrive(ms)\n  ms = newpkt (d, di)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = ii\\<not>ni:arrive(ms)\n  ms = newpkt (d, di)\n\ngoal (1 subgoal):\n 1. oarrivemsg\n     (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m) \\<sigma>\n     a", "by simp"], ["proof (state)\nthis:\n  oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)\n   \\<sigma> a\n\ngoal (6 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x11:*cast(x12)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 2. \\<And>x21 x22.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x21:deliver(x22)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 3. \\<And>x41 x42.\n       \\<lbrakk>inoclosed \\<sigma> a; a = connect(x41, x42)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 4. \\<And>x51 x52.\n       \\<lbrakk>inoclosed \\<sigma> a; a = disconnect(x51, x52)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>inoclosed \\<sigma> a; a = x61:newpkt(x62, x63)\\<rbrakk>\n       \\<Longrightarrow> oarrivemsg\n                          (\\<lambda>\\<sigma> m.\n                              msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                          \\<sigma> a\n 6. \\<lbrakk>inoclosed \\<sigma> a; a = \\<tau>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg\n                       (\\<lambda>\\<sigma> m.\n                           msg_fresh \\<sigma> m \\<and> msg_zhops m)\n                       \\<sigma> a", "qed simp_all"], ["proof (state)\nthis:\n  oarrivemsg (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m)\n   \\<sigma> a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  otherwith (=) (net_tree_ips p)\n   (oarrivemsg\n     (\\<lambda>\\<sigma> m. msg_fresh \\<sigma> m \\<and> msg_zhops m))\n   \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips p.\n               \\<forall>dip.\n                  let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                  in dip\n                     \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                           vD (rt (\\<sigma> nhip)) \\<and>\n                     nhip \\<noteq> dip \\<longrightarrow>\n                     rt (\\<sigma> i)\n                     \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))\n        s\n 2. \\<And>s s'.\n       other quality_increases (net_tree_ips p) s s' \\<Longrightarrow>\n       other quality_increases (net_tree_ips p) s s'", "qed"], ["proof (state)\nthis:\n  opnet (\\<lambda>i. opaodv i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n   p \\<Turnstile> (otherwith (=) (net_tree_ips p) inoclosed,\n                   other quality_increases (net_tree_ips p) \\<rightarrow>)\n                   global\n                    (\\<lambda>\\<sigma>.\n                        \\<forall>i\\<in>net_tree_ips p.\n                           \\<forall>dip.\n                              let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                              in dip\n                                 \\<in> vD (rt (\\<sigma> i)) \\<inter>\n vD (rt (\\<sigma> nhip)) \\<and>\n                                 nhip \\<noteq> dip \\<longrightarrow>\n                                 rt (\\<sigma> i)\n                                 \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                           (\\<sigma> nhip))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Transfer into the standard model\\<close>"], ["", "interpretation aodv_openproc: openproc paodv opaodv id\n  rewrites \"aodv_openproc.initmissing = initmissing\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc paodv opaodv id &&& openproc.initmissing paodv id = initmissing", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. openproc paodv opaodv id\n 2. openproc.initmissing paodv id = initmissing", "show \"openproc paodv opaodv id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc paodv opaodv id", "proof unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (paodv i) \\<and>\n           (\\<sigma> i, \\<zeta>) = id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> id) ` init (paodv j))}\n       \\<subseteq> init (opaodv i)\n 2. \\<forall>j. init (paodv j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "fix i :: ip"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (paodv i) \\<and>\n           (\\<sigma> i, \\<zeta>) = id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> id) ` init (paodv j))}\n       \\<subseteq> init (opaodv i)\n 2. \\<forall>j. init (paodv j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "have \"{(\\<sigma>, \\<zeta>). (\\<sigma> i, \\<zeta>) \\<in> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i \\<and> (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V j)} \\<subseteq> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>)\n     \\<in> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V j)}\n    \\<subseteq> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V'", "unfolding \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V_def \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>)\n     \\<in> {(aodv_init i,\n             \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)} \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j\n         \\<in> fst `\n               {(aodv_init j,\n                 \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)})}\n    \\<subseteq> {(aodv_init,\n                  \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)}", "proof (rule equalityD1)"], ["proof (state)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>)\n     \\<in> {(aodv_init i,\n             \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)} \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j\n         \\<in> fst `\n               {(aodv_init j,\n                 \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)})} =\n    {(aodv_init, \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)}", "show \"\\<And>f p. {(\\<sigma>, \\<zeta>). (\\<sigma> i, \\<zeta>) \\<in> {(f i, p)} \\<and> (\\<forall>j. j \\<noteq> i\n                      \\<longrightarrow> \\<sigma> j \\<in> fst ` {(f j, p)})} = {(f, p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f p.\n       {(\\<sigma>, \\<zeta>).\n        (\\<sigma> i, \\<zeta>) \\<in> {(f i, p)} \\<and>\n        (\\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j \\<in> fst ` {(f j, p)})} =\n       {(f, p)}", "by (rule set_eqI) auto"], ["proof (state)\nthis:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>) \\<in> {(?f1 i, ?p1)} \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` {(?f1 j, ?p1)})} =\n  {(?f1, ?p1)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>)\n   \\<in> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V j)}\n  \\<subseteq> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V'\n\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (paodv i) \\<and>\n           (\\<sigma> i, \\<zeta>) = id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> id) ` init (paodv j))}\n       \\<subseteq> init (opaodv i)\n 2. \\<forall>j. init (paodv j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "thus \"{ (\\<sigma>, \\<zeta>) |\\<sigma> \\<zeta> s. s \\<in> init (paodv i)\n                             \\<and> (\\<sigma> i, \\<zeta>) = id s\n                             \\<and> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma> j \\<in> (fst o id) ` init (paodv j)) } \\<subseteq> init (opaodv i)\""], ["proof (prove)\nusing this:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>)\n   \\<in> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V i \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V j)}\n  \\<subseteq> \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V'\n\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>\\<sigma> \\<zeta> s.\n        uu_ = (\\<sigma>, \\<zeta>) \\<and>\n        s \\<in> init (paodv i) \\<and>\n        (\\<sigma> i, \\<zeta>) = id s \\<and>\n        (\\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j \\<in> (fst \\<circ> id) ` init (paodv j))}\n    \\<subseteq> init (opaodv i)", "by simp"], ["proof (state)\nthis:\n  {uu_.\n   \\<exists>\\<sigma> \\<zeta> s.\n      uu_ = (\\<sigma>, \\<zeta>) \\<and>\n      s \\<in> init (paodv i) \\<and>\n      (\\<sigma> i, \\<zeta>) = id s \\<and>\n      (\\<forall>j.\n          j \\<noteq> i \\<longrightarrow>\n          \\<sigma> j \\<in> (fst \\<circ> id) ` init (paodv j))}\n  \\<subseteq> init (opaodv i)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (paodv j) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j. init (paodv j) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "show \"\\<forall>j. init (paodv j) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j. init (paodv j) \\<noteq> {}", "unfolding \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       init\n        \\<lparr>init =\n                  {(aodv_init j,\n                    \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)},\n           trans =\n             seqp_sos\n              \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\\<rparr> \\<noteq>\n       {}", "by simp"], ["proof (state)\nthis:\n  \\<forall>j. init (paodv j) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "fix i s a s' \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "assume \"\\<sigma> i = fst (id s)\"\n         and \"\\<sigma>' i = fst (id s')\"\n         and \"(s, a, s') \\<in> trans (paodv i)\""], ["proof (state)\nthis:\n  \\<sigma> i = fst (id s)\n  \\<sigma>' i = fst (id s')\n  (s, a, s') \\<in> automaton.trans (paodv i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "then"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (id s)\n  \\<sigma>' i = fst (id s')\n  (s, a, s') \\<in> automaton.trans (paodv i)", "obtain q q' where \"s = (\\<sigma> i, q)\"\n                         and \"s' = (\\<sigma>' i, q')\"\n                         and \"((\\<sigma> i, q), a, (\\<sigma>' i, q')) \\<in> trans (paodv i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (id s)\n  \\<sigma>' i = fst (id s')\n  (s, a, s') \\<in> automaton.trans (paodv i)\n\ngoal (1 subgoal):\n 1. (\\<And>q q'.\n        \\<lbrakk>s = (\\<sigma> i, q); s' = (\\<sigma>' i, q');\n         ((\\<sigma> i, q), a, \\<sigma>' i, q')\n         \\<in> automaton.trans (paodv i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s, cases s') auto"], ["proof (state)\nthis:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (paodv i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "from this(3)"], ["proof (chain)\npicking this:\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (paodv i)", "have \"((\\<sigma>, q), a, (\\<sigma>', q')) \\<in> trans (opaodv i)\""], ["proof (prove)\nusing this:\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (paodv i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (opaodv i)", "by simp (rule open_seqp_action [OF aodv_wf])"], ["proof (state)\nthis:\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (opaodv i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (id s); \\<sigma>' i = fst (id s');\n        (s, a, s') \\<in> automaton.trans (paodv i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n                         \\<in> automaton.trans (opaodv i)", "with \\<open>s = (\\<sigma> i, q)\\<close> and \\<open>s' = (\\<sigma>' i, q')\\<close>"], ["proof (chain)\npicking this:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (opaodv i)", "show \"((\\<sigma>, snd (id s)), a, (\\<sigma>', snd (id s'))) \\<in> trans (opaodv i)\""], ["proof (prove)\nusing this:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (opaodv i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n    \\<in> automaton.trans (opaodv i)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (id s)), a, \\<sigma>', snd (id s'))\n  \\<in> automaton.trans (opaodv i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  openproc paodv opaodv id\n\ngoal (1 subgoal):\n 1. openproc.initmissing paodv id = initmissing", "then"], ["proof (chain)\npicking this:\n  openproc paodv opaodv id", "interpret opn: openproc paodv opaodv id"], ["proof (prove)\nusing this:\n  openproc paodv opaodv id\n\ngoal (1 subgoal):\n 1. openproc paodv opaodv id", "."], ["proof (state)\ngoal (1 subgoal):\n 1. opn.initmissing = initmissing", "have [simp]: \"\\<And>i. (SOME x. x \\<in> (fst o id) ` init (paodv i)) = aodv_init i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME x. x \\<in> (fst \\<circ> id) ` init (paodv i)) = aodv_init i", "unfolding \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME x.\n           x \\<in> (fst \\<circ> id) `\n                   init\n                    \\<lparr>init =\n                              {(aodv_init i,\n                                \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\n                                 PAodv)},\n                       trans =\n                         seqp_sos\n                          \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\\<rparr>) =\n       aodv_init i", "by simp"], ["proof (state)\nthis:\n  (SOME x. x \\<in> (fst \\<circ> id) ` init (paodv ?i1)) = aodv_init ?i1\n\ngoal (1 subgoal):\n 1. opn.initmissing = initmissing", "hence \"\\<And>i. openproc.initmissing paodv id i = initmissing i\""], ["proof (prove)\nusing this:\n  (SOME x. x \\<in> (fst \\<circ> id) ` init (paodv ?i1)) = aodv_init ?i1\n\ngoal (1 subgoal):\n 1. \\<And>i. opn.initmissing i = initmissing i", "unfolding opn.initmissing_def opn.someinit_def initmissing_def"], ["proof (prove)\nusing this:\n  (SOME x. x \\<in> (fst \\<circ> id) ` init (paodv ?i1)) = aodv_init ?i1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<lambda>ia.\n           case fst i ia of\n           None \\<Rightarrow>\n             SOME x. x \\<in> (fst \\<circ> id) ` init (paodv ia)\n           | Some s \\<Rightarrow> s,\n        snd i) =\n       (\\<lambda>ia.\n           case fst i ia of None \\<Rightarrow> aodv_init ia\n           | Some s \\<Rightarrow> s,\n        snd i)", "by (auto split: option.split)"], ["proof (state)\nthis:\n  opn.initmissing ?i1 = initmissing ?i1\n\ngoal (1 subgoal):\n 1. opn.initmissing = initmissing", "thus \"openproc.initmissing paodv id = initmissing\""], ["proof (prove)\nusing this:\n  opn.initmissing ?i1 = initmissing ?i1\n\ngoal (1 subgoal):\n 1. opn.initmissing = initmissing", ".."], ["proof (state)\nthis:\n  opn.initmissing = initmissing\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation aodv_openproc_par_qmsg: openproc_parq paodv opaodv id qmsg\n  rewrites \"aodv_openproc_par_qmsg.netglobal = netglobal\"\n    and \"aodv_openproc_par_qmsg.initmissing = initmissing\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc_parq paodv opaodv id qmsg &&&\n    openproc.netglobal (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    netglobal &&&\n    openproc.initmissing (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    initmissing", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. openproc_parq paodv opaodv id qmsg\n 2. openproc.netglobal (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    netglobal\n 3. openproc.initmissing (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    initmissing", "show \"openproc_parq paodv opaodv id qmsg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc_parq paodv opaodv id qmsg", "by (unfold_locales) simp"], ["proof (state)\nthis:\n  openproc_parq paodv opaodv id qmsg\n\ngoal (2 subgoals):\n 1. openproc.netglobal (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    netglobal\n 2. openproc.initmissing (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (id p), snd (id p), q)) =\n    initmissing", "then"], ["proof (chain)\npicking this:\n  openproc_parq paodv opaodv id qmsg", "interpret opq: openproc_parq paodv opaodv id qmsg"], ["proof (prove)\nusing this:\n  openproc_parq paodv opaodv id qmsg\n\ngoal (1 subgoal):\n 1. openproc_parq paodv opaodv id qmsg", "."], ["proof (state)\ngoal (2 subgoals):\n 1. opq.netglobal = netglobal\n 2. opq.initmissing = initmissing", "have im: \"\\<And>\\<sigma>. openproc.initmissing (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (id p), snd (id p), q)) \\<sigma>\n                                                                                    = initmissing \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. opq.initmissing \\<sigma> = initmissing \\<sigma>", "unfolding opq.initmissing_def opq.someinit_def initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (\\<lambda>i.\n           case fst \\<sigma> i of\n           None \\<Rightarrow>\n             SOME x.\n                x \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q). (fst (id p), snd (id p), q))) `\n                        init (paodv i \\<langle>\\<langle> qmsg)\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>) =\n       (\\<lambda>i.\n           case fst \\<sigma> i of None \\<Rightarrow> aodv_init i\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>)", "unfolding \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V_def \\<sigma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (\\<lambda>i.\n           case fst \\<sigma> i of\n           None \\<Rightarrow>\n             SOME x.\n                x \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q). (fst (id p), snd (id p), q))) `\n                        init\n                         (\\<lparr>init =\n                                    {(aodv_init i,\n\\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)},\n                             trans =\n                               seqp_sos\n                                \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\\<rparr> \\<langle>\\<langle> \\<lparr>init =\n                                  {([],\n                                    \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                                     ())},\n                           trans =\n                             seqp_sos\n                              \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rparr>)\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>) =\n       (\\<lambda>i.\n           case fst \\<sigma> i of None \\<Rightarrow> aodv_init i\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>)", "by (clarsimp cong: option.case_cong)"], ["proof (state)\nthis:\n  opq.initmissing ?\\<sigma>1 = initmissing ?\\<sigma>1\n\ngoal (2 subgoals):\n 1. opq.netglobal = netglobal\n 2. opq.initmissing = initmissing", "thus \"openproc.initmissing (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (id p), snd (id p), q)) = initmissing\""], ["proof (prove)\nusing this:\n  opq.initmissing ?\\<sigma>1 = initmissing ?\\<sigma>1\n\ngoal (1 subgoal):\n 1. opq.initmissing = initmissing", "by (rule ext)"], ["proof (state)\nthis:\n  opq.initmissing = initmissing\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "have \"\\<And>P \\<sigma>. openproc.netglobal (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (id p), snd (id p), q)) P \\<sigma>\n                                                                                = netglobal P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>. opq.netglobal P \\<sigma> = netglobal P \\<sigma>", "unfolding opq.netglobal_def netglobal_def opq.initmissing_def initmissing_def opq.someinit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>.\n       P (fst (\\<lambda>i.\n                  case fst (netgmap\n                             (\\<lambda>(p, q). (fst (id p), snd (id p), q))\n                             \\<sigma>)\n                        i of\n                  None \\<Rightarrow>\n                    SOME x.\n                       x \\<in> (fst \\<circ>\n                                (\\<lambda>(p, q).\n                                    (fst (id p), snd (id p), q))) `\n                               init (paodv i \\<langle>\\<langle> qmsg)\n                  | Some s \\<Rightarrow> s,\n               snd (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q))\n                     \\<sigma>))) =\n       P (Lib.default aodv_init (netlift fst \\<sigma>))", "unfolding \\<sigma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V_def \\<sigma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>.\n       P (fst (\\<lambda>i.\n                  case fst (netgmap\n                             (\\<lambda>(p, q). (fst (id p), snd (id p), q))\n                             \\<sigma>)\n                        i of\n                  None \\<Rightarrow>\n                    SOME x.\n                       x \\<in> (fst \\<circ>\n                                (\\<lambda>(p, q).\n                                    (fst (id p), snd (id p), q))) `\n                               init\n                                (\\<lparr>init =\n     {(aodv_init i, \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V PAodv)},\n                                    trans =\nseqp_sos\n \\<Gamma>\\<^sub>A\\<^sub>O\\<^sub>D\\<^sub>V\\<rparr> \\<langle>\\<langle> \\<lparr>init =\n   {([], \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G ())},\n                                  trans =\n                                    seqp_sos\n                                     \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rparr>)\n                  | Some s \\<Rightarrow> s,\n               snd (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q))\n                     \\<sigma>))) =\n       P (Lib.default aodv_init (netlift fst \\<sigma>))", "by (clarsimp cong: option.case_cong\n                   simp del: One_nat_def\n                   simp add: fst_initmissing_netgmap_default_aodv_init_netlift\n                                                  [symmetric, unfolded initmissing_def])"], ["proof (state)\nthis:\n  opq.netglobal ?P3 ?\\<sigma>3 = netglobal ?P3 ?\\<sigma>3\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "thus \"openproc.netglobal (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (id p), snd (id p), q)) = netglobal\""], ["proof (prove)\nusing this:\n  opq.netglobal ?P3 ?\\<sigma>3 = netglobal ?P3 ?\\<sigma>3\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "by auto"], ["proof (state)\nthis:\n  opq.netglobal = netglobal\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma net_nhop_quality_increases:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal\n                           (\\<lambda>\\<sigma>. \\<forall>i dip. let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                        in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                            \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\"\n        (is \"_ \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. ?inv \\<sigma> i)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "from \\<open>wf_net_tree n\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree n", "have proto: \"closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. \\<forall>dip.\n                                            let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                            in dip \\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and> nhip \\<noteq> dip\n                                                \\<longrightarrow> (rt (\\<sigma> i)) \\<sqsubset>\\<^bsub>dip\\<^esub> (rt (\\<sigma> nhip)))\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i\\<in>net_tree_ips n.\n                                \\<forall>dip.\n                                   let nhip =\n   the (nhop (rt (\\<sigma> i)) dip)\n                                   in dip\n\\<in> vD (rt (\\<sigma> i)) \\<inter> vD (rt (\\<sigma> nhip)) \\<and>\nnhip \\<noteq> dip \\<longrightarrow>\nrt (\\<sigma> i) \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip))", "by (rule aodv_openproc_par_qmsg.close_opnet [OF _ onet_nhop_quality_increases])"], ["proof (state)\nthis:\n  closed\n   (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     n) \\<TTurnstile> netglobal\n                       (\\<lambda>\\<sigma>.\n                           \\<forall>i\\<in>net_tree_ips n.\n                              \\<forall>dip.\n                                 let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                 in dip\n                                    \\<in> vD (rt (\\<sigma> i)) \\<inter>\n    vD (rt (\\<sigma> nhip)) \\<and>\n                                    nhip \\<noteq> dip \\<longrightarrow>\n                                    rt (\\<sigma> i)\n                                    \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                              (\\<sigma> nhip))\n\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i dip.\n                                let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                                in dip\n                                   \\<in> vD (rt (\\<sigma> i)) \\<inter>\n   vD (rt (\\<sigma> nhip)) \\<and>\n                                   nhip \\<noteq> dip \\<longrightarrow>\n                                   rt (\\<sigma> i)\n                                   \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                             (\\<sigma> nhip))", "unfolding invariant_def opnet_sos.opnet_tau1"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball\n     (reachable\n       (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT)\n     (netglobal\n       (\\<lambda>\\<sigma>.\n           \\<forall>i dip.\n              let nhip = the (nhop (rt (\\<sigma> i)) dip)\n              in dip\n                 \\<in> vD (rt (\\<sigma> i)) \\<inter>\n                       vD (rt (\\<sigma> nhip)) \\<and>\n                 nhip \\<noteq> dip \\<longrightarrow>\n                 rt (\\<sigma> i)\n                 \\<sqsubset>\\<^bsub>dip\\<^esub> rt (\\<sigma> nhip)))", "proof (rule, simp only: aodv_openproc_par_qmsg.netglobalsimp\n                            fst_initmissing_netgmap_pair_fst, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       \\<forall>dip.\n          let nhip =\n                the (nhop (rt (fst (initmissing (netgmap fst x)) i)) dip)\n          in dip\n             \\<in> vD (rt (fst (initmissing (netgmap fst x)) i)) \\<inter>\n                   vD (rt (fst (initmissing (netgmap fst x)) nhip)) \\<and>\n             nhip \\<noteq> dip \\<longrightarrow>\n             rt (fst (initmissing (netgmap fst x)) i)\n             \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n       (fst (initmissing (netgmap fst x)) nhip)", "fix \\<sigma> i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       \\<forall>dip.\n          let nhip =\n                the (nhop (rt (fst (initmissing (netgmap fst x)) i)) dip)\n          in dip\n             \\<in> vD (rt (fst (initmissing (netgmap fst x)) i)) \\<inter>\n                   vD (rt (fst (initmissing (netgmap fst x)) nhip)) \\<and>\n             nhip \\<noteq> dip \\<longrightarrow>\n             rt (fst (initmissing (netgmap fst x)) i)\n             \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n       (fst (initmissing (netgmap fst x)) nhip)", "assume sr: \"\\<sigma> \\<in> reachable (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT\""], ["proof (state)\nthis:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       \\<forall>dip.\n          let nhip =\n                the (nhop (rt (fst (initmissing (netgmap fst x)) i)) dip)\n          in dip\n             \\<in> vD (rt (fst (initmissing (netgmap fst x)) i)) \\<inter>\n                   vD (rt (fst (initmissing (netgmap fst x)) nhip)) \\<and>\n             nhip \\<noteq> dip \\<longrightarrow>\n             rt (fst (initmissing (netgmap fst x)) i)\n             \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n       (fst (initmissing (netgmap fst x)) nhip)", "hence \"\\<forall>i\\<in>net_tree_ips n. ?inv (fst (initmissing (netgmap fst \\<sigma>))) i\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips n.\n       \\<forall>dip.\n          let nhip =\n                the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i))\n                      dip)\n          in dip\n             \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                            i)) \\<inter>\n                   vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                            nhip)) \\<and>\n             nhip \\<noteq> dip \\<longrightarrow>\n             rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n             \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n       (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "by - (drule invariantD [OF proto],\n              simp only: aodv_openproc_par_qmsg.netglobalsimp\n                         fst_initmissing_netgmap_pair_fst)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips n.\n     \\<forall>dip.\n        let nhip =\n              the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i))\n                    dip)\n        in dip\n           \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                          i)) \\<inter>\n                 vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                          nhip)) \\<and>\n           nhip \\<noteq> dip \\<longrightarrow>\n           rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n           \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n     (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       \\<forall>dip.\n          let nhip =\n                the (nhop (rt (fst (initmissing (netgmap fst x)) i)) dip)\n          in dip\n             \\<in> vD (rt (fst (initmissing (netgmap fst x)) i)) \\<inter>\n                   vD (rt (fst (initmissing (netgmap fst x)) nhip)) \\<and>\n             nhip \\<noteq> dip \\<longrightarrow>\n             rt (fst (initmissing (netgmap fst x)) i)\n             \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n       (fst (initmissing (netgmap fst x)) nhip)", "thus \"?inv (fst (initmissing (netgmap fst \\<sigma>))) i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips n.\n     \\<forall>dip.\n        let nhip =\n              the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i))\n                    dip)\n        in dip\n           \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                          i)) \\<inter>\n                 vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                          nhip)) \\<and>\n           nhip \\<noteq> dip \\<longrightarrow>\n           rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n           \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n     (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n\ngoal (1 subgoal):\n 1. \\<forall>dip.\n       let nhip =\n             the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i))\n                   dip)\n       in dip\n          \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                         i)) \\<inter>\n                vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                         nhip)) \\<and>\n          nhip \\<noteq> dip \\<longrightarrow>\n          rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n          \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n    (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "proof (cases \"i\\<in>net_tree_ips n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "assume \"i\\<notin>net_tree_ips n\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "from sr"], ["proof (chain)\npicking this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT", "have \"\\<sigma> \\<in> reachable (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) TT\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> reachable (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n)\n           TT", ".."], ["proof (state)\nthis:\n  \\<sigma>\n  \\<in> reachable (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) TT\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "hence \"net_ips \\<sigma> = net_tree_ips n\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) TT\n\ngoal (1 subgoal):\n 1. net_ips \\<sigma> = net_tree_ips n", ".."], ["proof (state)\nthis:\n  net_ips \\<sigma> = net_tree_ips n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "with \\<open>i\\<notin>net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips n\n  net_ips \\<sigma> = net_tree_ips n", "have \"i\\<notin>net_ips \\<sigma>\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips n\n  net_ips \\<sigma> = net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips \\<sigma>", "by simp"], ["proof (state)\nthis:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "hence \"(fst (initmissing (netgmap fst \\<sigma>))) i = aodv_init i\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i\n\ngoal (1 subgoal):\n 1. \\<forall>dip.\n       let nhip =\n             the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i))\n                   dip)\n       in dip\n          \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                         i)) \\<inter>\n                vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                         nhip)) \\<and>\n          nhip \\<noteq> dip \\<longrightarrow>\n          rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n          \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n    (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "by simp"], ["proof (state)\nthis:\n  \\<forall>dip.\n     let nhip =\n           the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i)) dip)\n     in dip\n        \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n              vD (rt (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n        nhip \\<noteq> dip \\<longrightarrow>\n        rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n        \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n  (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                \\<forall>dip.\n                   let nhip =\n                         the (nhop\n                               (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i))\n                               dip)\n                   in dip\n                      \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)) \\<inter>\n                            vD (rt (fst (initmissing (netgmap fst \\<sigma>))\n                                     nhip)) \\<and>\n                      nhip \\<noteq> dip \\<longrightarrow>\n                      rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                (fst (initmissing (netgmap fst \\<sigma>)) nhip);\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>dip.\n                         let nhip =\n                               the (nhop\n                                     (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i))\n                                     dip)\n                         in dip\n                            \\<in> vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n                                  vD (rt\n (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n                            nhip \\<noteq> dip \\<longrightarrow>\n                            rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n                            \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                      (fst (initmissing (netgmap fst \\<sigma>)) nhip)", "qed metis"], ["proof (state)\nthis:\n  \\<forall>dip.\n     let nhip =\n           the (nhop (rt (fst (initmissing (netgmap fst \\<sigma>)) i)) dip)\n     in dip\n        \\<in> vD (rt (fst (initmissing (netgmap fst \\<sigma>)) i)) \\<inter>\n              vD (rt (fst (initmissing (netgmap fst \\<sigma>)) nhip)) \\<and>\n        nhip \\<noteq> dip \\<longrightarrow>\n        rt (fst (initmissing (netgmap fst \\<sigma>)) i)\n        \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n  (fst (initmissing (netgmap fst \\<sigma>)) nhip)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  closed\n   (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n     n) \\<TTurnstile> netglobal\n                       (\\<lambda>\\<sigma>.\n                           \\<forall>i dip.\n                              let nhip = the (nhop (rt (\\<sigma> i)) dip)\n                              in dip\n                                 \\<in> vD (rt (\\<sigma> i)) \\<inter>\n vD (rt (\\<sigma> nhip)) \\<and>\n                                 nhip \\<noteq> dip \\<longrightarrow>\n                                 rt (\\<sigma> i)\n                                 \\<sqsubset>\\<^bsub>dip\\<^esub> rt\n                           (\\<sigma> nhip))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Loop freedom of AODV\\<close>"], ["", "theorem aodv_loop_freedom:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>dip. irrefl ((rt_graph \\<sigma> dip)\\<^sup>+))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>dip.\n                                irrefl ((rt_graph \\<sigma> dip)\\<^sup>+))", "using assms"], ["proof (prove)\nusing this:\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. paodv i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>dip.\n                                irrefl ((rt_graph \\<sigma> dip)\\<^sup>+))", "by (rule aodv_openproc_par_qmsg.netglobal_weakenE\n                          [OF net_nhop_quality_increases inv_to_loop_freedom])"], ["", "end"]]}