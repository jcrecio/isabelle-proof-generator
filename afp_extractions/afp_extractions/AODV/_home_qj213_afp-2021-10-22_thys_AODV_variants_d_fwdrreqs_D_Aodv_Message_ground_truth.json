{"file_name": "/home/qj213/afp-2021-10-22/thys/AODV/variants/d_fwdrreqs/D_Aodv_Message.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AODV", "problem_names": ["lemma rreq_simp [simp]:\n  \"rreq(hops, rreqid, dip, dsn, dsk, oip, osn, sip, handled) =  Rreq hops rreqid dip dsn dsk oip osn sip handled\"", "lemma rrep_simp [simp]:\n  \"rrep(hops, dip, dsn, oip, sip) = Rrep hops dip dsn oip sip\"", "lemma rerr_simp [simp]:\n  \"rerr(dests, sip) = Rerr dests sip\"", "lemma not_eq_newpkt_rreq [simp]: \"\\<not>eq_newpkt (Rreq hops rreqid dip dsn dsk oip osn sip handled)\"", "lemma not_eq_newpkt_rrep [simp]: \"\\<not>eq_newpkt (Rrep hops dip dsn oip sip)\"", "lemma not_eq_newpkt_rerr [simp]: \"\\<not>eq_newpkt (Rerr dests sip)\"", "lemma not_eq_newpkt_pkt [simp]: \"\\<not>eq_newpkt (Pkt d dip sip)\"", "lemma pkt_simp [simp]:\n  \"pkt(d, dip, sip) = Pkt d dip sip\""], "translations": [["", "lemma rreq_simp [simp]:\n  \"rreq(hops, rreqid, dip, dsn, dsk, oip, osn, sip, handled) =  Rreq hops rreqid dip dsn dsk oip osn sip handled\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rreq (hops, rreqid, dip, dsn, dsk, oip, osn, sip, handled) =\n    Rreq hops rreqid dip dsn dsk oip osn sip handled", "unfolding rreq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (hops, rreqid, dip, dsn, dsk, oip, osn, sip, handled) of\n     (hops, rreqid, dip, dsn, dsk, oip, osn, sip, handled) \\<Rightarrow>\n       Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n    Rreq hops rreqid dip dsn dsk oip osn sip handled", "by simp"], ["", "definition rrep :: \"nat \\<times> ip \\<times> sqn \\<times> ip \\<times> ip \\<Rightarrow> msg\"\n  where \"rrep \\<equiv> \\<lambda>(hops, dip, dsn, oip, sip). Rrep hops dip dsn oip sip\""], ["", "lemma rrep_simp [simp]:\n  \"rrep(hops, dip, dsn, oip, sip) = Rrep hops dip dsn oip sip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rrep (hops, dip, dsn, oip, sip) = Rrep hops dip dsn oip sip", "unfolding rrep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (hops, dip, dsn, oip, sip) of\n     (hops, dip, dsn, oip, sip) \\<Rightarrow> Rrep hops dip dsn oip sip) =\n    Rrep hops dip dsn oip sip", "by simp"], ["", "definition rerr :: \"(ip \\<rightharpoonup> sqn) \\<times> ip \\<Rightarrow> msg\"\n  where \"rerr \\<equiv> \\<lambda>(dests, sip). Rerr dests sip\""], ["", "lemma rerr_simp [simp]:\n  \"rerr(dests, sip) = Rerr dests sip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rerr (dests, sip) = Rerr dests sip", "unfolding rerr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (dests, sip) of (dests, sip) \\<Rightarrow> Rerr dests sip) =\n    Rerr dests sip", "by simp"], ["", "lemma not_eq_newpkt_rreq [simp]: \"\\<not>eq_newpkt (Rreq hops rreqid dip dsn dsk oip osn sip handled)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eq_newpkt (Rreq hops rreqid dip dsn dsk oip osn sip handled)", "unfolding eq_newpkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n            Newpkt d dip \\<Rightarrow> True | _ \\<Rightarrow> False)", "by simp"], ["", "lemma not_eq_newpkt_rrep [simp]: \"\\<not>eq_newpkt (Rrep hops dip dsn oip sip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eq_newpkt (Rrep hops dip dsn oip sip)", "unfolding eq_newpkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Rrep hops dip dsn oip sip of\n            Newpkt d dip \\<Rightarrow> True | _ \\<Rightarrow> False)", "by simp"], ["", "lemma not_eq_newpkt_rerr [simp]: \"\\<not>eq_newpkt (Rerr dests sip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eq_newpkt (Rerr dests sip)", "unfolding eq_newpkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Rerr dests sip of Newpkt d dip \\<Rightarrow> True\n            | _ \\<Rightarrow> False)", "by simp"], ["", "lemma not_eq_newpkt_pkt [simp]: \"\\<not>eq_newpkt (Pkt d dip sip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eq_newpkt (Pkt d dip sip)", "unfolding eq_newpkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Pkt d dip sip of Newpkt d dip \\<Rightarrow> True\n            | _ \\<Rightarrow> False)", "by simp"], ["", "definition pkt :: \"data \\<times> ip \\<times> ip \\<Rightarrow> msg\"\n  where \"pkt \\<equiv> \\<lambda>(d, dip, sip). Pkt d dip sip\""], ["", "lemma pkt_simp [simp]:\n  \"pkt(d, dip, sip) = Pkt d dip sip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pkt (d, dip, sip) = Pkt d dip sip", "unfolding pkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (d, dip, sip) of (d, dip, sip) \\<Rightarrow> Pkt d dip sip) =\n    Pkt d dip sip", "by simp"], ["", "end"]]}