{"file_name": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP/CIMP_vcg_rules.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP", "problem_names": ["lemma vcg_True:\n  \"\\<lbrace>P\\<rbrace> c \\<lbrace>\\<langle>True\\<rangle>\\<rbrace>\"", "lemma vcg_conj:\n  \"\\<lbrakk> \\<lbrace>I\\<rbrace> c \\<lbrace>Q\\<rbrace>; \\<lbrace>I\\<rbrace> c \\<lbrace>R\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>I\\<rbrace> c \\<lbrace>Q \\<^bold>\\<and> R\\<rbrace>\"", "lemma vcg_pre_imp:\n  \"\\<lbrakk> \\<And>s. P s \\<Longrightarrow> Q s; \\<lbrace>Q\\<rbrace> c \\<lbrace>R\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>\"", "lemmas vcg_pre = vcg_pre_imp[rotated]", "lemma vcg_post_imp:\n  \"\\<lbrakk> \\<And>s. Q s \\<Longrightarrow> R s; \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>\"", "lemma vcg_prop[intro]:\n  \"\\<lbrace>\\<langle>P\\<rangle>\\<rbrace> c\"", "lemma vcg_drop_imp:\n  assumes \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P\\<rbrace> c \\<lbrace>R \\<^bold>\\<longrightarrow> Q\\<rbrace>\"", "lemma vcg_conj_lift:\n  assumes x: \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  assumes y: \"\\<lbrace>P'\\<rbrace> c \\<lbrace>Q'\\<rbrace>\"\n  shows      \"\\<lbrace>P \\<^bold>\\<and> P'\\<rbrace> c \\<lbrace>Q \\<^bold>\\<and> Q'\\<rbrace>\"", "lemma vcg_disj_lift:\n  assumes x: \"\\<lbrace>P\\<rbrace>  c \\<lbrace>Q\\<rbrace>\"\n  assumes y: \"\\<lbrace>P'\\<rbrace> c \\<lbrace>Q'\\<rbrace>\"\n  shows      \"\\<lbrace>P \\<^bold>\\<or> P'\\<rbrace> c \\<lbrace>Q \\<^bold>\\<or> Q'\\<rbrace>\"", "lemma vcg_imp_lift:\n  assumes \"\\<lbrace>P'\\<rbrace> c \\<lbrace>\\<^bold>\\<not> P\\<rbrace>\"\n  assumes \"\\<lbrace>Q'\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P' \\<^bold>\\<or> Q'\\<rbrace> c \\<lbrace>P \\<^bold>\\<longrightarrow> Q\\<rbrace>\"", "lemma vcg_ex_lift:\n  assumes \"\\<And>x. \\<lbrace>P x\\<rbrace> c \\<lbrace>Q x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. \\<exists>x. P x s\\<rbrace> c \\<lbrace>\\<lambda>s. \\<exists>x. Q x s\\<rbrace>\"", "lemma vcg_all_lift:\n  assumes \"\\<And>x. \\<lbrace>P x\\<rbrace> c \\<lbrace>Q x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. \\<forall>x. P x s\\<rbrace> c \\<lbrace>\\<lambda>s. \\<forall>x. Q x s\\<rbrace>\"", "lemma vcg_name_pre_state:\n  assumes \"\\<And>s. P s \\<Longrightarrow> \\<lbrace>(=) s\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\"", "lemma vcg_lift_comp:\n  assumes f: \"\\<And>P. \\<lbrace>\\<lambda>s. P (f s :: 'a :: type)\\<rbrace> c\"\n  assumes P: \"\\<And>x. \\<lbrace>Q x\\<rbrace> c \\<lbrace>P x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. Q (f s) s\\<rbrace> c \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>\"", "lemma eq_impD:\n  \"\\<lbrakk> eq_imp f g; \\<forall>x. f x s = f x s' \\<rbrakk> \\<Longrightarrow> g s = g s'\"", "lemma eq_imp_vcg:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x P. \\<lbrace>P \\<circ> (f x)\\<rbrace> c\"\n  shows \"\\<lbrace>P \\<circ> g\\<rbrace> c\"", "lemma eq_imp_vcg_LST:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x P. \\<lbrace>P \\<circ> (f x) \\<circ> LST\\<rbrace> c\"\n  shows \"\\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c\"", "lemma eq_imp_fun_upd:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x. f x (s(fld := val)) = f x s\"\n  shows \"g (s(fld := val)) = g s\"", "lemma curry_forall_eq:\n  \"(\\<forall>f. P f) = (\\<forall>f. P (case_prod f))\"", "lemma pres_tuple_vcg:\n  \"(\\<forall>P. \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s))\\<rbrace> c)\n    \\<longleftrightarrow> ((\\<forall>P. \\<lbrace>P \\<circ> f\\<rbrace> c) \\<and> (\\<forall>P. \\<lbrace>P \\<circ> g\\<rbrace> c))\"", "lemma pres_tuple_vcg_LST:\n  \"(\\<forall>P. \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s)) \\<circ> LST\\<rbrace> c)\n    \\<longleftrightarrow> ((\\<forall>P. \\<lbrace>P \\<circ> f \\<circ> LST\\<rbrace> c) \\<and> (\\<forall>P. \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c))\""], "translations": [["", "lemma vcg_True:\n  \"\\<lbrace>P\\<rbrace> c \\<lbrace>\\<langle>True\\<rangle>\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> c \\<lbrace>\\<lambda>s. True\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_conj:\n  \"\\<lbrakk> \\<lbrace>I\\<rbrace> c \\<lbrace>Q\\<rbrace>; \\<lbrace>I\\<rbrace> c \\<lbrace>R\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>I\\<rbrace> c \\<lbrace>Q \\<^bold>\\<and> R\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>I\\<rbrace> c \\<lbrace>Q\\<rbrace>;\n     \\<lbrace>I\\<rbrace> c \\<lbrace>R\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>I\\<rbrace> c\n                      \\<lbrace>\\<lambda>s. Q s \\<and> R s\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_pre_imp:\n  \"\\<lbrakk> \\<And>s. P s \\<Longrightarrow> Q s; \\<lbrace>Q\\<rbrace> c \\<lbrace>R\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. P s \\<Longrightarrow> Q s;\n     \\<lbrace>Q\\<rbrace> c \\<lbrace>R\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemmas vcg_pre = vcg_pre_imp[rotated]"], ["", "lemma vcg_post_imp:\n  \"\\<lbrakk> \\<And>s. Q s \\<Longrightarrow> R s; \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace> \\<rbrakk> \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. Q s \\<Longrightarrow> R s;\n     \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> c \\<lbrace>R\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_prop[intro]:\n  \"\\<lbrace>\\<langle>P\\<rangle>\\<rbrace> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coms, p, aft \\<turnstile> \\<lbrace>\\<lambda>s. P\\<rbrace> c", "by (cases c) (fastforce intro: vcg.intros)+"], ["", "lemma vcg_drop_imp:\n  assumes \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P\\<rbrace> c \\<lbrace>R \\<^bold>\\<longrightarrow> Q\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> c\n    \\<lbrace>\\<lambda>s. R s \\<longrightarrow> Q s\\<rbrace>", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> c\n    \\<lbrace>\\<lambda>s. R s \\<longrightarrow> Q s\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_conj_lift:\n  assumes x: \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  assumes y: \"\\<lbrace>P'\\<rbrace> c \\<lbrace>Q'\\<rbrace>\"\n  shows      \"\\<lbrace>P \\<^bold>\\<and> P'\\<rbrace> c \\<lbrace>Q \\<^bold>\\<and> Q'\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. P s \\<and> P' s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. Q s \\<and> Q' s\\<rbrace>", "apply (rule vcg_conj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrace>\\<lambda>s. P s \\<and> P' s\\<rbrace> c \\<lbrace>Q\\<rbrace>\n 2. \\<lbrace>\\<lambda>s. P s \\<and> P' s\\<rbrace> c \\<lbrace>Q'\\<rbrace>", "apply (rule vcg_pre[OF x], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. P s \\<and> P' s\\<rbrace> c \\<lbrace>Q'\\<rbrace>", "apply (rule vcg_pre[OF y], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma vcg_disj_lift:\n  assumes x: \"\\<lbrace>P\\<rbrace>  c \\<lbrace>Q\\<rbrace>\"\n  assumes y: \"\\<lbrace>P'\\<rbrace> c \\<lbrace>Q'\\<rbrace>\"\n  shows      \"\\<lbrace>P \\<^bold>\\<or> P'\\<rbrace> c \\<lbrace>Q \\<^bold>\\<or> Q'\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. P s \\<or> P' s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. Q s \\<or> Q' s\\<rbrace>", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\n  \\<lbrace>P'\\<rbrace> c \\<lbrace>Q'\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. P s \\<or> P' s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. Q s \\<or> Q' s\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_imp_lift:\n  assumes \"\\<lbrace>P'\\<rbrace> c \\<lbrace>\\<^bold>\\<not> P\\<rbrace>\"\n  assumes \"\\<lbrace>Q'\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P' \\<^bold>\\<or> Q'\\<rbrace> c \\<lbrace>P \\<^bold>\\<longrightarrow> Q\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. P' s \\<or> Q' s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. P s \\<longrightarrow> Q s\\<rbrace>", "by (simp only: imp_conv_disj vcg_disj_lift[OF assms])"], ["", "lemma vcg_ex_lift:\n  assumes \"\\<And>x. \\<lbrace>P x\\<rbrace> c \\<lbrace>Q x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. \\<exists>x. P x s\\<rbrace> c \\<lbrace>\\<lambda>s. \\<exists>x. Q x s\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. \\<exists>x. P x s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. \\<exists>x. Q x s\\<rbrace>", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrace>P ?x\\<rbrace> c \\<lbrace>Q ?x\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. \\<exists>x. P x s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. \\<exists>x. Q x s\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_all_lift:\n  assumes \"\\<And>x. \\<lbrace>P x\\<rbrace> c \\<lbrace>Q x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. \\<forall>x. P x s\\<rbrace> c \\<lbrace>\\<lambda>s. \\<forall>x. Q x s\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. \\<forall>x. P x s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. \\<forall>x. Q x s\\<rbrace>", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrace>P ?x\\<rbrace> c \\<lbrace>Q ?x\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. \\<forall>x. P x s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. \\<forall>x. Q x s\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_name_pre_state:\n  assumes \"\\<And>s. P s \\<Longrightarrow> \\<lbrace>(=) s\\<rbrace> c \\<lbrace>Q\\<rbrace>\"\n  shows \"\\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>", "using assms"], ["proof (prove)\nusing this:\n  P ?s \\<Longrightarrow> \\<lbrace>(=) ?s\\<rbrace> c \\<lbrace>Q\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> c \\<lbrace>Q\\<rbrace>", "by (cases c) (fastforce elim!: vcg_inv intro: vcg.intros)+"], ["", "lemma vcg_lift_comp:\n  assumes f: \"\\<And>P. \\<lbrace>\\<lambda>s. P (f s :: 'a :: type)\\<rbrace> c\"\n  assumes P: \"\\<And>x. \\<lbrace>Q x\\<rbrace> c \\<lbrace>P x\\<rbrace>\"\n  shows \"\\<lbrace>\\<lambda>s. Q (f s) s\\<rbrace> c \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>\\<lambda>s. Q (f s) s\\<rbrace> c\n    \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>", "apply (rule vcg_name_pre_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>", "apply (rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>", "apply (rule vcg_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>\\<lambda>s. P (f s) s\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk> \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_post_imp[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>?Q5 s\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; ?Q5 s sa\\<rbrakk> \\<Longrightarrow> P (f sa) sa\n 3. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk> \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_conj_lift)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>?P8 s\\<rbrace> c \\<lbrace>?Q8 s\\<rbrace>\n 2. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>?P'8 s\\<rbrace> c \\<lbrace>?Q'8 s\\<rbrace>\n 3. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; ?Q8 s sa \\<and> ?Q'8 s sa\\<rbrakk>\n       \\<Longrightarrow> P (f sa) sa\n 4. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> ?P8 s sa \\<and> ?P'8 s sa", "apply (rule_tac x=\"f s\" in P)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       Q (f s) s \\<Longrightarrow>\n       \\<lbrace>?P'8 s\\<rbrace> c \\<lbrace>?Q'8 s\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; P (f s) sa \\<and> ?Q'8 s sa\\<rbrakk>\n       \\<Longrightarrow> P (f sa) sa\n 3. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> Q (f s) sa \\<and> ?P'8 s sa", "apply (rule_tac P=\"\\<lambda>fs. fs = f s\" in f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; P (f s) sa \\<and> f sa = f s\\<rbrakk>\n       \\<Longrightarrow> P (f sa) sa\n 2. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> Q (f s) sa \\<and> f sa = f s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s sa.\n       \\<lbrakk>Q (f s) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> Q (f s) sa \\<and> f sa = f s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>Cheap non-interference rules\\<close>"], ["", "text\\<open>\n\nThese rules magically construct VCG lifting rules from the easier to\nprove \\<open>eq_imp\\<close> facts. We don't actually use these in the GC,\nbut we do derive @{const \"fun_upd\"} equations using the same\nmechanism. Thanks to Thomas Sewell for the requisite syntax magic.\n\nAs these \\<open>eq_imp\\<close> facts do not usefully compose, we make the\ndefinition asymmetric (i.e., \\<open>g\\<close> does not get a bundle of\nparameters).\n\nNote that these are effectively parametricity rules.\n\n\\<close>"], ["", "definition eq_imp :: \"('a \\<Rightarrow> 'b \\<Rightarrow> 'c) \\<Rightarrow> ('b \\<Rightarrow> 'e) \\<Rightarrow> bool\" where\n  \"eq_imp f g \\<equiv> (\\<forall>s s'. (\\<forall>x. f x s = f x s') \\<longrightarrow> (g s = g s'))\""], ["", "lemma eq_impD:\n  \"\\<lbrakk> eq_imp f g; \\<forall>x. f x s = f x s' \\<rbrakk> \\<Longrightarrow> g s = g s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_imp f g; \\<forall>x. f x s = f x s'\\<rbrakk>\n    \\<Longrightarrow> g s = g s'", "by (simp add: eq_imp_def)"], ["", "lemma eq_imp_vcg:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x P. \\<lbrace>P \\<circ> (f x)\\<rbrace> c\"\n  shows \"\\<lbrace>P \\<circ> g\\<rbrace> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coms, p, aft \\<turnstile> \\<lbrace>P \\<circ> g\\<rbrace> c", "apply (rule vcg_name_pre_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (P \\<circ> g) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>P \\<circ> g\\<rbrace>", "apply (rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (P \\<circ> g) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>P \\<circ> g\\<rbrace>", "apply (rule vcg_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (P \\<circ> g) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>P \\<circ> g\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk> \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_post_imp[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       (P \\<circ> g) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>?Q5 s\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; ?Q5 s sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g) sa\n 3. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk> \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_all_lift[where 'a='a])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s x.\n       (P \\<circ> g) s \\<Longrightarrow>\n       \\<lbrace>?P8 s x\\<rbrace> c \\<lbrace>?Q8 s x\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; \\<forall>x. ?Q8 s x sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g) sa\n 3. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x. ?P8 s x sa", "apply (rule_tac x=x and P=\"\\<lambda>fs. fs = f x s\" in f[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s;\n        \\<forall>x. ((\\<lambda>fs. fs = f x s) \\<circ> f x) sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g) sa\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s) \\<circ> f x) sa", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>P (g s); \\<forall>x. f x sa = f x s\\<rbrakk>\n       \\<Longrightarrow> P (g sa)\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s) \\<circ> f x) sa", "apply (frule eq_impD[where f=f, OF g])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>P (g s); \\<forall>x. f x sa = f x s; g sa = g s\\<rbrakk>\n       \\<Longrightarrow> P (g sa)\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s) \\<circ> f x) sa", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s) \\<circ> f x) sa", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_imp_vcg_LST:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x P. \\<lbrace>P \\<circ> (f x) \\<circ> LST\\<rbrace> c\"\n  shows \"\\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coms, p, aft \\<turnstile> \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c", "apply (rule vcg_name_pre_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (P \\<circ> g \\<circ> LST) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace>", "apply (rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (P \\<circ> g \\<circ> LST) s \\<Longrightarrow>\n       \\<lbrace>(=) s\\<rbrace> c \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace>", "apply (rule vcg_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (P \\<circ> g \\<circ> LST) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_post_imp[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       (P \\<circ> g \\<circ> LST) s \\<Longrightarrow>\n       \\<lbrace>?Q2 s\\<rbrace> c \\<lbrace>?Q5 s\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; ?Q5 s sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g \\<circ> LST) sa\n 3. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> ?Q2 s sa", "apply (rule vcg_all_lift[where 'a='a])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s x.\n       (P \\<circ> g \\<circ> LST) s \\<Longrightarrow>\n       \\<lbrace>?P8 s x\\<rbrace> c \\<lbrace>?Q8 s x\\<rbrace>\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; \\<forall>x. ?Q8 s x sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g \\<circ> LST) sa\n 3. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x. ?P8 s x sa", "apply (rule_tac x=x and P=\"\\<lambda>fs. fs = f x s\\<down>\" in f[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s;\n        \\<forall>x.\n           ((\\<lambda>fs. fs = f x s\\<down>) \\<circ> f x \\<circ> LST)\n            sa\\<rbrakk>\n       \\<Longrightarrow> (P \\<circ> g \\<circ> LST) sa\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s\\<down>) \\<circ>\n                             f x \\<circ>\n                             LST)\n                             sa", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>P (g s\\<down>);\n        \\<forall>x. f x sa\\<down> = f x s\\<down>\\<rbrakk>\n       \\<Longrightarrow> P (g sa\\<down>)\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s\\<down>) \\<circ>\n                             f x \\<circ>\n                             LST)\n                             sa", "apply (frule eq_impD[where f=f, OF g])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s sa.\n       \\<lbrakk>P (g s\\<down>); \\<forall>x. f x sa\\<down> = f x s\\<down>;\n        g sa\\<down> = g s\\<down>\\<rbrakk>\n       \\<Longrightarrow> P (g sa\\<down>)\n 2. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s\\<down>) \\<circ>\n                             f x \\<circ>\n                             LST)\n                             sa", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s sa.\n       \\<lbrakk>(P \\<circ> g \\<circ> LST) s; s = sa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ((\\<lambda>fs. fs = f x s\\<down>) \\<circ>\n                             f x \\<circ>\n                             LST)\n                             sa", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_imp_fun_upd:\n  assumes g: \"eq_imp f g\"\n  assumes f: \"\\<forall>x. f x (s(fld := val)) = f x s\"\n  shows \"g (s(fld := val)) = g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g (s(fld := val)) = g s", "apply (rule eq_impD[OF g])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. f x (s(fld := val)) = f x s", "apply (rule f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma curry_forall_eq:\n  \"(\\<forall>f. P f) = (\\<forall>f. P (case_prod f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>f. P f) = (\\<forall>f. P (\\<lambda>(x, y). f x y))", "by (metis case_prod_curry)"], ["", "lemma pres_tuple_vcg:\n  \"(\\<forall>P. \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s))\\<rbrace> c)\n    \\<longleftrightarrow> ((\\<forall>P. \\<lbrace>P \\<circ> f\\<rbrace> c) \\<and> (\\<forall>P. \\<lbrace>P \\<circ> g\\<rbrace> c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P. coms, p, aft \\<turnstile>\n        \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s))\\<rbrace> c) =\n    ((\\<forall>P. coms, p, aft \\<turnstile> \\<lbrace>P \\<circ> f\\<rbrace>\n         c) \\<and>\n     (\\<forall>P. coms, p, aft \\<turnstile> \\<lbrace>P \\<circ> g\\<rbrace>\n         c))", "apply (simp add: curry_forall_eq o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P. coms, p, aft \\<turnstile>\n        \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c) =\n    ((\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c) \\<and>\n     (\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c))", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c \\<Longrightarrow>\n       coms, p, aft \\<turnstile> \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c\n 2. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c \\<Longrightarrow>\n       coms, p, aft \\<turnstile> \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\n 3. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c \\<Longrightarrow>\n       coms, p, aft \\<turnstile> \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\n 2. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c", "apply (rename_tac P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x. P (f x) (g x)\\<rbrace> c", "apply (rule_tac f=\"f\" and P=\"\\<lambda>fs s. P fs (g s)\" in vcg_lift_comp; simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pres_tuple_vcg_LST:\n  \"(\\<forall>P. \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s)) \\<circ> LST\\<rbrace> c)\n    \\<longleftrightarrow> ((\\<forall>P. \\<lbrace>P \\<circ> f \\<circ> LST\\<rbrace> c) \\<and> (\\<forall>P. \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P. coms, p, aft \\<turnstile>\n        \\<lbrace>P \\<circ> (\\<lambda>s. (f s, g s)) \\<circ> LST\\<rbrace>\n        c) =\n    ((\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>P \\<circ> f \\<circ> LST\\<rbrace> c) \\<and>\n     (\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>P \\<circ> g \\<circ> LST\\<rbrace> c))", "apply (simp add: curry_forall_eq o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P. coms, p, aft \\<turnstile>\n        \\<lbrace>\\<lambda>x. P (f x\\<down>) (g x\\<down>)\\<rbrace> c) =\n    ((\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c) \\<and>\n     (\\<forall>P. coms, p, aft \\<turnstile>\n         \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c))", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x\\<down>) (g x\\<down>)\\<rbrace>\n          c \\<Longrightarrow>\n       coms, p, aft \\<turnstile>\n       \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c\n 2. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x\\<down>) (g x\\<down>)\\<rbrace>\n          c \\<Longrightarrow>\n       coms, p, aft \\<turnstile>\n       \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\n 3. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x.\n                                     P (f x\\<down>) (g x\\<down>)\\<rbrace>\n                         c", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>P. coms, p, aft \\<turnstile>\n          \\<lbrace>\\<lambda>x. P (f x\\<down>) (g x\\<down>)\\<rbrace>\n          c \\<Longrightarrow>\n       coms, p, aft \\<turnstile>\n       \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\n 2. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x.\n                                     P (f x\\<down>) (g x\\<down>)\\<rbrace>\n                         c", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x.\n                                     P (f x\\<down>) (g x\\<down>)\\<rbrace>\n                         c", "apply (rename_tac P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>\\<forall>P. coms, p, aft \\<turnstile>\n                   \\<lbrace>\\<lambda>x. P (f x\\<down>)\\<rbrace> c;\n        \\<forall>P. coms, p, aft \\<turnstile>\n           \\<lbrace>\\<lambda>x. P (g x\\<down>)\\<rbrace> c\\<rbrakk>\n       \\<Longrightarrow> coms, p, aft \\<turnstile>\n                         \\<lbrace>\\<lambda>x.\n                                     P (f x\\<down>) (g x\\<down>)\\<rbrace>\n                         c", "apply (rule_tac f=\"\\<lambda>s. f s\\<down>\" and P=\"\\<lambda>fs s. P fs (g s)\" for g in vcg_lift_comp; simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "no_notation valid_syn (\"\\<lbrace>_\\<rbrace>/ _/ \\<lbrace>_\\<rbrace>\")"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}