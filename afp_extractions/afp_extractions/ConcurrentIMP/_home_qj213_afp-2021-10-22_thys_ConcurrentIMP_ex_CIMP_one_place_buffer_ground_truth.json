{"file_name": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP/ex/CIMP_one_place_buffer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP", "problem_names": ["lemma correct_system:\n  assumes \"IL sh\"\n  shows \"Etern_pred sh\"", "lemma IL_p1: \"ex_coms, p1, lconst {} \\<turnstile> \\<lbrace>IL\\<rbrace> \\<lbrace>s12\\<rbrace> \\<xi>12\\<triangleleft>(\\<lambda>s. s)\"", "lemma IL_p2: \"ex_coms, p2, lconst {r12} \\<turnstile> \\<lbrace>IL\\<rbrace> \\<lbrace>s23\\<rbrace> \\<xi>23\\<triangleleft>(\\<lambda>s. s)\"", "lemma IL: \"sys \\<Turnstile>\\<^bsub>pre\\<^esub> IL\"", "lemma IL_valid: \"sys \\<Turnstile> \\<box>\\<lceil>IL\\<rceil>\""], "translations": [["", "lemma correct_system:\n  assumes \"IL sh\"\n  shows \"Etern_pred sh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Etern_pred sh", "using assms"], ["proof (prove)\nusing this:\n  IL sh\n\ngoal (1 subgoal):\n 1. Etern_pred sh", "unfolding Etern_pred_def IL_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>a b s. a s \\<and> b s)\n   [\\<lambda>s.\n       at p1 s12 s \\<longrightarrow> (\\<downharpoonright>\\<xi>12) s = [],\n    \\<lambda>s.\n       atLs p1 {{}} s \\<longrightarrow>\n       (\\<downharpoonright>\\<xi>12) s = [s\\<down> p1],\n    \\<lambda>s.\n       at p2 r12 s \\<longrightarrow>\n       (\\<downharpoonright>\\<xi>12) s = (\\<downharpoonright>\\<xi>23) s,\n    \\<lambda>s.\n       at p2 s23 s \\<longrightarrow>\n       (\\<downharpoonright>\\<xi>12) s =\n       (\\<downharpoonright>\\<xi>23) s @ [s\\<down> p2] \\<and>\n       s\\<down> p1 = s\\<down> p2,\n    \\<lambda>s.\n       at p3 r23 s \\<longrightarrow> (\\<downharpoonright>\\<xi>23) s = [],\n    \\<lambda>s.\n       atLs p3 {{}} s \\<longrightarrow>\n       (\\<downharpoonright>\\<xi>23) s = [s\\<down> p2] \\<and>\n       s\\<down> p1 = s\\<down> p3]\n   (\\<lambda>s. True) sh\n\ngoal (1 subgoal):\n 1. atLs p3 {{}} sh \\<longrightarrow> sh\\<down> p1 = sh\\<down> p3", "by simp"], ["", "lemma IL_p1: \"ex_coms, p1, lconst {} \\<turnstile> \\<lbrace>IL\\<rbrace> \\<lbrace>s12\\<rbrace> \\<xi>12\\<triangleleft>(\\<lambda>s. s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p1, lconst {} \\<turnstile> \\<lbrace>IL\\<rbrace>\n    \\<lbrace>s12\\<rbrace> \\<xi>12\\<triangleleft>(\\<lambda>s. s)", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>IL s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p1 \\<noteq> p'; ps' \\<in> {s\\<down> p1};\n        (p's', \\<beta>) \\<in> action' (\\<xi>12, s\\<down> p1) (s\\<down> p');\n        at p1 s12 s; at p' l' s;\n        AT s' = (AT s)\n        (p1 := lconst {} (s\\<down> p1), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p1 := ps', p' := p's'); taken p1 s12 s';\n        HST s' = HST s @ [((\\<xi>12, s\\<down> p1), \\<beta>)];\n        \\<forall>p''\\<in>- {p1, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> IL s'", "apply (rename_tac p')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>IL s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p1 \\<noteq> p'; ps' \\<in> {s\\<down> p1};\n        (p's', \\<beta>) \\<in> action' (\\<xi>12, s\\<down> p1) (s\\<down> p');\n        at p1 s12 s; at p' l' s;\n        AT s' = (AT s)\n        (p1 := lconst {} (s\\<down> p1), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p1 := ps', p' := p's'); taken p1 s12 s';\n        HST s' = HST s @ [((\\<xi>12, s\\<down> p1), \\<beta>)];\n        \\<forall>p''\\<in>- {p1, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> IL s'", "apply (case_tac p'; clarsimp simp: IL_def atLs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma IL_p2: \"ex_coms, p2, lconst {r12} \\<turnstile> \\<lbrace>IL\\<rbrace> \\<lbrace>s23\\<rbrace> \\<xi>23\\<triangleleft>(\\<lambda>s. s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p2, lconst {r12} \\<turnstile> \\<lbrace>IL\\<rbrace>\n    \\<lbrace>s23\\<rbrace> \\<xi>23\\<triangleleft>(\\<lambda>s. s)", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>IL s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p2 \\<noteq> p'; ps' \\<in> {s\\<down> p2};\n        (p's', \\<beta>) \\<in> action' (\\<xi>23, s\\<down> p2) (s\\<down> p');\n        at p2 s23 s; at p' l' s;\n        AT s' = (AT s)\n        (p2 := lconst {r12} (s\\<down> p2), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p2 := ps', p' := p's'); taken p2 s23 s';\n        HST s' = HST s @ [((\\<xi>23, s\\<down> p2), \\<beta>)];\n        \\<forall>p''\\<in>- {p2, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> IL s'", "apply (rename_tac p')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>IL s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p2 \\<noteq> p'; ps' \\<in> {s\\<down> p2};\n        (p's', \\<beta>) \\<in> action' (\\<xi>23, s\\<down> p2) (s\\<down> p');\n        at p2 s23 s; at p' l' s;\n        AT s' = (AT s)\n        (p2 := lconst {r12} (s\\<down> p2), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p2 := ps', p' := p's'); taken p2 s23 s';\n        HST s' = HST s @ [((\\<xi>23, s\\<down> p2), \\<beta>)];\n        \\<forall>p''\\<in>- {p2, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> IL s'", "apply (case_tac p'; clarsimp simp: IL_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma IL: \"sys \\<Turnstile>\\<^bsub>pre\\<^esub> IL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n       FAIR = \\<lambda>s. True\\<rparr> \\<Turnstile>\\<^bsub>pre\\<^esub> IL", "apply (rule VCG)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       IL \\<lparr>GST = s, HST = []\\<rparr>\n 2. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>IL\\<rbrace> c", "apply (clarsimp simp: IL_def atLs_def dest!: initial_stateD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>IL\\<rbrace> c", "apply (rename_tac p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>IL\\<rbrace> c", "apply (case_tac p; clarsimp simp: IL_p1 IL_p2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma IL_valid: \"sys \\<Turnstile> \\<box>\\<lceil>IL\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>PGMs = ex_coms, INIT = \\<lambda>s. True,\n       FAIR = \\<lambda>s. True\\<rparr> \\<Turnstile> \\<box>\\<lceil>IL\\<rceil>", "by (rule valid_prerun_lift[OF IL])"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}