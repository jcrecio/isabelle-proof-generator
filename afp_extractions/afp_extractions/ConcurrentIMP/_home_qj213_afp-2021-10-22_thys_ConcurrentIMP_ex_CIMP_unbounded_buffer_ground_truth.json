{"file_name": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP/ex/CIMP_unbounded_buffer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ConcurrentIMP", "problem_names": ["lemma correct_system:\n  assumes \"I_pred s\"\n  shows \"Etern_pred s\"", "lemma p1_c1[simplified, intro]:\n  \"ex_coms, p1, lconst {s12} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>c1\\<rbrace> LocalOp (\\<lambda>xs. { snoc x xs |x. True })\"", "lemma p1_s12[simplified, intro]:\n  \"ex_coms, p1, lconst {c1} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>s12\\<rbrace> \\<xi>12\\<triangleleft>(last, id)\"", "lemma p2_s23[simplified, intro]:\n  \"ex_coms, p2, lconst {c1, r12} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>s23\\<rbrace> \\<xi>12\\<triangleleft>(hd, tl)\"", "lemma p2_pi4[intro]:\n  \"ex_coms, p2, lcond {s23} {c1, r12} (\\<lambda>s. s \\<noteq> []) \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>c1\\<rbrace> IF (\\<lambda>s. s \\<noteq> []) THEN c' FI\"", "lemma I: \"sys \\<Turnstile>\\<^bsub>pre\\<^esub> I_pred\"", "lemma I_valid: \"sys \\<Turnstile> \\<box>\\<lceil>I_pred\\<rceil>\""], "translations": [["", "lemma correct_system:\n  assumes \"I_pred s\"\n  shows \"Etern_pred s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Etern_pred s", "using assms"], ["proof (prove)\nusing this:\n  I_pred s\n\ngoal (1 subgoal):\n 1. Etern_pred s", "unfolding Etern_pred_def I_pred_def less_eq_list_def prefix_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>a b s. a s \\<and> b s)\n   [\\<lambda>s.\n       at p1 c1 s \\<longrightarrow>\n       (\\<downharpoonright>\\<xi>12) s = s\\<down> p1,\n    \\<lambda>s.\n       at p1 s12 s \\<longrightarrow>\n       0 < length (s\\<down> p1) \\<and>\n       butlast (s\\<down> p1) = (\\<downharpoonright>\\<xi>12) s,\n    \\<lambda>s.\n       \\<exists>zs. s\\<down> p1 = (\\<downharpoonright>\\<xi>12) s @ zs,\n    \\<lambda>s.\n       (\\<downharpoonright>\\<xi>12) s =\n       (\\<downharpoonright>\\<xi>23) s @ s\\<down> p2,\n    \\<lambda>s. at p2 s23 s \\<longrightarrow> 0 < length (s\\<down> p2),\n    \\<lambda>s. s\\<down> p3 = (\\<downharpoonright>\\<xi>23) s]\n   (\\<lambda>s. True) s\n\ngoal (1 subgoal):\n 1. \\<exists>zs. s\\<down> p1 = s\\<down> p3 @ zs", "by clarsimp"], ["", "lemma p1_c1[simplified, intro]:\n  \"ex_coms, p1, lconst {s12} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>c1\\<rbrace> LocalOp (\\<lambda>xs. { snoc x xs |x. True })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p1, lconst {s12} \\<turnstile> \\<lbrace>I_pred\\<rbrace>\n    \\<lbrace>c1\\<rbrace> LocalOp (\\<lambda>xs. {xs @ [x] |x. True})", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s ps' s'.\n       \\<lbrakk>I_pred s; ps' \\<in> {s\\<down> p1 @ [x] |x. True};\n        at p1 c1 s; AT s' = (AT s)(p1 := lconst {s12} (s\\<down> p1));\n        s'\\<down> = s\\<down>(p1 := ps'); taken p1 c1 s'; HST s' = HST s;\n        \\<forall>p''\\<in>- {p1}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (clarsimp simp: I_pred_def atS_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma p1_s12[simplified, intro]:\n  \"ex_coms, p1, lconst {c1} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>s12\\<rbrace> \\<xi>12\\<triangleleft>(last, id)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p1, lconst {c1} \\<turnstile> \\<lbrace>I_pred\\<rbrace>\n    \\<lbrace>s12\\<rbrace> Request (\\<lambda>s.\n(\\<xi>12, fst (last, id) s)) (\\<lambda>ans s. {snd (last, id) s})", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>I_pred s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p1 \\<noteq> p'; ps' \\<in> {snd (last, id) (s\\<down> p1)};\n        (p's', \\<beta>)\n        \\<in> action' (\\<xi>12, fst (last, id) (s\\<down> p1)) (s\\<down> p');\n        at p1 s12 s; at p' l' s;\n        AT s' = (AT s)\n        (p1 := lconst {c1} (s\\<down> p1), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p1 := ps', p' := p's'); taken p1 s12 s';\n        HST s' =\n        HST s @ [((\\<xi>12, fst (last, id) (s\\<down> p1)), \\<beta>)];\n        \\<forall>p''\\<in>- {p1, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (rename_tac p')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>I_pred s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p1 \\<noteq> p'; ps' \\<in> {snd (last, id) (s\\<down> p1)};\n        (p's', \\<beta>)\n        \\<in> action' (\\<xi>12, fst (last, id) (s\\<down> p1)) (s\\<down> p');\n        at p1 s12 s; at p' l' s;\n        AT s' = (AT s)\n        (p1 := lconst {c1} (s\\<down> p1), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p1 := ps', p' := p's'); taken p1 s12 s';\n        HST s' =\n        HST s @ [((\\<xi>12, fst (last, id) (s\\<down> p1)), \\<beta>)];\n        \\<forall>p''\\<in>- {p1, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (case_tac p'; clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>I_pred s; at p1 s12 s; at p2 r12 s;\n        AT s' = (AT s)(p1 := {c1}, p2 := {c1, r12});\n        s'\\<down> = s\\<down>(p2 := s\\<down> p2 @ [last (s\\<down> p1)]);\n        taken p1 s12 s';\n        HST s' = HST s @ [((\\<xi>12, last (s\\<down> p1)), ())];\n        \\<forall>p''\\<in>- {p1, p2}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (clarsimp simp: I_pred_def atS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>at p1 s12 s; at p2 r12 s;\n        AT s' = (AT s)(p1 := {c1}, p2 := {c1, r12});\n        s'\\<down> = s\\<down>(p2 := s\\<down> p2 @ [last (s\\<down> p1)]);\n        taken p1 s12 s';\n        HST s' = HST s @ [((\\<xi>12, last (s\\<down> p1)), ())];\n        \\<forall>p''\\<in>- {p1, p2}. GST s' p'' = GST s p'';\n        at p1 c1 s \\<longrightarrow>\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst) (HST s)) @\n        s\\<down> p2 =\n        s\\<down> p1;\n        s\\<down> p1 \\<noteq> [];\n        butlast (s\\<down> p1) =\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst) (HST s)) @\n        s\\<down> p2;\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst) (HST s)) @\n        s\\<down> p2\n        \\<le> s\\<down> p1;\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>12 \\<circ> fst \\<circ> fst) (HST s)) =\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst) (HST s)) @\n        s\\<down> p2;\n        at p2 s23 s \\<longrightarrow> s\\<down> p2 \\<noteq> [];\n        s\\<down> p3 =\n        map (snd \\<circ> fst)\n         (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst) (HST s))\\<rbrakk>\n       \\<Longrightarrow> map (snd \\<circ> fst)\n                          (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst)\n                            (HST s)) @\n                         s\\<down> p2 @ [last (s\\<down> p1)] =\n                         s\\<down> p1 \\<and>\n                         map (snd \\<circ> fst)\n                          (filter ((=) \\<xi>23 \\<circ> fst \\<circ> fst)\n                            (HST s)) @\n                         s\\<down> p2 @ [last (s\\<down> p1)]\n                         \\<le> s\\<down> p1", "apply (metis Prefix_Order.prefix_snoc append.assoc append_butlast_last_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma p2_s23[simplified, intro]:\n  \"ex_coms, p2, lconst {c1, r12} \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>s23\\<rbrace> \\<xi>12\\<triangleleft>(hd, tl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p2, lconst {c1, r12} \\<turnstile> \\<lbrace>I_pred\\<rbrace>\n    \\<lbrace>s23\\<rbrace> Request (\\<lambda>s.\n(\\<xi>12, fst (hd, tl) s)) (\\<lambda>ans s. {snd (hd, tl) s})", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>I_pred s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p2 \\<noteq> p'; ps' \\<in> {snd (hd, tl) (s\\<down> p2)};\n        (p's', \\<beta>)\n        \\<in> action' (\\<xi>12, fst (hd, tl) (s\\<down> p2)) (s\\<down> p');\n        at p2 s23 s; at p' l' s;\n        AT s' = (AT s)\n        (p2 := lconst {c1, r12} (s\\<down> p2), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p2 := ps', p' := p's'); taken p2 s23 s';\n        HST s' = HST s @ [((\\<xi>12, fst (hd, tl) (s\\<down> p2)), \\<beta>)];\n        \\<forall>p''\\<in>- {p2, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (rename_tac p')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aft' action' s ps' p's' l' \\<beta> s' p'.\n       \\<lbrakk>I_pred s;\n        (\\<lbrace>l'\\<rbrace> Response action', aft')\n        \\<in> fragments (ex_coms p') {};\n        p2 \\<noteq> p'; ps' \\<in> {snd (hd, tl) (s\\<down> p2)};\n        (p's', \\<beta>)\n        \\<in> action' (\\<xi>12, fst (hd, tl) (s\\<down> p2)) (s\\<down> p');\n        at p2 s23 s; at p' l' s;\n        AT s' = (AT s)\n        (p2 := lconst {c1, r12} (s\\<down> p2), p' := aft' (s\\<down> p'));\n        s'\\<down> = s\\<down>(p2 := ps', p' := p's'); taken p2 s23 s';\n        HST s' = HST s @ [((\\<xi>12, fst (hd, tl) (s\\<down> p2)), \\<beta>)];\n        \\<forall>p''\\<in>- {p2, p'}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (case_tac p'; clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma p2_pi4[intro]:\n  \"ex_coms, p2, lcond {s23} {c1, r12} (\\<lambda>s. s \\<noteq> []) \\<turnstile> \\<lbrace>I_pred\\<rbrace> \\<lbrace>c1\\<rbrace> IF (\\<lambda>s. s \\<noteq> []) THEN c' FI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_coms, p2, lcond {s23} {c1, r12}\n                  (\\<lambda>s. s \\<noteq> []) \\<turnstile>\n    \\<lbrace>I_pred\\<rbrace>\n    \\<lbrace>c1\\<rbrace> IF \\<lambda>s. s \\<noteq> [] THEN c' FI", "apply (rule vcg.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>I_pred s; at p2 c1 s;\n        AT s' = (AT s)\n        (p2 :=\n           lcond {s23} {c1, r12} (\\<lambda>s. s \\<noteq> []) (s\\<down> p2));\n        s'\\<down> = s\\<down>; taken p2 c1 s'; HST s' = HST s;\n        \\<forall>p''\\<in>- {p2}. GST s' p'' = GST s p''\\<rbrakk>\n       \\<Longrightarrow> I_pred s'", "apply (clarsimp simp: I_pred_def atS_def split: lcond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma I: \"sys \\<Turnstile>\\<^bsub>pre\\<^esub> I_pred\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>PGMs = ex_coms, INIT = ex_init,\n       FAIR =\n         \\<lambda>s. True\\<rparr> \\<Turnstile>\\<^bsub>pre\\<^esub> I_pred", "apply (rule VCG)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = ex_coms, INIT = ex_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       I_pred \\<lparr>GST = s, HST = []\\<rparr>\n 2. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = ex_init,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = ex_init,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>I_pred\\<rbrace> c", "apply (clarsimp dest!: initial_stateD simp: I_pred_def atS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = ex_init,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = ex_init,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>I_pred\\<rbrace> c", "apply (rename_tac p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<forall>(c, aft)\n                \\<in>vcg_fragments\n                      (PGMs\n                        \\<lparr>PGMs = ex_coms, INIT = ex_init,\n                           FAIR = \\<lambda>s. True\\<rparr>\n                        p).\n          PGMs\n           \\<lparr>PGMs = ex_coms, INIT = ex_init,\n              FAIR = \\<lambda>s. True\\<rparr>, p, aft \\<turnstile>\n          \\<lbrace>I_pred\\<rbrace> c", "apply (case_tac p; auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma I_valid: \"sys \\<Turnstile> \\<box>\\<lceil>I_pred\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>PGMs = ex_coms, INIT = ex_init,\n       FAIR =\n         \\<lambda>s. True\\<rparr> \\<Turnstile> \\<box>\\<lceil>I_pred\\<rceil>", "by (rule valid_prerun_lift[OF I])"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}