{"file_name": "/home/qj213/afp-2021-10-22/thys/InfPathElimination/SubExt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/InfPathElimination", "problem_names": ["lemma (in sub_rel_of)\n  assumes \"extends g subs sub subs'\" \n  shows   \"sub_rel_of g subs'\"", "lemma (in wf_sub_rel) extends_imp_wf_sub_rel :\n  assumes \"extends g subs sub subs'\"\n  shows   \"wf_sub_rel subs'\"", "lemma (in wf_sub_rel_of) extends_imp_wf_sub_rel_of :\n  assumes \"extends g subs sub subs'\"\n  shows   \"wf_sub_rel_of g subs'\"", "lemma sp_in_extends :\n  assumes \"extends g subs sub subs'\"\n  assumes \"subpath g v1 es v2 subs\"\n  shows   \"subpath g v1 es v2 subs'\"", "lemma (in wf_sub_rel_of) sp_in_extends_imp1 :\n  assumes \"extends g subs (v1,v2) subs'\"\n  assumes \"subpath g v1 es v subs'\"\n  shows   \"es = [] \\<or> subpath g v2 es v subs'\"", "lemma\n  assumes \"uses_sub v1 es v2 sub\"\n  assumes \"ces v1 es v2 subs\"\n  shows   \"sub \\<in> subs\\<^sup>+\"", "lemma (in wf_sub_rel)\n  assumes \"uses_sub v1 es v2 sub\"\n  assumes \"ces v1 es v2 subs\"\n  shows   \"sub \\<in> subs\"", "lemma extends_and_sp_imp_not_using_sub :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs\"\n  shows   \"\\<not> uses_sub v1 es v2 (v,v')\"", "lemma (in wf_sub_rel_of) sp_Nil_in_extends_imp :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 [] v2 subs'\"\n  shows   \"subpath g v1 [] v2 subs \\<longleftrightarrow> (v1 \\<noteq> v \\<or> v2 \\<noteq> v')\"", "lemma (in wf_sub_rel_of) sp_in_extends_not_using_sub :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs'\"\n  assumes \"\\<not> uses_sub v1 es v2 (v,v')\"\n  shows   \"subpath g v1 es v2 subs\"", "lemma (in wf_sub_rel_of) sp_in_extends_imp2 : \n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs'\"\n  assumes \"v1 \\<noteq> v\"\n \n  shows   \"subpath g v1 es v2 subs \\<or> (\\<exists> es1 es2. es = es1 @ es2 \n                                               \\<and> es1 \\<noteq> [] \n                                               \\<and> subpath g v1 es1 v subs \n                                               \\<and> subpath g v es2 v2 subs')\"\n          (is \"?P es v1\")"], "translations": [["", "lemma (in sub_rel_of)\n  assumes \"extends g subs sub subs'\" \n  shows   \"sub_rel_of g subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_rel_of g subs'", "using assms sub_rel_of"], ["proof (prove)\nusing this:\n  extends g subs sub subs'\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n\ngoal (1 subgoal):\n 1. sub_rel_of g subs'", "unfolding sub_rel_of_def"], ["proof (prove)\nusing this:\n  extends g subs sub subs'\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n\ngoal (1 subgoal):\n 1. SubRel.vertices subs' \\<subseteq> Graph.vertices g", "by force"], ["", "text \\<open>Extending a well-formed relation yields a well-formed relation.\\<close>"], ["", "lemma (in wf_sub_rel) extends_imp_wf_sub_rel :\n  assumes \"extends g subs sub subs'\"\n  shows   \"wf_sub_rel subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sub_rel subs'", "unfolding wf_sub_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>sub.\n        sub \\<in> subs' \\<longrightarrow>\n        fst (subsumee sub) = fst (subsumer sub)) \\<and>\n    (\\<forall>v\\<in>subsumees subs'.\n        \\<exists>!v'. (v, v') \\<in> subs') \\<and>\n    subsumers subs' \\<inter> subsumees subs' = {}", "proof (intro conjI, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>sub.\n       sub \\<in> subs' \\<longrightarrow>\n       fst (subsumee sub) = fst (subsumer sub)\n 2. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n 3. subsumers subs' \\<inter> subsumees subs' = {}", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<forall>sub.\n       sub \\<in> subs' \\<longrightarrow>\n       fst (subsumee sub) = fst (subsumer sub)\n 2. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n 3. subsumers subs' \\<inter> subsumees subs' = {}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>sub.\n       sub \\<in> subs' \\<longrightarrow>\n       fst (subsumee sub) = fst (subsumer sub)", "using wf_sub_rel assms"], ["proof (prove)\nusing this:\n  ?sub \\<in> subs \\<Longrightarrow>\n  fst (subsumee ?sub) = fst (subsumer ?sub)\n  \\<forall>v\\<in>subsumees subs. \\<exists>!v'. (v, v') \\<in> subs\n  subsumers subs \\<inter> subsumees subs = {}\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. \\<forall>sub.\n       sub \\<in> subs' \\<longrightarrow>\n       fst (subsumee sub) = fst (subsumer sub)", "by auto"], ["proof (state)\nthis:\n  \\<forall>sub.\n     sub \\<in> subs' \\<longrightarrow>\n     fst (subsumee sub) = fst (subsumer sub)\n\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n 2. subsumers subs' \\<inter> subsumees subs' = {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n 2. subsumers subs' \\<inter> subsumees subs' = {}", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n 2. subsumers subs' \\<inter> subsumees subs' = {}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'", "unfolding Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> subsumees subs' \\<longrightarrow>\n       (\\<exists>!v'. (x, v') \\<in> subs')", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> subsumees subs' \\<Longrightarrow>\n       \\<exists>!v'. (x, v') \\<in> subs'", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> subsumees subs' \\<Longrightarrow>\n       \\<exists>!v'. (x, v') \\<in> subs'", "assume \"v \\<in> subsumees subs'\""], ["proof (state)\nthis:\n  v \\<in> subsumees subs'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> subsumees subs' \\<Longrightarrow>\n       \\<exists>!v'. (x, v') \\<in> subs'", "hence  \"v = subsumee sub \\<or> v \\<in> subsumees subs\""], ["proof (prove)\nusing this:\n  v \\<in> subsumees subs'\n\ngoal (1 subgoal):\n 1. v = subsumee sub \\<or> v \\<in> subsumees subs", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> subsumees subs'\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. v = subsumee sub \\<or> v \\<in> subsumees subs", "by auto"], ["proof (state)\nthis:\n  v = subsumee sub \\<or> v \\<in> subsumees subs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> subsumees subs' \\<Longrightarrow>\n       \\<exists>!v'. (x, v') \\<in> subs'", "thus \"\\<exists>! v'. (v,v') \\<in> subs'\""], ["proof (prove)\nusing this:\n  v = subsumee sub \\<or> v \\<in> subsumees subs\n\ngoal (1 subgoal):\n 1. \\<exists>!v'. (v, v') \\<in> subs'", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. v = subsumee sub \\<Longrightarrow> \\<exists>!v'. (v, v') \\<in> subs'\n 2. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "case 1"], ["proof (state)\nthis:\n  v = subsumee sub\n\ngoal (2 subgoals):\n 1. v = subsumee sub \\<Longrightarrow> \\<exists>!v'. (v, v') \\<in> subs'\n 2. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!v'. (v, v') \\<in> subs'", "unfolding Ex1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (v, x) \\<in> subs' \\<and>\n       (\\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = x)", "proof (rule_tac ?x=\"subsumer sub\" in exI, intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (v, subsumer sub) \\<in> subs'\n 2. \\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = subsumer sub", "show \"(v, subsumer sub) \\<in> subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, subsumer sub) \\<in> subs'", "using 1 assms"], ["proof (prove)\nusing this:\n  v = subsumee sub\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. (v, subsumer sub) \\<in> subs'", "by simp"], ["proof (state)\nthis:\n  (v, subsumer sub) \\<in> subs'\n\ngoal (1 subgoal):\n 1. \\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = subsumer sub", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = subsumer sub", "have \"v \\<notin> subsumees subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> subsumees subs", "using assms 1"], ["proof (prove)\nusing this:\n  extends g subs sub subs'\n  v = subsumee sub\n\ngoal (1 subgoal):\n 1. v \\<notin> subsumees subs", "by auto"], ["proof (state)\nthis:\n  v \\<notin> subsumees subs\n\ngoal (1 subgoal):\n 1. \\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = subsumer sub", "thus \"\\<forall> v'. (v, v') \\<in> subs' \\<longrightarrow> v' = subsumer sub\""], ["proof (prove)\nusing this:\n  v \\<notin> subsumees subs\n\ngoal (1 subgoal):\n 1. \\<forall>v'. (v, v') \\<in> subs' \\<longrightarrow> v' = subsumer sub", "using assms"], ["proof (prove)\nusing this:\n  v \\<notin> subsumees subs\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. \\<forall>v'. (v, v') \\<in> subs' \\<longrightarrow> v' = subsumer sub", "by auto force"], ["proof (state)\nthis:\n  \\<forall>v'. (v, v') \\<in> subs' \\<longrightarrow> v' = subsumer sub\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!v'. (v, v') \\<in> subs'\n\ngoal (1 subgoal):\n 1. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "case 2"], ["proof (state)\nthis:\n  v \\<in> subsumees subs\n\ngoal (1 subgoal):\n 1. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "then"], ["proof (chain)\npicking this:\n  v \\<in> subsumees subs", "obtain v' where \"(v,v') \\<in> subs\""], ["proof (prove)\nusing this:\n  v \\<in> subsumees subs\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        (v, v') \\<in> subs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v, v') \\<in> subs\n\ngoal (1 subgoal):\n 1. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "hence \"v \\<noteq> subsumee sub\""], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\n\ngoal (1 subgoal):\n 1. v \\<noteq> subsumee sub", "using assms"], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. v \\<noteq> subsumee sub", "unfolding subsumees_conv"], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\n  subsumee sub \\<noteq> subsumer sub \\<and>\n  fst (subsumee sub) = fst (subsumer sub) \\<and>\n  subsumee sub \\<in> Graph.vertices g \\<and>\n  subsumee sub \\<notin> subsumers subs \\<and>\n  subsumee sub \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  subsumer sub \\<in> Graph.vertices g \\<and>\n  subsumer sub \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  out_edges g (subsumee sub) = {} \\<and> subs' = subs \\<union> {sub}\n\ngoal (1 subgoal):\n 1. v \\<noteq> subsumee sub", "by (force simp del : split_paired_All split_paired_Ex)"], ["proof (state)\nthis:\n  v \\<noteq> subsumee sub\n\ngoal (1 subgoal):\n 1. v \\<in> subsumees subs \\<Longrightarrow>\n    \\<exists>!v'. (v, v') \\<in> subs'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!v'. (v, v') \\<in> subs'", "using assms \n            \\<open>v \\<noteq> subsumee sub\\<close> \n            \\<open>(v,v') \\<in> subs\\<close> subsumed_by_one"], ["proof (prove)\nusing this:\n  extends g subs sub subs'\n  v \\<noteq> subsumee sub\n  (v, v') \\<in> subs\n  \\<forall>v\\<in>subsumees subs. \\<exists>!v'. (v, v') \\<in> subs\n\ngoal (1 subgoal):\n 1. \\<exists>!v'. (v, v') \\<in> subs'", "unfolding subsumees_conv Ex1_def"], ["proof (prove)\nusing this:\n  subsumee sub \\<noteq> subsumer sub \\<and>\n  fst (subsumee sub) = fst (subsumer sub) \\<and>\n  subsumee sub \\<in> Graph.vertices g \\<and>\n  subsumee sub \\<notin> subsumers subs \\<and>\n  subsumee sub \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  subsumer sub \\<in> Graph.vertices g \\<and>\n  subsumer sub \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  out_edges g (subsumee sub) = {} \\<and> subs' = subs \\<union> {sub}\n  v \\<noteq> subsumee sub\n  (v, v') \\<in> subs\n  \\<forall>v\\<in>{v. \\<exists>v'. (v, v') \\<in> subs}.\n     \\<exists>x.\n        (v, x) \\<in> subs \\<and>\n        (\\<forall>y. (v, y) \\<in> subs \\<longrightarrow> y = x)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (v, x) \\<in> subs' \\<and>\n       (\\<forall>y. (v, y) \\<in> subs' \\<longrightarrow> y = x)", "by (rule_tac ?x=\"v'\" in exI) \n         (auto simp del : split_paired_All split_paired_Ex)"], ["proof (state)\nthis:\n  \\<exists>!v'. (v, v') \\<in> subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!v'. (v, v') \\<in> subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>subsumees subs'. \\<exists>!v'. (v, v') \\<in> subs'\n\ngoal (1 subgoal):\n 1. subsumers subs' \\<inter> subsumees subs' = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. subsumers subs' \\<inter> subsumees subs' = {}", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. subsumers subs' \\<inter> subsumees subs' = {}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. subsumers subs' \\<inter> subsumees subs' = {}", "using wf_sub_rel assms"], ["proof (prove)\nusing this:\n  ?sub \\<in> subs \\<Longrightarrow>\n  fst (subsumee ?sub) = fst (subsumer ?sub)\n  \\<forall>v\\<in>subsumees subs. \\<exists>!v'. (v, v') \\<in> subs\n  subsumers subs \\<inter> subsumees subs = {}\n  extends g subs sub subs'\n\ngoal (1 subgoal):\n 1. subsumers subs' \\<inter> subsumees subs' = {}", "by auto"], ["proof (state)\nthis:\n  subsumers subs' \\<inter> subsumees subs' = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Thus, extending a well-formed sub-relation yields a well-formed sub-relation.\\<close>"], ["", "lemma (in wf_sub_rel_of) extends_imp_wf_sub_rel_of :\n  assumes \"extends g subs sub subs'\"\n  shows   \"wf_sub_rel_of g subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sub_rel_of g subs'", "using sub_rel_of assms\n      wf_sub_rel.extends_imp_wf_sub_rel[OF wf_sub_rel assms]"], ["proof (prove)\nusing this:\n  sub_rel_of g subs\n  extends g subs sub subs'\n  wf_sub_rel subs'\n\ngoal (1 subgoal):\n 1. wf_sub_rel_of g subs'", "by (simp add : wf_sub_rel_of_def sub_rel_of_def)"], ["", "subsection \\<open>Properties of sub-paths in an extension\\<close>"], ["", "text \\<open>Extending a sub-relation of a graph preserves the existing sub-paths.\\<close>"], ["", "lemma sp_in_extends :\n  assumes \"extends g subs sub subs'\"\n  assumes \"subpath g v1 es v2 subs\"\n  shows   \"subpath g v1 es v2 subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs'", "using assms ces_Un[of v1 es v2 subs \"{sub}\"]"], ["proof (prove)\nusing this:\n  extends g subs sub subs'\n  SubRel.subpath g v1 es v2 subs\n  SubRel.ces v1 es v2 subs \\<Longrightarrow>\n  SubRel.ces v1 es v2 (subs \\<union> {sub})\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs'", "by (simp add : subpath_def sub_rel_of_def)"], ["", "text \\<open>We want to describe how the addition of a subsumption modifies the set of sub-paths in the \ngraph. As in the previous theories, we will focus on a small number of theorems expressing \nsub-paths in extensions as functions of sub-paths in the graphs before extending them (their \nsubsumption relations). \nWe first express sub-paths starting at the subsumee of the new subsumption, then the sub-paths \nstarting at any other vertex.\\<close>"], ["", "text \\<open>First, we are interested in sub-paths starting at the subsumee of the new subsumption. Since \nsuch vertices have no out-edges, these sub-paths must be either empty or must  be sub-paths from \nthe subsumer of this subsumption.\\<close>"], ["", "lemma (in wf_sub_rel_of) sp_in_extends_imp1 :\n  assumes \"extends g subs (v1,v2) subs'\"\n  assumes \"subpath g v1 es v subs'\"\n  shows   \"es = [] \\<or> subpath g v2 es v subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es = [] \\<or> SubRel.subpath g v2 es v subs'", "using assms\n      extends_imp_wf_sub_rel_of[OF assms(1)]\n      wf_sub_rel_of.sp_from_subsumee[of g subs' v1 v2 es v]"], ["proof (prove)\nusing this:\n  extends g subs (v1, v2) subs'\n  SubRel.subpath g v1 es v subs'\n  wf_sub_rel_of g subs'\n  \\<lbrakk>wf_sub_rel_of g subs'; (v1, v2) \\<in> subs';\n   SubRel.subpath g v1 es v subs'; out_edges g v1 = {}\\<rbrakk>\n  \\<Longrightarrow> es = [] \\<or> SubRel.subpath g v2 es v subs'\n\ngoal (1 subgoal):\n 1. es = [] \\<or> SubRel.subpath g v2 es v subs'", "by simp"], ["", "text \\<open>After an extension, sub-paths starting at any other vertex than the new subsumee are either:\n\\begin{itemize}\n  \\item sub-paths of the graph before the extension if they do not ``use'' the new subsumption,\n  \\item made of a finite number of sub-paths of the graph before the extension if they use the \nnew subsumption.\n\\end{itemize}\nIn order to state the lemmas expressing these facts, we first need to introduce the concept of \n\\emph{usage} of a subsumption by a sub-path.\\<close>"], ["", "text \\<open>The idea is that, if a sequence of edges that uses a subsumption @{term sub} is consistent \nwrt.\\ a subsumption relation @{term subs}, then @{term sub} must occur in the transitive closure \nof @{term subs} i.e.\\ the consistency of the sequence directly (and partially) depends on \n@{term sub}. In the case of well-formed subsumption relations, whose transitive \nclosures equal the relations themselves, the dependency of the consistency reduces to the fact that \n@{term sub} is a member of @{term subs}.\\<close>"], ["", "fun uses_sub :: \n  \"('v \\<times> nat) \\<Rightarrow> ('v \\<times> nat) edge list \\<Rightarrow> ('v \\<times> nat) \\<Rightarrow> (('v \\<times> nat) \\<times> ('v \\<times> nat)) \\<Rightarrow> bool\"\nwhere\n  \"uses_sub v1 [] v2 sub     = (v1 \\<noteq> v2 \\<and> sub = (v1,v2))\"\n| \"uses_sub v1 (e#es) v2 sub = (v1 \\<noteq> src e \\<and> sub = (v1,src e) \\<or> uses_sub (tgt e) es v2 sub)\""], ["", "text \\<open>In order for a sequence @{term es} using the subsumption @{term sub} to be consistent wrt.\\ \nto a subsumption relation @{term subs}, the subsumption @{term sub} must occur in the transitive \nclosure of @{term subs}.\\<close>"], ["", "lemma\n  assumes \"uses_sub v1 es v2 sub\"\n  assumes \"ces v1 es v2 subs\"\n  shows   \"sub \\<in> subs\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub \\<in> subs\\<^sup>+", "using assms"], ["proof (prove)\nusing this:\n  uses_sub v1 es v2 sub\n  SubRel.ces v1 es v2 subs\n\ngoal (1 subgoal):\n 1. sub \\<in> subs\\<^sup>+", "by (induction es arbitrary : v1) fastforce+"], ["", "text \\<open>This reduces to the membership of @{term sub} to @{term subs} when the latter is \nwell-formed.\\<close>"], ["", "lemma (in wf_sub_rel)\n  assumes \"uses_sub v1 es v2 sub\"\n  assumes \"ces v1 es v2 subs\"\n  shows   \"sub \\<in> subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub \\<in> subs", "using assms trancl_eq"], ["proof (prove)\nusing this:\n  uses_sub v1 es v2 sub\n  SubRel.ces v1 es v2 subs\n  subs\\<^sup>+ = subs\n\ngoal (1 subgoal):\n 1. sub \\<in> subs", "by (induction es arbitrary : v1) fastforce+"], ["", "text \\<open>Sub-paths prior to the extension do not use the new subsumption.\\<close>"], ["", "lemma extends_and_sp_imp_not_using_sub :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs\"\n  shows   \"\\<not> uses_sub v1 es v2 (v,v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 es v2 (v, v')", "proof (intro notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow> False", "assume \"uses_sub v1 es v2 (v,v')\""], ["proof (state)\nthis:\n  uses_sub v1 es v2 (v, v')\n\ngoal (1 subgoal):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  uses_sub v1 es v2 (v, v')\n\ngoal (1 subgoal):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow> False", "have \"ces v1 es v2 subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.ces v1 es v2 subs", "using assms(2)"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 es v2 subs\n\ngoal (1 subgoal):\n 1. SubRel.ces v1 es v2 subs", "by (simp add : subpath_def)"], ["proof (state)\nthis:\n  SubRel.ces v1 es v2 subs\n\ngoal (1 subgoal):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  uses_sub v1 es v2 (v, v')\n  SubRel.ces v1 es v2 subs", "have \"(v,v') \\<in> subs\\<^sup>+\""], ["proof (prove)\nusing this:\n  uses_sub v1 es v2 (v, v')\n  SubRel.ces v1 es v2 subs\n\ngoal (1 subgoal):\n 1. (v, v') \\<in> subs\\<^sup>+", "by (induction es arbitrary : v1) fastforce+"], ["proof (state)\nthis:\n  (v, v') \\<in> subs\\<^sup>+\n\ngoal (1 subgoal):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\\<^sup>+\n\ngoal (1 subgoal):\n 1. False", "using assms(1)"], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\\<^sup>+\n  extends g subs (v, v') subs'\n\ngoal (1 subgoal):\n 1. False", "unfolding subsumees_conv"], ["proof (prove)\nusing this:\n  (v, v') \\<in> subs\\<^sup>+\n  subsumee (v, v') \\<noteq> subsumer (v, v') \\<and>\n  fst (subsumee (v, v')) = fst (subsumer (v, v')) \\<and>\n  subsumee (v, v') \\<in> Graph.vertices g \\<and>\n  subsumee (v, v') \\<notin> subsumers subs \\<and>\n  subsumee (v, v') \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  subsumer (v, v') \\<in> Graph.vertices g \\<and>\n  subsumer (v, v') \\<notin> {v. \\<exists>v'. (v, v') \\<in> subs} \\<and>\n  out_edges g (subsumee (v, v')) = {} \\<and> subs' = subs \\<union> {(v, v')}\n\ngoal (1 subgoal):\n 1. False", "by (elim conjE) (frule tranclD, force)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Suppose that the empty sequence is a sub-path leading from @{term v1} to @{term v2} after \nthe extension. Then, the empty sequence is a sub-path leading from @{term v1} to @{term v2} \nin the graph before the extension if and only if @{term \"(v1,v2)\"} is not the new subsumption.\\<close>"], ["", "lemma (in wf_sub_rel_of) sp_Nil_in_extends_imp :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 [] v2 subs'\"\n  shows   \"subpath g v1 [] v2 subs \\<longleftrightarrow> (v1 \\<noteq> v \\<or> v2 \\<noteq> v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [] v2 subs = (v1 \\<noteq> v \\<or> v2 \\<noteq> v')", "proof (intro iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. SubRel.subpath g v1 [] v2 subs \\<Longrightarrow>\n    v1 \\<noteq> v \\<or> v2 \\<noteq> v'\n 2. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "case 1"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [] v2 subs\n\ngoal (2 subgoals):\n 1. SubRel.subpath g v1 [] v2 subs \\<Longrightarrow>\n    v1 \\<noteq> v \\<or> v2 \\<noteq> v'\n 2. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "thus ?case"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [] v2 subs\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v'", "using assms(1) \n        extends_and_sp_imp_not_using_sub[OF assms(1), of v1 \"[]\" v2]"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [] v2 subs\n  extends g subs (v, v') subs'\n  SubRel.subpath g v1 [] v2 subs \\<Longrightarrow>\n  \\<not> uses_sub v1 [] v2 (v, v')\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v'", "by auto"], ["proof (state)\nthis:\n  v1 \\<noteq> v \\<or> v2 \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "case 2"], ["proof (state)\nthis:\n  v1 \\<noteq> v \\<or> v2 \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "have \"v1 = v2 \\<or> (v1,v2) \\<in> subs'\" \n  and  \"v1 \\<in> Graph.vertices g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 = v2 \\<or> (v1, v2) \\<in> subs' &&& v1 \\<in> Graph.vertices g", "using assms(2) \n        wf_sub_rel.extends_imp_wf_sub_rel[OF wf_sub_rel assms(1)]"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [] v2 subs'\n  wf_sub_rel subs'\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<or> (v1, v2) \\<in> subs' &&& v1 \\<in> Graph.vertices g", "by (simp_all add : wf_sub_rel.Nil_sp)"], ["proof (state)\nthis:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "moreover"], ["proof (state)\nthis:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "hence \"v1 = v2 \\<or> (v1,v2) \\<in> subs\""], ["proof (prove)\nusing this:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<or> (v1, v2) \\<in> subs", "using assms(1) 2"], ["proof (prove)\nusing this:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n  extends g subs (v, v') subs'\n  v1 \\<noteq> v \\<or> v2 \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<or> (v1, v2) \\<in> subs", "by auto"], ["proof (state)\nthis:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "moreover"], ["proof (state)\nthis:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "have \"v2 \\<in> Graph.vertices g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v2 \\<in> Graph.vertices g", "using assms(2)"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [] v2 subs'\n\ngoal (1 subgoal):\n 1. v2 \\<in> Graph.vertices g", "by (intro lst_of_sp_is_vert)"], ["proof (state)\nthis:\n  v2 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v \\<or> v2 \\<noteq> v' \\<Longrightarrow>\n    SubRel.subpath g v1 [] v2 subs", "ultimately"], ["proof (chain)\npicking this:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n  v1 = v2 \\<or> (v1, v2) \\<in> subs\n  v2 \\<in> Graph.vertices g", "show \"subpath g v1 [] v2 subs\""], ["proof (prove)\nusing this:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n  v1 = v2 \\<or> (v1, v2) \\<in> subs\n  v2 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [] v2 subs", "using sub_rel_of"], ["proof (prove)\nusing this:\n  v1 = v2 \\<or> (v1, v2) \\<in> subs'\n  v1 \\<in> Graph.vertices g\n  v1 = v2 \\<or> (v1, v2) \\<in> subs\n  v2 \\<in> Graph.vertices g\n  sub_rel_of g subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [] v2 subs", "by (auto simp add : subpath_def)"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [] v2 subs\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Thus, sub-paths after the extension that do not use the new subsumption are also sub-paths \nbefore the extension.\\<close>"], ["", "lemma (in wf_sub_rel_of) sp_in_extends_not_using_sub :\n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs'\"\n  assumes \"\\<not> uses_sub v1 es v2 (v,v')\"\n  shows   \"subpath g v1 es v2 subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "using sub_rel_of assms extends_imp_wf_sub_rel_of"], ["proof (prove)\nusing this:\n  sub_rel_of g subs\n  extends g subs (v, v') subs'\n  SubRel.subpath g v1 es v2 subs'\n  \\<not> uses_sub v1 es v2 (v, v')\n  extends g subs ?sub ?subs' \\<Longrightarrow> wf_sub_rel_of g ?subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "by (induction es arbitrary : v1) \n   (auto simp add : sp_Nil_in_extends_imp wf_sub_rel_of.sp_Cons sp_Cons)"], ["", "text \\<open>We are finally able to describe sub-paths starting at any other vertex than the new \nsubsumee after the extension. Such sub-paths are made of a finite number of sub-paths before the \nextension: the usage of the new subsumption between such (sub-)sub-paths makes them sub-paths \nafter the extension. We express this idea as follows. Sub-paths starting at any other vertex \nthan the new subsumee are either: \n\\begin{itemize}\n  \\item sub-paths of the graph before the extension,\n  \\item made of a non-empty prefix that is a sub-path leading to the new subsumee in the original \ngraph and a (potentially empty) suffix that is a sub-path starting at the new subsumer after \nthe extension.\n\\end{itemize}\nFor the second case, the lemma \\verb?sp_in_extends_imp1? as well as the following lemma could be \napplied to the suffix in order to decompose it into sub-paths of the graph before extension \n(combined with the fact that we only consider finite sub-paths, we indirectly obtain that sub-paths \nafter the extension are made of a finite number of sub-paths before the extension, that are made \nconsistent with the new relation by using the new subsumption).\\<close>"], ["", "lemma (in wf_sub_rel_of) sp_in_extends_imp2 : \n  assumes \"extends g subs (v,v') subs'\"\n  assumes \"subpath g v1 es v2 subs'\"\n  assumes \"v1 \\<noteq> v\"\n \n  shows   \"subpath g v1 es v2 subs \\<or> (\\<exists> es1 es2. es = es1 @ es2 \n                                               \\<and> es1 \\<noteq> [] \n                                               \\<and> subpath g v1 es1 v subs \n                                               \\<and> subpath g v es2 v2 subs')\"\n          (is \"?P es v1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "proof (case_tac \"uses_sub v1 es v2 (v,v')\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')\n 2. \\<not> uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "case 1"], ["proof (state)\nthis:\n  uses_sub v1 es v2 (v, v')\n\ngoal (2 subgoals):\n 1. uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')\n 2. \\<not> uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  uses_sub v1 es v2 (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using assms(2,3)"], ["proof (prove)\nusing this:\n  uses_sub v1 es v2 (v, v')\n  SubRel.subpath g v1 es v2 subs'\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "proof (induction es arbitrary : v1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>uses_sub v1 [] v2 (v, v'); SubRel.subpath g v1 [] v2 subs';\n        v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 [] v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             [] = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')\n 2. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "case (Nil v1)"], ["proof (state)\nthis:\n  uses_sub v1 [] v2 (v, v')\n  SubRel.subpath g v1 [] v2 subs'\n  v1 \\<noteq> v\n\ngoal (2 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>uses_sub v1 [] v2 (v, v'); SubRel.subpath g v1 [] v2 subs';\n        v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 [] v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             [] = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')\n 2. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "thus ?case"], ["proof (prove)\nusing this:\n  uses_sub v1 [] v2 (v, v')\n  SubRel.subpath g v1 [] v2 subs'\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [] v2 subs \\<or>\n    (\\<exists>es1 es2.\n        [] = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by auto"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [] v2 subs \\<or>\n  (\\<exists>es1 es2.\n      [] = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "case (Cons edge es v1)"], ["proof (state)\nthis:\n  \\<lbrakk>uses_sub ?v1.0 es v2 (v, v'); SubRel.subpath g ?v1.0 es v2 subs';\n   ?v1.0 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> SubRel.subpath g ?v1.0 es v2 subs \\<or>\n                    (\\<exists>es1 es2.\n                        es = es1 @ es2 \\<and>\n                        es1 \\<noteq> [] \\<and>\n                        SubRel.subpath g ?v1.0 es1 v subs \\<and>\n                        SubRel.subpath g v es2 v2 subs')\n  uses_sub v1 (edge # es) v2 (v, v')\n  SubRel.subpath g v1 (edge # es) v2 subs'\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "hence \"v1 = src edge \\<or> (v1, src edge) \\<in> subs'\"\n    and   \"edge \\<in> edges g\" \n    and   \"subpath g (tgt edge) es v2 subs'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>uses_sub ?v1.0 es v2 (v, v'); SubRel.subpath g ?v1.0 es v2 subs';\n   ?v1.0 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> SubRel.subpath g ?v1.0 es v2 subs \\<or>\n                    (\\<exists>es1 es2.\n                        es = es1 @ es2 \\<and>\n                        es1 \\<noteq> [] \\<and>\n                        SubRel.subpath g ?v1.0 es1 v subs \\<and>\n                        SubRel.subpath g v es2 v2 subs')\n  uses_sub v1 (edge # es) v2 (v, v')\n  SubRel.subpath g v1 (edge # es) v2 subs'\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. v1 = src edge \\<or> (v1, src edge) \\<in> subs' &&&\n    edge \\<in> edges g &&& SubRel.subpath g (tgt edge) es v2 subs'", "using assms(1) extends_imp_wf_sub_rel_of"], ["proof (prove)\nusing this:\n  \\<lbrakk>uses_sub ?v1.0 es v2 (v, v'); SubRel.subpath g ?v1.0 es v2 subs';\n   ?v1.0 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> SubRel.subpath g ?v1.0 es v2 subs \\<or>\n                    (\\<exists>es1 es2.\n                        es = es1 @ es2 \\<and>\n                        es1 \\<noteq> [] \\<and>\n                        SubRel.subpath g ?v1.0 es1 v subs \\<and>\n                        SubRel.subpath g v es2 v2 subs')\n  uses_sub v1 (edge # es) v2 (v, v')\n  SubRel.subpath g v1 (edge # es) v2 subs'\n  v1 \\<noteq> v\n  extends g subs (v, v') subs'\n  extends g subs ?sub ?subs' \\<Longrightarrow> wf_sub_rel_of g ?subs'\n\ngoal (1 subgoal):\n 1. v1 = src edge \\<or> (v1, src edge) \\<in> subs' &&&\n    edge \\<in> edges g &&& SubRel.subpath g (tgt edge) es v2 subs'", "by (simp_all add : wf_sub_rel_of.sp_Cons)"], ["proof (state)\nthis:\n  v1 = src edge \\<or> (v1, src edge) \\<in> subs'\n  edge \\<in> edges g\n  SubRel.subpath g (tgt edge) es v2 subs'\n\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "hence \"subpath g v1 [edge] (tgt edge) subs'\""], ["proof (prove)\nusing this:\n  v1 = src edge \\<or> (v1, src edge) \\<in> subs'\n  edge \\<in> edges g\n  SubRel.subpath g (tgt edge) es v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs'", "using  wf_sub_rel_of.sp_one[OF extends_imp_wf_sub_rel_of[OF assms(1)]]"], ["proof (prove)\nusing this:\n  v1 = src edge \\<or> (v1, src edge) \\<in> subs'\n  edge \\<in> edges g\n  SubRel.subpath g (tgt edge) es v2 subs'\n  SubRel.subpath g ?v1.0 [?e] ?v2.0 subs' =\n  (sub_rel_of g subs' \\<and>\n   (?v1.0 = src ?e \\<or> (?v1.0, src ?e) \\<in> subs') \\<and>\n   ?e \\<in> edges g \\<and>\n   (tgt ?e = ?v2.0 \\<or> (tgt ?e, ?v2.0) \\<in> subs'))\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs'", "by (simp add : subpath_def) fast"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs'\n\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "have \"subpath g v1 [edge] (tgt edge) subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs", "have \"\\<not> uses_sub v1 [edge] (tgt edge) (v,v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 [edge] (tgt edge) (v, v')", "using assms(1) Cons(2,4)"], ["proof (prove)\nusing this:\n  extends g subs (v, v') subs'\n  uses_sub v1 (edge # es) v2 (v, v')\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 [edge] (tgt edge) (v, v')", "by auto"], ["proof (state)\nthis:\n  \\<not> uses_sub v1 [edge] (tgt edge) (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> uses_sub v1 [edge] (tgt edge) (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs", "using assms(1) \\<open>subpath g v1 [edge] (tgt edge) subs'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> uses_sub v1 [edge] (tgt edge) (v, v')\n  extends g subs (v, v') subs'\n  SubRel.subpath g v1 [edge] (tgt edge) subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 [edge] (tgt edge) subs", "by (elim sp_in_extends_not_using_sub)"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n\ngoal (1 subgoal):\n 1. \\<And>a es v1.\n       \\<lbrakk>\\<And>v1.\n                   \\<lbrakk>uses_sub v1 es v2 (v, v');\n                    SubRel.subpath g v1 es v2 subs'; v1 \\<noteq> v\\<rbrakk>\n                   \\<Longrightarrow> SubRel.subpath g v1 es v2 subs \\<or>\n                                     (\\<exists>es1 es2.\n   es = es1 @ es2 \\<and>\n   es1 \\<noteq> [] \\<and>\n   SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs');\n        uses_sub v1 (a # es) v2 (v, v');\n        SubRel.subpath g v1 (a # es) v2 subs'; v1 \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (a # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             a # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "thus ?case"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "proof (case_tac \"tgt edge = v\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge = v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')\n 2. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "case 1"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge = v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge = v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')\n 2. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge = v\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using \\<open>subpath g v1 [edge] (tgt edge) subs\\<close>  \n            \\<open>subpath g (tgt edge) es v2 subs'\\<close>"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge = v\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  SubRel.subpath g (tgt edge) es v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by (intro disjI2, rule_tac ?x=\"[edge]\" in exI) auto"], ["proof (state)\nthis:\n  SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n  (\\<exists>es1 es2.\n      edge # es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "case 2"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "moreover"], ["proof (state)\nthis:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "have \"uses_sub (tgt edge) es v2 (v,v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uses_sub (tgt edge) es v2 (v, v')", "using Cons(2,4)"], ["proof (prove)\nusing this:\n  uses_sub v1 (edge # es) v2 (v, v')\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. uses_sub (tgt edge) es v2 (v, v')", "by simp"], ["proof (state)\nthis:\n  uses_sub (tgt edge) es v2 (v, v')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "ultimately"], ["proof (chain)\npicking this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge \\<noteq> v\n  uses_sub (tgt edge) es v2 (v, v')", "have \"?P es (tgt edge)\""], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge \\<noteq> v\n  uses_sub (tgt edge) es v2 (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g (tgt edge) es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g (tgt edge) es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using \\<open>subpath g (tgt edge) es v2 subs'\\<close>"], ["proof (prove)\nusing this:\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  tgt edge \\<noteq> v\n  uses_sub (tgt edge) es v2 (v, v')\n  SubRel.subpath g (tgt edge) es v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g (tgt edge) es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g (tgt edge) es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by (intro Cons.IH)"], ["proof (state)\nthis:\n  SubRel.subpath g (tgt edge) es v2 subs \\<or>\n  (\\<exists>es1 es2.\n      es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g (tgt edge) es1 v subs \\<and>\n      SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubRel.subpath g v1 [edge] (tgt edge) subs;\n     tgt edge \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                      (\\<exists>es1 es2.\n                          edge # es = es1 @ es2 \\<and>\n                          es1 \\<noteq> [] \\<and>\n                          SubRel.subpath g v1 es1 v subs \\<and>\n                          SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  SubRel.subpath g (tgt edge) es v2 subs \\<or>\n  (\\<exists>es1 es2.\n      es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g (tgt edge) es1 v subs \\<and>\n      SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "proof (elim disjE exE conjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. SubRel.subpath g (tgt edge) es v2 subs \\<Longrightarrow>\n    SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')\n 2. \\<And>es1 es2.\n       \\<lbrakk>es = es1 @ es2; es1 \\<noteq> [];\n        SubRel.subpath g (tgt edge) es1 v subs;\n        SubRel.subpath g v es2 v2 subs'\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             edge # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "case 1"], ["proof (state)\nthis:\n  SubRel.subpath g (tgt edge) es v2 subs\n\ngoal (2 subgoals):\n 1. SubRel.subpath g (tgt edge) es v2 subs \\<Longrightarrow>\n    SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')\n 2. \\<And>es1 es2.\n       \\<lbrakk>es = es1 @ es2; es1 \\<noteq> [];\n        SubRel.subpath g (tgt edge) es1 v subs;\n        SubRel.subpath g v es2 v2 subs'\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             edge # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  SubRel.subpath g (tgt edge) es v2 subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using \\<open>subpath g (tgt edge) es v2 subs'\\<close> \n              \\<open>uses_sub (tgt edge) es v2 (v,v')\\<close> \n              extends_and_sp_imp_not_using_sub[OF assms(1)]"], ["proof (prove)\nusing this:\n  SubRel.subpath g (tgt edge) es v2 subs\n  SubRel.subpath g (tgt edge) es v2 subs'\n  uses_sub (tgt edge) es v2 (v, v')\n  SubRel.subpath g ?v1.0 ?es ?v2.0 subs \\<Longrightarrow>\n  \\<not> uses_sub ?v1.0 ?es ?v2.0 (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by fast"], ["proof (state)\nthis:\n  SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n  (\\<exists>es1 es2.\n      edge # es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. \\<And>es1 es2.\n       \\<lbrakk>es = es1 @ es2; es1 \\<noteq> [];\n        SubRel.subpath g (tgt edge) es1 v subs;\n        SubRel.subpath g v es2 v2 subs'\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             edge # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>es1 es2.\n       \\<lbrakk>es = es1 @ es2; es1 \\<noteq> [];\n        SubRel.subpath g (tgt edge) es1 v subs;\n        SubRel.subpath g v es2 v2 subs'\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             edge # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "case (2 es1 es2)"], ["proof (state)\nthis:\n  es = es1 @ es2\n  es1 \\<noteq> []\n  SubRel.subpath g (tgt edge) es1 v subs\n  SubRel.subpath g v es2 v2 subs'\n\ngoal (1 subgoal):\n 1. \\<And>es1 es2.\n       \\<lbrakk>es = es1 @ es2; es1 \\<noteq> [];\n        SubRel.subpath g (tgt edge) es1 v subs;\n        SubRel.subpath g v es2 v2 subs'\\<rbrakk>\n       \\<Longrightarrow> SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n                         (\\<exists>es1 es2.\n                             edge # es = es1 @ es2 \\<and>\n                             es1 \\<noteq> [] \\<and>\n                             SubRel.subpath g v1 es1 v subs \\<and>\n                             SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  es = es1 @ es2\n  es1 \\<noteq> []\n  SubRel.subpath g (tgt edge) es1 v subs\n  SubRel.subpath g v es2 v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using \\<open>es = es1 @ es2\\<close> \n              \\<open>subpath g v1 [edge] (tgt edge) subs\\<close> \n              \\<open>subpath g v es2 v2 subs'\\<close>"], ["proof (prove)\nusing this:\n  es = es1 @ es2\n  es1 \\<noteq> []\n  SubRel.subpath g (tgt edge) es1 v subs\n  SubRel.subpath g v es2 v2 subs'\n  es = es1 @ es2\n  SubRel.subpath g v1 [edge] (tgt edge) subs\n  SubRel.subpath g v es2 v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n    (\\<exists>es1 es2.\n        edge # es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by (intro disjI2, rule_tac ?x=\"edge # es1\" in exI) (auto simp add : sp_Cons)"], ["proof (state)\nthis:\n  SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n  (\\<exists>es1 es2.\n      edge # es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n  (\\<exists>es1 es2.\n      edge # es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SubRel.subpath g v1 (edge # es) v2 subs \\<or>\n  (\\<exists>es1 es2.\n      edge # es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SubRel.subpath g v1 es v2 subs \\<or>\n  (\\<exists>es1 es2.\n      es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "case 2"], ["proof (state)\nthis:\n  \\<not> uses_sub v1 es v2 (v, v')\n\ngoal (1 subgoal):\n 1. \\<not> uses_sub v1 es v2 (v, v') \\<Longrightarrow>\n    SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> uses_sub v1 es v2 (v, v')\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "using assms(1,2)"], ["proof (prove)\nusing this:\n  \\<not> uses_sub v1 es v2 (v, v')\n  extends g subs (v, v') subs'\n  SubRel.subpath g v1 es v2 subs'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs \\<or>\n    (\\<exists>es1 es2.\n        es = es1 @ es2 \\<and>\n        es1 \\<noteq> [] \\<and>\n        SubRel.subpath g v1 es1 v subs \\<and>\n        SubRel.subpath g v es2 v2 subs')", "by (simp add : sp_in_extends_not_using_sub)"], ["proof (state)\nthis:\n  SubRel.subpath g v1 es v2 subs \\<or>\n  (\\<exists>es1 es2.\n      es = es1 @ es2 \\<and>\n      es1 \\<noteq> [] \\<and>\n      SubRel.subpath g v1 es1 v subs \\<and> SubRel.subpath g v es2 v2 subs')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}