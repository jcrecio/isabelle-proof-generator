{"file_name": "/home/qj213/afp-2021-10-22/thys/InfPathElimination/ArcExt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/InfPathElimination", "problem_names": ["lemma extends_tgt_out_edges :\n  assumes \"extends g e g'\"\n  shows   \"out_edges g' (tgt e) = {}\"", "lemma (in sub_rel_of)\n  assumes \"extends g e g'\"\n  shows   \"sub_rel_of g' subs\"", "lemma sp_in_extends :\n  assumes \"extends g e g'\"\n  assumes \"Graph.subpath g  v1 es v2\"\n  shows   \"Graph.subpath g' v1 es v2\"", "lemma extends_is_tree :\n  assumes \"is_tree g\"\n  assumes \"extends g e g'\"\n  shows   \"is_tree g'\"", "lemma sp_in_extends_w_subs :\n  assumes \"extends g a g'\"\n  assumes \"subpath g  v1 es v2 subs\"\n  shows   \"subpath g' v1 es v2 subs\"", "lemma (in sub_rel_of) sp_from_old_verts_imp_sp_in_old :\n  assumes \"extends g e g'\"\n  assumes \"v1 \\<in> Graph.vertices g\"\n  assumes \"v2 \\<in> Graph.vertices g\"\n  assumes \"subpath g' v1 es v2 subs\"\n  shows   \"subpath g  v1 es v2 subs\"", "lemma (in sub_rel_of) sp_from_tgt_in_extends_is_Nil :\n  assumes \"extends g e g'\"\n  assumes \"subpath g' (tgt e) es v subs\"\n  shows   \"es = []\"", "lemma (in sub_rel_of) sp_to_new_edge_tgt_imp :\n  assumes \"extends g e g'\"\n  assumes \"subpath g' v es (tgt e) subs\"\n  assumes \"v \\<noteq> tgt e\"\n  shows   \"\\<exists> es'. es = es' @ [e] \\<and> e \\<notin> set es' \\<and> subpath g v es' (src e) subs\""], "translations": [["", "lemma extends_tgt_out_edges :\n  assumes \"extends g e g'\"\n  shows   \"out_edges g' (tgt e) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "using assms"], ["proof (prove)\nusing this:\n  extends g e g'\n\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "unfolding vertices_def image_def"], ["proof (prove)\nusing this:\n  src e\n  \\<in> {root g} \\<union> {y. \\<exists>x\\<in>edges g. y = src x} \\<union>\n        {y. \\<exists>x\\<in>edges g. y = tgt x} \\<and>\n  tgt e\n  \\<notin> {root g} \\<union> {y. \\<exists>x\\<in>edges g. y = src x} \\<union>\n           {y. \\<exists>x\\<in>edges g. y = tgt x} \\<and>\n  g' = add_edge g e\n\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "by force"], ["", "text \\<open>Consider a graph equipped with a sub-relation. This relation is also a sub-relation of any \nextension of this graph.\\<close>"], ["", "lemma (in sub_rel_of)\n  assumes \"extends g e g'\"\n  shows   \"sub_rel_of g' subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_rel_of g' subs", "using assms sub_rel_of"], ["proof (prove)\nusing this:\n  extends g e g'\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n\ngoal (1 subgoal):\n 1. sub_rel_of g' subs", "by (auto simp add : sub_rel_of_def vertices_def)"], ["", "text \\<open>Extending a graph with an edge preserves the existing sub-paths.\\<close>"], ["", "lemma sp_in_extends :\n  assumes \"extends g e g'\"\n  assumes \"Graph.subpath g  v1 es v2\"\n  shows   \"Graph.subpath g' v1 es v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph.subpath g' v1 es v2", "using assms"], ["proof (prove)\nusing this:\n  extends g e g'\n  Graph.subpath g v1 es v2\n\ngoal (1 subgoal):\n 1. Graph.subpath g' v1 es v2", "by (auto simp add : Graph.subpath_def vertices_def)"], ["", "subsection \\<open>Extending trees\\<close>"], ["", "text \\<open>We show that extending a rooted graph that is already a tree yields a new tree. Since \nthe empty rooted graph is a tree, all graphs produced using only the extension by edge are trees.\\<close>"], ["", "lemma extends_is_tree :\n  assumes \"is_tree g\"\n  assumes \"extends g e g'\"\n  shows   \"is_tree g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tree g'", "unfolding is_tree_def Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> Graph.vertices g' \\<longrightarrow>\n       (\\<exists>!p. path g' p x)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Graph.vertices g' \\<Longrightarrow> \\<exists>!p. path g' p x", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Graph.vertices g' \\<Longrightarrow> \\<exists>!p. path g' p x", "have \"root g' = root g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. root g' = root g", "using assms(2)"], ["proof (prove)\nusing this:\n  extends g e g'\n\ngoal (1 subgoal):\n 1. root g' = root g", "by simp"], ["proof (state)\nthis:\n  root g' = root g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Graph.vertices g' \\<Longrightarrow> \\<exists>!p. path g' p x", "assume \"v \\<in> Graph.vertices g'\""], ["proof (state)\nthis:\n  v \\<in> Graph.vertices g'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Graph.vertices g' \\<Longrightarrow> \\<exists>!p. path g' p x", "hence \"v \\<in> Graph.vertices g \\<or> v = tgt e\""], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g'\n\ngoal (1 subgoal):\n 1. v \\<in> Graph.vertices g \\<or> v = tgt e", "using assms(2)"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g'\n  extends g e g'\n\ngoal (1 subgoal):\n 1. v \\<in> Graph.vertices g \\<or> v = tgt e", "by (auto simp add : vertices_def)"], ["proof (state)\nthis:\n  v \\<in> Graph.vertices g \\<or> v = tgt e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Graph.vertices g' \\<Longrightarrow> \\<exists>!p. path g' p x", "thus \"\\<exists>!es. path g' es v\""], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g \\<or> v = tgt e\n\ngoal (1 subgoal):\n 1. \\<exists>!es. path g' es v", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "case 1"], ["proof (state)\nthis:\n  v \\<in> Graph.vertices g\n\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "then"], ["proof (chain)\npicking this:\n  v \\<in> Graph.vertices g", "obtain es \n    where \"Graph.path g es v\"\n    and   \"\\<forall> es'. Graph.path g es' v \\<longrightarrow> es' = es\""], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es v;\n         \\<forall>es'. path g es' v \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n  is_tree g\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es v;\n         \\<forall>es'. path g es' v \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Ex1_def is_tree_def"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n  \\<forall>l\\<in>Graph.vertices g.\n     \\<exists>x.\n        path g x l \\<and> (\\<forall>y. path g y l \\<longrightarrow> y = x)\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es v;\n         \\<forall>es'. path g es' v \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  path g es v\n  \\<forall>es'. path g es' v \\<longrightarrow> es' = es\n\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "hence \"Graph.path g' es v\""], ["proof (prove)\nusing this:\n  path g es v\n  \\<forall>es'. path g es' v \\<longrightarrow> es' = es\n\ngoal (1 subgoal):\n 1. path g' es v", "using assms(2) sp_in_extends[OF assms(2)]"], ["proof (prove)\nusing this:\n  path g es v\n  \\<forall>es'. path g es' v \\<longrightarrow> es' = es\n  extends g e g'\n  Graph.subpath g ?v1.0 ?es ?v2.0 \\<Longrightarrow>\n  Graph.subpath g' ?v1.0 ?es ?v2.0\n\ngoal (1 subgoal):\n 1. path g' es v", "by (subst \\<open>root g' = root g\\<close>)"], ["proof (state)\nthis:\n  path g' es v\n\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "moreover"], ["proof (state)\nthis:\n  path g' es v\n\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "have \"\\<forall> es'. Graph.path g' es' v \\<longrightarrow> es' =  es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>es'. path g' es' v \\<longrightarrow> es' = es", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' v \\<Longrightarrow> es' = es", "fix es'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' v \\<Longrightarrow> es' = es", "assume \"Graph.path g' es' v\""], ["proof (state)\nthis:\n  path g' es' v\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' v \\<Longrightarrow> es' = es", "thus \"es' = es\""], ["proof (prove)\nusing this:\n  path g' es' v\n\ngoal (1 subgoal):\n 1. es' = es", "proof (case_tac \"e \\<in> set es'\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>path g' es' v; e \\<in> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es\n 2. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "case 1"], ["proof (state)\nthis:\n  path g' es' v\n  e \\<in> set es'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>path g' es' v; e \\<in> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es\n 2. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "then"], ["proof (chain)\npicking this:\n  path g' es' v\n  e \\<in> set es'", "obtain es'' \n        where \"es' = es'' @ [e]\"\n        and   \"e \\<notin> set es''\""], ["proof (prove)\nusing this:\n  path g' es' v\n  e \\<in> set es'\n\ngoal (1 subgoal):\n 1. (\\<And>es''.\n        \\<lbrakk>es' = es'' @ [e]; e \\<notin> set es''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>Graph.path g' es' v\\<close>\n              Graph.sp_through_de_decomp[OF extends_tgt_out_edges[OF assms(2)]]"], ["proof (prove)\nusing this:\n  path g' es' v\n  e \\<in> set es'\n  path g' es' v\n  \\<lbrakk>Graph.subpath g' ?v1.0 ?es ?v2.0; e \\<in> set ?es\\<rbrakk>\n  \\<Longrightarrow> \\<exists>es'. ?es = es' @ [e] \\<and> e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. (\\<And>es''.\n        \\<lbrakk>es' = es'' @ [e]; e \\<notin> set es''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>path g' es' v; e \\<in> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es\n 2. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "hence \"v = tgt e\""], ["proof (prove)\nusing this:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. v = tgt e", "using \\<open>Graph.path g' es' v\\<close>"], ["proof (prove)\nusing this:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n  path g' es' v\n\ngoal (1 subgoal):\n 1. v = tgt e", "by (simp add : Graph.sp_append_one)"], ["proof (state)\nthis:\n  v = tgt e\n\ngoal (2 subgoals):\n 1. \\<lbrakk>path g' es' v; e \\<in> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es\n 2. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = tgt e\n\ngoal (1 subgoal):\n 1. es' = es", "using assms(2) \n              Graph.lst_of_sp_is_vert[OF \\<open>Graph.path g es v\\<close>]"], ["proof (prove)\nusing this:\n  v = tgt e\n  extends g e g'\n  v \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. es' = es", "by simp"], ["proof (state)\nthis:\n  es' = es\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "case 2"], ["proof (state)\nthis:\n  path g' es' v\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path g' es' v; e \\<notin> set es'\\<rbrakk>\n    \\<Longrightarrow> es' = es", "thus ?thesis"], ["proof (prove)\nusing this:\n  path g' es' v\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. es' = es", "using assms \n              \\<open>\\<forall> es'. Graph.path g es' v \\<longrightarrow> es' = es\\<close> \\<open>Graph.path g' es' v\\<close>"], ["proof (prove)\nusing this:\n  path g' es' v\n  e \\<notin> set es'\n  is_tree g\n  extends g e g'\n  \\<forall>es'. path g es' v \\<longrightarrow> es' = es\n  path g' es' v\n\ngoal (1 subgoal):\n 1. es' = es", "by (auto simp add : Graph.subpath_def vertices_def)"], ["proof (state)\nthis:\n  es' = es\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  es' = es\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>es'. path g' es' v \\<longrightarrow> es' = es\n\ngoal (2 subgoals):\n 1. v \\<in> Graph.vertices g \\<Longrightarrow> \\<exists>!es. path g' es v\n 2. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "ultimately"], ["proof (chain)\npicking this:\n  path g' es v\n  \\<forall>es'. path g' es' v \\<longrightarrow> es' = es", "show ?thesis"], ["proof (prove)\nusing this:\n  path g' es v\n  \\<forall>es'. path g' es' v \\<longrightarrow> es' = es\n\ngoal (1 subgoal):\n 1. \\<exists>!es. path g' es v", "by auto"], ["proof (state)\nthis:\n  \\<exists>!es. path g' es v\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "case 2"], ["proof (state)\nthis:\n  v = tgt e\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "then"], ["proof (chain)\npicking this:\n  v = tgt e", "obtain es \n    where \"Graph.path g es (src e)\"\n    and   \"\\<forall> es'. Graph.path g es' (src e) \\<longrightarrow> es' = es\""], ["proof (prove)\nusing this:\n  v = tgt e\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es (src e);\n         \\<forall>es'.\n            path g es' (src e) \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1,2)"], ["proof (prove)\nusing this:\n  v = tgt e\n  is_tree g\n  extends g e g'\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es (src e);\n         \\<forall>es'.\n            path g es' (src e) \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_tree_def"], ["proof (prove)\nusing this:\n  v = tgt e\n  \\<forall>l\\<in>Graph.vertices g. \\<exists>!p. path g p l\n  extends g e g'\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        \\<lbrakk>path g es (src e);\n         \\<forall>es'.\n            path g es' (src e) \\<longrightarrow> es' = es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  path g es (src e)\n  \\<forall>es'. path g es' (src e) \\<longrightarrow> es' = es\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "hence \"Graph.path g' es (src e)\""], ["proof (prove)\nusing this:\n  path g es (src e)\n  \\<forall>es'. path g es' (src e) \\<longrightarrow> es' = es\n\ngoal (1 subgoal):\n 1. path g' es (src e)", "using sp_in_extends[OF assms(2)]"], ["proof (prove)\nusing this:\n  path g es (src e)\n  \\<forall>es'. path g es' (src e) \\<longrightarrow> es' = es\n  Graph.subpath g ?v1.0 ?es ?v2.0 \\<Longrightarrow>\n  Graph.subpath g' ?v1.0 ?es ?v2.0\n\ngoal (1 subgoal):\n 1. path g' es (src e)", "by (subst \\<open>root g' = root g\\<close>)"], ["proof (state)\nthis:\n  path g' es (src e)\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "hence \"Graph.path g' (es @ [e]) (tgt e)\""], ["proof (prove)\nusing this:\n  path g' es (src e)\n\ngoal (1 subgoal):\n 1. path g' (es @ [e]) (tgt e)", "using assms(2)"], ["proof (prove)\nusing this:\n  path g' es (src e)\n  extends g e g'\n\ngoal (1 subgoal):\n 1. path g' (es @ [e]) (tgt e)", "by (auto simp add : Graph.sp_append_one)"], ["proof (state)\nthis:\n  path g' (es @ [e]) (tgt e)\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "moreover"], ["proof (state)\nthis:\n  path g' (es @ [e]) (tgt e)\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "have \"\\<forall> es'. Graph.path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>es'. path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "fix es'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "assume \"Graph.path g' es' (tgt e)\""], ["proof (state)\nthis:\n  path g' es' (tgt e)\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "moreover"], ["proof (state)\nthis:\n  path g' es' (tgt e)\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "hence \"e \\<in> set es'\""], ["proof (prove)\nusing this:\n  path g' es' (tgt e)\n\ngoal (1 subgoal):\n 1. e \\<in> set es'", "using assms \n            sp_ends_in_tgt_imp_mem[of e g \"root g\" es']"], ["proof (prove)\nusing this:\n  path g' es' (tgt e)\n  is_tree g\n  extends g e g'\n  \\<lbrakk>tgt e \\<notin> Graph.vertices g; root g \\<noteq> tgt e;\n   Graph.subpath (add_edge g e) (root g) es' (tgt e)\\<rbrakk>\n  \\<Longrightarrow> e \\<in> set es'\n\ngoal (1 subgoal):\n 1. e \\<in> set es'", "by (auto simp add : Graph.subpath_def vertices_def)"], ["proof (state)\nthis:\n  e \\<in> set es'\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "moreover"], ["proof (state)\nthis:\n  e \\<in> set es'\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "have   \"out_edges g' (tgt e) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "using assms"], ["proof (prove)\nusing this:\n  is_tree g\n  extends g e g'\n\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "by (intro extends_tgt_out_edges)"], ["proof (state)\nthis:\n  out_edges g' (tgt e) = {}\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "ultimately"], ["proof (chain)\npicking this:\n  path g' es' (tgt e)\n  e \\<in> set es'\n  out_edges g' (tgt e) = {}", "have \"\\<exists> es''. es' = es'' @ [e] \\<and> e \\<notin> set es''\""], ["proof (prove)\nusing this:\n  path g' es' (tgt e)\n  e \\<in> set es'\n  out_edges g' (tgt e) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>es''. es' = es'' @ [e] \\<and> e \\<notin> set es''", "by (elim Graph.sp_through_de_decomp)"], ["proof (state)\nthis:\n  \\<exists>es''. es' = es'' @ [e] \\<and> e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "then"], ["proof (chain)\npicking this:\n  \\<exists>es''. es' = es'' @ [e] \\<and> e \\<notin> set es''", "obtain es'' \n      where \"es' = es'' @ [e]\" \n      and   \"e \\<notin> set es''\""], ["proof (prove)\nusing this:\n  \\<exists>es''. es' = es'' @ [e] \\<and> e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. (\\<And>es''.\n        \\<lbrakk>es' = es'' @ [e]; e \\<notin> set es''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "hence \"Graph.path g' es'' (src e)\""], ["proof (prove)\nusing this:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. path g' es'' (src e)", "using \\<open>Graph.path g' es'  (tgt e)\\<close>"], ["proof (prove)\nusing this:\n  es' = es'' @ [e]\n  e \\<notin> set es''\n  path g' es' (tgt e)\n\ngoal (1 subgoal):\n 1. path g' es'' (src e)", "by (auto simp add : Graph.sp_append_one)"], ["proof (state)\nthis:\n  path g' es'' (src e)\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "hence \"Graph.path g es'' (src e)\""], ["proof (prove)\nusing this:\n  path g' es'' (src e)\n\ngoal (1 subgoal):\n 1. path g es'' (src e)", "using assms(2) \\<open>e \\<notin> set es''\\<close>"], ["proof (prove)\nusing this:\n  path g' es'' (src e)\n  extends g e g'\n  e \\<notin> set es''\n\ngoal (1 subgoal):\n 1. path g es'' (src e)", "by (auto simp add : Graph.subpath_def vertices_def)"], ["proof (state)\nthis:\n  path g es'' (src e)\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "hence \"es'' = es\""], ["proof (prove)\nusing this:\n  path g es'' (src e)\n\ngoal (1 subgoal):\n 1. es'' = es", "using \\<open>\\<forall> as'. Graph.path g as' (src e) \\<longrightarrow> as' = es\\<close>"], ["proof (prove)\nusing this:\n  path g es'' (src e)\n  \\<forall>as'. path g as' (src e) \\<longrightarrow> as' = es\n\ngoal (1 subgoal):\n 1. es'' = es", "by simp"], ["proof (state)\nthis:\n  es'' = es\n\ngoal (1 subgoal):\n 1. \\<And>es'. path g' es' (tgt e) \\<Longrightarrow> es' = es @ [e]", "thus \"es' = es @ [e]\""], ["proof (prove)\nusing this:\n  es'' = es\n\ngoal (1 subgoal):\n 1. es' = es @ [e]", "using \\<open>es' = es'' @ [e]\\<close>"], ["proof (prove)\nusing this:\n  es'' = es\n  es' = es'' @ [e]\n\ngoal (1 subgoal):\n 1. es' = es @ [e]", "by simp"], ["proof (state)\nthis:\n  es' = es @ [e]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>es'. path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]\n\ngoal (1 subgoal):\n 1. v = tgt e \\<Longrightarrow> \\<exists>!es. path g' es v", "ultimately"], ["proof (chain)\npicking this:\n  path g' (es @ [e]) (tgt e)\n  \\<forall>es'. path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]", "show ?thesis"], ["proof (prove)\nusing this:\n  path g' (es @ [e]) (tgt e)\n  \\<forall>es'. path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]\n\ngoal (1 subgoal):\n 1. \\<exists>!es. path g' es v", "using 2"], ["proof (prove)\nusing this:\n  path g' (es @ [e]) (tgt e)\n  \\<forall>es'. path g' es' (tgt e) \\<longrightarrow> es' = es @ [e]\n  v = tgt e\n\ngoal (1 subgoal):\n 1. \\<exists>!es. path g' es v", "by auto"], ["proof (state)\nthis:\n  \\<exists>!es. path g' es v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!es. path g' es v\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Properties of sub-paths in an extension\\<close>"], ["", "text \\<open>Extending a graph by an edge preserves the existing sub-paths.\\<close>"], ["", "lemma sp_in_extends_w_subs :\n  assumes \"extends g a g'\"\n  assumes \"subpath g  v1 es v2 subs\"\n  shows   \"subpath g' v1 es v2 subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g' v1 es v2 subs", "using assms"], ["proof (prove)\nusing this:\n  extends g a g'\n  SubRel.subpath g v1 es v2 subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g' v1 es v2 subs", "by (auto simp add : subpath_def sub_rel_of_def vertices_def)"], ["", "text \\<open>In an extension, the target of the new edge has no out-edges. Thus sub-paths of the \nextension starting and ending in old vertices are sub-paths of the graph prior to its extension.\\<close>"], ["", "lemma (in sub_rel_of) sp_from_old_verts_imp_sp_in_old :\n  assumes \"extends g e g'\"\n  assumes \"v1 \\<in> Graph.vertices g\"\n  assumes \"v2 \\<in> Graph.vertices g\"\n  assumes \"subpath g' v1 es v2 subs\"\n  shows   \"subpath g  v1 es v2 subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "have \"e \\<notin> set es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<notin> set es", "proof (intro notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. e \\<in> set es \\<Longrightarrow> False", "assume \"e \\<in> set es\""], ["proof (state)\nthis:\n  e \\<in> set es\n\ngoal (1 subgoal):\n 1. e \\<in> set es \\<Longrightarrow> False", "have \"v2 = tgt e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v2 = tgt e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v2 = tgt e", "have \"tgt e \\<notin> subsumees subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tgt e \\<notin> subsumees subs", "using sub_rel_of assms(1)"], ["proof (prove)\nusing this:\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  extends g e g'\n\ngoal (1 subgoal):\n 1. tgt e \\<notin> subsumees subs", "by fast"], ["proof (state)\nthis:\n  tgt e \\<notin> subsumees subs\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "moreover"], ["proof (state)\nthis:\n  tgt e \\<notin> subsumees subs\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "have  \"out_edges g' (tgt e) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "using assms(1)"], ["proof (prove)\nusing this:\n  extends g e g'\n\ngoal (1 subgoal):\n 1. out_edges g' (tgt e) = {}", "by (rule extends_tgt_out_edges)"], ["proof (state)\nthis:\n  out_edges g' (tgt e) = {}\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "ultimately"], ["proof (chain)\npicking this:\n  tgt e \\<notin> subsumees subs\n  out_edges g' (tgt e) = {}", "have \"\\<exists> es'. es = es' @ [e] \\<and> e \\<notin> set es'\""], ["proof (prove)\nusing this:\n  tgt e \\<notin> subsumees subs\n  out_edges g' (tgt e) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'", "using  assms(4) \\<open>e \\<in> set es\\<close>"], ["proof (prove)\nusing this:\n  tgt e \\<notin> subsumees subs\n  out_edges g' (tgt e) = {}\n  SubRel.subpath g' v1 es v2 subs\n  e \\<in> set es\n\ngoal (1 subgoal):\n 1. \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'", "by (intro sp_through_de_decomp)"], ["proof (state)\nthis:\n  \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "then"], ["proof (chain)\npicking this:\n  \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'", "obtain es' where \"es = es' @ [e]\" \"e \\<notin> set es'\""], ["proof (prove)\nusing this:\n  \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. (\\<And>es'.\n        \\<lbrakk>es = es' @ [e]; e \\<notin> set es'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  es = es' @ [e]\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "hence \"tgt e = v2 \\<or> (tgt e,v2) \\<in> subs\\<^sup>+\""], ["proof (prove)\nusing this:\n  es = es' @ [e]\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. tgt e = v2 \\<or> (tgt e, v2) \\<in> subs\\<^sup>+", "using assms(4)"], ["proof (prove)\nusing this:\n  es = es' @ [e]\n  e \\<notin> set es'\n  SubRel.subpath g' v1 es v2 subs\n\ngoal (1 subgoal):\n 1. tgt e = v2 \\<or> (tgt e, v2) \\<in> subs\\<^sup>+", "by (simp add : sp_append_one)"], ["proof (state)\nthis:\n  tgt e = v2 \\<or> (tgt e, v2) \\<in> subs\\<^sup>+\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "thus ?thesis"], ["proof (prove)\nusing this:\n  tgt e = v2 \\<or> (tgt e, v2) \\<in> subs\\<^sup>+\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "using \\<open>tgt e \\<notin> subsumees subs\\<close> tranclD[of \"tgt e\" v2 subs]"], ["proof (prove)\nusing this:\n  tgt e = v2 \\<or> (tgt e, v2) \\<in> subs\\<^sup>+\n  tgt e \\<notin> subsumees subs\n  (tgt e, v2) \\<in> subs\\<^sup>+ \\<Longrightarrow>\n  \\<exists>z. (tgt e, z) \\<in> subs \\<and> (z, v2) \\<in> subs\\<^sup>*\n\ngoal (1 subgoal):\n 1. v2 = tgt e", "by force"], ["proof (state)\nthis:\n  v2 = tgt e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v2 = tgt e\n\ngoal (1 subgoal):\n 1. e \\<in> set es \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v2 = tgt e\n\ngoal (1 subgoal):\n 1. False", "using assms(1,3)"], ["proof (prove)\nusing this:\n  v2 = tgt e\n  extends g e g'\n  v2 \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e \\<notin> set es\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "thus ?thesis"], ["proof (prove)\nusing this:\n  e \\<notin> set es\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "using sub_rel_of assms"], ["proof (prove)\nusing this:\n  e \\<notin> set es\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  extends g e g'\n  v1 \\<in> Graph.vertices g\n  v2 \\<in> Graph.vertices g\n  SubRel.subpath g' v1 es v2 subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v1 es v2 subs", "unfolding subpath_def sub_rel_of_def"], ["proof (prove)\nusing this:\n  e \\<notin> set es\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  extends g e g'\n  v1 \\<in> Graph.vertices g\n  v2 \\<in> Graph.vertices g\n  SubRel.vertices subs \\<subseteq> Graph.vertices g' \\<and>\n  v1 \\<in> Graph.vertices g' \\<and>\n  SubRel.ces v1 es v2 subs \\<and> set es \\<subseteq> edges g'\n\ngoal (1 subgoal):\n 1. SubRel.vertices subs \\<subseteq> Graph.vertices g \\<and>\n    v1 \\<in> Graph.vertices g \\<and>\n    SubRel.ces v1 es v2 subs \\<and> set es \\<subseteq> edges g", "by auto"], ["proof (state)\nthis:\n  SubRel.subpath g v1 es v2 subs\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For the same reason, sub-paths starting at the target of the new edge are empty.\\<close>"], ["", "lemma (in sub_rel_of) sp_from_tgt_in_extends_is_Nil :\n  assumes \"extends g e g'\"\n  assumes \"subpath g' (tgt e) es v subs\"\n  shows   \"es = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es = []", "using sub_rel_of assms\n      extends_tgt_out_edges\n      sp_from_de_empty[of \"tgt e\" subs g' es v]"], ["proof (prove)\nusing this:\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  extends g e g'\n  SubRel.subpath g' (tgt e) es v subs\n  extends ?g ?e ?g' \\<Longrightarrow> out_edges ?g' (tgt ?e) = {}\n  \\<lbrakk>tgt e \\<notin> subsumees subs; out_edges g' (tgt e) = {};\n   SubRel.subpath g' (tgt e) es v subs\\<rbrakk>\n  \\<Longrightarrow> es = []\n\ngoal (1 subgoal):\n 1. es = []", "by fast"], ["", "text \\<open>Moreover, a sub-path @{term es} starting in another vertex than the target of the new edge \n@{term e} but ending in this target has @{term e} as last element. This occurrence of @{term e} is \nunique among @{term es}. The prefix of @{term es} preceding @{term e} is a sub-path leading at the \nsource of @{term e} in the original graph.\\<close>"], ["", "lemma (in sub_rel_of) sp_to_new_edge_tgt_imp :\n  assumes \"extends g e g'\"\n  assumes \"subpath g' v es (tgt e) subs\"\n  assumes \"v \\<noteq> tgt e\"\n  shows   \"\\<exists> es'. es = es' @ [e] \\<and> e \\<notin> set es' \\<and> subpath g v es' (src e) subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "obtain es' where \"es = es' @ [e]\" and \"e \\<notin> set es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>es'.\n        \\<lbrakk>es = es' @ [e]; e \\<notin> set es'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sub_rel_of assms(1,2,3)\n        extends_tgt_out_edges[OF assms(1)]\n        sp_through_de_decomp[of e subs g' v es \"tgt e\"]\n        sp_ends_in_tgt_imp_mem[of e v es]"], ["proof (prove)\nusing this:\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  extends g e g'\n  SubRel.subpath g' v es (tgt e) subs\n  v \\<noteq> tgt e\n  out_edges g' (tgt e) = {}\n  \\<lbrakk>tgt e \\<notin> subsumees subs; out_edges g' (tgt e) = {};\n   SubRel.subpath g' v es (tgt e) subs; e \\<in> set es\\<rbrakk>\n  \\<Longrightarrow> \\<exists>es'. es = es' @ [e] \\<and> e \\<notin> set es'\n  \\<lbrakk>tgt e \\<notin> Graph.vertices g; v \\<noteq> tgt e;\n   SubRel.subpath (add_edge g e) v es (tgt e) subs\\<rbrakk>\n  \\<Longrightarrow> e \\<in> set es\n\ngoal (1 subgoal):\n 1. (\\<And>es'.\n        \\<lbrakk>es = es' @ [e]; e \\<notin> set es'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  es = es' @ [e]\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "moreover"], ["proof (state)\nthis:\n  es = es' @ [e]\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "have \"subpath g v es' (src e) subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "have \"v \\<in> Graph.vertices g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> Graph.vertices g", "using assms(1,3) fst_of_sp_is_vert[OF assms(2)]"], ["proof (prove)\nusing this:\n  extends g e g'\n  v \\<noteq> tgt e\n  v \\<in> Graph.vertices g'\n\ngoal (1 subgoal):\n 1. v \\<in> Graph.vertices g", "by (auto simp add : vertices_def)"], ["proof (state)\nthis:\n  v \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "moreover"], ["proof (state)\nthis:\n  v \\<in> Graph.vertices g\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "have \"SubRel.subpath g' v es' (src e) subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SubRel.subpath g' v es' (src e) subs", "using assms(2) \\<open>es = es' @ [e]\\<close>"], ["proof (prove)\nusing this:\n  SubRel.subpath g' v es (tgt e) subs\n  es = es' @ [e]\n\ngoal (1 subgoal):\n 1. SubRel.subpath g' v es' (src e) subs", "by (simp add : sp_append_one)"], ["proof (state)\nthis:\n  SubRel.subpath g' v es' (src e) subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> Graph.vertices g\n  SubRel.subpath g' v es' (src e) subs", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n  SubRel.subpath g' v es' (src e) subs\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "using assms(1) sub_rel_of \\<open>e \\<notin> set es'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n  SubRel.subpath g' v es' (src e) subs\n  extends g e g'\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. SubRel.subpath g v es' (src e) subs", "unfolding subpath_def"], ["proof (prove)\nusing this:\n  v \\<in> Graph.vertices g\n  sub_rel_of g' subs \\<and>\n  v \\<in> Graph.vertices g' \\<and>\n  SubRel.ces v es' (src e) subs \\<and> set es' \\<subseteq> edges g'\n  extends g e g'\n  SubRel.vertices subs \\<subseteq> Graph.vertices g\n  e \\<notin> set es'\n\ngoal (1 subgoal):\n 1. sub_rel_of g subs \\<and>\n    v \\<in> Graph.vertices g \\<and>\n    SubRel.ces v es' (src e) subs \\<and> set es' \\<subseteq> edges g", "by (auto simp add : sub_rel_of_def)"], ["proof (state)\nthis:\n  SubRel.subpath g v es' (src e) subs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SubRel.subpath g v es' (src e) subs\n\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "ultimately"], ["proof (chain)\npicking this:\n  es = es' @ [e]\n  e \\<notin> set es'\n  SubRel.subpath g v es' (src e) subs", "show ?thesis"], ["proof (prove)\nusing this:\n  es = es' @ [e]\n  e \\<notin> set es'\n  SubRel.subpath g v es' (src e) subs\n\ngoal (1 subgoal):\n 1. \\<exists>es'.\n       es = es' @ [e] \\<and>\n       e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs", "by blast"], ["proof (state)\nthis:\n  \\<exists>es'.\n     es = es' @ [e] \\<and>\n     e \\<notin> set es' \\<and> SubRel.subpath g v es' (src e) subs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}