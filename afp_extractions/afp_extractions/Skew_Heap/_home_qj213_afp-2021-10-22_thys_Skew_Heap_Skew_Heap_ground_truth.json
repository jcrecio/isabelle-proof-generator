{"file_name": "/home/qj213/afp-2021-10-22/thys/Skew_Heap/Skew_Heap.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Skew_Heap", "problem_names": ["lemma merge_code: \"merge t1 t2 =\n  (case t1 of\n   Leaf \\<Rightarrow> t2 |\n   Node l1 a1 r1 \\<Rightarrow> (case t2 of\n     Leaf \\<Rightarrow> t1 |\n     Node l2 a2 r2 \\<Rightarrow> \n       (if a1 \\<le> a2\n        then Node (merge t2 r1) a1 l1\n        else Node (merge t1 r2) a2 l2)))\"", "lemma size_merge: \"size(merge t1 t2) = size t1 + size t2\"", "lemma size_merge2: \"size(merge2 t1 t2) = size t1 + size t2\"", "lemma mset_merge: \"mset_tree (merge t1 t2) = mset_tree t1 + mset_tree t2\"", "lemma set_merge: \"set_tree (merge t1 t2) = set_tree t1 \\<union> set_tree t2\"", "lemma heap_merge:\n  \"\\<lbrakk> heap t1;  heap t2 \\<rbrakk> \\<Longrightarrow> heap (merge t1 t2)\""], "translations": [["", "lemma merge_code: \"merge t1 t2 =\n  (case t1 of\n   Leaf \\<Rightarrow> t2 |\n   Node l1 a1 r1 \\<Rightarrow> (case t2 of\n     Leaf \\<Rightarrow> t1 |\n     Node l2 a2 r2 \\<Rightarrow> \n       (if a1 \\<le> a2\n        then Node (merge t2 r1) a1 l1\n        else Node (merge t1 r2) a2 l2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. merge t1 t2 =\n    (case t1 of \\<langle>\\<rangle> \\<Rightarrow> t2\n     | \\<langle>l1, a1, r1\\<rangle> \\<Rightarrow>\n         case t2 of \\<langle>\\<rangle> \\<Rightarrow> t1\n         | \\<langle>l2, a2, r2\\<rangle> \\<Rightarrow>\n             if a1 \\<le> a2 then \\<langle>merge t2 r1, a1, l1\\<rangle>\n             else \\<langle>merge t1 r2, a2, l2\\<rangle>)", "by(auto split: tree.split)"], ["", "text\\<open>An alternative version that always walks to the Leaf of both heaps:\\<close>"], ["", "function merge2 :: \"('a::linorder) tree \\<Rightarrow> 'a tree \\<Rightarrow> 'a tree\" where\n\"merge2 Leaf Leaf = Leaf\" |\n\"merge2 Leaf (Node l2 a2 r2) = Node (merge2 r2 Leaf) a2 l2\" |\n\"merge2 (Node l1 a1 r1) Leaf = Node (merge2 r1 Leaf) a1 l1\" |\n\"merge2 (Node l1 a1 r1) (Node l2 a2 r2) =\n   (if a1 \\<le> a2\n    then Node (merge2 (Node l2 a2 r2) r1) a1 l1\n    else Node (merge2 (Node l1 a1 r1) r2) a2 l2)\""], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>x =\n                (\\<langle>\\<rangle>, \\<langle>\\<rangle>) \\<Longrightarrow>\n                P;\n        \\<And>l2 a2 r2.\n           x =\n           (\\<langle>\\<rangle>,\n            \\<langle>l2, a2, r2\\<rangle>) \\<Longrightarrow>\n           P;\n        \\<And>l1 a1 r1.\n           x =\n           (\\<langle>l1, a1, r1\\<rangle>,\n            \\<langle>\\<rangle>) \\<Longrightarrow>\n           P;\n        \\<And>l1 a1 r1 l2 a2 r2.\n           x =\n           (\\<langle>l1, a1, r1\\<rangle>,\n            \\<langle>l2, a2, r2\\<rangle>) \\<Longrightarrow>\n           P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. (\\<langle>\\<rangle>, \\<langle>\\<rangle>) =\n    (\\<langle>\\<rangle>, \\<langle>\\<rangle>) \\<Longrightarrow>\n    \\<langle>\\<rangle> = \\<langle>\\<rangle>\n 3. \\<And>l2 a2 r2.\n       (\\<langle>\\<rangle>, \\<langle>\\<rangle>) =\n       (\\<langle>\\<rangle>, \\<langle>l2, a2, r2\\<rangle>) \\<Longrightarrow>\n       \\<langle>\\<rangle> =\n       \\<langle>merge2_sumC (r2, \\<langle>\\<rangle>), a2, l2\\<rangle>\n 4. \\<And>l1 a1 r1.\n       (\\<langle>\\<rangle>, \\<langle>\\<rangle>) =\n       (\\<langle>l1, a1, r1\\<rangle>, \\<langle>\\<rangle>) \\<Longrightarrow>\n       \\<langle>\\<rangle> =\n       \\<langle>merge2_sumC (r1, \\<langle>\\<rangle>), a1, l1\\<rangle>\n 5. \\<And>l1 a1 r1 l2 a2 r2.\n       (\\<langle>\\<rangle>, \\<langle>\\<rangle>) =\n       (\\<langle>l1, a1, r1\\<rangle>,\n        \\<langle>l2, a2, r2\\<rangle>) \\<Longrightarrow>\n       \\<langle>\\<rangle> =\n       (if a1 \\<le> a2\n        then \\<langle>merge2_sumC (\\<langle>l2, a2, r2\\<rangle>, r1), a1,\n              l1\\<rangle>\n        else \\<langle>merge2_sumC (\\<langle>l1, a1, r1\\<rangle>, r2), a2,\n              l2\\<rangle>)\n 6. \\<And>l2 a2 r2 l2a a2a r2a.\n       (\\<langle>\\<rangle>, \\<langle>l2, a2, r2\\<rangle>) =\n       (\\<langle>\\<rangle>,\n        \\<langle>l2a, a2a, r2a\\<rangle>) \\<Longrightarrow>\n       \\<langle>merge2_sumC (r2, \\<langle>\\<rangle>), a2, l2\\<rangle> =\n       \\<langle>merge2_sumC (r2a, \\<langle>\\<rangle>), a2a, l2a\\<rangle>\n 7. \\<And>l2 a2 r2 l1 a1 r1.\n       (\\<langle>\\<rangle>, \\<langle>l2, a2, r2\\<rangle>) =\n       (\\<langle>l1, a1, r1\\<rangle>, \\<langle>\\<rangle>) \\<Longrightarrow>\n       \\<langle>merge2_sumC (r2, \\<langle>\\<rangle>), a2, l2\\<rangle> =\n       \\<langle>merge2_sumC (r1, \\<langle>\\<rangle>), a1, l1\\<rangle>\n 8. \\<And>l2 a2 r2 l1 a1 r1 l2a a2a r2a.\n       (\\<langle>\\<rangle>, \\<langle>l2, a2, r2\\<rangle>) =\n       (\\<langle>l1, a1, r1\\<rangle>,\n        \\<langle>l2a, a2a, r2a\\<rangle>) \\<Longrightarrow>\n       \\<langle>merge2_sumC (r2, \\<langle>\\<rangle>), a2, l2\\<rangle> =\n       (if a1 \\<le> a2a\n        then \\<langle>merge2_sumC (\\<langle>l2a, a2a, r2a\\<rangle>, r1), a1,\n              l1\\<rangle>\n        else \\<langle>merge2_sumC (\\<langle>l1, a1, r1\\<rangle>, r2a), a2a,\n              l2a\\<rangle>)\n 9. \\<And>l1 a1 r1 l1a a1a r1a.\n       (\\<langle>l1, a1, r1\\<rangle>, \\<langle>\\<rangle>) =\n       (\\<langle>l1a, a1a, r1a\\<rangle>,\n        \\<langle>\\<rangle>) \\<Longrightarrow>\n       \\<langle>merge2_sumC (r1, \\<langle>\\<rangle>), a1, l1\\<rangle> =\n       \\<langle>merge2_sumC (r1a, \\<langle>\\<rangle>), a1a, l1a\\<rangle>\n 10. \\<And>l1 a1 r1 l1a a1a r1a l2 a2 r2.\n        (\\<langle>l1, a1, r1\\<rangle>, \\<langle>\\<rangle>) =\n        (\\<langle>l1a, a1a, r1a\\<rangle>,\n         \\<langle>l2, a2, r2\\<rangle>) \\<Longrightarrow>\n        \\<langle>merge2_sumC (r1, \\<langle>\\<rangle>), a1, l1\\<rangle> =\n        (if a1a \\<le> a2\n         then \\<langle>merge2_sumC (\\<langle>l2, a2, r2\\<rangle>, r1a), a1a,\n               l1a\\<rangle>\n         else \\<langle>merge2_sumC (\\<langle>l1a, a1a, r1a\\<rangle>, r2),\n               a2, l2\\<rangle>)\nA total of 11 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All merge2_dom", "by (relation \"measure (\\<lambda>(x, y). size x + size y)\") auto"], ["", "lemma size_merge: \"size(merge t1 t2) = size t1 + size t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (merge t1 t2) = size t1 + size t2", "by(induction t1 t2 rule: merge.induct) auto"], ["", "lemma size_merge2: \"size(merge2 t1 t2) = size t1 + size t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (merge2 t1 t2) = size t1 + size t2", "by(induction t1 t2 rule: merge2.induct) auto"], ["", "lemma mset_merge: \"mset_tree (merge t1 t2) = mset_tree t1 + mset_tree t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_tree (merge t1 t2) = mset_tree t1 + mset_tree t2", "by (induction t1 t2 rule: merge.induct) (auto simp add: ac_simps)"], ["", "lemma set_merge: \"set_tree (merge t1 t2) = set_tree t1 \\<union> set_tree t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_tree (merge t1 t2) = set_tree t1 \\<union> set_tree t2", "by (metis mset_merge set_mset_tree set_mset_union)"], ["", "lemma heap_merge:\n  \"\\<lbrakk> heap t1;  heap t2 \\<rbrakk> \\<Longrightarrow> heap (merge t1 t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>heap t1; heap t2\\<rbrakk> \\<Longrightarrow> heap (merge t1 t2)", "by (induction t1 t2 rule: merge.induct)(auto simp: ball_Un set_merge)"], ["", "interpretation skew_heap: Heap_Merge\nwhere merge = merge"], ["proof (prove)\ngoal (1 subgoal):\n 1. Heap_Merge merge", "proof(standard, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> mset_tree (merge q1 q2) =\n                         mset_tree q1 + mset_tree q2\n 2. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> heap (merge q1 q2)", "case 1"], ["proof (state)\nthis:\n  heap q1_\n  heap q2_\n\ngoal (2 subgoals):\n 1. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> mset_tree (merge q1 q2) =\n                         mset_tree q1 + mset_tree q2\n 2. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> heap (merge q1 q2)", "thus ?case"], ["proof (prove)\nusing this:\n  heap q1_\n  heap q2_\n\ngoal (1 subgoal):\n 1. mset_tree (merge q1_ q2_) = mset_tree q1_ + mset_tree q2_", "by(simp add: mset_merge)"], ["proof (state)\nthis:\n  mset_tree (merge q1_ q2_) = mset_tree q1_ + mset_tree q2_\n\ngoal (1 subgoal):\n 1. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> heap (merge q1 q2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> heap (merge q1 q2)", "case 2"], ["proof (state)\nthis:\n  heap q1_\n  heap q2_\n\ngoal (1 subgoal):\n 1. \\<And>q1 q2.\n       \\<lbrakk>heap q1; heap q2\\<rbrakk>\n       \\<Longrightarrow> heap (merge q1 q2)", "thus ?case"], ["proof (prove)\nusing this:\n  heap q1_\n  heap q2_\n\ngoal (1 subgoal):\n 1. heap (merge q1_ q2_)", "by(simp add: heap_merge)"], ["proof (state)\nthis:\n  heap (merge q1_ q2_)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}