{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata/library/More_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata", "problem_names": ["lemma (in -) hd_butlast_last_id:\n  \"hd xs # tl (butlast xs) @ [last xs] = xs\" if \"length xs > 1\"", "lemma (in -) list_all_map:\n  assumes inv: \"\\<And> x. P x \\<Longrightarrow> \\<exists> y. f y = x\"\n    and all: \"list_all P as\"\n  shows \"\\<exists> as'. map f as' = as\"", "lemma list_all2_op_map_iff:\n  \"list_all2 (\\<lambda> a b. b = f a) xs ys \\<longleftrightarrow> map f xs = ys\"", "lemma list_all2_last:\n  \"R (last xs) (last ys)\" if \"list_all2 R xs ys\" \"xs \\<noteq> []\"", "lemma list_all2_set1:\n  \"\\<forall>x\\<in>set xs. \\<exists>xa\\<in>set as. P x xa\" if \"list_all2 P xs as\"", "lemma list_all2_swap:\n  \"list_all2 P xs ys \\<longleftrightarrow> list_all2 (\\<lambda> x y. P y x) ys xs\"", "lemma list_all2_set2:\n  \"\\<forall>x\\<in>set as. \\<exists>xa\\<in>set xs. P xa x\" if \"list_all2 P xs as\"", "lemma distinct_length_le:\"finite s \\<Longrightarrow> set xs \\<subseteq> s \\<Longrightarrow> distinct xs \\<Longrightarrow> length xs \\<le> card s\"", "lemma filter_eq_appendD:\n  \"\\<exists> xs' ys'. filter P xs' = xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\" if \"filter P as = xs @ ys\"", "lemma list_all2_elem_filter:\n  assumes \"list_all2 P xs us\" \"x \\<in> set xs\"\n  shows \"length (filter (P x) us) \\<ge> 1\"", "lemma list_all2_replicate_elem_filter:\n  assumes \"list_all2 P (concat (replicate n xs)) ys\" \"x \\<in> set xs\"\n  shows \"length (filter (P x) ys) \\<ge> n\"", "lemma nths_split:\n  \"nths xs (A \\<union> B) = nths xs A @ nths xs B\" if \"\\<forall> i \\<in> A. \\<forall> j \\<in> B. i < j\"", "lemma nths_nth:\n  \"nths xs {i} = [xs ! i]\" if \"i < length xs\"", "lemma nths_shift:\n  \"nths (xs @ ys) S = nths ys {x - length xs | x. x \\<in> S}\" if\n  \"\\<forall> i \\<in> S. length xs \\<le> i\"", "lemma nths_eq_ConsD:\n  assumes \"nths xs I = x # as\"\n  shows\n    \"\\<exists> ys zs.\n      xs = ys @ x # zs \\<and> length ys \\<in> I \\<and> (\\<forall> i \\<in> I. i \\<ge> length ys)\n      \\<and> nths zs ({i - length ys - 1 | i. i \\<in> I \\<and> i > length ys}) = as\"", "lemma nths_out_of_bounds:\n  \"nths xs I = []\" if \"\\<forall>i \\<in> I. i \\<ge> length xs\"", "lemma nths_eq_appendD:\n  assumes \"nths xs I = as @ bs\"\n  shows\n    \"\\<exists> ys zs.\n        xs = ys @ zs \\<and> nths ys I = as\n        \\<and> nths zs {i - length ys | i. i \\<in> I \\<and> i \\<ge> length ys} = bs\"", "lemma filter_nths_length:\n  \"length (filter P (nths xs I)) \\<le> length (filter P xs)\""], "translations": [["", "lemma (in -) hd_butlast_last_id:\n  \"hd xs # tl (butlast xs) @ [last xs] = xs\" if \"length xs > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs # tl (butlast xs) @ [last xs] = xs", "using that"], ["proof (prove)\nusing this:\n  1 < length xs\n\ngoal (1 subgoal):\n 1. hd xs # tl (butlast xs) @ [last xs] = xs", "by (cases xs) auto"], ["", "section \\<open>@{term list_all}\\<close>"], ["", "lemma (in -) list_all_map:\n  assumes inv: \"\\<And> x. P x \\<Longrightarrow> \\<exists> y. f y = x\"\n    and all: \"list_all P as\"\n  shows \"\\<exists> as'. map f as' = as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'. map f as' = as", "using all"], ["proof (prove)\nusing this:\n  list_all P as\n\ngoal (1 subgoal):\n 1. \\<exists>as'. map f as' = as", "apply (induction as)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_all P [] \\<Longrightarrow> \\<exists>as'. map f as' = []\n 2. \\<And>a as.\n       \\<lbrakk>list_all P as \\<Longrightarrow>\n                \\<exists>as'. map f as' = as;\n        list_all P (a # as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. map f as' = a # as", "apply (auto dest!: inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as' y.\n       list_all P (map f as') \\<Longrightarrow>\n       \\<exists>as'a. map f as'a = f y # map f as'", "subgoal for as' a"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P (map f as') \\<Longrightarrow>\n    \\<exists>as'a. map f as'a = f a # map f as'", "by (inst_existentials \"a # as'\") simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \\<open>@{term list_all2}\\<close>"], ["", "lemma list_all2_op_map_iff:\n  \"list_all2 (\\<lambda> a b. b = f a) xs ys \\<longleftrightarrow> map f xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>a b. b = f a) xs ys = (map f xs = ys)", "unfolding list_all2_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length xs = length ys \\<and>\n     (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n    (map f xs = ys)", "proof (induction xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       (length [] = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip [] ys). b = f a)) =\n       (map f [] = ys)\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           (length xs = length ys \\<and>\n            (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n           (map f xs = ys)) \\<Longrightarrow>\n       (length (a # xs) = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip (a # xs) ys). b = f a)) =\n       (map f (a # xs) = ys)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       (length [] = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip [] ys). b = f a)) =\n       (map f [] = ys)\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           (length xs = length ys \\<and>\n            (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n           (map f xs = ys)) \\<Longrightarrow>\n       (length (a # xs) = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip (a # xs) ys). b = f a)) =\n       (map f (a # xs) = ys)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length [] = length ys \\<and>\n     (\\<forall>a\\<in>set (zip [] ys).\n         case a of (a, b) \\<Rightarrow> b = f a)) =\n    (map f [] = ys)", "by auto"], ["proof (state)\nthis:\n  (length [] = length ys \\<and>\n   (\\<forall>a\\<in>set (zip [] ys).\n       case a of (a, b) \\<Rightarrow> b = f a)) =\n  (map f [] = ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (length xs = length ys \\<and>\n            (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n           (map f xs = ys)) \\<Longrightarrow>\n       (length (a # xs) = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip (a # xs) ys). b = f a)) =\n       (map f (a # xs) = ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (length xs = length ys \\<and>\n            (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n           (map f xs = ys)) \\<Longrightarrow>\n       (length (a # xs) = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip (a # xs) ys). b = f a)) =\n       (map f (a # xs) = ys)", "case (Cons a xs ys)"], ["proof (state)\nthis:\n  (length xs = length ?ys \\<and>\n   (\\<forall>a\\<in>set (zip xs ?ys).\n       case a of (a, b) \\<Rightarrow> b = f a)) =\n  (map f xs = ?ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (length xs = length ys \\<and>\n            (\\<forall>(a, b)\\<in>set (zip xs ys). b = f a)) =\n           (map f xs = ys)) \\<Longrightarrow>\n       (length (a # xs) = length ys \\<and>\n        (\\<forall>(a, b)\\<in>set (zip (a # xs) ys). b = f a)) =\n       (map f (a # xs) = ys)", "then"], ["proof (chain)\npicking this:\n  (length xs = length ?ys \\<and>\n   (\\<forall>a\\<in>set (zip xs ?ys).\n       case a of (a, b) \\<Rightarrow> b = f a)) =\n  (map f xs = ?ys)", "show ?case"], ["proof (prove)\nusing this:\n  (length xs = length ?ys \\<and>\n   (\\<forall>a\\<in>set (zip xs ?ys).\n       case a of (a, b) \\<Rightarrow> b = f a)) =\n  (map f xs = ?ys)\n\ngoal (1 subgoal):\n 1. (length (a # xs) = length ys \\<and>\n     (\\<forall>a\\<in>set (zip (a # xs) ys).\n         case a of (a, b) \\<Rightarrow> b = f a)) =\n    (map f (a # xs) = ys)", "by (cases ys) auto"], ["proof (state)\nthis:\n  (length (a # xs) = length ys \\<and>\n   (\\<forall>a\\<in>set (zip (a # xs) ys).\n       case a of (a, b) \\<Rightarrow> b = f a)) =\n  (map f (a # xs) = ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all2_last:\n  \"R (last xs) (last ys)\" if \"list_all2 R xs ys\" \"xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (last xs) (last ys)", "using that"], ["proof (prove)\nusing this:\n  list_all2 R xs ys\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. R (last xs) (last ys)", "unfolding list_all2_iff"], ["proof (prove)\nusing this:\n  length xs = length ys \\<and> (\\<forall>(x, y)\\<in>set (zip xs ys). R x y)\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. R (last xs) (last ys)", "proof (induction xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>length [] = length ys \\<and>\n                (\\<forall>(x, y)\\<in>set (zip [] ys). R x y);\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last []) (last ys)\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys \\<and>\n                            (\\<forall>(x, y)\\<in>set (zip xs ys). R x y);\n                    xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> R (last xs) (last ys);\n        length (a # xs) = length ys \\<and>\n        (\\<forall>(x, y)\\<in>set (zip (a # xs) ys). R x y);\n        a # xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last (a # xs)) (last ys)", "case Nil"], ["proof (state)\nthis:\n  length [] = length ys \\<and>\n  (\\<forall>a\\<in>set (zip [] ys). case a of (a, b) \\<Rightarrow> R a b)\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>length [] = length ys \\<and>\n                (\\<forall>(x, y)\\<in>set (zip [] ys). R x y);\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last []) (last ys)\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys \\<and>\n                            (\\<forall>(x, y)\\<in>set (zip xs ys). R x y);\n                    xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> R (last xs) (last ys);\n        length (a # xs) = length ys \\<and>\n        (\\<forall>(x, y)\\<in>set (zip (a # xs) ys). R x y);\n        a # xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last (a # xs)) (last ys)", "then"], ["proof (chain)\npicking this:\n  length [] = length ys \\<and>\n  (\\<forall>a\\<in>set (zip [] ys). case a of (a, b) \\<Rightarrow> R a b)\n  [] \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  length [] = length ys \\<and>\n  (\\<forall>a\\<in>set (zip [] ys). case a of (a, b) \\<Rightarrow> R a b)\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. R (last []) (last ys)", "by simp"], ["proof (state)\nthis:\n  R (last []) (last ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys \\<and>\n                            (\\<forall>(x, y)\\<in>set (zip xs ys). R x y);\n                    xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> R (last xs) (last ys);\n        length (a # xs) = length ys \\<and>\n        (\\<forall>(x, y)\\<in>set (zip (a # xs) ys). R x y);\n        a # xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last (a # xs)) (last ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys \\<and>\n                            (\\<forall>(x, y)\\<in>set (zip xs ys). R x y);\n                    xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> R (last xs) (last ys);\n        length (a # xs) = length ys \\<and>\n        (\\<forall>(x, y)\\<in>set (zip (a # xs) ys). R x y);\n        a # xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last (a # xs)) (last ys)", "case (Cons a xs ys)"], ["proof (state)\nthis:\n  \\<lbrakk>length xs = length ?ys \\<and>\n           (\\<forall>a\\<in>set (zip xs ?ys).\n               case a of (a, b) \\<Rightarrow> R a b);\n   xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> R (last xs) (last ?ys)\n  length (a # xs) = length ys \\<and>\n  (\\<forall>a\\<in>set (zip (a # xs) ys).\n      case a of (a, b) \\<Rightarrow> R a b)\n  a # xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys \\<and>\n                            (\\<forall>(x, y)\\<in>set (zip xs ys). R x y);\n                    xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> R (last xs) (last ys);\n        length (a # xs) = length ys \\<and>\n        (\\<forall>(x, y)\\<in>set (zip (a # xs) ys). R x y);\n        a # xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> R (last (a # xs)) (last ys)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs = length ?ys \\<and>\n           (\\<forall>a\\<in>set (zip xs ?ys).\n               case a of (a, b) \\<Rightarrow> R a b);\n   xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> R (last xs) (last ?ys)\n  length (a # xs) = length ys \\<and>\n  (\\<forall>a\\<in>set (zip (a # xs) ys).\n      case a of (a, b) \\<Rightarrow> R a b)\n  a # xs \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = length ?ys \\<and>\n           (\\<forall>a\\<in>set (zip xs ?ys).\n               case a of (a, b) \\<Rightarrow> R a b);\n   xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> R (last xs) (last ?ys)\n  length (a # xs) = length ys \\<and>\n  (\\<forall>a\\<in>set (zip (a # xs) ys).\n      case a of (a, b) \\<Rightarrow> R a b)\n  a # xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. R (last (a # xs)) (last ys)", "by (cases ys) auto"], ["proof (state)\nthis:\n  R (last (a # xs)) (last ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all2_set1:\n  \"\\<forall>x\\<in>set xs. \\<exists>xa\\<in>set as. P x xa\" if \"list_all2 P xs as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<exists>xa\\<in>set as. P x xa", "using that"], ["proof (prove)\nusing this:\n  list_all2 P xs as\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<exists>xa\\<in>set as. P x xa", "proof (induction xs arbitrary: as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as.\n       list_all2 P [] as \\<Longrightarrow>\n       \\<forall>x\\<in>set []. Bex (set as) (P x)\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   list_all2 P xs as \\<Longrightarrow>\n                   \\<forall>x\\<in>set xs. Bex (set as) (P x);\n        list_all2 P (a # xs) as\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (a # xs). Bex (set as) (P x)", "case Nil"], ["proof (state)\nthis:\n  list_all2 P [] as\n\ngoal (2 subgoals):\n 1. \\<And>as.\n       list_all2 P [] as \\<Longrightarrow>\n       \\<forall>x\\<in>set []. Bex (set as) (P x)\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   list_all2 P xs as \\<Longrightarrow>\n                   \\<forall>x\\<in>set xs. Bex (set as) (P x);\n        list_all2 P (a # xs) as\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (a # xs). Bex (set as) (P x)", "then"], ["proof (chain)\npicking this:\n  list_all2 P [] as", "show ?case"], ["proof (prove)\nusing this:\n  list_all2 P [] as\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set []. \\<exists>a\\<in>set as. P x a", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set []. \\<exists>a\\<in>set as. P x a\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   list_all2 P xs as \\<Longrightarrow>\n                   \\<forall>x\\<in>set xs. Bex (set as) (P x);\n        list_all2 P (a # xs) as\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (a # xs). Bex (set as) (P x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   list_all2 P xs as \\<Longrightarrow>\n                   \\<forall>x\\<in>set xs. Bex (set as) (P x);\n        list_all2 P (a # xs) as\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (a # xs). Bex (set as) (P x)", "case (Cons a xs as)"], ["proof (state)\nthis:\n  list_all2 P xs ?as \\<Longrightarrow>\n  \\<forall>x\\<in>set xs. \\<exists>a\\<in>set ?as. P x a\n  list_all2 P (a # xs) as\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   list_all2 P xs as \\<Longrightarrow>\n                   \\<forall>x\\<in>set xs. Bex (set as) (P x);\n        list_all2 P (a # xs) as\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (a # xs). Bex (set as) (P x)", "then"], ["proof (chain)\npicking this:\n  list_all2 P xs ?as \\<Longrightarrow>\n  \\<forall>x\\<in>set xs. \\<exists>a\\<in>set ?as. P x a\n  list_all2 P (a # xs) as", "show ?case"], ["proof (prove)\nusing this:\n  list_all2 P xs ?as \\<Longrightarrow>\n  \\<forall>x\\<in>set xs. \\<exists>a\\<in>set ?as. P x a\n  list_all2 P (a # xs) as\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a # xs). \\<exists>a\\<in>set as. P x a", "by (cases as) auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a # xs). \\<exists>a\\<in>set as. P x a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all2_swap:\n  \"list_all2 P xs ys \\<longleftrightarrow> list_all2 (\\<lambda> x y. P y x) ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 P xs ys = list_all2 (\\<lambda>x y. P y x) ys xs", "unfolding list_all2_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length xs = length ys \\<and>\n     (\\<forall>(x, y)\\<in>set (zip xs ys). P x y)) =\n    (length ys = length xs \\<and>\n     (\\<forall>(x, y)\\<in>set (zip ys xs). P y x))", "by (fastforce simp: in_set_zip)+"], ["", "lemma list_all2_set2:\n  \"\\<forall>x\\<in>set as. \\<exists>xa\\<in>set xs. P xa x\" if \"list_all2 P xs as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set as. \\<exists>xa\\<in>set xs. P xa x", "using that"], ["proof (prove)\nusing this:\n  list_all2 P xs as\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set as. \\<exists>xa\\<in>set xs. P xa x", "by - (rule list_all2_set1, subst (asm) list_all2_swap)"], ["", "section \\<open>Distinct lists\\<close>"], ["", "(* XXX Duplication with Floyd_Warshall.thy *)"], ["", "lemma distinct_length_le:\"finite s \\<Longrightarrow> set xs \\<subseteq> s \\<Longrightarrow> distinct xs \\<Longrightarrow> length xs \\<le> card s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite s; set xs \\<subseteq> s; distinct xs\\<rbrakk>\n    \\<Longrightarrow> length xs \\<le> card s", "by (metis card_mono distinct_card)"], ["", "section \\<open>@{term filter}\\<close>"], ["", "lemma filter_eq_appendD:\n  \"\\<exists> xs' ys'. filter P xs' = xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\" if \"filter P as = xs @ ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs' ys'.\n       filter P xs' = xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'", "using that"], ["proof (prove)\nusing this:\n  filter P as = xs @ ys\n\ngoal (1 subgoal):\n 1. \\<exists>xs' ys'.\n       filter P xs' = xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'", "proof (induction xs arbitrary: as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as.\n       filter P as = [] @ ys \\<Longrightarrow>\n       \\<exists>xs' ys'.\n          filter P xs' = [] \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "case Nil"], ["proof (state)\nthis:\n  filter P as = [] @ ys\n\ngoal (2 subgoals):\n 1. \\<And>as.\n       filter P as = [] @ ys \\<Longrightarrow>\n       \\<exists>xs' ys'.\n          filter P xs' = [] \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "then"], ["proof (chain)\npicking this:\n  filter P as = [] @ ys", "show ?case"], ["proof (prove)\nusing this:\n  filter P as = [] @ ys\n\ngoal (1 subgoal):\n 1. \\<exists>xs' ys'.\n       filter P xs' = [] \\<and> filter P ys' = ys \\<and> as = xs' @ ys'", "by (inst_existentials \"[] :: 'a list\" as) auto"], ["proof (state)\nthis:\n  \\<exists>xs' ys'.\n     filter P xs' = [] \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "case (Cons a xs)"], ["proof (state)\nthis:\n  filter P ?as = xs @ ys \\<Longrightarrow>\n  \\<exists>xs' ys'.\n     filter P xs' = xs \\<and> filter P ys' = ys \\<and> ?as = xs' @ ys'\n  filter P as = (a # xs) @ ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "from filter_eq_ConsD[OF Cons.prems[simplified]]"], ["proof (chain)\npicking this:\n  \\<exists>us vs.\n     as = us @ a # vs \\<and>\n     (\\<forall>u\\<in>set us. \\<not> P u) \\<and>\n     P a \\<and> xs @ ys = filter P vs", "obtain us vs where\n    \"as = us @ a # vs\" \"\\<forall>u\\<in>set us. \\<not> P u\" \"P a\" \"filter P vs = xs @ ys\""], ["proof (prove)\nusing this:\n  \\<exists>us vs.\n     as = us @ a # vs \\<and>\n     (\\<forall>u\\<in>set us. \\<not> P u) \\<and>\n     P a \\<and> xs @ ys = filter P vs\n\ngoal (1 subgoal):\n 1. (\\<And>us vs.\n        \\<lbrakk>as = us @ a # vs; \\<forall>u\\<in>set us. \\<not> P u; P a;\n         filter P vs = xs @ ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  as = us @ a # vs\n  \\<forall>u\\<in>set us. \\<not> P u\n  P a\n  filter P vs = xs @ ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "moreover"], ["proof (state)\nthis:\n  as = us @ a # vs\n  \\<forall>u\\<in>set us. \\<not> P u\n  P a\n  filter P vs = xs @ ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "from Cons.IH[OF \\<open>_ = xs @ ys\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>xs' ys'.\n     filter P xs' = xs \\<and> filter P ys' = ys \\<and> vs = xs' @ ys'", "obtain xs' ys where\n    \"filter P xs' = xs\" \"vs = xs' @ ys\""], ["proof (prove)\nusing this:\n  \\<exists>xs' ys'.\n     filter P xs' = xs \\<and> filter P ys' = ys \\<and> vs = xs' @ ys'\n\ngoal (1 subgoal):\n 1. (\\<And>xs' ys.\n        \\<lbrakk>filter P xs' = xs; vs = xs' @ ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  filter P xs' = xs\n  vs = xs' @ ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   filter P as = xs @ ys \\<Longrightarrow>\n                   \\<exists>xs' ys'.\n                      filter P xs' = xs \\<and>\n                      filter P ys' = ys \\<and> as = xs' @ ys';\n        filter P as = (a # xs) @ ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs' ys'.\n                            filter P xs' = a # xs \\<and>\n                            filter P ys' = ys \\<and> as = xs' @ ys'", "ultimately"], ["proof (chain)\npicking this:\n  as = us @ a # vs\n  \\<forall>u\\<in>set us. \\<not> P u\n  P a\n  filter P vs = xs @ ys\n  filter P xs' = xs\n  vs = xs' @ ys", "show ?case"], ["proof (prove)\nusing this:\n  as = us @ a # vs\n  \\<forall>u\\<in>set us. \\<not> P u\n  P a\n  filter P vs = xs @ ys\n  filter P xs' = xs\n  vs = xs' @ ys\n\ngoal (1 subgoal):\n 1. \\<exists>xs' ys'.\n       filter P xs' = a # xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'", "by (inst_existentials \"us @ [a] @ xs'\" ys) auto"], ["proof (state)\nthis:\n  \\<exists>xs' ys'.\n     filter P xs' = a # xs \\<and> filter P ys' = ys \\<and> as = xs' @ ys'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all2_elem_filter:\n  assumes \"list_all2 P xs us\" \"x \\<in> set xs\"\n  shows \"length (filter (P x) us) \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> length (filter (P x) us)", "using assms"], ["proof (prove)\nusing this:\n  list_all2 P xs us\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. 1 \\<le> length (filter (P x) us)", "by (induction xs arbitrary: us) (auto simp: list_all2_Cons1)"], ["", "lemma list_all2_replicate_elem_filter:\n  assumes \"list_all2 P (concat (replicate n xs)) ys\" \"x \\<in> set xs\"\n  shows \"length (filter (P x) ys) \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length (filter (P x) ys)", "using assms"], ["proof (prove)\nusing this:\n  list_all2 P (concat (replicate n xs)) ys\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. n \\<le> length (filter (P x) ys)", "by (induction n arbitrary: ys; fastforce dest: list_all2_elem_filter simp: list_all2_append1)"], ["", "section \\<open>Sublists\\<close>"], ["", "lemma nths_split:\n  \"nths xs (A \\<union> B) = nths xs A @ nths xs B\" if \"\\<forall> i \\<in> A. \\<forall> j \\<in> B. i < j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (A \\<union> B) = nths xs A @ nths xs B", "using that"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>A. \\<forall>j\\<in>B. i < j\n\ngoal (1 subgoal):\n 1. nths xs (A \\<union> B) = nths xs A @ nths xs B", "proof (induction xs arbitrary: A B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n       nths [] (A \\<union> B) = nths [] A @ nths [] B\n 2. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "case Nil"], ["proof (state)\nthis:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n       nths [] (A \\<union> B) = nths [] A @ nths [] B\n 2. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "then"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n\ngoal (1 subgoal):\n 1. nths [] (A \\<union> B) = nths [] A @ nths [] B", "by simp"], ["proof (state)\nthis:\n  nths [] (A \\<union> B) = nths [] A @ nths [] B\n\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>?A. \\<forall>a\\<in>?B. i < a \\<Longrightarrow>\n  nths xs (?A \\<union> ?B) = nths xs ?A @ nths xs ?B\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "let ?A = \"{j. Suc j \\<in> A}\" and ?B = \"{j. Suc j \\<in> B}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a", "have *: \"\\<forall>i\\<in>?A. \\<forall>a\\<in>?B. i < a\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{j. Suc j \\<in> A}.\n       \\<forall>a\\<in>{j. Suc j \\<in> B}. i < a", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{j. Suc j \\<in> A}.\n     \\<forall>a\\<in>{j. Suc j \\<in> B}. i < a\n\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "have [simp]: \"{j. Suc j \\<in> A \\<or> Suc j \\<in> B} = ?A \\<union> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. Suc j \\<in> A \\<or> Suc j \\<in> B} =\n    {j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}", "by auto"], ["proof (state)\nthis:\n  {j. Suc j \\<in> A \\<or> Suc j \\<in> B} =\n  {j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}\n\ngoal (1 subgoal):\n 1. \\<And>a xs A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<forall>i\\<in>A. Ball B ((<) i) \\<Longrightarrow>\n                   nths xs (A \\<union> B) = nths xs A @ nths xs B;\n        \\<forall>i\\<in>A. Ball B ((<) i)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) (A \\<union> B) =\n                         nths (a # xs) A @ nths (a # xs) B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (a # xs) (A \\<union> B) = nths (a # xs) A @ nths (a # xs) B", "unfolding nths_Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 \\<in> A \\<union> B then [a] else []) @\n    nths xs {j. Suc j \\<in> A \\<union> B} =\n    ((if 0 \\<in> A then [a] else []) @ nths xs {j. Suc j \\<in> A}) @\n    (if 0 \\<in> B then [a] else []) @ nths xs {j. Suc j \\<in> B}", "proof (clarsimp, safe, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 \\<in> B; 0 \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 2. \\<lbrakk>0 \\<in> B; 0 \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> a #\n                      nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 3. 0 \\<notin> B \\<Longrightarrow>\n    nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n    nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}", "case 2"], ["proof (state)\nthis:\n  0 \\<in> B\n  0 \\<notin> A\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 \\<in> B; 0 \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 2. \\<lbrakk>0 \\<in> B; 0 \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> a #\n                      nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 3. 0 \\<notin> B \\<Longrightarrow>\n    nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n    nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}", "with Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n  0 \\<in> B\n  0 \\<notin> A", "have \"A = {}\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>A. \\<forall>a\\<in>B. i < a\n  0 \\<in> B\n  0 \\<notin> A\n\ngoal (1 subgoal):\n 1. A = {}", "by auto"], ["proof (state)\nthis:\n  A = {}\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 \\<in> B; 0 \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 2. \\<lbrakk>0 \\<in> B; 0 \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> a #\n                      nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 3. 0 \\<notin> B \\<Longrightarrow>\n    nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n    nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}", "with Cons.IH[OF *]"], ["proof (chain)\npicking this:\n  nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n  nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}\n  A = {}", "show ?case"], ["proof (prove)\nusing this:\n  nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n  nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}\n  A = {}\n\ngoal (1 subgoal):\n 1. a # nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n    nths xs {j. Suc j \\<in> A} @ a # nths xs {j. Suc j \\<in> B}", "by auto"], ["proof (state)\nthis:\n  a # nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n  nths xs {j. Suc j \\<in> A} @ a # nths xs {j. Suc j \\<in> B}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<in> B; 0 \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n                      nths xs {j. Suc j \\<in> A} @\n                      a # nths xs {j. Suc j \\<in> B}\n 2. 0 \\<notin> B \\<Longrightarrow>\n    nths xs ({j. Suc j \\<in> A} \\<union> {j. Suc j \\<in> B}) =\n    nths xs {j. Suc j \\<in> A} @ nths xs {j. Suc j \\<in> B}", "qed (use Cons.prems Cons.IH[OF *] in auto)"], ["proof (state)\nthis:\n  nths (a # xs) (A \\<union> B) = nths (a # xs) A @ nths (a # xs) B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_nth:\n  \"nths xs {i} = [xs ! i]\" if \"i < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs {i} = [xs ! i]", "using that"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. nths xs {i} = [xs ! i]", "proof (induction xs arbitrary: i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i < length [] \\<Longrightarrow> nths [] {i} = [[] ! i]\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   i < length xs \\<Longrightarrow> nths xs {i} = [xs ! i];\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) {i} = [(a # xs) ! i]", "case Nil"], ["proof (state)\nthis:\n  i < length []\n\ngoal (2 subgoals):\n 1. \\<And>i. i < length [] \\<Longrightarrow> nths [] {i} = [[] ! i]\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   i < length xs \\<Longrightarrow> nths xs {i} = [xs ! i];\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) {i} = [(a # xs) ! i]", "then"], ["proof (chain)\npicking this:\n  i < length []", "show ?case"], ["proof (prove)\nusing this:\n  i < length []\n\ngoal (1 subgoal):\n 1. nths [] {i} = [[] ! i]", "by simp"], ["proof (state)\nthis:\n  nths [] {i} = [[] ! i]\n\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   i < length xs \\<Longrightarrow> nths xs {i} = [xs ! i];\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) {i} = [(a # xs) ! i]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   i < length xs \\<Longrightarrow> nths xs {i} = [xs ! i];\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) {i} = [(a # xs) ! i]", "case (Cons a xs)"], ["proof (state)\nthis:\n  ?i < length xs \\<Longrightarrow> nths xs {?i} = [xs ! ?i]\n  i < length (a # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   i < length xs \\<Longrightarrow> nths xs {i} = [xs ! i];\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nths (a # xs) {i} = [(a # xs) ! i]", "then"], ["proof (chain)\npicking this:\n  ?i < length xs \\<Longrightarrow> nths xs {?i} = [xs ! ?i]\n  i < length (a # xs)", "show ?case"], ["proof (prove)\nusing this:\n  ?i < length xs \\<Longrightarrow> nths xs {?i} = [xs ! ?i]\n  i < length (a # xs)\n\ngoal (1 subgoal):\n 1. nths (a # xs) {i} = [(a # xs) ! i]", "by (cases i) (auto simp: nths_Cons)"], ["proof (state)\nthis:\n  nths (a # xs) {i} = [(a # xs) ! i]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_shift:\n  \"nths (xs @ ys) S = nths ys {x - length xs | x. x \\<in> S}\" if\n  \"\\<forall> i \\<in> S. length xs \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S}", "using that"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>S. length xs \\<le> i\n\ngoal (1 subgoal):\n 1. nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S}", "proof (induction xs arbitrary: S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S.\n       Ball S ((\\<le>) (length [])) \\<Longrightarrow>\n       nths ([] @ ys) S = nths ys {x - length [] |x. x \\<in> S}\n 2. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a\\<in>S. length [] \\<le> a\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       Ball S ((\\<le>) (length [])) \\<Longrightarrow>\n       nths ([] @ ys) S = nths ys {x - length [] |x. x \\<in> S}\n 2. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>S. length [] \\<le> a", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>S. length [] \\<le> a\n\ngoal (1 subgoal):\n 1. nths ([] @ ys) S = nths ys {x - length [] |x. x \\<in> S}", "by auto"], ["proof (state)\nthis:\n  nths ([] @ ys) S = nths ys {x - length [] |x. x \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>?S. length xs \\<le> a \\<Longrightarrow>\n  nths (xs @ ys) ?S = nths ys {x - length xs |x. x \\<in> ?S}\n  \\<forall>b\\<in>S. length (a # xs) \\<le> b\n\ngoal (1 subgoal):\n 1. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "have [simp]: \"{x - length xs |x. Suc x \\<in> S} = {x - Suc (length xs) |x. x \\<in> S}\" if \"0 \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x - length xs |x. Suc x \\<in> S} = {x - Suc (length xs) |x. x \\<in> S}", "using that"], ["proof (prove)\nusing this:\n  0 \\<notin> S\n\ngoal (1 subgoal):\n 1. {x - length xs |x. Suc x \\<in> S} = {x - Suc (length xs) |x. x \\<in> S}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>0 \\<notin> S; Suc xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            xa - length xs = x - Suc (length xs) \\<and>\n                            x \\<in> S\n 2. \\<And>x xa.\n       \\<lbrakk>0 \\<notin> S; xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            xa - Suc (length xs) = x - length xs \\<and>\n                            Suc x \\<in> S", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>0 \\<notin> S; xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            xa - Suc (length xs) = x - length xs \\<and>\n                            Suc x \\<in> S", "subgoal for x x'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> S; x' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x' - Suc (length xs) = x - length xs \\<and>\n                         Suc x \\<in> S", "by (cases x') auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  0 \\<notin> S \\<Longrightarrow>\n  {x - length xs |x. Suc x \\<in> S} = {x - Suc (length xs) |x. x \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>a xs S.\n       \\<lbrakk>\\<And>S.\n                   Ball S ((\\<le>) (length xs)) \\<Longrightarrow>\n                   nths (xs @ ys) S = nths ys {x - length xs |x. x \\<in> S};\n        Ball S ((\\<le>) (length (a # xs)))\\<rbrakk>\n       \\<Longrightarrow> nths ((a # xs) @ ys) S =\n                         nths ys {x - length (a # xs) |x. x \\<in> S}", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>S. length (a # xs) \\<le> b", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>S. length (a # xs) \\<le> b\n\ngoal (1 subgoal):\n 1. nths ((a # xs) @ ys) S = nths ys {x - length (a # xs) |x. x \\<in> S}", "by (simp, subst nths_Cons, subst Cons.IH; auto)"], ["proof (state)\nthis:\n  nths ((a # xs) @ ys) S = nths ys {x - length (a # xs) |x. x \\<in> S}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_eq_ConsD:\n  assumes \"nths xs I = x # as\"\n  shows\n    \"\\<exists> ys zs.\n      xs = ys @ x # zs \\<and> length ys \\<in> I \\<and> (\\<forall> i \\<in> I. i \\<ge> length ys)\n      \\<and> nths zs ({i - length ys - 1 | i. i \\<in> I \\<and> i > length ys}) = as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       xs = ys @ x # zs \\<and>\n       length ys \\<in> I \\<and>\n       (\\<forall>i\\<in>I. length ys \\<le> i) \\<and>\n       nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as", "using assms"], ["proof (prove)\nusing this:\n  nths xs I = x # as\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       xs = ys @ x # zs \\<and>\n       length ys \\<in> I \\<and>\n       (\\<forall>i\\<in>I. length ys \\<le> i) \\<and>\n       nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as", "proof (induction xs arbitrary: I x as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I x as.\n       nths [] I = x # as \\<Longrightarrow>\n       \\<exists>ys zs.\n          [] = ys @ x # zs \\<and>\n          length ys \\<in> I \\<and>\n          Ball I ((\\<le>) (length ys)) \\<and>\n          nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} =\n          as\n 2. \\<And>a xs I x as.\n       \\<lbrakk>\\<And>I x as.\n                   nths xs I = x # as \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ x # zs \\<and>\n                      length ys \\<in> I \\<and>\n                      Ball I ((\\<le>) (length ys)) \\<and>\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> I \\<and> length ys < i} =\n                      as;\n        nths (a # xs) I = x # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            a # xs = ys @ x # zs \\<and>\n                            length ys \\<in> I \\<and>\n                            Ball I ((\\<le>) (length ys)) \\<and>\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> I \\<and> length ys < i} =\n                            as", "case Nil"], ["proof (state)\nthis:\n  nths [] I = x # as\n\ngoal (2 subgoals):\n 1. \\<And>I x as.\n       nths [] I = x # as \\<Longrightarrow>\n       \\<exists>ys zs.\n          [] = ys @ x # zs \\<and>\n          length ys \\<in> I \\<and>\n          Ball I ((\\<le>) (length ys)) \\<and>\n          nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} =\n          as\n 2. \\<And>a xs I x as.\n       \\<lbrakk>\\<And>I x as.\n                   nths xs I = x # as \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ x # zs \\<and>\n                      length ys \\<in> I \\<and>\n                      Ball I ((\\<le>) (length ys)) \\<and>\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> I \\<and> length ys < i} =\n                      as;\n        nths (a # xs) I = x # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            a # xs = ys @ x # zs \\<and>\n                            length ys \\<in> I \\<and>\n                            Ball I ((\\<le>) (length ys)) \\<and>\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> I \\<and> length ys < i} =\n                            as", "then"], ["proof (chain)\npicking this:\n  nths [] I = x # as", "show ?case"], ["proof (prove)\nusing this:\n  nths [] I = x # as\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       [] = ys @ x # zs \\<and>\n       length ys \\<in> I \\<and>\n       (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n       nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as", "by simp"], ["proof (state)\nthis:\n  \\<exists>ys zs.\n     [] = ys @ x # zs \\<and>\n     length ys \\<in> I \\<and>\n     (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n     nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as\n\ngoal (1 subgoal):\n 1. \\<And>a xs I x as.\n       \\<lbrakk>\\<And>I x as.\n                   nths xs I = x # as \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ x # zs \\<and>\n                      length ys \\<in> I \\<and>\n                      Ball I ((\\<le>) (length ys)) \\<and>\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> I \\<and> length ys < i} =\n                      as;\n        nths (a # xs) I = x # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            a # xs = ys @ x # zs \\<and>\n                            length ys \\<in> I \\<and>\n                            Ball I ((\\<le>) (length ys)) \\<and>\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> I \\<and> length ys < i} =\n                            as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs I x as.\n       \\<lbrakk>\\<And>I x as.\n                   nths xs I = x # as \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ x # zs \\<and>\n                      length ys \\<in> I \\<and>\n                      Ball I ((\\<le>) (length ys)) \\<and>\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> I \\<and> length ys < i} =\n                      as;\n        nths (a # xs) I = x # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            a # xs = ys @ x # zs \\<and>\n                            length ys \\<in> I \\<and>\n                            Ball I ((\\<le>) (length ys)) \\<and>\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> I \\<and> length ys < i} =\n                            as", "case (Cons a xs)"], ["proof (state)\nthis:\n  nths xs ?I = ?x # ?as \\<Longrightarrow>\n  \\<exists>ys zs.\n     xs = ys @ ?x # zs \\<and>\n     length ys \\<in> ?I \\<and>\n     (\\<forall>a\\<in>?I. length ys \\<le> a) \\<and>\n     nths zs {i - length ys - 1 |i. i \\<in> ?I \\<and> length ys < i} = ?as\n  nths (a # xs) I = x # as\n\ngoal (1 subgoal):\n 1. \\<And>a xs I x as.\n       \\<lbrakk>\\<And>I x as.\n                   nths xs I = x # as \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ x # zs \\<and>\n                      length ys \\<in> I \\<and>\n                      Ball I ((\\<le>) (length ys)) \\<and>\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> I \\<and> length ys < i} =\n                      as;\n        nths (a # xs) I = x # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            a # xs = ys @ x # zs \\<and>\n                            length ys \\<in> I \\<and>\n                            Ball I ((\\<le>) (length ys)) \\<and>\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> I \\<and> length ys < i} =\n                            as", "from Cons.prems"], ["proof (chain)\npicking this:\n  nths (a # xs) I = x # as", "show ?case"], ["proof (prove)\nusing this:\n  nths (a # xs) I = x # as\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       a # xs = ys @ x # zs \\<and>\n       length ys \\<in> I \\<and>\n       (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n       nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as", "unfolding nths_Cons"], ["proof (prove)\nusing this:\n  (if 0 \\<in> I then [a] else []) @ nths xs {j. Suc j \\<in> I} = x # as\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       a # xs = ys @ x # zs \\<and>\n       length ys \\<in> I \\<and>\n       (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n       nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as", "apply (auto split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<in> I; a = x; as = nths xs {j. Suc j \\<in> I}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         x # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         nths xs {j. Suc j \\<in> I}\n 2. \\<lbrakk>0 \\<notin> I; nths xs {j. Suc j \\<in> I} = x # as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         a # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         as", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<in> I; a = x; as = nths xs {j. Suc j \\<in> I}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         x # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         nths xs {j. Suc j \\<in> I}", "by (inst_existentials \"[] :: 'a list\" xs; force intro: arg_cong2[of xs xs _ _ nths])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; nths xs {j. Suc j \\<in> I} = x # as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         a # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         as", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; nths xs {j. Suc j \\<in> I} = x # as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         a # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         as", "apply (drule Cons.IH)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I;\n     \\<exists>ys zs.\n        xs = ys @ x # zs \\<and>\n        length ys \\<in> {j. Suc j \\<in> I} \\<and>\n        (\\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a) \\<and>\n        nths zs\n         {i - length ys - 1 |i.\n          i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i} =\n        as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys zs.\n                         a # xs = ys @ x # zs \\<and>\n                         length ys \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n                         nths zs\n                          {i - Suc (length ys) |i.\n                           i \\<in> I \\<and> length ys < i} =\n                         as", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n        \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n        as =\n        nths zs\n         {i - length ys - 1 |i.\n          i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ysa zsa.\n                            a # ys @ x # zs = ysa @ x # zsa \\<and>\n                            length ysa \\<in> I \\<and>\n                            (\\<forall>a\\<in>I. length ysa \\<le> a) \\<and>\n                            nths zsa\n                             {i - Suc (length ysa) |i.\n                              i \\<in> I \\<and> length ysa < i} =\n                            nths zs\n                             {i - length ys - 1 |i.\n                              i \\<in> {j. Suc j \\<in> I} \\<and>\n                              length ys < i}", "subgoal for ys zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ysa zsa.\n                         a # ys @ x # zs = ysa @ x # zsa \\<and>\n                         length ysa \\<in> I \\<and>\n                         (\\<forall>a\\<in>I. length ysa \\<le> a) \\<and>\n                         nths zsa\n                          {i - Suc (length ysa) |i.\n                           i \\<in> I \\<and> length ysa < i} =\n                         nths zs\n                          {i - length ys - 1 |i.\n                           i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply (inst_existentials \"a # ys\" zs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> a # ys @ x # zs = (a # ys) @ x # zs\n 2. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> length (a # ys) \\<in> I\n 3. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>I. length (a # ys) \\<le> b\n 4. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> nths zs\n                       {i - Suc (length (a # ys)) |i.\n                        i \\<in> I \\<and> length (a # ys) < i} =\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>x. Suc x \\<in> I \\<longrightarrow> length ys \\<le> x;\n     as =\n     nths zs\n      {i - Suc (length ys) |i. Suc i \\<in> I \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>I. Suc (length ys) \\<le> x\n 2. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> nths zs\n                       {i - Suc (length (a # ys)) |i.\n                        i \\<in> I \\<and> length (a # ys) < i} =\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n        \\<forall>x. Suc x \\<in> I \\<longrightarrow> length ys \\<le> x;\n        as =\n        nths zs\n         {i - Suc (length ys) |i. Suc i \\<in> I \\<and> length ys < i};\n        x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> Suc (length ys) \\<le> x\n 2. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> nths zs\n                       {i - Suc (length (a # ys)) |i.\n                        i \\<in> I \\<and> length (a # ys) < i} =\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>x. Suc x \\<in> I \\<longrightarrow> length ys \\<le> x;\n     as =\n     nths zs {i - Suc (length ys) |i. Suc i \\<in> I \\<and> length ys < i};\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> Suc (length ys) \\<le> i", "by (cases i; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> nths zs\n                       {i - Suc (length (a # ys)) |i.\n                        i \\<in> I \\<and> length (a # ys) < i} =\n                      nths zs\n                       {i - length ys - 1 |i.\n                        i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply (rule arg_cong2[of zs zs _ _ nths])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> zs = zs\n 2. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> {i - Suc (length (a # ys)) |i.\n                       i \\<in> I \\<and> length (a # ys) < i} =\n                      {i - length ys - 1 |i.\n                       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}\\<rbrakk>\n    \\<Longrightarrow> {i - Suc (length (a # ys)) |i.\n                       i \\<in> I \\<and> length (a # ys) < i} =\n                      {i - length ys - 1 |i.\n                       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n        \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n        as =\n        nths zs\n         {i - length ys - 1 |i.\n          i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i};\n        i \\<in> I; length (a # ys) < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia.\n                            i - Suc (length (a # ys)) =\n                            ia - length ys - 1 \\<and>\n                            ia \\<in> {j. Suc j \\<in> I} \\<and>\n                            length ys < ia\n 2. \\<And>x i.\n       \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n        \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n        as =\n        nths zs\n         {i - length ys - 1 |i.\n          i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i};\n        length ys < i; Suc i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia.\n                            i - length ys - 1 =\n                            ia - Suc (length (a # ys)) \\<and>\n                            ia \\<in> I \\<and> length (a # ys) < ia", "subgoal for _ i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n     \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n     as =\n     nths zs\n      {i - length ys - 1 |i.\n       i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i};\n     i \\<in> I; length (a # ys) < i\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ia.\n                         i - Suc (length (a # ys)) =\n                         ia - length ys - 1 \\<and>\n                         ia \\<in> {j. Suc j \\<in> I} \\<and> length ys < ia", "by (cases i; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>0 \\<notin> I; xs = ys @ x # zs; Suc (length ys) \\<in> I;\n        \\<forall>a\\<in>{j. Suc j \\<in> I}. length ys \\<le> a;\n        as =\n        nths zs\n         {i - length ys - 1 |i.\n          i \\<in> {j. Suc j \\<in> I} \\<and> length ys < i};\n        length ys < i; Suc i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia.\n                            i - length ys - 1 =\n                            ia - Suc (length (a # ys)) \\<and>\n                            ia \\<in> I \\<and> length (a # ys) < ia", "by force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ys zs.\n     a # xs = ys @ x # zs \\<and>\n     length ys \\<in> I \\<and>\n     (\\<forall>a\\<in>I. length ys \\<le> a) \\<and>\n     nths zs {i - length ys - 1 |i. i \\<in> I \\<and> length ys < i} = as\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_out_of_bounds:\n  \"nths xs I = []\" if \"\\<forall>i \\<in> I. i \\<ge> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs I = []", "using that"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>I. length xs \\<le> i\n\ngoal (1 subgoal):\n 1. nths xs I = []", "(* Found by sledgehammer *)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>I. length xs \\<le> i\n\ngoal (1 subgoal):\n 1. nths xs I = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. length xs \\<le> i \\<Longrightarrow> nths xs I = []", "have\n    \"\\<forall>N as.\n      (\\<exists>n. n \\<in> N \\<and> \\<not> length (as::'a list) \\<le> n)\n      \\<or> (\\<forall>asa. nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>N as.\n       (\\<exists>n. n \\<in> N \\<and> \\<not> length as \\<le> n) \\<or>\n       (\\<forall>asa.\n           nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})", "using nths_shift"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>?S. length ?xs \\<le> i \\<Longrightarrow>\n  nths (?xs @ ?ys) ?S = nths ?ys {x - length ?xs |x. x \\<in> ?S}\n\ngoal (1 subgoal):\n 1. \\<forall>N as.\n       (\\<exists>n. n \\<in> N \\<and> \\<not> length as \\<le> n) \\<or>\n       (\\<forall>asa.\n           nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})", "by blast"], ["proof (state)\nthis:\n  \\<forall>N as.\n     (\\<exists>n. n \\<in> N \\<and> \\<not> length as \\<le> n) \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. length xs \\<le> i \\<Longrightarrow> nths xs I = []", "then"], ["proof (chain)\npicking this:\n  \\<forall>N as.\n     (\\<exists>n. n \\<in> N \\<and> \\<not> length as \\<le> n) \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})", "obtain nn :: \"nat set \\<Rightarrow> 'a list \\<Rightarrow> nat\" where\n    \"\\<forall>N as.\n      nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as\n    \\<or> (\\<forall>asa. nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\""], ["proof (prove)\nusing this:\n  \\<forall>N as.\n     (\\<exists>n. n \\<in> N \\<and> \\<not> length as \\<le> n) \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\n\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        \\<forall>N as.\n           nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as \\<or>\n           (\\<forall>asa.\n               nths (as @ asa) N =\n               nths asa {n - length as |n. n \\<in> N}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>N as.\n     nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. length xs \\<le> i \\<Longrightarrow> nths xs I = []", "then"], ["proof (chain)\npicking this:\n  \\<forall>N as.\n     nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})", "have\n    \"\\<And>as. nths as {n - length xs |n. n \\<in> I} = nths (xs @ as) I\n      \\<or> nths (xs @ []) I = []\""], ["proof (prove)\nusing this:\n  \\<forall>N as.\n     nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\n\ngoal (1 subgoal):\n 1. \\<And>as.\n       nths as {n - length xs |n. n \\<in> I} = nths (xs @ as) I \\<or>\n       nths (xs @ []) I = []", "using that"], ["proof (prove)\nusing this:\n  \\<forall>N as.\n     nn N as \\<in> N \\<and> \\<not> length as \\<le> nn N as \\<or>\n     (\\<forall>asa.\n         nths (as @ asa) N = nths asa {n - length as |n. n \\<in> N})\n  \\<forall>i\\<in>I. length xs \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>as.\n       nths as {n - length xs |n. n \\<in> I} = nths (xs @ as) I \\<or>\n       nths (xs @ []) I = []", "by fastforce"], ["proof (state)\nthis:\n  nths ?as {n - length xs |n. n \\<in> I} = nths (xs @ ?as) I \\<or>\n  nths (xs @ []) I = []\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. length xs \\<le> i \\<Longrightarrow> nths xs I = []", "then"], ["proof (chain)\npicking this:\n  nths ?as {n - length xs |n. n \\<in> I} = nths (xs @ ?as) I \\<or>\n  nths (xs @ []) I = []", "have \"nths (xs @ []) I = []\""], ["proof (prove)\nusing this:\n  nths ?as {n - length xs |n. n \\<in> I} = nths (xs @ ?as) I \\<or>\n  nths (xs @ []) I = []\n\ngoal (1 subgoal):\n 1. nths (xs @ []) I = []", "by (metis (no_types) nths_nil)"], ["proof (state)\nthis:\n  nths (xs @ []) I = []\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. length xs \\<le> i \\<Longrightarrow> nths xs I = []", "then"], ["proof (chain)\npicking this:\n  nths (xs @ []) I = []", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (xs @ []) I = []\n\ngoal (1 subgoal):\n 1. nths xs I = []", "by simp"], ["proof (state)\nthis:\n  nths xs I = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_eq_appendD:\n  assumes \"nths xs I = as @ bs\"\n  shows\n    \"\\<exists> ys zs.\n        xs = ys @ zs \\<and> nths ys I = as\n        \\<and> nths zs {i - length ys | i. i \\<in> I \\<and> i \\<ge> length ys} = bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       xs = ys @ zs \\<and>\n       nths ys I = as \\<and>\n       nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} = bs", "using assms"], ["proof (prove)\nusing this:\n  nths xs I = as @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       xs = ys @ zs \\<and>\n       nths ys I = as \\<and>\n       nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} = bs", "proof (induction as arbitrary: xs I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs I.\n       nths xs I = [] @ bs \\<Longrightarrow>\n       \\<exists>ys zs.\n          xs = ys @ zs \\<and>\n          nths ys I = [] \\<and>\n          nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} =\n          bs\n 2. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "case Nil"], ["proof (state)\nthis:\n  nths xs I = [] @ bs\n\ngoal (2 subgoals):\n 1. \\<And>xs I.\n       nths xs I = [] @ bs \\<Longrightarrow>\n       \\<exists>ys zs.\n          xs = ys @ zs \\<and>\n          nths ys I = [] \\<and>\n          nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} =\n          bs\n 2. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "then"], ["proof (chain)\npicking this:\n  nths xs I = [] @ bs", "show ?case"], ["proof (prove)\nusing this:\n  nths xs I = [] @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs.\n       xs = ys @ zs \\<and>\n       nths ys I = [] \\<and>\n       nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} = bs", "by (inst_existentials \"[] :: 'a list\" \"nths bs\") auto"], ["proof (state)\nthis:\n  \\<exists>ys zs.\n     xs = ys @ zs \\<and>\n     nths ys I = [] \\<and>\n     nths zs {i - length ys |i. i \\<in> I \\<and> length ys \\<le> i} = bs\n\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "case (Cons a ys xs)"], ["proof (state)\nthis:\n  nths ?xs ?I = ys @ bs \\<Longrightarrow>\n  \\<exists>ysa zs.\n     ?xs = ysa @ zs \\<and>\n     nths ysa ?I = ys \\<and>\n     nths zs {i - length ysa |i. i \\<in> ?I \\<and> length ysa \\<le> i} = bs\n  nths xs I = (a # ys) @ bs\n\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "from nths_eq_ConsD[of xs I a \"ys @ bs\"] Cons.prems"], ["proof (chain)\npicking this:\n  nths xs I = a # ys @ bs \\<Longrightarrow>\n  \\<exists>ysa zs.\n     xs = ysa @ a # zs \\<and>\n     length ysa \\<in> I \\<and>\n     (\\<forall>i\\<in>I. length ysa \\<le> i) \\<and>\n     nths zs {i - length ysa - 1 |i. i \\<in> I \\<and> length ysa < i} =\n     ys @ bs\n  nths xs I = (a # ys) @ bs", "obtain ys' zs' where\n    \"xs = ys' @ a # zs'\" \"length ys' \\<in> I\" \"\\<forall>i \\<in> I. i \\<ge> length ys'\"\n    \"nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> i > length ys'} = ys @ bs\""], ["proof (prove)\nusing this:\n  nths xs I = a # ys @ bs \\<Longrightarrow>\n  \\<exists>ysa zs.\n     xs = ysa @ a # zs \\<and>\n     length ysa \\<in> I \\<and>\n     (\\<forall>i\\<in>I. length ysa \\<le> i) \\<and>\n     nths zs {i - length ysa - 1 |i. i \\<in> I \\<and> length ysa < i} =\n     ys @ bs\n  nths xs I = (a # ys) @ bs\n\ngoal (1 subgoal):\n 1. (\\<And>ys' zs'.\n        \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n         \\<forall>i\\<in>I. length ys' \\<le> i;\n         nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n         ys @ bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs = ys' @ a # zs'\n  length ys' \\<in> I\n  \\<forall>i\\<in>I. length ys' \\<le> i\n  nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n  ys @ bs\n\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "moreover"], ["proof (state)\nthis:\n  xs = ys' @ a # zs'\n  length ys' \\<in> I\n  \\<forall>i\\<in>I. length ys' \\<le> i\n  nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n  ys @ bs\n\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "from Cons.IH[OF \\<open>nths zs' _ = _\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>ysa zs.\n     zs' = ysa @ zs \\<and>\n     nths ysa {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys \\<and>\n     nths zs\n      {i - length ysa |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ysa \\<le> i} =\n     bs", "guess ys'' zs''"], ["proof (prove)\nusing this:\n  \\<exists>ysa zs.\n     zs' = ysa @ zs \\<and>\n     nths ysa {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys \\<and>\n     nths zs\n      {i - length ysa |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ysa \\<le> i} =\n     bs\n\ngoal (1 subgoal):\n 1. thesis", "by clarify"], ["proof (state)\nthis:\n  zs' = ys'' @ zs''\n  ys = nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i}\n  bs =\n  nths zs''\n   {i - length ys'' |i.\n    i \\<in> {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} \\<and>\n    length ys'' \\<le> i}\n\ngoal (1 subgoal):\n 1. \\<And>a as xs I.\n       \\<lbrakk>\\<And>xs I.\n                   nths xs I = as @ bs \\<Longrightarrow>\n                   \\<exists>ys zs.\n                      xs = ys @ zs \\<and>\n                      nths ys I = as \\<and>\n                      nths zs\n                       {i - length ys |i.\n                        i \\<in> I \\<and> length ys \\<le> i} =\n                      bs;\n        nths xs I = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            xs = ys @ zs \\<and>\n                            nths ys I = a # as \\<and>\n                            nths zs\n                             {i - length ys |i.\n                              i \\<in> I \\<and> length ys \\<le> i} =\n                            bs", "ultimately"], ["proof (chain)\npicking this:\n  xs = ys' @ a # zs'\n  length ys' \\<in> I\n  \\<forall>i\\<in>I. length ys' \\<le> i\n  nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n  ys @ bs\n  zs' = ys'' @ zs''\n  ys = nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i}\n  bs =\n  nths zs''\n   {i - length ys'' |i.\n    i \\<in> {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} \\<and>\n    length ys'' \\<le> i}", "show ?case"], ["proof (prove)\nusing this:\n  xs = ys' @ a # zs'\n  length ys' \\<in> I\n  \\<forall>i\\<in>I. length ys' \\<le> i\n  nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n  ys @ bs\n  zs' = ys'' @ zs''\n  ys = nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i}\n  bs =\n  nths zs''\n   {i - length ys'' |i.\n    i \\<in> {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} \\<and>\n    length ys'' \\<le> i}\n\ngoal (1 subgoal):\n 1. \\<exists>ysa zs.\n       xs = ysa @ zs \\<and>\n       nths ysa I = a # ys \\<and>\n       nths zs {i - length ysa |i. i \\<in> I \\<and> length ysa \\<le> i} = bs", "apply (inst_existentials \"ys' @ a # ys''\" zs'')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> xs = (ys' @ a # ys'') @ zs''\n 2. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths (ys' @ a # ys'') I = a # ys\n 3. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths zs''\n                       {i - length (ys' @ a # ys'') |i.\n                        i \\<in> I \\<and> length (ys' @ a # ys'') \\<le> i} =\n                      bs", "apply (simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths (ys' @ a # ys'') I = a # ys\n 2. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths zs''\n                       {i - length (ys' @ a # ys'') |i.\n                        i \\<in> I \\<and> length (ys' @ a # ys'') \\<le> i} =\n                      bs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths (ys' @ a # ys'') I = a # ys", "by (simp add: nths_out_of_bounds nths_append nths_Cons)\n        (rule arg_cong2[of ys'' ys'' _ _ nths]; force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths zs''\n                       {i - length (ys' @ a # ys'') |i.\n                        i \\<in> I \\<and> length (ys' @ a # ys'') \\<le> i} =\n                      bs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = ys' @ a # zs'; length ys' \\<in> I;\n     \\<forall>i\\<in>I. length ys' \\<le> i;\n     nths zs' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i} =\n     ys @ bs;\n     zs' = ys'' @ zs'';\n     ys =\n     nths ys'' {i - length ys' - 1 |i. i \\<in> I \\<and> length ys' < i};\n     bs =\n     nths zs''\n      {i - length ys'' |i.\n       i \\<in> {i - length ys' - 1 |i.\n                i \\<in> I \\<and> length ys' < i} \\<and>\n       length ys'' \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> nths zs''\n                       {i - length (ys' @ a # ys'') |i.\n                        i \\<in> I \\<and> length (ys' @ a # ys'') \\<le> i} =\n                      bs", "by safe (rule arg_cong2[of zs'' zs'' _ _ nths]; force)"], ["proof (prove)\ngoal:\nNo subgoals!", "(* Slow *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ysa zs.\n     xs = ysa @ zs \\<and>\n     nths ysa I = a # ys \\<and>\n     nths zs {i - length ysa |i. i \\<in> I \\<and> length ysa \\<le> i} = bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_nths_length:\n  \"length (filter P (nths xs I)) \\<le> length (filter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P (nths xs I)) \\<le> length (filter P xs)", "proof (induction xs arbitrary: I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I. length (filter P (nths [] I)) \\<le> length (filter P [])\n 2. \\<And>a xs I.\n       (\\<And>I.\n           length (filter P (nths xs I))\n           \\<le> length (filter P xs)) \\<Longrightarrow>\n       length (filter P (nths (a # xs) I)) \\<le> length (filter P (a # xs))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>I. length (filter P (nths [] I)) \\<le> length (filter P [])\n 2. \\<And>a xs I.\n       (\\<And>I.\n           length (filter P (nths xs I))\n           \\<le> length (filter P xs)) \\<Longrightarrow>\n       length (filter P (nths (a # xs) I)) \\<le> length (filter P (a # xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P (nths [] I)) \\<le> length (filter P [])", "by simp"], ["proof (state)\nthis:\n  length (filter P (nths [] I)) \\<le> length (filter P [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs I.\n       (\\<And>I.\n           length (filter P (nths xs I))\n           \\<le> length (filter P xs)) \\<Longrightarrow>\n       length (filter P (nths (a # xs) I)) \\<le> length (filter P (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs I.\n       (\\<And>I.\n           length (filter P (nths xs I))\n           \\<le> length (filter P xs)) \\<Longrightarrow>\n       length (filter P (nths (a # xs) I)) \\<le> length (filter P (a # xs))", "case Cons"], ["proof (state)\nthis:\n  length (filter P (nths xs_ ?I)) \\<le> length (filter P xs_)\n\ngoal (1 subgoal):\n 1. \\<And>a xs I.\n       (\\<And>I.\n           length (filter P (nths xs I))\n           \\<le> length (filter P xs)) \\<Longrightarrow>\n       length (filter P (nths (a # xs) I)) \\<le> length (filter P (a # xs))", "then"], ["proof (chain)\npicking this:\n  length (filter P (nths xs_ ?I)) \\<le> length (filter P xs_)", "show ?case"], ["proof (prove)\nusing this:\n  length (filter P (nths xs_ ?I)) \\<le> length (filter P xs_)\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "(* Found by sledgehammer *)"], ["proof (prove)\nusing this:\n  length (filter P (nths xs_ ?I)) \\<le> length (filter P xs_)\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "fix a :: 'a and xsa :: \"'a list\" and Ia :: \"nat set\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "assume a1: \"\\<And>I. length (filter P (nths xsa I)) \\<le> length (filter P xsa)\""], ["proof (state)\nthis:\n  length (filter P (nths xsa ?I)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "have f2:\n      \"\\<forall>b bs N. if 0 \\<in> N then nths ((b::'a) # bs) N =\n        [b] @ nths bs {n. Suc n \\<in> N} else nths (b # bs) N = [] @ nths bs {n. Suc n \\<in> N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b bs N.\n       if 0 \\<in> N then nths (b # bs) N = [b] @ nths bs {n. Suc n \\<in> N}\n       else nths (b # bs) N = [] @ nths bs {n. Suc n \\<in> N}", "by (simp add: nths_Cons)"], ["proof (state)\nthis:\n  \\<forall>b bs N.\n     if 0 \\<in> N then nths (b # bs) N = [b] @ nths bs {n. Suc n \\<in> N}\n     else nths (b # bs) N = [] @ nths bs {n. Suc n \\<in> N}\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "have f3:\n      \"nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia}\n        \\<longrightarrow> length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P xsa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<longrightarrow>\n    length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P xsa)", "using a1"], ["proof (prove)\nusing this:\n  length (filter P (nths xsa ?I)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<longrightarrow>\n    length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P xsa)", "by (metis append_Nil)"], ["proof (state)\nthis:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "have f4: \"length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0 \\<le> length (filter P xsa) + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0\n    \\<le> length (filter P xsa) + 0", "using a1"], ["proof (prove)\nusing this:\n  length (filter P (nths xsa ?I)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0\n    \\<le> length (filter P xsa) + 0", "by simp"], ["proof (state)\nthis:\n  length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0\n  \\<le> length (filter P xsa) + 0\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "have f5:\n      \"Suc (length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0)\n      = length (a # filter P (nths xsa {n. Suc n \\<in> Ia}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0) =\n    length (a # filter P (nths xsa {n. Suc n \\<in> Ia}))", "by force"], ["proof (state)\nthis:\n  Suc (length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0) =\n  length (a # filter P (nths xsa {n. Suc n \\<in> Ia}))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "have f6: \"Suc (length (filter P xsa) + 0) = length (a # filter P xsa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length (filter P xsa) + 0) = length (a # filter P xsa)", "by simp"], ["proof (state)\nthis:\n  Suc (length (filter P xsa) + 0) = length (a # filter P xsa)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "{"], ["proof (state)\nthis:\n  Suc (length (filter P xsa) + 0) = length (a # filter P xsa)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "assume \"\\<not> length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\""], ["proof (state)\nthis:\n  \\<not> length (filter P (nths (a # xsa) Ia))\n         \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "{"], ["proof (state)\nthis:\n  \\<not> length (filter P (nths (a # xsa) Ia))\n         \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "assume \"nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\""], ["proof (state)\nthis:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "moreover"], ["proof (state)\nthis:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "{"], ["proof (state)\nthis:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "assume\n            \"nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia}\n            \\<and> length (filter P (a # xsa)) \\<le> length (filter P xsa)\""], ["proof (state)\nthis:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "then"], ["proof (chain)\npicking this:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa)", "have \"length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\""], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "using a1"], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa)\n  length (filter P (nths xsa ?I)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "by (metis (no_types) append_Nil filter.simps(2) impossible_Cons)"], ["proof (state)\nthis:\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "}"], ["proof (state)\nthis:\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "ultimately"], ["proof (chain)\npicking this:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "have \"length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\""], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "using f3 f2"], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia \\<noteq> [a] @ nths xsa {n. Suc n \\<in> Ia}\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<and>\n  length (filter P (a # xsa)) \\<le> length (filter P xsa) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n  nths (a # xsa) Ia = [] @ nths xsa {n. Suc n \\<in> Ia} \\<longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P xsa)\n  \\<forall>b bs N.\n     if 0 \\<in> N then nths (b # bs) N = [b] @ nths bs {n. Suc n \\<in> N}\n     else nths (b # bs) N = [] @ nths bs {n. Suc n \\<in> N}\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "by (meson dual_order.trans le_cases)"], ["proof (state)\nthis:\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "}"], ["proof (state)\nthis:\n  nths (a # xsa) Ia \\<noteq>\n  [a] @ nths xsa {n. Suc n \\<in> Ia} \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "then"], ["proof (chain)\npicking this:\n  nths (a # xsa) Ia \\<noteq>\n  [a] @ nths xsa {n. Suc n \\<in> Ia} \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "have \"length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\""], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia \\<noteq>\n  [a] @ nths xsa {n. Suc n \\<in> Ia} \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "using f6 f5 f4 a1"], ["proof (prove)\nusing this:\n  nths (a # xsa) Ia \\<noteq>\n  [a] @ nths xsa {n. Suc n \\<in> Ia} \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n  Suc (length (filter P xsa) + 0) = length (a # filter P xsa)\n  Suc (length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0) =\n  length (a # filter P (nths xsa {n. Suc n \\<in> Ia}))\n  length (filter P (nths xsa {n. Suc n \\<in> Ia})) + 0\n  \\<le> length (filter P xsa) + 0\n  length (filter P (nths xsa ?I)) \\<le> length (filter P xsa)\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "by (metis Suc_le_mono append_Cons append_Nil filter.simps(2))"], ["proof (state)\nthis:\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "}"], ["proof (state)\nthis:\n  \\<not> length (filter P (nths (a # xsa) Ia))\n         \\<le> length (filter P (a # xsa)) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        length (filter P (nths xs_ I))\n        \\<le> length (filter P xs_)) \\<Longrightarrow>\n    length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))", "then"], ["proof (chain)\npicking this:\n  \\<not> length (filter P (nths (a # xsa) Ia))\n         \\<le> length (filter P (a # xsa)) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "show \"length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\""], ["proof (prove)\nusing this:\n  \\<not> length (filter P (nths (a # xsa) Ia))\n         \\<le> length (filter P (a # xsa)) \\<Longrightarrow>\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal (1 subgoal):\n 1. length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))", "by meson"], ["proof (state)\nthis:\n  length (filter P (nths (a # xsa) Ia)) \\<le> length (filter P (a # xsa))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (filter P (nths (a_ # xs_) I)) \\<le> length (filter P (a_ # xs_))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* Theory *)"]]}