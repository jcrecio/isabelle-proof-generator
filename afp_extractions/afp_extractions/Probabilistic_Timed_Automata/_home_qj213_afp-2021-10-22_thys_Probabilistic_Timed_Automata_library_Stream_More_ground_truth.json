{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata/library/Stream_More.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata", "problem_names": ["lemma list_all_stake_least:\n  \"list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\" (is \"?G\") if \"\\<exists> n. P (xs !! n)\"", "lemma alw_stream_all2_mono:\n  assumes \"stream_all2 P xs ys\" \"alw Q xs\" \"\\<And> xs ys. stream_all2 P xs ys \\<Longrightarrow> Q xs \\<Longrightarrow> R ys\"\n  shows \"alw R ys\"", "lemma alw_ev_HLD_cycle:\n  assumes \"stream_all2 (\\<in>) xs (cycle as)\" \"a \\<in> set as\"\n  shows \"infs a xs\"", "lemma alw_ev_mono:\n  assumes \"alw (ev \\<phi>) xs\" and \"\\<And> xs. \\<phi> xs \\<Longrightarrow> \\<psi> xs\"\n  shows \"alw (ev \\<psi>) xs\"", "lemma alw_ev_lockstep:\n  assumes\n    \"alw (ev (holds P)) xs\" \"stream_all2 Q xs as\"\n    \"\\<And> x a. P x \\<Longrightarrow> Q x a \\<Longrightarrow> R a\"\n  shows\n    \"alw (ev (holds R)) as\"", "lemma nxt_holds_iff_snth: \"(nxt ^^ y) (holds P) xs \\<longleftrightarrow> P (xs !! y)\"", "lemma wait_LEAST:\n  \"wait (holds P) xs = (LEAST n. P (xs !! n))\"", "lemma sfilter_SCons_decomp:\n  assumes \"sfilter P xs = x ## zs\" \"ev (holds P) xs\"\n  shows \"\\<exists> ys' zs'. xs = ys' @- x ## zs' \\<and> list_all (Not o P) ys' \\<and> P x \\<and> sfilter P zs' = zs\"", "lemma sfilter_SCons_decomp':\n  assumes \"sfilter P xs = x ## zs\" \"ev (holds P) xs\"\n  shows\n    \"list_all (Not o P) (stake (wait (holds P) xs) xs)\" (is \"?G1\")\n    \"P x\"\n    \"\\<exists> zs'. xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and> sfilter P zs' = zs\" (is \"?G2\")", "lemma sfilter_shift_decomp:\n  assumes \"sfilter P xs = ys @- zs\" \"alw (ev (holds P)) xs\"\n  shows \"\\<exists> ys' zs'. xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs\"", "lemma finite_sset_sfilter_decomp:\n  assumes \"finite (sset (sfilter P xs))\" \"alw (ev (holds P)) xs\"\n  obtains x ws ys zs where \"xs = ws @- x ## ys @- x ## zs\" \"P x\"", "lemma sfilter_shd_LEAST:\n  \"shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))\" if \"ev (holds P) xs\"", "lemma alw_nxt_holds_cong:\n  \"(nxt ^^ n) (holds (\\<lambda>x. P x \\<and> Q x)) xs = (nxt ^^ n) (holds Q) xs\" if \"alw (holds P) xs\"", "lemma alw_wait_holds_cong:\n  \"wait (holds (\\<lambda>x. P x \\<and> Q x)) xs = wait (holds Q) xs\" if \"alw (holds P) xs\"", "lemma alw_sfilter:\n  \"sfilter (\\<lambda> x. P x \\<and> Q x) xs = sfilter Q xs\" if \"alw (holds P) xs\" \"alw (ev (holds Q)) xs\"", "lemma alw_ev_holds_mp:\n  \"alw (holds P) xs \\<Longrightarrow> ev (holds Q) xs \\<Longrightarrow> ev (holds (\\<lambda>x. P x \\<and> Q x)) xs\"", "lemma alw_ev_conjI:\n  \"alw (ev (holds (\\<lambda> x. P x \\<and> Q x))) xs\" if \"alw (holds P) xs\" \"alw (ev (holds Q)) xs\"", "lemma alw_holds_pred_stream_iff:\n  \"alw (holds P) xs \\<longleftrightarrow> pred_stream P xs\"", "lemma alw_holds_sset:\n  \"alw (holds P) xs = (\\<forall> x \\<in> sset xs. P x)\"", "lemma pred_stream_sfilter:\n  assumes alw_ev: \"alw (ev (holds P)) xs\"\n  shows \"pred_stream P (sfilter P xs)\"", "lemma alw_ev_sfilter_mono:\n  assumes alw_ev: \"alw (ev (holds P)) xs\"\n    and mono: \"\\<And> x. P x \\<Longrightarrow> Q x\"\n  shows \"pred_stream Q (sfilter P xs)\"", "lemma sset_sfilter:\n  \"sset (sfilter P xs) \\<subseteq> sset xs\" if \"alw (ev (holds P)) xs\"", "lemma stream_all2_weaken:\n  \"stream_all2 Q xs ys\" if \"stream_all2 P xs ys\" \"\\<And> x y. P x y \\<Longrightarrow> Q x y\"", "lemma stream_all2_SCons1:\n  \"stream_all2 P (x ## xs) ys = (\\<exists>z zs. ys = z ## zs \\<and> P x z \\<and> stream_all2 P xs zs)\"", "lemma stream_all2_SCons2:\n  \"stream_all2 P xs (y ## ys) = (\\<exists>z zs. xs = z ## zs \\<and> P z y \\<and> stream_all2 P zs ys)\"", "lemma stream_all2_combine:\n  \"stream_all2 R xs zs\" if\n  \"stream_all2 P xs ys\" \"stream_all2 Q ys zs\" \"\\<And> x y z. P x y \\<and> Q y z \\<Longrightarrow> R x z\"", "lemma stream_all2_shift1:\n  \"stream_all2 P (xs1 @- xs2) ys =\n  (\\<exists> ys1 ys2. ys = ys1 @- ys2 \\<and> list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2)\"", "lemma stream_all2_shift2:\n  \"stream_all2 P ys (xs1 @- xs2) =\n  (\\<exists> ys1 ys2. ys = ys1 @- ys2 \\<and> list_all2 P ys1 xs1 \\<and> stream_all2 P ys2 xs2)\"", "lemma stream_all2_bisim:\n  assumes \"stream_all2 (\\<in>) xs as\" \"stream_all2 (\\<in>) ys as\" \"sset as \\<subseteq> S\"\n  shows \"stream_all2 (\\<lambda> x y. \\<exists> a. x \\<in> a \\<and> y \\<in> a \\<and> a \\<in> S) xs ys\""], "translations": [["", "lemma list_all_stake_least:\n  \"list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\" (is \"?G\") if \"\\<exists> n. P (xs !! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> list_all (Not \\<circ> P)\n            (stake (LEAST n. P (xs !! n)) xs) \\<Longrightarrow>\n    False", "let ?n = \"LEAST n. P (xs !! n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> list_all (Not \\<circ> P)\n            (stake (LEAST n. P (xs !! n)) xs) \\<Longrightarrow>\n    False", "assume \"\\<not> ?G\""], ["proof (state)\nthis:\n  \\<not> list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\n\ngoal (1 subgoal):\n 1. \\<not> list_all (Not \\<circ> P)\n            (stake (LEAST n. P (xs !! n)) xs) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)", "have \"\\<exists> x \\<in> set (stake ?n xs). P x\""], ["proof (prove)\nusing this:\n  \\<not> list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  \\<not> Ball (set (stake (LEAST n. P (xs !! n)) xs)) (Not \\<circ> P)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x\n\ngoal (1 subgoal):\n 1. \\<not> list_all (Not \\<circ> P)\n            (stake (LEAST n. P (xs !! n)) xs) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x", "obtain n' where \"n' < ?n\" \"P (xs !! n')\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' < (LEAST n. P (xs !! n)); P (xs !! n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_stake_snth"], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set (stake (LEAST n. P (xs !! n)) xs). P x\n  (?x \\<in> set (stake ?n ?xs)) = (\\<exists>i<?n. ?xs !! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' < (LEAST n. P (xs !! n)); P (xs !! n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  n' < (LEAST n. P (xs !! n))\n  P (xs !! n')\n\ngoal (1 subgoal):\n 1. \\<not> list_all (Not \\<circ> P)\n            (stake (LEAST n. P (xs !! n)) xs) \\<Longrightarrow>\n    False", "with Least_le[of \"\\<lambda> n. P (xs !! n)\" n']"], ["proof (chain)\npicking this:\n  P (xs !! n') \\<Longrightarrow> (LEAST x. P (xs !! x)) \\<le> n'\n  n' < (LEAST n. P (xs !! n))\n  P (xs !! n')", "show False"], ["proof (prove)\nusing this:\n  P (xs !! n') \\<Longrightarrow> (LEAST x. P (xs !! x)) \\<le> n'\n  n' < (LEAST n. P (xs !! n))\n  P (xs !! n')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_stream_all2_mono:\n  assumes \"stream_all2 P xs ys\" \"alw Q xs\" \"\\<And> xs ys. stream_all2 P xs ys \\<Longrightarrow> Q xs \\<Longrightarrow> R ys\"\n  shows \"alw R ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw R ys", "using assms stream.rel_sel"], ["proof (prove)\nusing this:\n  stream_all2 P xs ys\n  alw Q xs\n  \\<lbrakk>stream_all2 P ?xs ?ys; Q ?xs\\<rbrakk> \\<Longrightarrow> R ?ys\n  stream_all2 ?R ?a ?b =\n  (?R (shd ?a) (shd ?b) \\<and> stream_all2 ?R (stl ?a) (stl ?b))\n\ngoal (1 subgoal):\n 1. alw R ys", "by (coinduction arbitrary: xs ys) (blast)"], ["", "lemma alw_ev_HLD_cycle:\n  assumes \"stream_all2 (\\<in>) xs (cycle as)\" \"a \\<in> set as\"\n  shows \"infs a xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs a xs", "using assms(1)"], ["proof (prove)\nusing this:\n  stream_all2 (\\<in>) xs (cycle as)\n\ngoal (1 subgoal):\n 1. infs a xs", "proof coinduct"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "case (infs xs)"], ["proof (state)\nthis:\n  stream_all2 (\\<in>) xs (cycle as)\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "have 1: \"as \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<noteq> []", "using assms(2)"], ["proof (prove)\nusing this:\n  a \\<in> set as\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "have 2:\n    \"list_all2 (\\<in>) (stake (length as) xs) (stake (length as) (cycle as))\"\n    \"stream_all2 (\\<in>) (sdrop (length as) xs) (sdrop (length as) (cycle as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<in>) (stake (length as) xs)\n     (stake (length as) (cycle as)) &&&\n    stream_all2 (\\<in>) (sdrop (length as) xs)\n     (sdrop (length as) (cycle as))", "using infs stream_rel_shift stake_sdrop length_stake"], ["proof (prove)\nusing this:\n  stream_all2 (\\<in>) xs (cycle as)\n  length ?u\\<^sub>1 = length ?v\\<^sub>1 \\<Longrightarrow>\n  stream_all2 ?P (?u\\<^sub>1 @- ?u\\<^sub>2) (?v\\<^sub>1 @- ?v\\<^sub>2) =\n  (list_all2 ?P ?u\\<^sub>1 ?v\\<^sub>1 \\<and>\n   stream_all2 ?P ?u\\<^sub>2 ?v\\<^sub>2)\n  stake ?n ?s @- sdrop ?n ?s = ?s\n  length (stake ?n ?s) = ?n\n\ngoal (1 subgoal):\n 1. list_all2 (\\<in>) (stake (length as) xs)\n     (stake (length as) (cycle as)) &&&\n    stream_all2 (\\<in>) (sdrop (length as) xs)\n     (sdrop (length as) (cycle as))", "by metis+"], ["proof (state)\nthis:\n  list_all2 (\\<in>) (stake (length as) xs) (stake (length as) (cycle as))\n  stream_all2 (\\<in>) (sdrop (length as) xs) (sdrop (length as) (cycle as))\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "have 3: \"stake (length as) (cycle as) = as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stake (length as) (cycle as) = as", "using 1"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. stake (length as) (cycle as) = as", "by simp"], ["proof (state)\nthis:\n  stake (length as) (cycle as) = as\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "have 4: \"sdrop (length as) (cycle as) = cycle as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sdrop (length as) (cycle as) = cycle as", "using sdrop_cycle_eq 1"], ["proof (prove)\nusing this:\n  ?u \\<noteq> [] \\<Longrightarrow> sdrop (length ?u) (cycle ?u) = cycle ?u\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. sdrop (length as) (cycle as) = cycle as", "by this"], ["proof (state)\nthis:\n  sdrop (length as) (cycle as) = cycle as\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "have 5: \"set (stake (length as) xs) \\<inter> a \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (stake (length as) xs) \\<inter> a \\<noteq> {}", "using assms(2) 2(1)"], ["proof (prove)\nusing this:\n  a \\<in> set as\n  list_all2 (\\<in>) (stake (length as) xs) (stake (length as) (cycle as))\n\ngoal (1 subgoal):\n 1. set (stake (length as) xs) \\<inter> a \\<noteq> {}", "unfolding list.in_rel 3"], ["proof (prove)\nusing this:\n  a \\<in> set as\n  \\<exists>z.\n     z \\<in> {x. set x \\<subseteq> {(x, y). x \\<in> y}} \\<and>\n     map fst z = stake (length as) xs \\<and> map snd z = as\n\ngoal (1 subgoal):\n 1. set (stake (length as) xs) \\<inter> a \\<noteq> {}", "by (auto) (metis IntI empty_iff mem_Collect_eq set_zip_leftD split_conv subsetCE zip_map_fst_snd)"], ["proof (state)\nthis:\n  set (stake (length as) xs) \\<inter> a \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       stream_all2 (\\<in>) w (cycle as) \\<Longrightarrow>\n       \\<exists>u v.\n          w = u @- v \\<and>\n          set u \\<inter> a \\<noteq> {} \\<and>\n          stream_all2 (\\<in>) v (cycle as)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       xs = u @- v \\<and>\n       set u \\<inter> a \\<noteq> {} \\<and> stream_all2 (\\<in>) v (cycle as)", "using 2 5"], ["proof (prove)\nusing this:\n  list_all2 (\\<in>) (stake (length as) xs) (stake (length as) (cycle as))\n  stream_all2 (\\<in>) (sdrop (length as) xs) (sdrop (length as) (cycle as))\n  set (stake (length as) xs) \\<inter> a \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       xs = u @- v \\<and>\n       set u \\<inter> a \\<noteq> {} \\<and> stream_all2 (\\<in>) v (cycle as)", "unfolding 4"], ["proof (prove)\nusing this:\n  list_all2 (\\<in>) (stake (length as) xs) (stake (length as) (cycle as))\n  stream_all2 (\\<in>) (sdrop (length as) xs) (cycle as)\n  set (stake (length as) xs) \\<inter> a \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       xs = u @- v \\<and>\n       set u \\<inter> a \\<noteq> {} \\<and> stream_all2 (\\<in>) v (cycle as)", "by force"], ["proof (state)\nthis:\n  \\<exists>u v.\n     xs = u @- v \\<and>\n     set u \\<inter> a \\<noteq> {} \\<and> stream_all2 (\\<in>) v (cycle as)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_ev_mono:\n  assumes \"alw (ev \\<phi>) xs\" and \"\\<And> xs. \\<phi> xs \\<Longrightarrow> \\<psi> xs\"\n  shows \"alw (ev \\<psi>) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev \\<psi>) xs", "by (rule alw_mp[OF assms(1)]) (auto intro: ev_mono assms(2) simp: alw_iff_sdrop)"], ["", "lemma alw_ev_lockstep:\n  assumes\n    \"alw (ev (holds P)) xs\" \"stream_all2 Q xs as\"\n    \"\\<And> x a. P x \\<Longrightarrow> Q x a \\<Longrightarrow> R a\"\n  shows\n    \"alw (ev (holds R)) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev (holds R)) as", "using assms(1,2)"], ["proof (prove)\nusing this:\n  alw (ev (holds P)) xs\n  stream_all2 Q xs as\n\ngoal (1 subgoal):\n 1. alw (ev (holds R)) as", "apply (coinduction arbitrary: xs as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs as.\n       \\<lbrakk>alw (ev (holds P)) xs; stream_all2 Q xs as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            as = xs \\<and>\n                            ev (holds R) xs \\<and>\n                            ((\\<exists>xsa as.\n                                 stl xs = as \\<and>\n                                 alw (ev (holds P)) xsa \\<and>\n                                 stream_all2 Q xsa as) \\<or>\n                             alw (ev (holds R)) (stl xs))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs as.\n       \\<lbrakk>alw (ev (holds P)) xs; stream_all2 Q xs as\\<rbrakk>\n       \\<Longrightarrow> ev (holds R) as\n 2. \\<And>xs as.\n       \\<lbrakk>alw (ev (holds P)) xs; stream_all2 Q xs as;\n        \\<not> alw (ev (holds R)) as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            alw (ev (holds P)) xs \\<and>\n                            stream_all2 Q xs (stl as)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alw (ev (holds P)) xs_; stream_all2 Q xs_ as_\\<rbrakk>\n    \\<Longrightarrow> ev (holds R) as_", "by (metis alw.cases assms(3) ev_holds_sset stream_all2_sset1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs as.\n       \\<lbrakk>alw (ev (holds P)) xs; stream_all2 Q xs as;\n        \\<not> alw (ev (holds R)) as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            alw (ev (holds P)) xs \\<and>\n                            stream_all2 Q xs (stl as)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alw (ev (holds P)) xs_; stream_all2 Q xs_ as_;\n     \\<not> alw (ev (holds R)) as_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         alw (ev (holds P)) xs \\<and>\n                         stream_all2 Q xs (stl as_)", "by (meson alw.cases stream.rel_sel)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>sfilter, wait, nxt\\<close>"], ["", "text \\<open>Useful?\\<close>"], ["", "lemma nxt_holds_iff_snth: \"(nxt ^^ y) (holds P) xs \\<longleftrightarrow> P (xs !! y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nxt ^^ y) (holds P) xs = P (xs !! y)", "by (induction y arbitrary: xs; simp)"], ["", "text \\<open>Useful?\\<close>"], ["", "lemma wait_LEAST:\n  \"wait (holds P) xs = (LEAST n. P (xs !! n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wait (holds P) xs = (LEAST n. P (xs !! n))", "unfolding wait_def nxt_holds_iff_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. P (xs !! n)) = (LEAST n. P (xs !! n))", ".."], ["", "lemma sfilter_SCons_decomp:\n  assumes \"sfilter P xs = x ## zs\" \"ev (holds P) xs\"\n  shows \"\\<exists> ys' zs'. xs = ys' @- x ## zs' \\<and> list_all (Not o P) ys' \\<and> P x \\<and> sfilter P zs' = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "from ev_imp_shift[OF assms(2)]"], ["proof (chain)\npicking this:\n  \\<exists>xl xs2. xs = xl @- xs2 \\<and> holds P xs2", "obtain as bs where \"xs = as @- bs\" \"holds P bs\""], ["proof (prove)\nusing this:\n  \\<exists>xl xs2. xs = xl @- xs2 \\<and> holds P xs2\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>xs = as @- bs; holds P bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs = as @- bs\n  holds P bs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "then"], ["proof (chain)\npicking this:\n  xs = as @- bs\n  holds P bs", "have \"P (shd bs)\""], ["proof (prove)\nusing this:\n  xs = as @- bs\n  holds P bs\n\ngoal (1 subgoal):\n 1. P (shd bs)", "by auto"], ["proof (state)\nthis:\n  P (shd bs)\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "with \\<open>xs = _\\<close>"], ["proof (chain)\npicking this:\n  xs = as @- bs\n  P (shd bs)", "have \"\\<exists> n. P (xs !! n)\""], ["proof (prove)\nusing this:\n  xs = as @- bs\n  P (shd bs)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P (xs !! n)", "using assms(2) sdrop_wait"], ["proof (prove)\nusing this:\n  xs = as @- bs\n  P (shd bs)\n  ev (holds P) xs\n  ev ?\\<phi> ?xs \\<Longrightarrow> ?\\<phi> (sdrop (wait ?\\<phi> ?xs) ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P (xs !! n)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n. P (xs !! n)\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "from sdrop_while_sdrop_LEAST[OF this]"], ["proof (chain)\npicking this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs", "have *:\n    \"sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\""], ["proof (prove)\nusing this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs", "."], ["proof (state)\nthis:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "let ?xs = \"sdrop_while (Not \\<circ> P) xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "let ?n = \"LEAST n. P (xs !! n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "from assms(1)"], ["proof (chain)\npicking this:\n  sfilter P xs = x ## zs", "have \"x = shd ?xs\" \"zs = sfilter P (stl ?xs)\""], ["proof (prove)\nusing this:\n  sfilter P xs = x ## zs\n\ngoal (1 subgoal):\n 1. x = shd (sdrop_while (Not \\<circ> P) xs) &&&\n    zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))", "by (subst (asm) sfilter.ctr; simp)+"], ["proof (state)\nthis:\n  x = shd (sdrop_while (Not \\<circ> P) xs)\n  zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "have \"xs = stake ?n xs @- sdrop ?n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs", "by simp"], ["proof (state)\nthis:\n  xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "moreover"], ["proof (state)\nthis:\n  xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "have \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "using assms(1)"], ["proof (prove)\nusing this:\n  sfilter P xs = x ## zs\n\ngoal (1 subgoal):\n 1. P x", "unfolding sfilter_eq[OF assms(2)]"], ["proof (prove)\nusing this:\n  P x \\<and>\n  ((\\<lambda>xs. \\<not> holds P xs) suntil\n   (\\<lambda>xs. HLD {x} xs \\<and> nxt (\\<lambda>s. sfilter P s = zs) xs))\n   xs\n\ngoal (1 subgoal):\n 1. P x", ".."], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "moreover"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "from \\<open>\\<exists> n. P _\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n. P (xs !! n)", "have \"list_all (Not o P) (stake ?n xs)\""], ["proof (prove)\nusing this:\n  \\<exists>n. P (xs !! n)\n\ngoal (1 subgoal):\n 1. list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)", "by (rule list_all_stake_least)"], ["proof (state)\nthis:\n  list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "ultimately"], ["proof (chain)\npicking this:\n  xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs\n  P x\n  list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs\n  P x\n  list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "using \\<open>x = _\\<close> \\<open>zs = _\\<close> *[symmetric]"], ["proof (prove)\nusing this:\n  xs = stake (LEAST n. P (xs !! n)) xs @- sdrop (LEAST n. P (xs !! n)) xs\n  P x\n  list_all (Not \\<circ> P) (stake (LEAST n. P (xs !! n)) xs)\n  x = shd (sdrop_while (Not \\<circ> P) xs)\n  zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n  sdrop (LEAST n. P (xs !! n)) xs = sdrop_while (Not \\<circ> P) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- x ## zs' \\<and>\n       list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "by (inst_existentials \"stake ?n xs\" \"stl ?xs\") auto"], ["proof (state)\nthis:\n  \\<exists>ys' zs'.\n     xs = ys' @- x ## zs' \\<and>\n     list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sfilter_SCons_decomp':\n  assumes \"sfilter P xs = x ## zs\" \"ev (holds P) xs\"\n  shows\n    \"list_all (Not o P) (stake (wait (holds P) xs) xs)\" (is \"?G1\")\n    \"P x\"\n    \"\\<exists> zs'. xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and> sfilter P zs' = zs\" (is \"?G2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs) &&&\n    P x &&&\n    \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "from ev_imp_shift[OF assms(2)]"], ["proof (chain)\npicking this:\n  \\<exists>xl xs2. xs = xl @- xs2 \\<and> holds P xs2", "obtain as bs where \"xs = as @- bs\" \"holds P bs\""], ["proof (prove)\nusing this:\n  \\<exists>xl xs2. xs = xl @- xs2 \\<and> holds P xs2\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>xs = as @- bs; holds P bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs = as @- bs\n  holds P bs\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "then"], ["proof (chain)\npicking this:\n  xs = as @- bs\n  holds P bs", "have \"P (shd bs)\""], ["proof (prove)\nusing this:\n  xs = as @- bs\n  holds P bs\n\ngoal (1 subgoal):\n 1. P (shd bs)", "by auto"], ["proof (state)\nthis:\n  P (shd bs)\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "with \\<open>xs = _\\<close>"], ["proof (chain)\npicking this:\n  xs = as @- bs\n  P (shd bs)", "have \"\\<exists> n. P (xs !! n)\""], ["proof (prove)\nusing this:\n  xs = as @- bs\n  P (shd bs)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P (xs !! n)", "using assms(2) sdrop_wait"], ["proof (prove)\nusing this:\n  xs = as @- bs\n  P (shd bs)\n  ev (holds P) xs\n  ev ?\\<phi> ?xs \\<Longrightarrow> ?\\<phi> (sdrop (wait ?\\<phi> ?xs) ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P (xs !! n)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n. P (xs !! n)\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "thm sdrop_wait"], ["proof (state)\nthis:\n  \\<exists>n. P (xs !! n)\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "from sdrop_while_sdrop_LEAST[OF this]"], ["proof (chain)\npicking this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs", "have *:\n    \"sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\""], ["proof (prove)\nusing this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs", "."], ["proof (state)\nthis:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "let ?xs = \"sdrop_while (Not \\<circ> P) xs\""], ["proof (state)\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "let ?n = \"wait (holds P) xs\""], ["proof (state)\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "from assms(1)"], ["proof (chain)\npicking this:\n  sfilter P xs = x ## zs", "have \"x = shd ?xs\" \"zs = sfilter P (stl ?xs)\""], ["proof (prove)\nusing this:\n  sfilter P xs = x ## zs\n\ngoal (1 subgoal):\n 1. x = shd (sdrop_while (Not \\<circ> P) xs) &&&\n    zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))", "by (subst (asm) sfilter.ctr; simp)+"], ["proof (state)\nthis:\n  x = shd (sdrop_while (Not \\<circ> P) xs)\n  zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "have \"xs = stake ?n xs @- sdrop ?n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs", "by simp"], ["proof (state)\nthis:\n  xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "moreover"], ["proof (state)\nthis:\n  xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs\n\ngoal (3 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. P x\n 3. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "show \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "using assms(1)"], ["proof (prove)\nusing this:\n  sfilter P xs = x ## zs\n\ngoal (1 subgoal):\n 1. P x", "unfolding sfilter_eq[OF assms(2)]"], ["proof (prove)\nusing this:\n  P x \\<and>\n  ((\\<lambda>xs. \\<not> holds P xs) suntil\n   (\\<lambda>xs. HLD {x} xs \\<and> nxt (\\<lambda>s. sfilter P s = zs) xs))\n   xs\n\ngoal (1 subgoal):\n 1. P x", ".."], ["proof (state)\nthis:\n  P x\n\ngoal (2 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "moreover"], ["proof (state)\nthis:\n  P x\n\ngoal (2 subgoals):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n 2. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "from \\<open>\\<exists> n. P _\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n. P (xs !! n)", "show \"list_all (Not o P) (stake ?n xs)\""], ["proof (prove)\nusing this:\n  \\<exists>n. P (xs !! n)\n\ngoal (1 subgoal):\n 1. list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)", "by (auto intro: list_all_stake_least simp: wait_LEAST)"], ["proof (state)\nthis:\n  list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "ultimately"], ["proof (chain)\npicking this:\n  xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs\n  P x\n  list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)", "show ?G2"], ["proof (prove)\nusing this:\n  xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs\n  P x\n  list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "using \\<open>x = _\\<close> \\<open>zs = _\\<close> *[symmetric]"], ["proof (prove)\nusing this:\n  xs = stake (wait (holds P) xs) xs @- sdrop (wait (holds P) xs) xs\n  P x\n  list_all (Not \\<circ> P) (stake (wait (holds P) xs) xs)\n  x = shd (sdrop_while (Not \\<circ> P) xs)\n  zs = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n  sdrop (LEAST n. P (xs !! n)) xs = sdrop_while (Not \\<circ> P) xs\n\ngoal (1 subgoal):\n 1. \\<exists>zs'.\n       xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and>\n       sfilter P zs' = zs", "by (inst_existentials \"stl ?xs\") (auto simp: wait_LEAST)"], ["proof (state)\nthis:\n  \\<exists>zs'.\n     xs = stake (wait (holds P) xs) xs @- x ## zs' \\<and> sfilter P zs' = zs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sfilter_shift_decomp:\n  assumes \"sfilter P xs = ys @- zs\" \"alw (ev (holds P)) xs\"\n  shows \"\\<exists> ys' zs'. xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs", "using assms(1,2)"], ["proof (prove)\nusing this:\n  sfilter P xs = ys @- zs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs", "proof (induction ys arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>sfilter P xs = [] @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = [] \\<and> sfilter P zs' = zs\n 2. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "case Nil"], ["proof (state)\nthis:\n  sfilter P xs = [] @- zs\n  alw (ev (holds P)) xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>sfilter P xs = [] @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = [] \\<and> sfilter P zs' = zs\n 2. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "then"], ["proof (chain)\npicking this:\n  sfilter P xs = [] @- zs\n  alw (ev (holds P)) xs", "show ?case"], ["proof (prove)\nusing this:\n  sfilter P xs = [] @- zs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- zs' \\<and> filter P ys' = [] \\<and> sfilter P zs' = zs", "by (inst_existentials \"[] :: 'a list\" xs; simp)"], ["proof (state)\nthis:\n  \\<exists>ys' zs'.\n     xs = ys' @- zs' \\<and> filter P ys' = [] \\<and> sfilter P zs' = zs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>sfilter P ?xs = ys @- zs; alw (ev (holds P)) ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ys' zs'.\n                       ?xs = ys' @- zs' \\<and>\n                       filter P ys' = ys \\<and> sfilter P zs' = zs\n  sfilter P xs = (y # ys) @- zs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "from alw_ev_imp_ev_alw[OF \\<open>alw (ev _) xs\\<close>]"], ["proof (chain)\npicking this:\n  ev (\\<lambda>xs. holds P xs \\<and> alw (ev (holds P)) xs) xs", "have \"ev (holds P) xs\""], ["proof (prove)\nusing this:\n  ev (\\<lambda>xs. holds P xs \\<and> alw (ev (holds P)) xs) xs\n\ngoal (1 subgoal):\n 1. ev (holds P) xs", "by (auto elim: ev_mono)"], ["proof (state)\nthis:\n  ev (holds P) xs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "with Cons.prems(1) sfilter_SCons_decomp[of P xs y \"ys @- zs\"]"], ["proof (chain)\npicking this:\n  sfilter P xs = (y # ys) @- zs\n  \\<lbrakk>sfilter P xs = y ## ys @- zs; ev (holds P) xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ys' zs'.\n                       xs = ys' @- y ## zs' \\<and>\n                       list_all (Not \\<circ> P) ys' \\<and>\n                       P y \\<and> sfilter P zs' = ys @- zs\n  ev (holds P) xs", "guess ys' zs'"], ["proof (prove)\nusing this:\n  sfilter P xs = (y # ys) @- zs\n  \\<lbrakk>sfilter P xs = y ## ys @- zs; ev (holds P) xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ys' zs'.\n                       xs = ys' @- y ## zs' \\<and>\n                       list_all (Not \\<circ> P) ys' \\<and>\n                       P y \\<and> sfilter P zs' = ys @- zs\n  ev (holds P) xs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "note guessed = this"], ["proof (state)\nthis:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "then"], ["proof (chain)\npicking this:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs", "have \"sfilter P zs' = ys @- zs\""], ["proof (prove)\nusing this:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs\n\ngoal (1 subgoal):\n 1. sfilter P zs' = ys @- zs", "by auto"], ["proof (state)\nthis:\n  sfilter P zs' = ys @- zs\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "from \\<open>alw (ev _) xs\\<close> \\<open>xs = _\\<close>"], ["proof (chain)\npicking this:\n  alw (ev (holds P)) xs\n  xs = ys' @- y ## zs'", "have \"alw (ev (holds P)) zs'\""], ["proof (prove)\nusing this:\n  alw (ev (holds P)) xs\n  xs = ys' @- y ## zs'\n\ngoal (1 subgoal):\n 1. alw (ev (holds P)) zs'", "by (metis ev.intros(2) ev_shift not_alw_iff stream.sel(2))"], ["proof (state)\nthis:\n  alw (ev (holds P)) zs'\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "from Cons.IH[OF \\<open>sfilter P zs' = _\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'a.\n     zs' = ys' @- zs'a \\<and> filter P ys' = ys \\<and> sfilter P zs'a = zs", "guess zs1 zs2"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'a.\n     zs' = ys' @- zs'a \\<and> filter P ys' = ys \\<and> sfilter P zs'a = zs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  zs' = zs1 @- zs2\n  ys = filter P zs1\n  zs = sfilter P zs2\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>sfilter P xs = ys @- zs;\n                    alw (ev (holds P)) xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys' zs'.\n  xs = ys' @- zs' \\<and> filter P ys' = ys \\<and> sfilter P zs' = zs;\n        sfilter P xs = (a # ys) @- zs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys' zs'.\n                            xs = ys' @- zs' \\<and>\n                            filter P ys' = a # ys \\<and> sfilter P zs' = zs", "with guessed"], ["proof (chain)\npicking this:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs\n  zs' = zs1 @- zs2\n  ys = filter P zs1\n  zs = sfilter P zs2", "show ?case"], ["proof (prove)\nusing this:\n  sfilter P (ys' @- y ## zs') = y ## ys @- zs\n  ev (holds P) (ys' @- y ## zs')\n  xs = ys' @- y ## zs'\n  list_all (Not \\<circ> P) ys'\n  P y\n  sfilter P zs' = ys @- zs\n  zs' = zs1 @- zs2\n  ys = filter P zs1\n  zs = sfilter P zs2\n\ngoal (1 subgoal):\n 1. \\<exists>ys' zs'.\n       xs = ys' @- zs' \\<and>\n       filter P ys' = y # ys \\<and> sfilter P zs' = zs", "by (inst_existentials \"ys' @ y # zs1\" zs2; simp add: list.pred_set)"], ["proof (state)\nthis:\n  \\<exists>ys' zs'.\n     xs = ys' @- zs' \\<and> filter P ys' = y # ys \\<and> sfilter P zs' = zs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_sset_sfilter_decomp:\n  assumes \"finite (sset (sfilter P xs))\" \"alw (ev (holds P)) xs\"\n  obtains x ws ys zs where \"xs = ws @- x ## ys @- x ## zs\" \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws x ys zs.\n        \\<lbrakk>xs = ws @- x ## ys @- x ## zs; P x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "let ?xs = \"sfilter P xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "have 1: \"\\<not> sdistinct (sfilter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sdistinct (sfilter P xs)", "using sdistinct_infinite_sset assms(1)"], ["proof (prove)\nusing this:\n  sdistinct ?w \\<Longrightarrow> infinite (sset ?w)\n  finite (sset (sfilter P xs))\n\ngoal (1 subgoal):\n 1. \\<not> sdistinct (sfilter P xs)", "by auto"], ["proof (state)\nthis:\n  \\<not> sdistinct (sfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "from not_sdistinct_decomp[OF 1]"], ["proof (chain)\npicking this:\n  (\\<And>u v a w'.\n      sfilter P xs = u @- a ## v @- a ## w' \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis", "guess ws ys x zs"], ["proof (prove)\nusing this:\n  (\\<And>u v a w'.\n      sfilter P xs = u @- a ## v @- a ## w' \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  sfilter P xs = ws @- x ## ys @- x ## zs\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "note guessed1 = this"], ["proof (state)\nthis:\n  sfilter P xs = ws @- x ## ys @- x ## zs\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "from sfilter_shift_decomp[OF this assms(2)]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'.\n     xs = ys' @- zs' \\<and>\n     filter P ys' = ws \\<and> sfilter P zs' = x ## ys @- x ## zs", "guess ys' zs'"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'.\n     xs = ys' @- zs' \\<and>\n     filter P ys' = ws \\<and> sfilter P zs' = x ## ys @- x ## zs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "note guessed2 = this"], ["proof (state)\nthis:\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "then"], ["proof (chain)\npicking this:\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'", "have \"ev (holds P) zs'\""], ["proof (prove)\nusing this:\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n\ngoal (1 subgoal):\n 1. ev (holds P) zs'", "using alw_shift assms(2)"], ["proof (prove)\nusing this:\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n  alw ?\\<phi> (?xl @- ?xs) \\<Longrightarrow> alw ?\\<phi> ?xs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. ev (holds P) zs'", "by blast"], ["proof (state)\nthis:\n  ev (holds P) zs'\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "from sfilter_SCons_decomp[OF guessed2(2) this]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'a.\n     zs' = ys' @- x ## zs'a \\<and>\n     list_all (Not \\<circ> P) ys' \\<and>\n     P x \\<and> sfilter P zs'a = ys @- x ## zs", "guess zs1 zs2"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'a.\n     zs' = ys' @- x ## zs'a \\<and>\n     list_all (Not \\<circ> P) ys' \\<and>\n     P x \\<and> sfilter P zs'a = ys @- x ## zs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  zs' = zs1 @- x ## zs2\n  list_all (Not \\<circ> P) zs1\n  P x\n  sfilter P zs2 = ys @- x ## zs\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "note guessed3 = this"], ["proof (state)\nthis:\n  zs' = zs1 @- x ## zs2\n  list_all (Not \\<circ> P) zs1\n  P x\n  sfilter P zs2 = ys @- x ## zs\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "have \"alw (ev (holds P)) zs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev (holds P)) zs2", "by (metis alw_ev_stl alw_shift assms(2) guessed2(1) guessed3(1) stream.sel(2))"], ["proof (state)\nthis:\n  alw (ev (holds P)) zs2\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "from sfilter_shift_decomp[OF guessed3(4) this]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'.\n     zs2 = ys' @- zs' \\<and>\n     filter P ys' = ys \\<and> sfilter P zs' = x ## zs", "guess zs3 zs4"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'.\n     zs2 = ys' @- zs' \\<and>\n     filter P ys' = ys \\<and> sfilter P zs' = x ## zs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  zs2 = zs3 @- zs4\n  sfilter P zs4 = x ## zs\n  ys = filter P zs3\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "note guessed4 = this"], ["proof (state)\nthis:\n  zs2 = zs3 @- zs4\n  sfilter P zs4 = x ## zs\n  ys = filter P zs3\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "have \"ev (holds P) zs4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (holds P) zs4", "using \\<open>alw (ev (holds P)) zs2\\<close> alw_shift guessed4(1)"], ["proof (prove)\nusing this:\n  alw (ev (holds P)) zs2\n  alw ?\\<phi> (?xl @- ?xs) \\<Longrightarrow> alw ?\\<phi> ?xs\n  zs2 = zs3 @- zs4\n\ngoal (1 subgoal):\n 1. ev (holds P) zs4", "by blast"], ["proof (state)\nthis:\n  ev (holds P) zs4\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "from sfilter_SCons_decomp[OF guessed4(2) this]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'.\n     zs4 = ys' @- x ## zs' \\<and>\n     list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs", "guess zs5 zs6"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'.\n     zs4 = ys' @- x ## zs' \\<and>\n     list_all (Not \\<circ> P) ys' \\<and> P x \\<and> sfilter P zs' = zs\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  zs4 = zs5 @- x ## zs6\n  list_all (Not \\<circ> P) zs5\n  P x\n  zs = sfilter P zs6\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "with guessed1 guessed2 guessed3 guessed4"], ["proof (chain)\npicking this:\n  sfilter P xs = ws @- x ## ys @- x ## zs\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n  zs' = zs1 @- x ## zs2\n  list_all (Not \\<circ> P) zs1\n  P x\n  sfilter P zs2 = ys @- x ## zs\n  zs2 = zs3 @- zs4\n  sfilter P zs4 = x ## zs\n  ys = filter P zs3\n  zs4 = zs5 @- x ## zs6\n  list_all (Not \\<circ> P) zs5\n  P x\n  zs = sfilter P zs6", "show \"\\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x\""], ["proof (prove)\nusing this:\n  sfilter P xs = ws @- x ## ys @- x ## zs\n  xs = ys' @- zs'\n  sfilter P zs' = x ## ys @- x ## zs\n  ws = filter P ys'\n  zs' = zs1 @- x ## zs2\n  list_all (Not \\<circ> P) zs1\n  P x\n  sfilter P zs2 = ys @- x ## zs\n  zs2 = zs3 @- zs4\n  sfilter P zs4 = x ## zs\n  ys = filter P zs3\n  zs4 = zs5 @- x ## zs6\n  list_all (Not \\<circ> P) zs5\n  P x\n  zs = sfilter P zs6\n\ngoal (1 subgoal):\n 1. \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x", "by (inst_existentials \"ys' @ zs1\" x \"zs3 @ zs5\" zs6; force)"], ["proof (state)\nthis:\n  \\<exists>ws x ys zs. xs = ws @- x ## ys @- x ## zs \\<and> P x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Useful?\\<close>"], ["", "lemma sfilter_shd_LEAST:\n  \"shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))\" if \"ev (holds P) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))", "from sdrop_wait[OF \\<open>ev _ xs\\<close>]"], ["proof (chain)\npicking this:\n  holds P (sdrop (wait (holds P) xs) xs)", "have \"\\<exists> n. P (xs !! n)\""], ["proof (prove)\nusing this:\n  holds P (sdrop (wait (holds P) xs) xs)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P (xs !! n)", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. P (xs !! n)\n\ngoal (1 subgoal):\n 1. shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))", "from sdrop_while_sdrop_LEAST[OF this]"], ["proof (chain)\npicking this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs", "show ?thesis"], ["proof (prove)\nusing this:\n  sdrop_while (Not \\<circ> P) xs = sdrop (LEAST n. P (xs !! n)) xs\n\ngoal (1 subgoal):\n 1. shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))", "by simp"], ["proof (state)\nthis:\n  shd (sfilter P xs) = xs !! (LEAST n. P (xs !! n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_nxt_holds_cong:\n  \"(nxt ^^ n) (holds (\\<lambda>x. P x \\<and> Q x)) xs = (nxt ^^ n) (holds Q) xs\" if \"alw (holds P) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nxt ^^ n) (holds (\\<lambda>x. P x \\<and> Q x)) xs =\n    (nxt ^^ n) (holds Q) xs", "using that"], ["proof (prove)\nusing this:\n  alw (holds P) xs\n\ngoal (1 subgoal):\n 1. (nxt ^^ n) (holds (\\<lambda>x. P x \\<and> Q x)) xs =\n    (nxt ^^ n) (holds Q) xs", "unfolding nxt_holds_iff_snth alw_iff_sdrop"], ["proof (prove)\nusing this:\n  \\<forall>m. holds P (sdrop m xs)\n\ngoal (1 subgoal):\n 1. (P (xs !! n) \\<and> Q (xs !! n)) = Q (xs !! n)", "by simp"], ["", "lemma alw_wait_holds_cong:\n  \"wait (holds (\\<lambda>x. P x \\<and> Q x)) xs = wait (holds Q) xs\" if \"alw (holds P) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wait (holds (\\<lambda>x. P x \\<and> Q x)) xs = wait (holds Q) xs", "unfolding wait_def alw_nxt_holds_cong[OF that]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. (nxt ^^ n) (holds Q) xs) = (LEAST n. (nxt ^^ n) (holds Q) xs)", ".."], ["", "lemma alw_sfilter:\n  \"sfilter (\\<lambda> x. P x \\<and> Q x) xs = sfilter Q xs\" if \"alw (holds P) xs\" \"alw (ev (holds Q)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sfilter (\\<lambda>x. P x \\<and> Q x) xs = sfilter Q xs", "using that"], ["proof (prove)\nusing this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n\ngoal (1 subgoal):\n 1. sfilter (\\<lambda>x. P x \\<and> Q x) xs = sfilter Q xs", "proof (coinduction arbitrary: xs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "case prems: stream_eq"], ["proof (state)\nthis:\n  a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs\n  b ## v = sfilter Q xs\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "from prems(3,4)"], ["proof (chain)\npicking this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs", "have ev_one: \"ev (holds (\\<lambda>x. P x \\<and> Q x)) xs\""], ["proof (prove)\nusing this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n\ngoal (1 subgoal):\n 1. ev (holds (\\<lambda>x. P x \\<and> Q x)) xs", "by (subst ev_cong[of _ _ _ \"holds Q\"]) (assumption | auto)+"], ["proof (state)\nthis:\n  ev (holds (\\<lambda>x. P x \\<and> Q x)) xs\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "from prems"], ["proof (chain)\npicking this:\n  a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs\n  b ## v = sfilter Q xs\n  alw (holds P) xs\n  alw (ev (holds Q)) xs", "have \"a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs)\" \"b = shd (sfilter Q xs)\""], ["proof (prove)\nusing this:\n  a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs\n  b ## v = sfilter Q xs\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n\ngoal (1 subgoal):\n 1. a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs) &&&\n    b = shd (sfilter Q xs)", "by (metis stream.sel(1))+"], ["proof (state)\nthis:\n  a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs)\n  b = shd (sfilter Q xs)\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "with prems(3,4)"], ["proof (chain)\npicking this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n  a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs)\n  b = shd (sfilter Q xs)", "have\n    \"a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n))\" \"b = xs !! (LEAST n. Q (xs !! n))\""], ["proof (prove)\nusing this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n  a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs)\n  b = shd (sfilter Q xs)\n\ngoal (1 subgoal):\n 1. a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n)) &&&\n    b = xs !! (LEAST n. Q (xs !! n))", "using ev_one"], ["proof (prove)\nusing this:\n  alw (holds P) xs\n  alw (ev (holds Q)) xs\n  a = shd (sfilter (\\<lambda>x. P x \\<and> Q x) xs)\n  b = shd (sfilter Q xs)\n  ev (holds (\\<lambda>x. P x \\<and> Q x)) xs\n\ngoal (1 subgoal):\n 1. a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n)) &&&\n    b = xs !! (LEAST n. Q (xs !! n))", "by (auto 4 3 dest: sfilter_shd_LEAST)"], ["proof (state)\nthis:\n  a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n))\n  b = xs !! (LEAST n. Q (xs !! n))\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "with alw_wait_holds_cong[unfolded wait_LEAST, OF \\<open>alw (holds P) xs\\<close>]"], ["proof (chain)\npicking this:\n  (LEAST n. P (xs !! n) \\<and> ?Q (xs !! n)) = (LEAST n. ?Q (xs !! n))\n  a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n))\n  b = xs !! (LEAST n. Q (xs !! n))", "have \"a = b\""], ["proof (prove)\nusing this:\n  (LEAST n. P (xs !! n) \\<and> ?Q (xs !! n)) = (LEAST n. ?Q (xs !! n))\n  a = xs !! (LEAST n. P (xs !! n) \\<and> Q (xs !! n))\n  b = xs !! (LEAST n. Q (xs !! n))\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "from sfilter_SCons_decomp'[OF prems(1)[symmetric], OF ev_one]"], ["proof (chain)\npicking this:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a \\<and> Q a\n  \\<exists>zs'.\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @-\n     a ## zs' \\<and>\n     sfilter (\\<lambda>x. P x \\<and> Q x) zs' = u", "guess u2"], ["proof (prove)\nusing this:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a \\<and> Q a\n  \\<exists>zs'.\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @-\n     a ## zs' \\<and>\n     sfilter (\\<lambda>x. P x \\<and> Q x) zs' = u\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a\n  Q a\n  xs = stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2\n  u = sfilter (\\<lambda>x. P x \\<and> Q x) u2\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "note guessed_a = this"], ["proof (state)\nthis:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a\n  Q a\n  xs = stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2\n  u = sfilter (\\<lambda>x. P x \\<and> Q x) u2\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "have \"ev (holds Q) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (holds Q) xs", "using prems(4)"], ["proof (prove)\nusing this:\n  alw (ev (holds Q)) xs\n\ngoal (1 subgoal):\n 1. ev (holds Q) xs", "by blast"], ["proof (state)\nthis:\n  ev (holds Q) xs\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "from sfilter_SCons_decomp'[OF prems(2)[symmetric], OF this]"], ["proof (chain)\npicking this:\n  list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs)\n  Q b\n  \\<exists>zs'.\n     xs = stake (wait (holds Q) xs) xs @- b ## zs' \\<and> sfilter Q zs' = v", "guess v2"], ["proof (prove)\nusing this:\n  list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs)\n  Q b\n  \\<exists>zs'.\n     xs = stake (wait (holds Q) xs) xs @- b ## zs' \\<and> sfilter Q zs' = v\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs)\n  Q b\n  xs = stake (wait (holds Q) xs) xs @- b ## v2\n  v = sfilter Q v2\n\ngoal (1 subgoal):\n 1. \\<And>a u b v xs.\n       \\<lbrakk>a ## u = sfilter (\\<lambda>x. P x \\<and> Q x) xs;\n        b ## v = sfilter Q xs; alw (holds P) xs;\n        alw (ev (holds Q)) xs\\<rbrakk>\n       \\<Longrightarrow> a = b \\<and>\n                         (\\<exists>xs.\n                             u =\n                             sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n                             v = sfilter Q xs \\<and>\n                             alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "with guessed_a \\<open>a = b\\<close>"], ["proof (chain)\npicking this:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a\n  Q a\n  xs = stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2\n  u = sfilter (\\<lambda>x. P x \\<and> Q x) u2\n  a = b\n  list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs)\n  Q b\n  xs = stake (wait (holds Q) xs) xs @- b ## v2\n  v = sfilter Q v2", "show ?case"], ["proof (prove)\nusing this:\n  list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n   (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs)\n  P a\n  Q a\n  xs = stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2\n  u = sfilter (\\<lambda>x. P x \\<and> Q x) u2\n  a = b\n  list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs)\n  Q b\n  xs = stake (wait (holds Q) xs) xs @- b ## v2\n  v = sfilter Q v2\n\ngoal (1 subgoal):\n 1. a = b \\<and>\n    (\\<exists>xs.\n        u = sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n        v = sfilter Q xs \\<and>\n        alw (holds P) xs \\<and> alw (ev (holds Q)) xs)", "apply (intro conjI exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> u = sfilter (\\<lambda>x. P x \\<and> Q x) ?xs11\n 3. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> v = sfilter Q ?xs11\n 4. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (holds P) ?xs11\n 5. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds Q)) ?xs11", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> v = sfilter Q u2\n 2. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (holds P) u2\n 3. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds Q)) u2", "apply (simp add: alw_wait_holds_cong[OF prems(3)], metis shift_left_inj stream.inject)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (holds P) u2\n 2. \\<lbrakk>list_all (Not \\<circ> (\\<lambda>x. P x \\<and> Q x))\n              (stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs);\n     P a; Q a;\n     xs =\n     stake (wait (holds (\\<lambda>x. P x \\<and> Q x)) xs) xs @- a ## u2;\n     u = sfilter (\\<lambda>x. P x \\<and> Q x) u2; a = b;\n     list_all (Not \\<circ> Q) (stake (wait (holds Q) xs) xs); Q b;\n     xs = stake (wait (holds Q) xs) xs @- b ## v2; v = sfilter Q v2\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds Q)) u2", "by (metis alw.cases alw_shift prems(3,4) stream.sel(2))+"], ["proof (state)\nthis:\n  a = b \\<and>\n  (\\<exists>xs.\n      u = sfilter (\\<lambda>x. P x \\<and> Q x) xs \\<and>\n      v = sfilter Q xs \\<and> alw (holds P) xs \\<and> alw (ev (holds Q)) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_ev_holds_mp:\n  \"alw (holds P) xs \\<Longrightarrow> ev (holds Q) xs \\<Longrightarrow> ev (holds (\\<lambda>x. P x \\<and> Q x)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alw (holds P) xs; ev (holds Q) xs\\<rbrakk>\n    \\<Longrightarrow> ev (holds (\\<lambda>x. P x \\<and> Q x)) xs", "by (subst ev_cong, assumption) auto"], ["", "lemma alw_ev_conjI:\n  \"alw (ev (holds (\\<lambda> x. P x \\<and> Q x))) xs\" if \"alw (holds P) xs\" \"alw (ev (holds Q)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev (holds (\\<lambda>x. P x \\<and> Q x))) xs", "using that(2,1)"], ["proof (prove)\nusing this:\n  alw (ev (holds Q)) xs\n  alw (holds P) xs\n\ngoal (1 subgoal):\n 1. alw (ev (holds (\\<lambda>x. P x \\<and> Q x))) xs", "by - (erule alw_mp, coinduction arbitrary: xs, auto intro: alw_ev_holds_mp)"], ["", "subsection \\<open>Useful?\\<close>"], ["", "lemma alw_holds_pred_stream_iff:\n  \"alw (holds P) xs \\<longleftrightarrow> pred_stream P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (holds P) xs = pred_stream P xs", "by (simp add: alw_iff_sdrop stream_pred_snth)"], ["", "lemma alw_holds_sset:\n  \"alw (holds P) xs = (\\<forall> x \\<in> sset xs. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (holds P) xs = (\\<forall>x\\<in>sset xs. P x)", "by (simp add: alw_holds_pred_stream_iff stream.pred_set)"], ["", "lemma pred_stream_sfilter:\n  assumes alw_ev: \"alw (ev (holds P)) xs\"\n  shows \"pred_stream P (sfilter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_stream P (sfilter P xs)", "using alw_ev"], ["proof (prove)\nusing this:\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. pred_stream P (sfilter P xs)", "proof (coinduction arbitrary: xs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a w xs.\n       \\<lbrakk>a ## w = sfilter P xs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> P a \\<and>\n                         (\\<exists>xs.\n                             w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "case (stream_pred xs)"], ["proof (state)\nthis:\n  xsa__ ## w = sfilter P xs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. \\<And>a w xs.\n       \\<lbrakk>a ## w = sfilter P xs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> P a \\<and>\n                         (\\<exists>xs.\n                             w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "then"], ["proof (chain)\npicking this:\n  xsa__ ## w = sfilter P xs\n  alw (ev (holds P)) xs", "have \"ev (holds P) xs\""], ["proof (prove)\nusing this:\n  xsa__ ## w = sfilter P xs\n  alw (ev (holds P)) xs\n\ngoal (1 subgoal):\n 1. ev (holds P) xs", "by auto"], ["proof (state)\nthis:\n  ev (holds P) xs\n\ngoal (1 subgoal):\n 1. \\<And>a w xs.\n       \\<lbrakk>a ## w = sfilter P xs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> P a \\<and>\n                         (\\<exists>xs.\n                             w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "have \"sfilter P xs = shd (sfilter P xs) ## stl (sfilter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sfilter P xs = shd (sfilter P xs) ## stl (sfilter P xs)", "by (cases \"sfilter P xs\") auto"], ["proof (state)\nthis:\n  sfilter P xs = shd (sfilter P xs) ## stl (sfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<And>a w xs.\n       \\<lbrakk>a ## w = sfilter P xs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> P a \\<and>\n                         (\\<exists>xs.\n                             w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "from sfilter_SCons_decomp[OF this \\<open>ev (holds P) xs\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>ys' zs'.\n     xs = ys' @- shd (sfilter P xs) ## zs' \\<and>\n     list_all (Not \\<circ> P) ys' \\<and>\n     P (shd (sfilter P xs)) \\<and> sfilter P zs' = stl (sfilter P xs)", "guess ys' zs'"], ["proof (prove)\nusing this:\n  \\<exists>ys' zs'.\n     xs = ys' @- shd (sfilter P xs) ## zs' \\<and>\n     list_all (Not \\<circ> P) ys' \\<and>\n     P (shd (sfilter P xs)) \\<and> sfilter P zs' = stl (sfilter P xs)\n\ngoal (1 subgoal):\n 1. thesis", "by clarsimp"], ["proof (state)\nthis:\n  xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs'\n  list_all (Not \\<circ> P) ys'\n  P (shd (sdrop_while (Not \\<circ> P) xs))\n  sfilter P zs' = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a w xs.\n       \\<lbrakk>a ## w = sfilter P xs; alw (ev (holds P)) xs\\<rbrakk>\n       \\<Longrightarrow> P a \\<and>\n                         (\\<exists>xs.\n                             w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "then"], ["proof (chain)\npicking this:\n  xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs'\n  list_all (Not \\<circ> P) ys'\n  P (shd (sdrop_while (Not \\<circ> P) xs))\n  sfilter P zs' = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))", "show ?case"], ["proof (prove)\nusing this:\n  xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs'\n  list_all (Not \\<circ> P) ys'\n  P (shd (sdrop_while (Not \\<circ> P) xs))\n  sfilter P zs' = sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\n\ngoal (1 subgoal):\n 1. P xsa__ \\<and>\n    (\\<exists>xs. w = sfilter P xs \\<and> alw (ev (holds P)) xs)", "apply (inst_existentials zs')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> P xsa__\n 2. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> w = sfilter P zs'\n 3. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds P)) zs'", "apply (metis sfilter.simps(1) stream.sel(1) stream_pred(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> w = sfilter P zs'\n 2. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds P)) zs'", "apply (metis scons_eq sfilter.simps(2) stream_pred(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = ys' @- shd (sdrop_while (Not \\<circ> P) xs) ## zs';\n     list_all (Not \\<circ> P) ys'; P (shd (sdrop_while (Not \\<circ> P) xs));\n     sfilter P zs' =\n     sfilter P (stl (sdrop_while (Not \\<circ> P) xs))\\<rbrakk>\n    \\<Longrightarrow> alw (ev (holds P)) zs'", "apply (metis alw_ev_stl alw_shift stream.sel(2) stream_pred(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P xsa__ \\<and>\n  (\\<exists>xs. w = sfilter P xs \\<and> alw (ev (holds P)) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_ev_sfilter_mono:\n  assumes alw_ev: \"alw (ev (holds P)) xs\"\n    and mono: \"\\<And> x. P x \\<Longrightarrow> Q x\"\n  shows \"pred_stream Q (sfilter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_stream Q (sfilter P xs)", "using stream.pred_mono[of P Q] assms pred_stream_sfilter"], ["proof (prove)\nusing this:\n  P \\<le> Q \\<Longrightarrow> pred_stream P \\<le> pred_stream Q\n  alw (ev (holds P)) xs\n  P ?x \\<Longrightarrow> Q ?x\n  alw (ev (holds ?P)) ?xs \\<Longrightarrow> pred_stream ?P (sfilter ?P ?xs)\n\ngoal (1 subgoal):\n 1. pred_stream Q (sfilter P xs)", "by blast"], ["", "lemma sset_sfilter:\n  \"sset (sfilter P xs) \\<subseteq> sset xs\" if \"alw (ev (holds P)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "have \"alw (holds (\\<lambda> x. x \\<in> sset xs)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (holds (\\<lambda>x. x \\<in> sset xs)) xs", "by (simp add: alw_iff_sdrop)"], ["proof (state)\nthis:\n  alw (holds (\\<lambda>x. x \\<in> sset xs)) xs\n\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "with \\<open>alw (ev _) _\\<close> alw_sfilter[OF this \\<open>alw (ev _) _\\<close>, symmetric]"], ["proof (chain)\npicking this:\n  alw (ev (holds P)) xs\n  sfilter P xs = sfilter (\\<lambda>x. x \\<in> sset xs \\<and> P x) xs\n  alw (holds (\\<lambda>x. x \\<in> sset xs)) xs", "have \"pred_stream (\\<lambda> x. x \\<in> sset xs) (sfilter P xs)\""], ["proof (prove)\nusing this:\n  alw (ev (holds P)) xs\n  sfilter P xs = sfilter (\\<lambda>x. x \\<in> sset xs \\<and> P x) xs\n  alw (holds (\\<lambda>x. x \\<in> sset xs)) xs\n\ngoal (1 subgoal):\n 1. pred_stream (\\<lambda>x. x \\<in> sset xs) (sfilter P xs)", "by (simp) (rule alw_ev_sfilter_mono; auto intro: alw_ev_conjI)"], ["proof (state)\nthis:\n  pred_stream (\\<lambda>x. x \\<in> sset xs) (sfilter P xs)\n\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "then"], ["proof (chain)\npicking this:\n  pred_stream (\\<lambda>x. x \\<in> sset xs) (sfilter P xs)", "have \"\\<forall> x \\<in> sset (sfilter P xs). x \\<in> sset xs\""], ["proof (prove)\nusing this:\n  pred_stream (\\<lambda>x. x \\<in> sset xs) (sfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs", "unfolding stream.pred_set"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs", "by this"], ["proof (state)\nthis:\n  \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs\n\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>sset (sfilter P xs). x \\<in> sset xs\n\ngoal (1 subgoal):\n 1. sset (sfilter P xs) \\<subseteq> sset xs", "by blast"], ["proof (state)\nthis:\n  sset (sfilter P xs) \\<subseteq> sset xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stream_all2_weaken:\n  \"stream_all2 Q xs ys\" if \"stream_all2 P xs ys\" \"\\<And> x y. P x y \\<Longrightarrow> Q x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 Q xs ys", "using that"], ["proof (prove)\nusing this:\n  stream_all2 P xs ys\n  P ?x ?y \\<Longrightarrow> Q ?x ?y\n\ngoal (1 subgoal):\n 1. stream_all2 Q xs ys", "by (coinduction arbitrary: xs ys) auto"], ["", "lemma stream_all2_SCons1:\n  \"stream_all2 P (x ## xs) ys = (\\<exists>z zs. ys = z ## zs \\<and> P x z \\<and> stream_all2 P xs zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 P (x ## xs) ys =\n    (\\<exists>z zs. ys = z ## zs \\<and> P x z \\<and> stream_all2 P xs zs)", "by (subst (3) stream.collapse[symmetric], simp del: stream.collapse, force)"], ["", "lemma stream_all2_SCons2:\n  \"stream_all2 P xs (y ## ys) = (\\<exists>z zs. xs = z ## zs \\<and> P z y \\<and> stream_all2 P zs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 P xs (y ## ys) =\n    (\\<exists>z zs. xs = z ## zs \\<and> P z y \\<and> stream_all2 P zs ys)", "by (subst stream.collapse[symmetric], simp del: stream.collapse, force)"], ["", "lemma stream_all2_combine:\n  \"stream_all2 R xs zs\" if\n  \"stream_all2 P xs ys\" \"stream_all2 Q ys zs\" \"\\<And> x y z. P x y \\<and> Q y z \\<Longrightarrow> R x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R xs zs", "using that(1,2)"], ["proof (prove)\nusing this:\n  stream_all2 P xs ys\n  stream_all2 Q ys zs\n\ngoal (1 subgoal):\n 1. stream_all2 R xs zs", "by (coinduction arbitrary: xs ys zs)\n     (auto intro: that(3) simp: stream_all2_SCons1 stream_all2_SCons2)"], ["", "lemma stream_all2_shift1:\n  \"stream_all2 P (xs1 @- xs2) ys =\n  (\\<exists> ys1 ys2. ys = ys1 @- ys2 \\<and> list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 P (xs1 @- xs2) ys =\n    (\\<exists>ys1 ys2.\n        ys = ys1 @- ys2 \\<and>\n        list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2)", "apply (induction xs1 arbitrary: ys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       stream_all2 P ([] @- xs2) ys =\n       (\\<exists>ys1 ys2.\n           ys = ys1 @- ys2 \\<and>\n           list_all2 P [] ys1 \\<and> stream_all2 P xs2 ys2)\n 2. \\<And>a xs1 ys.\n       (\\<And>ys.\n           stream_all2 P (xs1 @- xs2) ys =\n           (\\<exists>ys1 ys2.\n               ys = ys1 @- ys2 \\<and>\n               list_all2 P xs1 ys1 \\<and>\n               stream_all2 P xs2 ys2)) \\<Longrightarrow>\n       stream_all2 P ((a # xs1) @- xs2) ys =\n       (\\<exists>ys1 ys2.\n           ys = ys1 @- ys2 \\<and>\n           list_all2 P (a # xs1) ys1 \\<and> stream_all2 P xs2 ys2)", "apply (simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs1 ys.\n       (\\<And>ys.\n           stream_all2 P (xs1 @- xs2) ys =\n           (\\<exists>ys1 ys2.\n               ys = ys1 @- ys2 \\<and>\n               list_all2 P xs1 ys1 \\<and>\n               stream_all2 P xs2 ys2)) \\<Longrightarrow>\n       stream_all2 P ((a # xs1) @- xs2) ys =\n       (\\<exists>ys1 ys2.\n           ys = ys1 @- ys2 \\<and>\n           list_all2 P (a # xs1) ys1 \\<and> stream_all2 P xs2 ys2)", "apply (simp add: stream_all2_SCons1 list_all2_Cons1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs1 ys.\n       (\\<And>ys.\n           stream_all2 P (xs1 @- xs2) ys =\n           (\\<exists>ys1 ys2.\n               ys = ys1 @- ys2 \\<and>\n               list_all2 P xs1 ys1 \\<and>\n               stream_all2 P xs2 ys2)) \\<Longrightarrow>\n       (\\<exists>z zs.\n           ys = z ## zs \\<and>\n           P a z \\<and>\n           (\\<exists>ys1 ys2.\n               zs = ys1 @- ys2 \\<and>\n               list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2)) =\n       (\\<exists>ys1 ys2.\n           ys = ys1 @- ys2 \\<and>\n           (\\<exists>z zs.\n               ys1 = z # zs \\<and> P a z \\<and> list_all2 P xs1 zs) \\<and>\n           stream_all2 P xs2 ys2)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs1 ys z zs ys1 ys2.\n       \\<lbrakk>\\<And>ys.\n                   stream_all2 P (xs1 @- xs2) ys =\n                   (\\<exists>ys1 ys2.\n                       ys = ys1 @- ys2 \\<and>\n                       list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2);\n        P a z; list_all2 P xs1 ys1; stream_all2 P xs2 ys2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys1a ys2a.\n                            z ## ys1 @- ys2 = ys1a @- ys2a \\<and>\n                            (\\<exists>z zs.\n                                ys1a = z # zs \\<and>\n                                P a z \\<and> list_all2 P xs1 zs) \\<and>\n                            stream_all2 P xs2 ys2a\n 2. \\<And>a xs1 ys ys1 ys2 z zs.\n       \\<lbrakk>\\<And>ys.\n                   stream_all2 P (xs1 @- xs2) ys =\n                   (\\<exists>ys1 ys2.\n                       ys = ys1 @- ys2 \\<and>\n                       list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2);\n        stream_all2 P xs2 ys2; P a z; list_all2 P xs1 zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>za zsa.\n                            (z # zs) @- ys2 = za ## zsa \\<and>\n                            P a za \\<and>\n                            (\\<exists>ys1 ys2.\n                                zsa = ys1 @- ys2 \\<and>\n                                list_all2 P xs1 ys1 \\<and>\n                                stream_all2 P xs2 ys2)", "subgoal for a xs1 ys z zs ys1 ys2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ys.\n                stream_all2 P (xs1 @- xs2) ys =\n                (\\<exists>ys1 ys2.\n                    ys = ys1 @- ys2 \\<and>\n                    list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2);\n     P a z; list_all2 P xs1 ys1; stream_all2 P xs2 ys2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys1a ys2a.\n                         z ## ys1 @- ys2 = ys1a @- ys2a \\<and>\n                         (\\<exists>z zs.\n                             ys1a = z # zs \\<and>\n                             P a z \\<and> list_all2 P xs1 zs) \\<and>\n                         stream_all2 P xs2 ys2a", "by (inst_existentials \"z # ys1\" ys2; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs1 ys ys1 ys2 z zs.\n       \\<lbrakk>\\<And>ys.\n                   stream_all2 P (xs1 @- xs2) ys =\n                   (\\<exists>ys1 ys2.\n                       ys = ys1 @- ys2 \\<and>\n                       list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2);\n        stream_all2 P xs2 ys2; P a z; list_all2 P xs1 zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>za zsa.\n                            (z # zs) @- ys2 = za ## zsa \\<and>\n                            P a za \\<and>\n                            (\\<exists>ys1 ys2.\n                                zsa = ys1 @- ys2 \\<and>\n                                list_all2 P xs1 ys1 \\<and>\n                                stream_all2 P xs2 ys2)", "subgoal for a xs1 ys ys1 ys2 z zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ys.\n                stream_all2 P (xs1 @- xs2) ys =\n                (\\<exists>ys1 ys2.\n                    ys = ys1 @- ys2 \\<and>\n                    list_all2 P xs1 ys1 \\<and> stream_all2 P xs2 ys2);\n     stream_all2 P xs2 ys2; P a z; list_all2 P xs1 zs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>za zsa.\n                         (z # zs) @- ys2 = za ## zsa \\<and>\n                         P a za \\<and>\n                         (\\<exists>ys1 ys2.\n                             zsa = ys1 @- ys2 \\<and>\n                             list_all2 P xs1 ys1 \\<and>\n                             stream_all2 P xs2 ys2)", "by (inst_existentials z \"zs @- ys2\" zs \"ys2\"; simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma stream_all2_shift2:\n  \"stream_all2 P ys (xs1 @- xs2) =\n  (\\<exists> ys1 ys2. ys = ys1 @- ys2 \\<and> list_all2 P ys1 xs1 \\<and> stream_all2 P ys2 xs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 P ys (xs1 @- xs2) =\n    (\\<exists>ys1 ys2.\n        ys = ys1 @- ys2 \\<and>\n        list_all2 P ys1 xs1 \\<and> stream_all2 P ys2 xs2)", "by (meson list.rel_flip stream.rel_flip stream_all2_shift1)"], ["", "lemma stream_all2_bisim:\n  assumes \"stream_all2 (\\<in>) xs as\" \"stream_all2 (\\<in>) ys as\" \"sset as \\<subseteq> S\"\n  shows \"stream_all2 (\\<lambda> x y. \\<exists> a. x \\<in> a \\<and> y \\<in> a \\<and> a \\<in> S) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2\n     (\\<lambda>x y. \\<exists>a. x \\<in> a \\<and> y \\<in> a \\<and> a \\<in> S)\n     xs ys", "using assms"], ["proof (prove)\nusing this:\n  stream_all2 (\\<in>) xs as\n  stream_all2 (\\<in>) ys as\n  sset as \\<subseteq> S\n\ngoal (1 subgoal):\n 1. stream_all2\n     (\\<lambda>x y. \\<exists>a. x \\<in> a \\<and> y \\<in> a \\<and> a \\<in> S)\n     xs ys", "apply (coinduction arbitrary: as xs ys)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u b v as xs ys.\n       \\<lbrakk>a ## u = xs; b ## v = ys; stream_all2 (\\<in>) xs as;\n        stream_all2 (\\<in>) ys as; sset as \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>aa.\n                             a \\<in> aa \\<and>\n                             b \\<in> aa \\<and> aa \\<in> S) \\<and>\n                         (\\<exists>as xs ys.\n                             u = xs \\<and>\n                             v = ys \\<and>\n                             stream_all2 (\\<in>) xs as \\<and>\n                             stream_all2 (\\<in>) ys as \\<and>\n                             sset as \\<subseteq> S)", "subgoal for a u b v as xs ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a ## u = xs; b ## v = ys; stream_all2 (\\<in>) xs as;\n     stream_all2 (\\<in>) ys as; sset as \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>aa.\n                          a \\<in> aa \\<and>\n                          b \\<in> aa \\<and> aa \\<in> S) \\<and>\n                      (\\<exists>as xs ys.\n                          u = xs \\<and>\n                          v = ys \\<and>\n                          stream_all2 (\\<in>) xs as \\<and>\n                          stream_all2 (\\<in>) ys as \\<and>\n                          sset as \\<subseteq> S)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a ## u = xs; b ## v = ys; stream_all2 (\\<in>) xs as;\n     stream_all2 (\\<in>) ys as; sset as \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa.\n                         a \\<in> aa \\<and> b \\<in> aa \\<and> aa \\<in> S\n 2. \\<lbrakk>a ## u = xs; b ## v = ys; stream_all2 (\\<in>) xs as;\n     stream_all2 (\\<in>) ys as; sset as \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as xs ys.\n                         u = xs \\<and>\n                         v = ys \\<and>\n                         stream_all2 (\\<in>) xs as \\<and>\n                         stream_all2 (\\<in>) ys as \\<and>\n                         sset as \\<subseteq> S", "apply (inst_existentials \"shd as\", auto simp: stream_all2_SCons1; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a ## u = xs; b ## v = ys; stream_all2 (\\<in>) xs as;\n     stream_all2 (\\<in>) ys as; sset as \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as xs ys.\n                         u = xs \\<and>\n                         v = ys \\<and>\n                         stream_all2 (\\<in>) xs as \\<and>\n                         stream_all2 (\\<in>) ys as \\<and>\n                         sset as \\<subseteq> S", "apply (inst_existentials \"stl as\", auto 4 3 simp: stream_all2_SCons1; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}