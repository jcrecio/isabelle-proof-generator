{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata/library/MDP_Aux.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata", "problem_names": ["lemma sets_stream_space_cylinder: \n  \"sets (stream_space M) = sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\""], "translations": [["", "lemma sets_stream_space_cylinder: \n  \"sets (stream_space M) = sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (stream_space M) =\n    sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "have closed[simp]: \"scylinder (space M) ` lists (sets M) \\<subseteq> Pow (streams (space M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scylinder (space M) ` lists (sets M) \\<subseteq> Pow (streams (space M))", "using scylinder_streams[of \"space M\" _]"], ["proof (prove)\nusing this:\n  scylinder (space M) ?xs \\<subseteq> streams (space M)\n\ngoal (1 subgoal):\n 1. scylinder (space M) ` lists (sets M) \\<subseteq> Pow (streams (space M))", "by auto"], ["proof (state)\nthis:\n  scylinder (space M) ` lists (sets M) \\<subseteq> Pow (streams (space M))\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "have [simp]: \"(\\<lambda>s. s !! i) \\<in> streams (space M) \\<rightarrow> space M\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. s !! i) \\<in> streams (space M) \\<rightarrow> space M", "by (auto simp: snth_in)"], ["proof (state)\nthis:\n  (\\<lambda>s. s !! ?i) \\<in> streams (space M) \\<rightarrow> space M\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "interpret sigma_algebra \"streams (space M)\" \"sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_algebra (streams (space M))\n     (sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M)))", "by (intro sigma_algebra_sigma_sets) fact"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "have *: \"(\\<lambda>s. s !! i) -` A \\<inter> streams (space M) = scylinder (space M) (replicate i (space M) @ [A])\"\n    if \"A \\<in> sets M\" for i A"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. s !! i) -` A \\<inter> streams (space M) =\n    scylinder (space M) (replicate i (space M) @ [A])", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>s. s !! 0) -` A \\<inter> streams (space M) =\n    scylinder (space M) (replicate 0 (space M) @ [A])\n 2. \\<And>i.\n       (\\<lambda>s. s !! i) -` A \\<inter> streams (space M) =\n       scylinder (space M) (replicate i (space M) @ [A]) \\<Longrightarrow>\n       (\\<lambda>s. s !! Suc i) -` A \\<inter> streams (space M) =\n       scylinder (space M) (replicate (Suc i) (space M) @ [A])", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<lambda>s. s !! n) -` A \\<inter> streams (space M) =\n  scylinder (space M) (replicate n (space M) @ [A])\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s !! 0) -` A \\<inter> streams (space M) =\n    scylinder (space M) (replicate 0 (space M) @ [A])\n 2. \\<And>i.\n       (\\<lambda>s. s !! i) -` A \\<inter> streams (space M) =\n       scylinder (space M) (replicate i (space M) @ [A]) \\<Longrightarrow>\n       (\\<lambda>s. s !! Suc i) -` A \\<inter> streams (space M) =\n       scylinder (space M) (replicate (Suc i) (space M) @ [A])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. s !! Suc n) -` A \\<inter> streams (space M) =\n    scylinder (space M) (replicate (Suc n) (space M) @ [A])", "apply (intro set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> (\\<lambda>s. s !! Suc n) -` A \\<inter> streams (space M)) =\n       (x \\<in> scylinder (space M) (replicate (Suc n) (space M) @ [A]))", "subgoal for \\<omega>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega>\n     \\<in> (\\<lambda>s. s !! Suc n) -` A \\<inter> streams (space M)) =\n    (\\<omega> \\<in> scylinder (space M) (replicate (Suc n) (space M) @ [A]))", "by (cases \\<omega>) (auto simp: streams_Stream Suc[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>s. s !! Suc n) -` A \\<inter> streams (space M) =\n  scylinder (space M) (replicate (Suc n) (space M) @ [A])\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. s !! 0) -` A \\<inter> streams (space M) =\n    scylinder (space M) (replicate 0 (space M) @ [A])", "qed (auto simp: streams_stl)"], ["proof (state)\nthis:\n  ?A \\<in> sets M \\<Longrightarrow>\n  (\\<lambda>s. s !! ?i) -` ?A \\<inter> streams (space M) =\n  scylinder (space M) (replicate ?i (space M) @ [?A])\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "have \"sets (stream_space M) \\<le> sets (sigma (streams (space M)) (scylinder (space M) ` lists (sets M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (stream_space M)\n    \\<subseteq> sets\n                 (sigma (streams (space M))\n                   (scylinder (space M) ` lists (sets M)))", "unfolding sets_stream_space_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. sets\n     (\\<Squnion>i.\n         vimage_algebra (streams (space M)) (\\<lambda>s. s !! i) M)\n    \\<subseteq> sets\n                 (sigma (streams (space M))\n                   (scylinder (space M) ` lists (sets M)))", "by (rule sets_Sup_in_sets)\n       (auto simp: sets_vimage_algebra2 PiE_UNIV_domain space_PiM * intro!: sigma_sets.Basic imageI)"], ["proof (state)\nthis:\n  sets (stream_space M)\n  \\<subseteq> sets\n               (sigma (streams (space M))\n                 (scylinder (space M) ` lists (sets M)))\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "also"], ["proof (state)\nthis:\n  sets (stream_space M)\n  \\<subseteq> sets\n               (sigma (streams (space M))\n                 (scylinder (space M) ` lists (sets M)))\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "have \"\\<dots> = sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets\n     (sigma (streams (space M)) (scylinder (space M) ` lists (sets M))) =\n    sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))", "by (rule sets_measure_of) fact"], ["proof (state)\nthis:\n  sets (sigma (streams (space M)) (scylinder (space M) ` lists (sets M))) =\n  sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n\ngoal (2 subgoals):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))\n 2. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "finally"], ["proof (chain)\npicking this:\n  sets (stream_space M)\n  \\<subseteq> sigma_sets (streams (space M))\n               (scylinder (space M) ` lists (sets M))", "show \"sets (stream_space M) \\<le> sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\""], ["proof (prove)\nusing this:\n  sets (stream_space M)\n  \\<subseteq> sigma_sets (streams (space M))\n               (scylinder (space M) ` lists (sets M))\n\ngoal (1 subgoal):\n 1. sets (stream_space M)\n    \\<subseteq> sigma_sets (streams (space M))\n                 (scylinder (space M) ` lists (sets M))", "."], ["proof (state)\nthis:\n  sets (stream_space M)\n  \\<subseteq> sigma_sets (streams (space M))\n               (scylinder (space M) ` lists (sets M))\n\ngoal (1 subgoal):\n 1. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "show \"sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M)) \\<subseteq> sets (stream_space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "unfolding space_stream_space[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_sets (space (stream_space M))\n     (scylinder (space M) ` lists (sets M))\n    \\<subseteq> sets (stream_space M)", "by (rule sets.sigma_sets_subset) (auto intro!: sets_scylinder)"], ["proof (state)\nthis:\n  sigma_sets (streams (space M)) (scylinder (space M) ` lists (sets M))\n  \\<subseteq> sets (stream_space M)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}