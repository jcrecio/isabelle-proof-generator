{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata/library/Sequence_LTL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Timed_Automata", "problem_names": ["lemmas [iff] = ev_sconst alw_sconst ev_smap alw_smap hld_smap'", "lemmas [iff] = alw_ev_stl", "lemma alw_ev_sdrop[iff]: \"alw (ev P) (sdrop n w) \\<longleftrightarrow> alw (ev P) w\"", "lemma alw_ev_scons[iff]: \"alw (ev P) (a ## w) \\<longleftrightarrow> alw (ev P) w\"", "lemma alw_ev_shift[iff]: \"alw (ev P) (u @- v) \\<longleftrightarrow> alw (ev P) v\"", "lemmas [simp del, iff] = ev_alw_stl", "lemma ev_alw_sdrop[iff]: \"ev (alw P) (sdrop n w) \\<longleftrightarrow> ev (alw P) w\"", "lemma ev_alw_scons[iff]: \"ev (alw P) (a ## w) \\<longleftrightarrow> ev (alw P) w\"", "lemma ev_alw_shift[iff]: \"ev (alw P) (u @- v) \\<longleftrightarrow> ev (alw P) v\"", "lemma HLD_sconst[iff]: \"HLD A (sconst a) \\<longleftrightarrow> a \\<in> A\"", "lemma ev_stl: \"ev \\<phi> (stl w) \\<longleftrightarrow> (\\<exists> u v. w = u @- v \\<and> u \\<noteq> [] \\<and> \\<phi> v)\"", "lemma ev_HLD_sset: \"ev (HLD A) w \\<longleftrightarrow> sset w \\<inter> A \\<noteq> {}\"", "lemma alw_ev_coinduct[case_names alw_ev, consumes 1]:\n    assumes \"R w\"\n    assumes \"\\<And> w. R w \\<Longrightarrow> ev \\<phi> w \\<and> ev R (stl w)\"\n    shows \"alw (ev \\<phi>) w\"", "lemma infs_suffix: \"infs A w \\<longleftrightarrow> (\\<forall> u v. w = u @- v \\<longrightarrow> sset v \\<inter> A \\<noteq> {})\"", "lemma infs_snth: \"infs A w \\<longleftrightarrow> (\\<forall> n. \\<exists> k \\<ge> n. w !! k \\<in> A)\"", "lemma infs_infm: \"infs A w \\<longleftrightarrow> (\\<exists>\\<^sub>\\<infinity> i. w !! i \\<in> A)\"", "lemma infs_coinduct[case_names infs, coinduct pred: infs]:\n    assumes \"R w\"\n    assumes \"\\<And> w. R w \\<Longrightarrow> \\<exists> u v. w = u @- v \\<and> set u \\<inter> A \\<noteq> {} \\<and> R v\"\n    shows \"infs A w\"", "lemma infs_flat_coinduct[case_names infs_flat, consumes 1]:\n    assumes \"R xss\"\n    assumes \"\\<And> xs xss. R (xs ## xss) \\<Longrightarrow> set xs \\<inter> A \\<noteq> {} \\<and> R xss\"\n    shows \"infs A (flat xss)\"", "lemma infs_supset[trans]: \"infs A w \\<Longrightarrow> sset w \\<inter> A \\<subseteq> B \\<Longrightarrow> infs B w\"", "lemma infsI_sset: \"sset w \\<subseteq> A \\<Longrightarrow> infs A w\"", "lemma infsD_sset: \"infs A w \\<Longrightarrow> sset w \\<inter> A \\<noteq> {}\"", "lemma infs_sset[intro!, simp]: \"infs (sset w) w\"", "lemma infs_UNIV[intro!, simp]: \"infs UNIV w\"", "lemma infs_union[iff]: \"infs (A \\<union> B) w \\<longleftrightarrow> infs A w \\<or> infs B w\"", "lemma infs_cycle[iff]:\n    assumes \"w \\<noteq> []\"\n    shows \"infs A (cycle w) \\<longleftrightarrow> set w \\<inter> A \\<noteq> {}\""], "translations": [["", "lemmas [iff] = ev_sconst alw_sconst ev_smap alw_smap hld_smap'"], ["", "lemmas [iff] = alw_ev_stl"], ["", "lemma alw_ev_sdrop[iff]: \"alw (ev P) (sdrop n w) \\<longleftrightarrow> alw (ev P) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev P) (sdrop n w) = alw (ev P) w", "using alw_ev_sdrop alw_sdrop"], ["proof (prove)\nusing this:\n  alw (ev ?\\<phi>) (sdrop ?m ?xs) \\<Longrightarrow> alw (ev ?\\<phi>) ?xs\n  alw ?\\<phi> ?xs \\<Longrightarrow> alw ?\\<phi> (sdrop ?n ?xs)\n\ngoal (1 subgoal):\n 1. alw (ev P) (sdrop n w) = alw (ev P) w", "by blast"], ["", "lemma alw_ev_scons[iff]: \"alw (ev P) (a ## w) \\<longleftrightarrow> alw (ev P) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev P) (a ## w) = alw (ev P) w", "by (metis alw_ev_stl stream.sel(2))"], ["", "lemma alw_ev_shift[iff]: \"alw (ev P) (u @- v) \\<longleftrightarrow> alw (ev P) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev P) (u @- v) = alw (ev P) v", "by (induct u) (auto)"], ["", "lemmas [simp del, iff] = ev_alw_stl"], ["", "lemma ev_alw_sdrop[iff]: \"ev (alw P) (sdrop n w) \\<longleftrightarrow> ev (alw P) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (alw P) (sdrop n w) = ev (alw P) w", "using alwD alw_alw alw_sdrop ev_alw_imp_alw_ev not_ev_iff"], ["proof (prove)\nusing this:\n  alw ?P ?x \\<Longrightarrow> ?P ?x\n  alw (alw ?\\<phi>) = alw ?\\<phi>\n  alw ?\\<phi> ?xs \\<Longrightarrow> alw ?\\<phi> (sdrop ?n ?xs)\n  ev (alw ?\\<phi>) ?xs \\<Longrightarrow> alw (ev ?\\<phi>) ?xs\n  (\\<not> ev ?P ?\\<omega>) = alw (\\<lambda>xs. \\<not> ?P xs) ?\\<omega>\n\ngoal (1 subgoal):\n 1. ev (alw P) (sdrop n w) = ev (alw P) w", "by metis"], ["", "lemma ev_alw_scons[iff]: \"ev (alw P) (a ## w) \\<longleftrightarrow> ev (alw P) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (alw P) (a ## w) = ev (alw P) w", "by (metis ev_alw_stl stream.sel(2))"], ["", "lemma ev_alw_shift[iff]: \"ev (alw P) (u @- v) \\<longleftrightarrow> ev (alw P) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (alw P) (u @- v) = ev (alw P) v", "by (induct u) (auto)"], ["", "lemma HLD_sconst[iff]: \"HLD A (sconst a) \\<longleftrightarrow> a \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HLD A (sconst a) = (a \\<in> A)", "unfolding HLD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. holds (\\<lambda>x. x \\<in> A) (sconst a) = (a \\<in> A)", "by simp"], ["", "lemma ev_stl: \"ev \\<phi> (stl w) \\<longleftrightarrow> (\\<exists> u v. w = u @- v \\<and> u \\<noteq> [] \\<and> \\<phi> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev \\<phi> (stl w) =\n    (\\<exists>u v. w = u @- v \\<and> u \\<noteq> [] \\<and> \\<phi> v)", "by (metis ev.base ev_shift list.distinct(1) rotate1.simps(2) rotate1_is_Nil_conv\n        sdrop.simps(2) sdrop_wait shift_simps(2) stake_Suc stake_sdrop\n      )"], ["", "lemma ev_HLD_sset: \"ev (HLD A) w \\<longleftrightarrow> sset w \\<inter> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (HLD A) w = (sset w \\<inter> A \\<noteq> {})", "unfolding HLD_def ev_holds_sset"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>sset w. x \\<in> A) = (sset w \\<inter> A \\<noteq> {})", "by auto"], ["", "lemma alw_ev_coinduct[case_names alw_ev, consumes 1]:\n    assumes \"R w\"\n    assumes \"\\<And> w. R w \\<Longrightarrow> ev \\<phi> w \\<and> ev R (stl w)\"\n    shows \"alw (ev \\<phi>) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev \\<phi>) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. alw (ev \\<phi>) w", "have \"ev R w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev R w", "using assms(1)"], ["proof (prove)\nusing this:\n  R w\n\ngoal (1 subgoal):\n 1. ev R w", "by rule"], ["proof (state)\nthis:\n  ev R w\n\ngoal (1 subgoal):\n 1. alw (ev \\<phi>) w", "then"], ["proof (chain)\npicking this:\n  ev R w", "show ?thesis"], ["proof (prove)\nusing this:\n  ev R w\n\ngoal (1 subgoal):\n 1. alw (ev \\<phi>) w", "using assms(2)"], ["proof (prove)\nusing this:\n  ev R w\n  R ?w \\<Longrightarrow> ev \\<phi> ?w \\<and> ev R (stl ?w)\n\ngoal (1 subgoal):\n 1. alw (ev \\<phi>) w", "by (coinduct) (metis alw_sdrop not_ev_iff sdrop_stl sdrop_wait)"], ["proof (state)\nthis:\n  alw (ev \\<phi>) w\n\ngoal:\nNo subgoals!", "qed"], ["", "(* acceptance conditions *)"], ["", "abbreviation \"infs A w \\<equiv> alw (ev (HLD A)) w\""], ["", "lemma infs_suffix: \"infs A w \\<longleftrightarrow> (\\<forall> u v. w = u @- v \\<longrightarrow> sset v \\<inter> A \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A w =\n    (\\<forall>u v.\n        w = u @- v \\<longrightarrow> sset v \\<inter> A \\<noteq> {})", "using alwD alw_iff_sdrop alw_shift ev_HLD_sset stake_sdrop"], ["proof (prove)\nusing this:\n  alw ?P ?x \\<Longrightarrow> ?P ?x\n  alw ?P ?\\<omega> = (\\<forall>m. ?P (sdrop m ?\\<omega>))\n  alw ?\\<phi> (?xl @- ?xs) \\<Longrightarrow> alw ?\\<phi> ?xs\n  ev (HLD ?A) ?w = (sset ?w \\<inter> ?A \\<noteq> {})\n  stake ?n ?s @- sdrop ?n ?s = ?s\n\ngoal (1 subgoal):\n 1. infs A w =\n    (\\<forall>u v.\n        w = u @- v \\<longrightarrow> sset v \\<inter> A \\<noteq> {})", "by metis"], ["", "lemma infs_snth: \"infs A w \\<longleftrightarrow> (\\<forall> n. \\<exists> k \\<ge> n. w !! k \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A w = (\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A)", "by (auto simp: alw_iff_sdrop ev_iff_sdrop HLD_iff intro: le_add1 dest: le_Suc_ex)"], ["", "lemma infs_infm: \"infs A w \\<longleftrightarrow> (\\<exists>\\<^sub>\\<infinity> i. w !! i \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A w = (\\<exists>\\<^sub>\\<infinity>i. w !! i \\<in> A)", "unfolding infs_snth INFM_nat_le"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A) =\n    (\\<forall>m. \\<exists>n\\<ge>m. w !! n \\<in> A)", "by rule"], ["", "lemma infs_coinduct[case_names infs, coinduct pred: infs]:\n    assumes \"R w\"\n    assumes \"\\<And> w. R w \\<Longrightarrow> \\<exists> u v. w = u @- v \\<and> set u \\<inter> A \\<noteq> {} \\<and> R v\"\n    shows \"infs A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A w", "using assms"], ["proof (prove)\nusing this:\n  R w\n  R ?w \\<Longrightarrow>\n  \\<exists>u v. ?w = u @- v \\<and> set u \\<inter> A \\<noteq> {} \\<and> R v\n\ngoal (1 subgoal):\n 1. infs A w", "by (coinduct rule: alw_ev_coinduct) (force simp: ev_HLD_sset ev_stl)"], ["", "lemma infs_flat_coinduct[case_names infs_flat, consumes 1]:\n    assumes \"R xss\"\n    assumes \"\\<And> xs xss. R (xs ## xss) \\<Longrightarrow> set xs \\<inter> A \\<noteq> {} \\<and> R xss\"\n    shows \"infs A (flat xss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A (flat xss)", "using assms"], ["proof (prove)\nusing this:\n  R xss\n  R (?xs ## ?xss) \\<Longrightarrow>\n  set ?xs \\<inter> A \\<noteq> {} \\<and> R ?xss\n\ngoal (1 subgoal):\n 1. infs A (flat xss)", "by (coinduction arbitrary: xss) (metis empty_set inf_bot_left flat_Stream stream.exhaust)"], ["", "lemma infs_supset[trans]: \"infs A w \\<Longrightarrow> sset w \\<inter> A \\<subseteq> B \\<Longrightarrow> infs B w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infs A w; sset w \\<inter> A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> infs B w", "unfolding infs_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A;\n     sset w \\<inter> A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> B", "by force"], ["", "lemma infsI_sset: \"sset w \\<subseteq> A \\<Longrightarrow> infs A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sset w \\<subseteq> A \\<Longrightarrow> infs A w", "unfolding infs_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. sset w \\<subseteq> A \\<Longrightarrow>\n    \\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A", "by force"], ["", "lemma infsD_sset: \"infs A w \\<Longrightarrow> sset w \\<inter> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A w \\<Longrightarrow> sset w \\<inter> A \\<noteq> {}", "unfolding ev_HLD_sset"], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>w. sset w \\<inter> A \\<noteq> {}) w \\<Longrightarrow>\n    sset w \\<inter> A \\<noteq> {}", "by auto"], ["", "lemma infs_sset[intro!, simp]: \"infs (sset w) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs (sset w) w", "by (auto intro: infsI_sset)"], ["", "lemma infs_UNIV[intro!, simp]: \"infs UNIV w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs UNIV w", "by (auto intro: infsI_sset)"], ["", "lemma infs_union[iff]: \"infs (A \\<union> B) w \\<longleftrightarrow> infs A w \\<or> infs B w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs (A \\<union> B) w = (infs A w \\<or> infs B w)", "unfolding infs_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A \\<union> B) =\n    ((\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> A) \\<or>\n     (\\<forall>n. \\<exists>k\\<ge>n. w !! k \\<in> B))", "by (auto) (meson le_trans nat_le_linear)"], ["", "lemma infs_cycle[iff]:\n    assumes \"w \\<noteq> []\"\n    shows \"infs A (cycle w) \\<longleftrightarrow> set w \\<inter> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A (cycle w) = (set w \\<inter> A \\<noteq> {})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. infs A (cycle w) \\<Longrightarrow> set w \\<inter> A \\<noteq> {}\n 2. set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)", "show \"infs A (cycle w) \\<Longrightarrow> set w \\<inter> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs A (cycle w) \\<Longrightarrow> set w \\<inter> A \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. infs A (cycle w) \\<Longrightarrow> set w \\<inter> A \\<noteq> {}", "by (auto simp: ev_HLD_sset dest: alwD)"], ["proof (state)\nthis:\n  infs A (cycle w) \\<Longrightarrow> set w \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)", "show \"set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)", "using assms"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)", "by (coinduction rule: infs_coinduct) (blast dest: cycle_decomp)"], ["proof (state)\nthis:\n  set w \\<inter> A \\<noteq> {} \\<Longrightarrow> infs A (cycle w)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}