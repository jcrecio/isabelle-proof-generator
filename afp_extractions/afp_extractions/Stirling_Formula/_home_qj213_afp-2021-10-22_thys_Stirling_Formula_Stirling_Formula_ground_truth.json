{"file_name": "/home/qj213/afp-2021-10-22/thys/Stirling_Formula/Stirling_Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Stirling_Formula", "problem_names": ["lemma S'_telescope_trapezium:\n  assumes \"n > 0\"\n  shows   \"S' n x = (\\<Sum>r<n. T (of_nat r + x))\"", "lemma stirling_trapezium:\n  assumes x: \"(x::real) > 0\"\n  shows   \"D x \\<in> {0 .. 1/(12*x^2) - 1/(12 * (x+1)^2)}\"", "lemma S'_LIMSEQ_Digamma:\n  assumes x: \"x \\<noteq> 0\"\n  shows   \"(\\<lambda>n. ln (real n) - S' n x - 1/(2*x)) \\<longlonglongrightarrow> Digamma x\"", "lemma S'_approx: \n  \"S' n x = ln (real n + x) - ln x + p n x\"", "lemma D_summable:\n  assumes x: \"x > 0\"\n  shows   \"summable (\\<lambda>n. D (real n + x))\"", "lemma p_LIMSEQ:\n  assumes x: \"x > 0\"\n  shows   \"(\\<lambda>n. p n x) \\<longlonglongrightarrow> P x\"", "lemma Digamma_approx:\n  assumes x: \"(x :: real) > 0\"\n  shows   \"Digamma x = ln x - 1 / (2 * x) - P x\"", "lemma p_ge_0: \"x > 0 \\<Longrightarrow> p n x \\<ge> 0\"", "lemma P_ge_0: \"x > 0 \\<Longrightarrow> P x \\<ge> 0\"", "lemma p_upper_bound:\n  assumes \"x > 0\" \"n > 0\"\n  shows \"p n x \\<le> 1/(12*x^2)\"", "lemma P_upper_bound:\n  assumes \"x > 0\"\n  shows   \"P x \\<le> 1/(12*x^2)\"", "lemma DERIV_g: \"x > 0 \\<Longrightarrow> (g has_field_derivative -P x) (at x)\"", "lemma isCont_P: \n  assumes \"x > 0\"\n  shows   \"isCont P x\"", "lemma P_continuous_on [THEN continuous_on_subset]: \"continuous_on {0<..} P\"", "lemma P_integrable:\n  assumes a: \"a > 0\"\n  shows   \"P integrable_on {a..}\"", "lemma g_bounds:\n  assumes x: \"x \\<ge> 1\"\n  shows   \"g x \\<in> {c..c + 1/(12*x)}\"", "lemma ln_Gamma_bounds_aux:\n  \"x \\<ge> 1 \\<Longrightarrow> ln_Gamma x \\<ge> c + (x - 1/2) * ln x - x\"\n  \"x \\<ge> 1 \\<Longrightarrow> ln_Gamma x \\<le> c + (x - 1/2) * ln x - x + 1/(12*x)\"", "lemma Gamma_bounds_aux:\n  assumes x: \"x \\<ge> 1\"\n  shows   \"Gamma x \\<ge> exp c * x powr (x - 1/2) / exp x\"\n          \"Gamma x \\<le> exp c * x powr (x - 1/2) / exp x * exp (1/(12*x))\"", "lemma Gamma_asymp_equiv_aux: \n  \"Gamma \\<sim>[at_top] (\\<lambda>x. exp c * x powr (x - 1/2) / exp x)\"", "lemma exp_1_powr_real [simp]: \"exp (1::real) powr x = exp x\"", "lemma fact_asymp_equiv_aux:\n  \"fact \\<sim>[at_top] (\\<lambda>x. exp c * sqrt (real x) * (real x / exp 1) powr real x)\"", "lemma powr_mult_2: \"(x::real) > 0 \\<Longrightarrow> x powr (y * 2) = (x^2) powr y\"", "lemma exp_mult_2: \"exp (y * 2 :: real) = exp y * exp y\"", "lemma exp_c: \"exp c = sqrt (2*pi)\"", "lemma c: \"c = ln (2*pi) / 2\"", "theorem Gamma_bounds:\n  assumes \"x \\<ge> 1\"\n  shows   \"Gamma x \\<ge> sqrt (2*pi/x) * (x / exp 1) powr x\" (is ?th1)\n          \"Gamma x \\<le> sqrt (2*pi/x) * (x / exp 1) powr x * exp (1 / (12 * x))\" (is ?th2)", "theorem ln_Gamma_bounds:\n  assumes \"x \\<ge> 1\"\n  shows   \"ln_Gamma x \\<ge> ln (2*pi/x) / 2 + x * ln x - x\" (is ?th1)\n          \"ln_Gamma x \\<le> ln (2*pi/x) / 2 + x * ln x - x + 1/(12*x)\" (is ?th2)", "theorem fact_bounds:\n  assumes \"n > 0\"\n  shows   \"(fact n :: real) \\<ge> sqrt (2*pi*n) * (n / exp 1) ^ n\" (is ?th1)\n          \"(fact n :: real) \\<le> sqrt (2*pi*n) * (n / exp 1) ^ n * exp (1 / (12 * n))\" (is ?th2)", "theorem ln_fact_bounds:\n  assumes \"n > 0\"\n  shows   \"ln (fact n :: real) \\<ge> ln (2*pi*n)/2 + n * ln n - n\" (is ?th1)\n          \"ln (fact n :: real) \\<le> ln (2*pi*n)/2 + n * ln n - n + 1/(12*real n)\" (is ?th2)", "theorem Gamma_asymp_equiv: \n  \"Gamma \\<sim>[at_top] (\\<lambda>x. sqrt (2*pi/x) * (x / exp 1) powr x :: real)\"", "theorem fact_asymp_equiv: \n  \"fact \\<sim>[at_top] (\\<lambda>n. sqrt (2*pi*n) * (n / exp 1) ^ n :: real)\""], "translations": [["", "lemma S'_telescope_trapezium:\n  assumes \"n > 0\"\n  shows   \"S' n x = (\\<Sum>r<n. T (of_nat r + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S' n x = (\\<Sum>r<n. T (real r + x))", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "hence m: \"Suc m = n\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. Suc m = n", "by simp"], ["proof (state)\nthis:\n  Suc m = n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"(\\<Sum>r<n. T (of_nat r + x)) = \n          (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) + (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. T (real r + x)) =\n    (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) +\n    (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x))", "unfolding m"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. T (real r + x)) =\n    (\\<Sum>r<n. 1 / (2 * real r + 2 * x)) +\n    (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x))", "by (simp add: T_def sum.distrib algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>r<n. T (real r + x)) =\n  (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) +\n  (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n. T (real r + x)) =\n  (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) +\n  (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"(\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) = \n               1/(2*x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x))\" (is \"_ = ?a + ?S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) =\n    1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x))", "by (subst sum.lessThan_Suc_shift) simp"], ["proof (state)\nthis:\n  (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) =\n  1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<Suc m. 1 / (2 * real r + 2 * x)) =\n  1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"(\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x)) = \n               ?S + 1 / (2*(real m + x + 1))\" (is \"_ = _ + ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x)) =\n    (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * (real m + x + 1))", "by (simp add: Suc)"], ["proof (state)\nthis:\n  (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x)) =\n  (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * (real m + x + 1))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n. 1 / (2 * real (Suc r) + 2 * x)) =\n  (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * (real m + x + 1))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"?a + ?S + (?S + ?b) = 2*?S + ?a + ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n    ((\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n     1 / (2 * (real m + x + 1))) =\n    2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * x) +\n    1 / (2 * (real m + x + 1))", "by (simp add: add_ac)"], ["proof (state)\nthis:\n  1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n  ((\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n   1 / (2 * (real m + x + 1))) =\n  2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * x) +\n  1 / (2 * (real m + x + 1))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  1 / (2 * x) + (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n  ((\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) +\n   1 / (2 * (real m + x + 1))) =\n  2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) + 1 / (2 * x) +\n  1 / (2 * (real m + x + 1))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"2 * ?S = (\\<Sum>r=0..<m. 1 / (real (Suc r) + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) =\n    (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x))", "unfolding sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n<m. 2 * (1 / (2 * real (Suc n) + 2 * x))) =\n    (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x))", "by (intro sum.cong) (auto simp add: divide_simps)"], ["proof (state)\nthis:\n  2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) =\n  (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  2 * (\\<Sum>r<m. 1 / (2 * real (Suc r) + 2 * x)) =\n  (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"(\\<Sum>r=0..<m. 1 / (real (Suc r) + x)) = (\\<Sum>r=Suc 0..<Suc m. 1 / (real r + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x)) =\n    (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x))", "by (subst sum.atLeast_Suc_lessThan_Suc_shift) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x)) =\n  (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>r = 0..<m. 1 / (real (Suc r) + x)) =\n  (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"\\<dots> = (\\<Sum>r=1..<n. 1 / (real r + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x)) =\n    (\\<Sum>r = 1..<n. 1 / (real r + x))", "unfolding m"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r = Suc 0..<n. 1 / (real r + x)) =\n    (\\<Sum>r = 1..<n. 1 / (real r + x))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x)) =\n  (\\<Sum>r = 1..<n. 1 / (real r + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>r = Suc 0..<Suc m. 1 / (real r + x)) =\n  (\\<Sum>r = 1..<n. 1 / (real r + x))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "have \"\\<dots> + ?a + ?b = S' n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r = 1..<n. 1 / (real r + x)) + 1 / (2 * x) +\n    1 / (2 * (real m + x + 1)) =\n    S' n x", "by (simp add: S'_def Suc)"], ["proof (state)\nthis:\n  (\\<Sum>r = 1..<n. 1 / (real r + x)) + 1 / (2 * x) +\n  1 / (2 * (real m + x + 1)) =\n  S' n x\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>r<n. T (real r + x)) = S' n x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>r<n. T (real r + x)) = S' n x\n\ngoal (1 subgoal):\n 1. S' n x = (\\<Sum>r<n. T (real r + x))", ".."], ["proof (state)\nthis:\n  S' n x = (\\<Sum>r<n. T (real r + x))\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> S' n x = (\\<Sum>r<n. T (real r + x))", "qed (insert assms, simp_all)"], ["", "private"], ["", "lemma stirling_trapezium:\n  assumes x: \"(x::real) > 0\"\n  shows   \"D x \\<in> {0 .. 1/(12*x^2) - 1/(12 * (x+1)^2)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "define y where \"y = 1 / (2*x + 1)\""], ["proof (state)\nthis:\n  y = 1 / (2 * x + 1)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have y: \"y > 0\" \"y < 1\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < y &&& y < 1", "by (simp_all add: divide_simps y_def)"], ["proof (state)\nthis:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"D x = T x - ln ((x + 1) / x)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. D x = T x - ln ((x + 1) / x)", "by (subst ln_div) (simp_all add: D_def)"], ["proof (state)\nthis:\n  D x = T x - ln ((x + 1) / x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  D x = T x - ln ((x + 1) / x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"(x + 1) / x = 1 + 1 / x\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. (x + 1) / x = 1 + 1 / x", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (x + 1) / x = 1 + 1 / x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  D x = T x - ln (1 + 1 / x)", "have D: \"D x = T x - ln (1 + 1/x)\""], ["proof (prove)\nusing this:\n  D x = T x - ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. D x = T x - ln (1 + 1 / x)", "."], ["proof (state)\nthis:\n  D x = T x - ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"(\\<lambda>n. y * y^n) sums (y * (1 / (1 - y)))\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y * y ^ n) sums (y * (1 / (1 - y)))", "by (intro geometric_sums sums_mult) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. y * y ^ n) sums (y * (1 / (1 - y)))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence \"(\\<lambda>n. y ^ Suc n) sums (y / (1 - y))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y * y ^ n) sums (y * (1 / (1 - y)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y ^ Suc n) sums (y / (1 - y))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ Suc n) sums (y / (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ Suc n) sums (y / (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"y / (1 - y) = 1 / (2*x)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. y / (1 - y) = 1 / (2 * x)", "by (simp add: y_def divide_simps)"], ["proof (state)\nthis:\n  y / (1 - y) = 1 / (2 * x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. y ^ Suc n) sums (1 / (2 * x))", "have *: \"(\\<lambda>n. y ^ Suc n) sums (1 / (2*x))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y ^ Suc n) sums (1 / (2 * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y ^ Suc n) sums (1 / (2 * x))", "."], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ Suc n) sums (1 / (2 * x))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"(\\<lambda>n. (-y) * (-y)^n) sums ((-y) * (1 / (1 - (-y))))\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. - y * (- y) ^ n) sums (- y * (1 / (1 - - y)))", "by (intro geometric_sums sums_mult) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. - y * (- y) ^ n) sums (- y * (1 / (1 - - y)))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence \"(\\<lambda>n. (-y) ^ Suc n) sums (-(y / (1 + y)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. - y * (- y) ^ n) sums (- y * (1 / (1 - - y)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. (- y) ^ Suc n) sums - (y / (1 + y))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. (- y) ^ Suc n) sums - (y / (1 + y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. (- y) ^ Suc n) sums - (y / (1 + y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"y / (1 + y) = 1 / (2*(x+1))\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. y / (1 + y) = 1 / (2 * (x + 1))", "by (simp add: y_def divide_simps)"], ["proof (state)\nthis:\n  y / (1 + y) = 1 / (2 * (x + 1))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. (- y) ^ Suc n) sums - (1 / (2 * (x + 1)))", "have **: \"(\\<lambda>n. (-y) ^ Suc n) sums (-(1 / (2*(x+1))))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. (- y) ^ Suc n) sums - (1 / (2 * (x + 1)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. (- y) ^ Suc n) sums - (1 / (2 * (x + 1)))", "."], ["proof (state)\nthis:\n  (\\<lambda>n. (- y) ^ Suc n) sums - (1 / (2 * (x + 1)))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from sums_diff[OF * **]"], ["proof (chain)\npicking this:\n  (\\<lambda>n. y ^ Suc n - (- y) ^ Suc n) sums\n  (1 / (2 * x) - - (1 / (2 * (x + 1))))", "have sum1: \"(\\<lambda>n. y ^ Suc n - (-y) ^ Suc n) sums T x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y ^ Suc n - (- y) ^ Suc n) sums\n  (1 / (2 * x) - - (1 / (2 * (x + 1))))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y ^ Suc n - (- y) ^ Suc n) sums T x", "by (simp add: T_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ Suc n - (- y) ^ Suc n) sums T x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"abs y < 1\" \"abs (-y) < 1\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. \\<bar>y\\<bar> < 1 &&& \\<bar>- y\\<bar> < 1", "by simp_all"], ["proof (state)\nthis:\n  \\<bar>y\\<bar> < 1\n  \\<bar>- y\\<bar> < 1\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from sums_diff[OF this[THEN ln_series']]"], ["proof (chain)\npicking this:\n  (\\<lambda>n. - ((- y) ^ n) / real n - - ((- (- y)) ^ n) / real n) sums\n  (ln (1 + y) - ln (1 + - y))", "have \"(\\<lambda>n. y ^ n / real n - (-y) ^ n / real n) sums (ln (1 + y) - ln (1 - y))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. - ((- y) ^ n) / real n - - ((- (- y)) ^ n) / real n) sums\n  (ln (1 + y) - ln (1 + - y))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums\n    (ln (1 + y) - ln (1 - y))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums\n  (ln (1 + y) - ln (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums\n  (ln (1 + y) - ln (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"ln (1 + y) - ln (1 - y) = ln ((1 + y) / (1 - y))\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. ln (1 + y) - ln (1 - y) = ln ((1 + y) / (1 - y))", "by (simp add: ln_div)"], ["proof (state)\nthis:\n  ln (1 + y) - ln (1 - y) = ln ((1 + y) / (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  ln (1 + y) - ln (1 - y) = ln ((1 + y) / (1 - y))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"(1 + y) / (1 - y) = 1 + 1/x\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. (1 + y) / (1 - y) = 1 + 1 / x", "by (simp add: divide_simps y_def)"], ["proof (state)\nthis:\n  (1 + y) / (1 - y) = 1 + 1 / x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums ln (1 + 1 / x)", "have \"(\\<lambda>n. y^n / real n - (-y)^n / real n) sums ln (1 + 1/x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums ln (1 + 1 / x)", "."], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence sum2: \"(\\<lambda>n. y^Suc n / real (Suc n) - (-y)^Suc n / real (Suc n)) sums ln (1 + 1/x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y ^ n / real n - (- y) ^ n / real n) sums ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)) sums\n    ln (1 + 1 / x)", "by (subst sums_Suc_iff) simp"], ["proof (state)\nthis:\n  (\\<lambda>n. y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)) sums\n  ln (1 + 1 / x)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "have \"ln (1 + 1/x) \\<le> T x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (1 + 1 / x) \\<le> T x", "proof (rule sums_le [OF _ sum2 sum1])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n       \\<le> y ^ Suc n - (- y) ^ Suc n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n       \\<le> y ^ Suc n - (- y) ^ Suc n", "show \"y ^ Suc n / real (Suc n) - (-y) ^ Suc n / real (Suc n) \\<le> y^Suc n - (-y) ^ Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "proof (cases \"even n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. even n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n\n 2. odd n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "case True"], ["proof (state)\nthis:\n  even n\n\ngoal (2 subgoals):\n 1. even n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n\n 2. odd n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "hence eq: \"A - (-y) ^ Suc n / B = A + y ^ Suc n / B\" \"A - (-y) ^ Suc n = A + y ^ Suc n\"\n        for A B"], ["proof (prove)\nusing this:\n  even n\n\ngoal (1 subgoal):\n 1. A - (- y) ^ Suc n / B = A + y ^ Suc n / B &&&\n    A - (- y) ^ Suc n = A + y ^ Suc n", "by simp_all"], ["proof (state)\nthis:\n  ?A - (- y) ^ Suc n / ?B = ?A + y ^ Suc n / ?B\n  ?A - (- y) ^ Suc n = ?A + y ^ Suc n\n\ngoal (2 subgoals):\n 1. even n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n\n 2. odd n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "unfolding eq"], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. y ^ Suc n / real (Suc n) + y ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n + y ^ Suc n", "by (intro add_mono) (auto simp: divide_simps)"], ["proof (state)\nthis:\n  y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n  \\<le> y ^ Suc n - (- y) ^ Suc n\n\ngoal (1 subgoal):\n 1. odd n \\<Longrightarrow>\n    y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n    \\<le> y ^ Suc n - (- y) ^ Suc n", "qed simp_all"], ["proof (state)\nthis:\n  y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n)\n  \\<le> y ^ Suc n - (- y) ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ln (1 + 1 / x) \\<le> T x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence \"D x \\<ge> 0\""], ["proof (prove)\nusing this:\n  ln (1 + 1 / x) \\<le> T x\n\ngoal (1 subgoal):\n 1. 0 \\<le> D x", "by (simp add: D)"], ["proof (state)\nthis:\n  0 \\<le> D x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "define c where \"c = (\\<lambda>n. if even n then 2 * (1 - 1 / real (Suc n)) else 0)\""], ["proof (state)\nthis:\n  c = (\\<lambda>n. if even n then 2 * (1 - 1 / real (Suc n)) else 0)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "note sums_diff[OF sum1 sum2]"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      y ^ Suc n - (- y) ^ Suc n -\n      (y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n))) sums\n  (T x - ln (1 + 1 / x))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      y ^ Suc n - (- y) ^ Suc n -\n      (y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n))) sums\n  (T x - ln (1 + 1 / x))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "have \"(\\<lambda>n. y ^ Suc n - (-y) ^ Suc n - (y ^ Suc n / real (Suc n) - \n                   (-y) ^ Suc n / real (Suc n))) = (\\<lambda>n. c n * y ^ Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        y ^ Suc n - (- y) ^ Suc n -\n        (y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n))) =\n    (\\<lambda>n. c n * y ^ Suc n)", "by (intro ext) (simp add: c_def algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      y ^ Suc n - (- y) ^ Suc n -\n      (y ^ Suc n / real (Suc n) - (- y) ^ Suc n / real (Suc n))) =\n  (\\<lambda>n. c n * y ^ Suc n)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. c n * y ^ Suc n) sums (T x - ln (1 + 1 / x))", "have sum3: \"(\\<lambda>n. c n * y ^ Suc n) sums D x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. c n * y ^ Suc n) sums (T x - ln (1 + 1 / x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c n * y ^ Suc n) sums D x", "by (simp add: D)"], ["proof (state)\nthis:\n  (\\<lambda>n. c n * y ^ Suc n) sums D x\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"(\\<lambda>n. y^2 * (of_nat (Suc n) * y^n)) sums (y^2 * (1 / (1 - y)^2))\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * y ^ n)) sums\n    (y\\<^sup>2 * (1 / (1 - y)\\<^sup>2))", "by (intro sums_mult geometric_deriv_sums) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * y ^ n)) sums\n  (y\\<^sup>2 * (1 / (1 - y)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence \"(\\<lambda>n. of_nat (Suc n) * y^(n+2)) sums (y^2 / (1 - y)^2)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * y ^ n)) sums\n  (y\\<^sup>2 * (1 / (1 - y)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. real (Suc n) * y ^ (n + 2)) sums\n    (y\\<^sup>2 / (1 - y)\\<^sup>2)", "by (simp add: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * y ^ (n + 2)) sums\n  (y\\<^sup>2 / (1 - y)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * y ^ (n + 2)) sums\n  (y\\<^sup>2 / (1 - y)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"y^2 / (1 - y)^2 = 1 / (4*x^2)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. y\\<^sup>2 / (1 - y)\\<^sup>2 = 1 / (4 * x\\<^sup>2)", "by (simp add: y_def divide_simps)"], ["proof (state)\nthis:\n  y\\<^sup>2 / (1 - y)\\<^sup>2 = 1 / (4 * x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. real (Suc n) * y ^ (n + 2)) sums (1 / (4 * x\\<^sup>2))", "have *: \"(\\<lambda>n. real (Suc n) * y ^ (Suc (Suc n))) sums (1 / (4 * x\\<^sup>2))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. real (Suc n) * y ^ (n + 2)) sums (1 / (4 * x\\<^sup>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. real (Suc n) * y ^ Suc (Suc n)) sums (1 / (4 * x\\<^sup>2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * y ^ Suc (Suc n)) sums (1 / (4 * x\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from y"], ["proof (chain)\npicking this:\n  0 < y\n  y < 1", "have \"(\\<lambda>n. y^2 * (of_nat (Suc n) * (-y)^n)) sums (y^2 * (1 / (1 - -y)^2))\""], ["proof (prove)\nusing this:\n  0 < y\n  y < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * (- y) ^ n)) sums\n    (y\\<^sup>2 * (1 / (1 - - y)\\<^sup>2))", "by (intro sums_mult geometric_deriv_sums) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * (- y) ^ n)) sums\n  (y\\<^sup>2 * (1 / (1 - - y)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "hence \"(\\<lambda>n. of_nat (Suc n) * (-y)^(n+2)) sums (y^2 / (1 + y)^2)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. y\\<^sup>2 * (real (Suc n) * (- y) ^ n)) sums\n  (y\\<^sup>2 * (1 / (1 - - y)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. real (Suc n) * (- y) ^ (n + 2)) sums\n    (y\\<^sup>2 / (1 + y)\\<^sup>2)", "by (simp add: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * (- y) ^ (n + 2)) sums\n  (y\\<^sup>2 / (1 + y)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * (- y) ^ (n + 2)) sums\n  (y\\<^sup>2 / (1 + y)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"y^2 / (1 + y)^2 = 1 / (2^2*(x+1)^2)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. y\\<^sup>2 / (1 + y)\\<^sup>2 = 1 / (2\\<^sup>2 * (x + 1)\\<^sup>2)", "unfolding power_mult_distrib [symmetric]"], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. y\\<^sup>2 / (1 + y)\\<^sup>2 = 1 / (2 * (x + 1))\\<^sup>2", "by (simp add: y_def divide_simps add_ac)"], ["proof (state)\nthis:\n  y\\<^sup>2 / (1 + y)\\<^sup>2 = 1 / (2\\<^sup>2 * (x + 1)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. real (Suc n) * (- y) ^ (n + 2)) sums\n  (1 / (2\\<^sup>2 * (x + 1)\\<^sup>2))", "have **: \"(\\<lambda>n. real (Suc n) * (- y) ^ (Suc (Suc n))) sums (1 / (4 * (x + 1)\\<^sup>2))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. real (Suc n) * (- y) ^ (n + 2)) sums\n  (1 / (2\\<^sup>2 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. real (Suc n) * (- y) ^ Suc (Suc n)) sums\n    (1 / (4 * (x + 1)\\<^sup>2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. real (Suc n) * (- y) ^ Suc (Suc n)) sums\n  (1 / (4 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "define d where \"d = (\\<lambda>n. if even n then 2 * real n else 0)\""], ["proof (state)\nthis:\n  d = (\\<lambda>n. if even n then 2 * real n else 0)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "note sums_diff[OF * **]"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      real (Suc n) * y ^ Suc (Suc n) -\n      real (Suc n) * (- y) ^ Suc (Suc n)) sums\n  (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      real (Suc n) * y ^ Suc (Suc n) -\n      real (Suc n) * (- y) ^ Suc (Suc n)) sums\n  (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "have \"(\\<lambda>n. real (Suc n) * y^(Suc (Suc n)) - real (Suc n) * (-y)^(Suc (Suc n))) = \n                 (\\<lambda>n. d (Suc n) * y ^ Suc (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        real (Suc n) * y ^ Suc (Suc n) -\n        real (Suc n) * (- y) ^ Suc (Suc n)) =\n    (\\<lambda>n. d (Suc n) * y ^ Suc (Suc n))", "by (intro ext) (simp_all add: d_def)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      real (Suc n) * y ^ Suc (Suc n) - real (Suc n) * (- y) ^ Suc (Suc n)) =\n  (\\<lambda>n. d (Suc n) * y ^ Suc (Suc n))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. d (Suc n) * y ^ Suc (Suc n)) sums\n  (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))", "have \"(\\<lambda>n. d n * y ^ Suc n) sums (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. d (Suc n) * y ^ Suc (Suc n)) sums\n  (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. d n * y ^ Suc n) sums\n    (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))", "by (subst (asm) sums_Suc_iff) (simp add: d_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. d n * y ^ Suc n) sums\n  (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "from sums_mult[OF this, of \"1/3\"] x"], ["proof (chain)\npicking this:\n  (\\<lambda>n. 1 / 3 * (d n * y ^ Suc n)) sums\n  (1 / 3 * (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2)))\n  0 < x", "have sum4: \"(\\<lambda>n. d n / 3 * y ^ Suc n) sums (1 / (12 * x^2) - 1 / (12 * (x + 1)^2))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. 1 / 3 * (d n * y ^ Suc n)) sums\n  (1 / 3 * (1 / (4 * x\\<^sup>2) - 1 / (4 * (x + 1)\\<^sup>2)))\n  0 < x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. d n / 3 * y ^ Suc n) sums\n    (1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2))", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>n. d n / 3 * y ^ Suc n) sums\n  (1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "have \"D x \\<le> (1 / (12 * x^2) - 1 / (12 * (x + 1)^2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D x \\<le> 1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)", "proof (intro sums_le [OF _ sum3 sum4] allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n", "define c' :: \"nat \\<Rightarrow> real\" \n      where \"c' = (\\<lambda>n. if odd n \\<or> n = 0 then 0 else if n = 2 then 4/3 else 2)\""], ["proof (state)\nthis:\n  c' =\n  (\\<lambda>n. if odd n \\<or> n = 0 then 0 else if n = 2 then 4 / 3 else 2)\n\ngoal (1 subgoal):\n 1. \\<And>n. c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n", "show \"c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n", "proof (intro mult_right_mono)"], ["proof (state)\ngoal (2 subgoals):\n 1. c n \\<le> d n / 3\n 2. 0 \\<le> y ^ Suc n", "have \"c n \\<le> c' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c n \\<le> c' n", "by (simp add: c_def c'_def)"], ["proof (state)\nthis:\n  c n \\<le> c' n\n\ngoal (2 subgoals):\n 1. c n \\<le> d n / 3\n 2. 0 \\<le> y ^ Suc n", "also"], ["proof (state)\nthis:\n  c n \\<le> c' n\n\ngoal (2 subgoals):\n 1. c n \\<le> d n / 3\n 2. 0 \\<le> y ^ Suc n", "consider \"n = 0\" | \"n = 1\" | \"n = 2\" | \"n \\<ge> 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     n = 2 \\<Longrightarrow> thesis;\n     3 \\<le> n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   n = 2 \\<Longrightarrow> ?thesis;\n   3 \\<le> n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. c n \\<le> d n / 3\n 2. 0 \\<le> y ^ Suc n", "hence \"c' n \\<le> d n / 3\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   n = 2 \\<Longrightarrow> ?thesis;\n   3 \\<le> n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. c' n \\<le> d n / 3", "by cases (simp_all add: c'_def d_def)"], ["proof (state)\nthis:\n  c' n \\<le> d n / 3\n\ngoal (2 subgoals):\n 1. c n \\<le> d n / 3\n 2. 0 \\<le> y ^ Suc n", "finally"], ["proof (chain)\npicking this:\n  c n \\<le> d n / 3", "show \"c n \\<le> d n / 3\""], ["proof (prove)\nusing this:\n  c n \\<le> d n / 3\n\ngoal (1 subgoal):\n 1. c n \\<le> d n / 3", "."], ["proof (state)\nthis:\n  c n \\<le> d n / 3\n\ngoal (1 subgoal):\n 1. 0 \\<le> y ^ Suc n", "qed (insert y, simp)"], ["proof (state)\nthis:\n  c n * y ^ Suc n \\<le> d n / 3 * y ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D x \\<le> 1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "with \\<open>D x \\<ge> 0\\<close>"], ["proof (chain)\npicking this:\n  0 \\<le> D x\n  D x \\<le> 1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> D x\n  D x \\<le> 1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}", "by simp"], ["proof (state)\nthis:\n  D x \\<in> {0..1 / (12 * x\\<^sup>2) - 1 / (12 * (x + 1)\\<^sup>2)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The following functions correspond to the $p_n(x)$ from the article.\n  The special case $n = 0$ would not, strictly speaking, be necessary, but \n  it allows some theorems to work even without the precondition $n \\neq 0$:\n\\<close>"], ["", "private"], ["", "definition p :: \"nat \\<Rightarrow> real \\<Rightarrow> real\" where\n  \"p n x = (if n = 0 then 1/x else (\\<Sum>r<n. D (real r + x)))\""], ["", "text \\<open>\n  We can write the Digamma function in terms of @{term S'}:\n\\<close>"], ["", "private"], ["", "lemma S'_LIMSEQ_Digamma:\n  assumes x: \"x \\<noteq> 0\"\n  shows   \"(\\<lambda>n. ln (real n) - S' n x - 1/(2*x)) \\<longlonglongrightarrow> Digamma x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "define c where \"c = (\\<lambda>n. ln (real n) - (\\<Sum>r<n. inverse (x + real r)))\""], ["proof (state)\nthis:\n  c = (\\<lambda>n. ln (real n) - (\\<Sum>r<n. inverse (x + real r)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "have \"eventually (\\<lambda>n. 1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1/(2*x))) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "have \"c n - (ln (real n) - S' n x - 1/(2*x)) = \n            -(\\<Sum>r<n. inverse (real r + x)) + (1/x + (\\<Sum>r=1..<n. inverse (real r + x))) + 1/(2*(real n + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n    - (\\<Sum>r<n. inverse (real r + x)) +\n    (1 / x + (\\<Sum>r = 1..<n. inverse (real r + x))) +\n    1 / (2 * (real n + x))", "using x"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n    - (\\<Sum>r<n. inverse (real r + x)) +\n    (1 / x + (\\<Sum>r = 1..<n. inverse (real r + x))) +\n    1 / (2 * (real n + x))", "by (simp add: S'_def c_def field_simps)"], ["proof (state)\nthis:\n  c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n  - (\\<Sum>r<n. inverse (real r + x)) +\n  (1 / x + (\\<Sum>r = 1..<n. inverse (real r + x))) +\n  1 / (2 * (real n + x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "also"], ["proof (state)\nthis:\n  c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n  - (\\<Sum>r<n. inverse (real r + x)) +\n  (1 / x + (\\<Sum>r = 1..<n. inverse (real r + x))) +\n  1 / (2 * (real n + x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "have \"1/x + (\\<Sum>r=1..<n. inverse (real r + x)) = (\\<Sum>r<n. inverse (real r + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / x + (\\<Sum>r = 1..<n. inverse (real r + x)) =\n    (\\<Sum>r<n. inverse (real r + x))", "unfolding lessThan_atLeast0"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / x + (\\<Sum>r = 1..<n. inverse (real r + x)) =\n    (\\<Sum>r = 0..<n. inverse (real r + x))", "using n"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 1 / x + (\\<Sum>r = 1..<n. inverse (real r + x)) =\n    (\\<Sum>r = 0..<n. inverse (real r + x))", "by (subst (2) sum.atLeast_Suc_lessThan) (simp_all add: field_simps)"], ["proof (state)\nthis:\n  1 / x + (\\<Sum>r = 1..<n. inverse (real r + x)) =\n  (\\<Sum>r<n. inverse (real r + x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "finally"], ["proof (chain)\npicking this:\n  c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n  - (\\<Sum>r<n. inverse (real r + x)) + (\\<Sum>r<n. inverse (real r + x)) +\n  1 / (2 * (real n + x))", "show \"1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1/(2*x))\""], ["proof (prove)\nusing this:\n  c n - (ln (real n) - S' n x - 1 / (2 * x)) =\n  - (\\<Sum>r<n. inverse (real r + x)) + (\\<Sum>r<n. inverse (real r + x)) +\n  1 / (2 * (real n + x))\n\ngoal (1 subgoal):\n 1. 1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))", "by simp"], ["proof (state)\nthis:\n  1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "have \"(\\<lambda>n. 1 / (2 * (x + real n))) \\<longlonglongrightarrow> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. 1 / (2 * (x + real n))) \\<longlonglongrightarrow> 0", "by (rule real_tendsto_divide_at_top tendsto_const filterlim_tendsto_pos_mult_at_top\n          filterlim_tendsto_add_at_top filterlim_real_sequentially | simp)+"], ["proof (state)\nthis:\n  (\\<lambda>n. 1 / (2 * (x + real n))) \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in sequentially.\n     1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))\n  (\\<lambda>n. 1 / (2 * (x + real n))) \\<longlonglongrightarrow> 0", "have \"(\\<lambda>n. c n - (ln (real n) - S' n x - 1/(2*x))) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     1 / (2 * (x + real n)) = c n - (ln (real n) - S' n x - 1 / (2 * x))\n  (\\<lambda>n. 1 / (2 * (x + real n))) \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c n - (ln (real n) - S' n x - 1 / (2 * x)))\n    \\<longlonglongrightarrow> 0", "by (blast intro: Lim_transform_eventually)"], ["proof (state)\nthis:\n  (\\<lambda>n. c n - (ln (real n) - S' n x - 1 / (2 * x)))\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "from tendsto_minus[OF this]"], ["proof (chain)\npicking this:\n  (\\<lambda>xa. - (c xa - (ln (real xa) - S' xa x - 1 / (2 * x))))\n  \\<longlonglongrightarrow> - 0", "have \"(\\<lambda>n. (ln (real n) - S' n x - 1/(2*x)) - c n) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>xa. - (c xa - (ln (real xa) - S' xa x - 1 / (2 * x))))\n  \\<longlonglongrightarrow> - 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x) - c n)\n    \\<longlonglongrightarrow> 0", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x) - c n)\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x) - c n)\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "from Digamma_LIMSEQ[OF x]"], ["proof (chain)\npicking this:\n  (\\<lambda>m. of_real (ln (real m)) - (\\<Sum>n<m. inverse (x + real n)))\n  \\<longlonglongrightarrow> Digamma x", "have \"c \\<longlonglongrightarrow> Digamma x\""], ["proof (prove)\nusing this:\n  (\\<lambda>m. of_real (ln (real m)) - (\\<Sum>n<m. inverse (x + real n)))\n  \\<longlonglongrightarrow> Digamma x\n\ngoal (1 subgoal):\n 1. c \\<longlonglongrightarrow> Digamma x", "by (simp add: c_def)"], ["proof (state)\nthis:\n  c \\<longlonglongrightarrow> Digamma x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x) - c n)\n  \\<longlonglongrightarrow> 0\n  c \\<longlonglongrightarrow> Digamma x", "show \"(\\<lambda>n. ln (real n) - S' n x - 1/(2*x)) \\<longlonglongrightarrow> Digamma x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x) - c n)\n  \\<longlonglongrightarrow> 0\n  c \\<longlonglongrightarrow> Digamma x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "by (rule Lim_transform [rotated])"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> Digamma x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Moreover, we can give an expansion of @{term S'} with the @{term p} as variation terms.\n\\<close>"], ["", "private"], ["", "lemma S'_approx: \n  \"S' n x = ln (real n + x) - ln x + p n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S' n x = ln (real n + x) - ln x + p n x", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x\n 2. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x\n 2. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. S' n x = ln (real n + x) - ln x + p n x", "by (simp add: p_def S'_def)"], ["proof (state)\nthis:\n  S' n x = ln (real n + x) - ln x + p n x\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "hence \"S' n x = (\\<Sum>r<n. T (real r + x))\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. S' n x = (\\<Sum>r<n. T (real r + x))", "by (subst S'_telescope_trapezium) simp_all"], ["proof (state)\nthis:\n  S' n x = (\\<Sum>r<n. T (real r + x))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "also"], ["proof (state)\nthis:\n  S' n x = (\\<Sum>r<n. T (real r + x))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "have \"\\<dots> = (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. T (real r + x)) =\n    (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x))", "by (simp add: D_def)"], ["proof (state)\nthis:\n  (\\<Sum>r<n. T (real r + x)) =\n  (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n. T (real r + x)) =\n  (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "have \"\\<dots> = (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) + p n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x)) =\n    (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) + p n x", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x)) =\n    (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) + p n x", "by (simp add: sum.distrib add_ac p_def)"], ["proof (state)\nthis:\n  (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x)) =\n  (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) + p n x\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n. ln (real r + x + 1) - ln (real r + x) + D (real r + x)) =\n  (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) + p n x\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "have \"(\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) = ln (real n + x) - ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) =\n    ln (real n + x) - ln x", "by (subst sum_lessThan_telescope) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>r<n. ln (real (Suc r) + x) - ln (real r + x)) =\n  ln (real n + x) - ln x\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> S' n x = ln (real n + x) - ln x + p n x", "finally"], ["proof (chain)\npicking this:\n  S' n x = ln (real n + x) - ln x + p n x", "show ?thesis"], ["proof (prove)\nusing this:\n  S' n x = ln (real n + x) - ln x + p n x\n\ngoal (1 subgoal):\n 1. S' n x = ln (real n + x) - ln x + p n x", "."], ["proof (state)\nthis:\n  S' n x = ln (real n + x) - ln x + p n x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We define the limit of the @{term p} (simply called $p(x)$ in Jameson's article):\n\\<close>"], ["", "private"], ["", "definition P :: \"real \\<Rightarrow> real\" where\n  \"P x = (\\<Sum>n. D (real n + x))\""], ["", "private"], ["", "lemma D_summable:\n  assumes x: \"x > 0\"\n  shows   \"summable (\\<lambda>n. D (real n + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. D (real n + x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. D (real n + x))", "have *: \"summable (\\<lambda>n. 1 / (12 * (x + real n)\\<^sup>2) - 1 / (12 * (x + real (Suc n))\\<^sup>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         1 / (12 * (x + real n)\\<^sup>2) -\n         1 / (12 * (x + real (Suc n))\\<^sup>2))", "by (rule telescope_summable' real_tendsto_divide_at_top tendsto_const \n             filterlim_tendsto_pos_mult_at_top filterlim_pow_at_top\n             filterlim_tendsto_add_at_top filterlim_real_sequentially | simp)+"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       1 / (12 * (x + real n)\\<^sup>2) -\n       1 / (12 * (x + real (Suc n))\\<^sup>2))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. D (real n + x))", "show \"summable (\\<lambda>n. D (real n + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. D (real n + x))", "proof (rule summable_comparison_test[OF _ *], rule exI[of _ 2], safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       2 \\<le> n \\<Longrightarrow>\n       norm (D (real n + x))\n       \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n             1 / (12 * (x + real (Suc n))\\<^sup>2)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       2 \\<le> n \\<Longrightarrow>\n       norm (D (real n + x))\n       \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n             1 / (12 * (x + real (Suc n))\\<^sup>2)", "assume \"n \\<ge> 2\""], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       2 \\<le> n \\<Longrightarrow>\n       norm (D (real n + x))\n       \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n             1 / (12 * (x + real (Suc n))\\<^sup>2)", "show \"norm (D (real n + x)) \\<le> 1 / (12 * (x + real n)^2) - 1 / (12 * (x + real (Suc n))^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (D (real n + x))\n    \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n          1 / (12 * (x + real (Suc n))\\<^sup>2)", "using stirling_trapezium[of \"real n + x\"] x"], ["proof (prove)\nusing this:\n  0 < real n + x \\<Longrightarrow>\n  D (real n + x)\n  \\<in> {0..1 / (12 * (real n + x)\\<^sup>2) -\n            1 / (12 * (real n + x + 1)\\<^sup>2)}\n  0 < x\n\ngoal (1 subgoal):\n 1. norm (D (real n + x))\n    \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n          1 / (12 * (x + real (Suc n))\\<^sup>2)", "by (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  norm (D (real n + x))\n  \\<le> 1 / (12 * (x + real n)\\<^sup>2) -\n        1 / (12 * (x + real (Suc n))\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  summable (\\<lambda>n. D (real n + x))\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma p_LIMSEQ:\n  assumes x: \"x > 0\"\n  shows   \"(\\<lambda>n. p n x) \\<longlonglongrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. p n x) \\<longlonglongrightarrow> P x", "proof (rule Lim_transform_eventually)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?f \\<longlonglongrightarrow> P x\n 2. \\<forall>\\<^sub>F xa in sequentially. ?f xa = p xa x", "from D_summable[OF x]"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. D (real n + x))", "have \"(\\<lambda>n. D (real n + x)) sums P x\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. D (real n + x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. D (real n + x)) sums P x", "unfolding P_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. D (real n + x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. D (real n + x)) sums (\\<Sum>n. D (real n + x))", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n. D (real n + x)) sums P x\n\ngoal (2 subgoals):\n 1. ?f \\<longlonglongrightarrow> P x\n 2. \\<forall>\\<^sub>F xa in sequentially. ?f xa = p xa x", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>n. D (real n + x)) sums P x", "show \"(\\<lambda>n. \\<Sum>r<n. D (real r + x)) \\<longlonglongrightarrow> P x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. D (real n + x)) sums P x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<Sum>r<n. D (real r + x)) \\<longlonglongrightarrow> P x", "by (simp add: sums_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<Sum>r<n. D (real r + x)) \\<longlonglongrightarrow> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F xa in sequentially.\n       (\\<Sum>r<xa. D (real r + x)) = p xa x", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<Sum>r<n. D (real r + x)) \\<longlonglongrightarrow> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F xa in sequentially.\n       (\\<Sum>r<xa. D (real r + x)) = p xa x", "from eventually_gt_at_top[of 1]"], ["proof (chain)\npicking this:\n  eventually ((<) (1::?'a1)) at_top", "show \"eventually (\\<lambda>n. (\\<Sum>r<n. D (real r + x)) = p n x) at_top\""], ["proof (prove)\nusing this:\n  eventually ((<) (1::?'a1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. (\\<Sum>r<n. D (real r + x)) = p n x", "by eventually_elim (auto simp: p_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. (\\<Sum>r<n. D (real r + x)) = p n x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  This gives us an expansion of the Digamma function:\n\\<close>"], ["", "lemma Digamma_approx:\n  assumes x: \"(x :: real) > 0\"\n  shows   \"Digamma x = ln x - 1 / (2 * x) - P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "have \"eventually (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1/(2*x) - p n x =\n          ln (real n) - S' n x - 1/(2*x)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "using eventually_gt_at_top[of \"1::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 1) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "assume n: \"n > 1\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "have \"ln (real n) - S' n x = ln ((real n) / (real n + x)) + ln x - p n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (real n) - S' n x = ln (real n / (real n + x)) + ln x - p n x", "using assms n"], ["proof (prove)\nusing this:\n  0 < x\n  1 < n\n\ngoal (1 subgoal):\n 1. ln (real n) - S' n x = ln (real n / (real n + x)) + ln x - p n x", "unfolding S'_approx"], ["proof (prove)\nusing this:\n  0 < x\n  1 < n\n\ngoal (1 subgoal):\n 1. ln (real n) - (ln (real n + x) - ln x + p n x) =\n    ln (real n / (real n + x)) + ln x - p n x", "by (subst ln_div) (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  ln (real n) - S' n x = ln (real n / (real n + x)) + ln x - p n x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "also"], ["proof (state)\nthis:\n  ln (real n) - S' n x = ln (real n / (real n + x)) + ln x - p n x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"real n / (real n + x) = inverse (1 + x / real n)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. real n / (real n + x) = inverse (1 + x / real n)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  real n / (real n + x) = inverse (1 + x / real n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       1 < n \\<Longrightarrow>\n       ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n       ln (real n) - S' n x - 1 / (2 * x)", "finally"], ["proof (chain)\npicking this:\n  ln (real n) - S' n x = ln (inverse (1 + x / real n)) + ln x - p n x", "show \"ln (inverse (1 + x / real n)) + ln x - 1/(2*x) - p n x = \n                    ln (real n) - S' n x - 1/(2*x)\""], ["proof (prove)\nusing this:\n  ln (real n) - S' n x = ln (inverse (1 + x / real n)) + ln x - p n x\n\ngoal (1 subgoal):\n 1. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n    ln (real n) - S' n x - 1 / (2 * x)", "by simp"], ["proof (state)\nthis:\n  ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n  ln (real n) - S' n x - 1 / (2 * x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n     ln (real n) - S' n x - 1 / (2 * x)\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n     ln (real n) - S' n x - 1 / (2 * x)\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "have \"(\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1/(2*x) - p n x) \n                   \\<longlonglongrightarrow> ln (inverse (1 + 0)) + ln x - 1/(2*x) - P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n    \\<longlonglongrightarrow> ln (inverse (1 + 0)) + ln x - 1 / (2 * x) -\n                              P x", "by (rule tendsto_intros p_LIMSEQ x real_tendsto_divide_at_top \n          filterlim_real_sequentially | simp)+"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n  \\<longlonglongrightarrow> ln (inverse (1 + 0)) + ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "hence \"(\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1/(2*x) - p n x) \n             \\<longlonglongrightarrow> ln x - 1/(2*x) - P x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n  \\<longlonglongrightarrow> ln (inverse (1 + 0)) + ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n    \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n     ln (real n) - S' n x - 1 / (2 * x)\n  (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x", "have \"(\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x)) \\<longlonglongrightarrow> ln x - 1/(2*x) - P x\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x =\n     ln (real n) - S' n x - 1 / (2 * x)\n  (\\<lambda>n. ln (inverse (1 + x / real n)) + ln x - 1 / (2 * x) - p n x)\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x", "by (blast intro: Lim_transform_eventually)"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "from x"], ["proof (chain)\npicking this:\n  0 < x", "have \"(\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x)) \\<longlonglongrightarrow> Digamma x\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n    \\<longlonglongrightarrow> Digamma x", "by (intro S'_LIMSEQ_Digamma) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> Digamma x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> Digamma x", "show \"Digamma x = ln x - 1 / (2 * x) - P x\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> ln x - 1 / (2 * x) - P x\n  (\\<lambda>n. ln (real n) - S' n x - 1 / (2 * x))\n  \\<longlonglongrightarrow> Digamma x\n\ngoal (1 subgoal):\n 1. Digamma x = ln x - 1 / (2 * x) - P x", "by (rule LIMSEQ_unique [rotated])"], ["proof (state)\nthis:\n  Digamma x = ln x - 1 / (2 * x) - P x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Next, we derive some bounds on @{term \"P\"}:\n\\<close>"], ["", "private"], ["", "lemma p_ge_0: \"x > 0 \\<Longrightarrow> p n x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> 0 \\<le> p n x", "using stirling_trapezium[of \"real n + x\" for n]"], ["proof (prove)\nusing this:\n  0 < real ?na2 + x \\<Longrightarrow>\n  D (real ?na2 + x)\n  \\<in> {0..1 / (12 * (real ?na2 + x)\\<^sup>2) -\n            1 / (12 * (real ?na2 + x + 1)\\<^sup>2)}\n\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> 0 \\<le> p n x", "by (auto simp add: p_def intro!: sum_nonneg)"], ["", "private"], ["", "lemma P_ge_0: \"x > 0 \\<Longrightarrow> P x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> 0 \\<le> P x", "by (rule tendsto_lowerbound[OF p_LIMSEQ]) \n     (insert p_ge_0[of x], simp_all)"], ["", "private"], ["", "lemma p_upper_bound:\n  assumes \"x > 0\" \"n > 0\"\n  shows \"p n x \\<le> 1/(12*x^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "from assms"], ["proof (chain)\npicking this:\n  0 < x\n  0 < n", "have \"p n x = (\\<Sum>r<n. D (real r + x))\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < n\n\ngoal (1 subgoal):\n 1. p n x = (\\<Sum>r<n. D (real r + x))", "by (simp add: p_def)"], ["proof (state)\nthis:\n  p n x = (\\<Sum>r<n. D (real r + x))\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "also"], ["proof (state)\nthis:\n  p n x = (\\<Sum>r<n. D (real r + x))\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "have \"\\<dots> \\<le> (\\<Sum>r<n. 1/(12*(real r + x)^2) - 1/(12 * (real (Suc r) + x)^2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. D (real r + x))\n    \\<le> (\\<Sum>r<n.\n              1 / (12 * (real r + x)\\<^sup>2) -\n              1 / (12 * (real (Suc r) + x)\\<^sup>2))", "using stirling_trapezium[of \"real r + x\" for r] assms"], ["proof (prove)\nusing this:\n  0 < real ?r2 + x \\<Longrightarrow>\n  D (real ?r2 + x)\n  \\<in> {0..1 / (12 * (real ?r2 + x)\\<^sup>2) -\n            1 / (12 * (real ?r2 + x + 1)\\<^sup>2)}\n  0 < x\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>r<n. D (real r + x))\n    \\<le> (\\<Sum>r<n.\n              1 / (12 * (real r + x)\\<^sup>2) -\n              1 / (12 * (real (Suc r) + x)\\<^sup>2))", "by (intro sum_mono) (simp add: add_ac)"], ["proof (state)\nthis:\n  (\\<Sum>r<n. D (real r + x))\n  \\<le> (\\<Sum>r<n.\n            1 / (12 * (real r + x)\\<^sup>2) -\n            1 / (12 * (real (Suc r) + x)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n. D (real r + x))\n  \\<le> (\\<Sum>r<n.\n            1 / (12 * (real r + x)\\<^sup>2) -\n            1 / (12 * (real (Suc r) + x)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "have \"\\<dots> = 1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r<n.\n        1 / (12 * (real r + x)\\<^sup>2) -\n        1 / (12 * (real (Suc r) + x)\\<^sup>2)) =\n    1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)", "by (subst sum_lessThan_telescope') simp"], ["proof (state)\nthis:\n  (\\<Sum>r<n.\n      1 / (12 * (real r + x)\\<^sup>2) -\n      1 / (12 * (real (Suc r) + x)\\<^sup>2)) =\n  1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>r<n.\n      1 / (12 * (real r + x)\\<^sup>2) -\n      1 / (12 * (real (Suc r) + x)\\<^sup>2)) =\n  1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "have \"\\<dots> \\<le> 1 / (12 * x^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)\n    \\<le> 1 / (12 * x\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  1 / (12 * x\\<^sup>2) - 1 / (12 * (real n + x)\\<^sup>2)\n  \\<le> 1 / (12 * x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "finally"], ["proof (chain)\npicking this:\n  p n x \\<le> 1 / (12 * x\\<^sup>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  p n x \\<le> 1 / (12 * x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. p n x \\<le> 1 / (12 * x\\<^sup>2)", "."], ["proof (state)\nthis:\n  p n x \\<le> 1 / (12 * x\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma P_upper_bound:\n  assumes \"x > 0\"\n  shows   \"P x \\<le> 1/(12*x^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<le> 1 / (12 * x\\<^sup>2)", "proof (rule tendsto_upperbound)"], ["proof (state)\ngoal (3 subgoals):\n 1. (?f \\<longlongrightarrow> P x) ?F\n 2. \\<forall>\\<^sub>F i in ?F. ?f i \\<le> 1 / (12 * x\\<^sup>2)\n 3. ?F \\<noteq> bot", "show \"eventually (\\<lambda>n. p n x \\<le> 1 / (12 * x^2)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. p n x \\<le> 1 / (12 * x\\<^sup>2)", "using eventually_gt_at_top[of 0]"], ["proof (prove)\nusing this:\n  eventually ((<) (0::?'a1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. p n x \\<le> 1 / (12 * x\\<^sup>2)", "by eventually_elim (use p_upper_bound[of x] assms in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. p n x \\<le> 1 / (12 * x\\<^sup>2)\n\ngoal (2 subgoals):\n 1. (\\<lambda>n. p n x) \\<longlonglongrightarrow> P x\n 2. sequentially \\<noteq> bot", "show \"(\\<lambda>n. p n x) \\<longlonglongrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. p n x) \\<longlonglongrightarrow> P x", "by (simp add: assms p_LIMSEQ)"], ["proof (state)\nthis:\n  (\\<lambda>n. p n x) \\<longlonglongrightarrow> P x\n\ngoal (1 subgoal):\n 1. sequentially \\<noteq> bot", "qed auto"], ["", "text \\<open>\n  We can now use this approximation of the Digamma function to approximate\n  @{term ln_Gamma} (since the former is the derivative of the latter). \n  We therefore define the function $g$ from Jameson's article, which measures \n  the difference between @{term ln_Gamma} and its approximation:\n\\<close>"], ["", "private"], ["", "definition g :: \"real \\<Rightarrow> real\" where\n  \"g x = ln_Gamma x - (x - 1/2) * ln x + x\""], ["", "private"], ["", "lemma DERIV_g: \"x > 0 \\<Longrightarrow> (g has_field_derivative -P x) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> (g has_real_derivative - P x) (at x)", "unfolding g_def [abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    ((\\<lambda>x. ln_Gamma x - (x - 1 / 2) * ln x + x) has_real_derivative\n     - P x)\n     (at x)", "using Digamma_approx[of x]"], ["proof (prove)\nusing this:\n  0 < x \\<Longrightarrow> Digamma x = ln x - 1 / (2 * x) - P x\n\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    ((\\<lambda>x. ln_Gamma x - (x - 1 / 2) * ln x + x) has_real_derivative\n     - P x)\n     (at x)", "by (auto intro!: derivative_eq_intros simp: field_simps)"], ["", "private"], ["", "lemma isCont_P: \n  assumes \"x > 0\"\n  shows   \"isCont P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont P x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isCont P x", "define D' :: \"real \\<Rightarrow> real\"\n    where \"D' = (\\<lambda>x. - 1 / (2 * x^2 * (x+1)^2))\""], ["proof (state)\nthis:\n  D' = (\\<lambda>x. - 1 / (2 * x\\<^sup>2 * (x + 1)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. isCont P x", "have DERIV_D: \"(D has_field_derivative D' x) (at x)\" if \"x > 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (D has_real_derivative D' x) (at x)", "unfolding D_def [abs_def] D'_def T_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         1 / (2 * x) + 1 / (2 * (x + 1)) - ln (x + 1) +\n         ln x) has_real_derivative\n     - 1 / (2 * x\\<^sup>2 * (x + 1)\\<^sup>2))\n     (at x)", "by (insert that, (rule derivative_eq_intros refl | simp)+)\n       (simp add: power2_eq_square divide_simps,  (simp add: algebra_simps)?)"], ["proof (state)\nthis:\n  0 < ?x \\<Longrightarrow> (D has_real_derivative D' ?x) (at ?x)\n\ngoal (1 subgoal):\n 1. isCont P x", "note this [THEN DERIV_chain2, derivative_intros]"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?g ?x;\n   (?g has_real_derivative ?Db) (at ?x within ?s)\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. D (?g x)) has_real_derivative\n                     D' (?g ?x) * ?Db)\n                     (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. isCont P x", "have \"(P has_field_derivative (\\<Sum>n. D' (real n + x))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P has_real_derivative (\\<Sum>n. D' (real n + x))) (at x)", "unfolding P_def [abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. \\<Sum>n. D (real n + x)) has_real_derivative\n     (\\<Sum>n. D' (real n + x)))\n     (at x)", "proof (rule has_field_derivative_series')"], ["proof (state)\ngoal (6 subgoals):\n 1. convex ?S1\n 2. \\<And>n x.\n       x \\<in> ?S1 \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + x))\n        (at x within ?S1)\n 3. uniformly_convergent_on ?S1 (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 4. ?x0.1 \\<in> ?S1\n 5. summable (\\<lambda>n. D (real n + ?x0.1))\n 6. x \\<in> interior ?S1", "show \"convex {x/2<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex {x / 2<..}", "by simp"], ["proof (state)\nthis:\n  convex {x / 2<..}\n\ngoal (5 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + xa))\n        (at xa within {x / 2<..})\n 2. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 3. ?x0.1 \\<in> {x / 2<..}\n 4. summable (\\<lambda>n. D (real n + ?x0.1))\n 5. x \\<in> interior {x / 2<..}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + xa))\n        (at xa within {x / 2<..})\n 2. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 3. ?x0.1 \\<in> {x / 2<..}\n 4. summable (\\<lambda>n. D (real n + ?x0.1))\n 5. x \\<in> interior {x / 2<..}", "fix n :: nat and y :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + xa))\n        (at xa within {x / 2<..})\n 2. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 3. ?x0.1 \\<in> {x / 2<..}\n 4. summable (\\<lambda>n. D (real n + ?x0.1))\n 5. x \\<in> interior {x / 2<..}", "assume y: \"y \\<in> {x/2<..}\""], ["proof (state)\nthis:\n  y \\<in> {x / 2<..}\n\ngoal (5 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + xa))\n        (at xa within {x / 2<..})\n 2. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 3. ?x0.1 \\<in> {x / 2<..}\n 4. summable (\\<lambda>n. D (real n + ?x0.1))\n 5. x \\<in> interior {x / 2<..}", "with assms"], ["proof (chain)\npicking this:\n  0 < x\n  y \\<in> {x / 2<..}", "have \"y > 0\""], ["proof (prove)\nusing this:\n  0 < x\n  y \\<in> {x / 2<..}\n\ngoal (1 subgoal):\n 1. 0 < y", "by simp"], ["proof (state)\nthis:\n  0 < y\n\ngoal (5 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + xa))\n        (at xa within {x / 2<..})\n 2. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 3. ?x0.1 \\<in> {x / 2<..}\n 4. summable (\\<lambda>n. D (real n + ?x0.1))\n 5. x \\<in> interior {x / 2<..}", "thus \"((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + y)) (at y within {x/2<..})\""], ["proof (prove)\nusing this:\n  0 < y\n\ngoal (1 subgoal):\n 1. ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + y))\n     (at y within {x / 2<..})", "by (auto intro!: derivative_eq_intros)"], ["proof (state)\nthis:\n  ((\\<lambda>a. D (real n + a)) has_real_derivative D' (real n + y))\n   (at y within {x / 2<..})\n\ngoal (4 subgoals):\n 1. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 2. ?x0.1 \\<in> {x / 2<..}\n 3. summable (\\<lambda>n. D (real n + ?x0.1))\n 4. x \\<in> interior {x / 2<..}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 2. ?x0.1 \\<in> {x / 2<..}\n 3. summable (\\<lambda>n. D (real n + ?x0.1))\n 4. x \\<in> interior {x / 2<..}", "from assms D_summable[of x]"], ["proof (chain)\npicking this:\n  0 < x\n  0 < x \\<Longrightarrow> summable (\\<lambda>n. D (real n + x))", "show \"summable (\\<lambda>n. D (real n + x))\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < x \\<Longrightarrow> summable (\\<lambda>n. D (real n + x))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. D (real n + x))", "by simp"], ["proof (state)\nthis:\n  summable (\\<lambda>n. D (real n + x))\n\ngoal (3 subgoals):\n 1. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 2. x \\<in> {x / 2<..}\n 3. x \\<in> interior {x / 2<..}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n 2. x \\<in> {x / 2<..}\n 3. x \\<in> interior {x / 2<..}", "show \"uniformly_convergent_on {x/2<..} (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on {x / 2<..}\n     (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))", "proof (rule Weierstrass_m_test')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "fix n :: nat and y :: real"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "assume y: \"y \\<in> {x/2<..}\""], ["proof (state)\nthis:\n  y \\<in> {x / 2<..}\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "with assms"], ["proof (chain)\npicking this:\n  0 < x\n  y \\<in> {x / 2<..}", "have \"y > 0\""], ["proof (prove)\nusing this:\n  0 < x\n  y \\<in> {x / 2<..}\n\ngoal (1 subgoal):\n 1. 0 < y", "by auto"], ["proof (state)\nthis:\n  0 < y\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "have \"norm (D' (real n + y)) = (1 / (2 * (y + real n)^2)) * (1 / (y + real (Suc n))^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (D' (real n + y)) =\n    1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)", "by (simp add: D'_def add_ac)"], ["proof (state)\nthis:\n  norm (D' (real n + y)) =\n  1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "also"], ["proof (state)\nthis:\n  norm (D' (real n + y)) =\n  1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "from y assms"], ["proof (chain)\npicking this:\n  y \\<in> {x / 2<..}\n  0 < x", "have \"\\<dots> \\<le> (1 / (2 * (x/2)^2)) * (1 / (real (Suc n))^2)\""], ["proof (prove)\nusing this:\n  y \\<in> {x / 2<..}\n  0 < x\n\ngoal (1 subgoal):\n 1. 1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)\n    \\<le> 1 / (2 * (x / 2)\\<^sup>2) * (1 / (real (Suc n))\\<^sup>2)", "by (intro mult_mono divide_left_mono power_mono) simp_all"], ["proof (state)\nthis:\n  1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)\n  \\<le> 1 / (2 * (x / 2)\\<^sup>2) * (1 / (real (Suc n))\\<^sup>2)\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "also"], ["proof (state)\nthis:\n  1 / (2 * (y + real n)\\<^sup>2) * (1 / (y + real (Suc n))\\<^sup>2)\n  \\<le> 1 / (2 * (x / 2)\\<^sup>2) * (1 / (real (Suc n))\\<^sup>2)\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "have \"1 / (real (Suc n))^2 = inverse ((real (Suc n))^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / (real (Suc n))\\<^sup>2 = inverse ((real (Suc n))\\<^sup>2)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  1 / (real (Suc n))\\<^sup>2 = inverse ((real (Suc n))\\<^sup>2)\n\ngoal (2 subgoals):\n 1. \\<And>n xa.\n       xa \\<in> {x / 2<..} \\<Longrightarrow>\n       norm (D' (real n + xa)) \\<le> ?M n\n 2. summable ?M", "finally"], ["proof (chain)\npicking this:\n  norm (D' (real n + y))\n  \\<le> 1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2)", "show \"norm (D' (real n + y)) \\<le> (1 / (2 * (x/2)^2)) * inverse ((real (Suc n))^2)\""], ["proof (prove)\nusing this:\n  norm (D' (real n + y))\n  \\<le> 1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. norm (D' (real n + y))\n    \\<le> 1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2)", "."], ["proof (state)\nthis:\n  norm (D' (real n + y))\n  \\<le> 1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2))", "show \"summable (\\<lambda>n. (1 / (2 * (x/2)^2)) * inverse ((real (Suc n))^2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2))", "by (subst summable_Suc_iff, intro summable_mult inverse_power_summable) simp_all"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       1 / (2 * (x / 2)\\<^sup>2) * inverse ((real (Suc n))\\<^sup>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uniformly_convergent_on {x / 2<..}\n   (\\<lambda>n x. \\<Sum>i<n. D' (real i + x))\n\ngoal (2 subgoals):\n 1. x \\<in> {x / 2<..}\n 2. x \\<in> interior {x / 2<..}", "qed (insert assms, simp_all add: interior_open)"], ["proof (state)\nthis:\n  (P has_real_derivative (\\<Sum>n. D' (real n + x))) (at x)\n\ngoal (1 subgoal):\n 1. isCont P x", "thus ?thesis"], ["proof (prove)\nusing this:\n  (P has_real_derivative (\\<Sum>n. D' (real n + x))) (at x)\n\ngoal (1 subgoal):\n 1. isCont P x", "by (rule DERIV_isCont)"], ["proof (state)\nthis:\n  isCont P x\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma P_continuous_on [THEN continuous_on_subset]: \"continuous_on {0<..} P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0<..} P", "by (intro continuous_at_imp_continuous_on ballI isCont_P) auto"], ["", "private"], ["", "lemma P_integrable:\n  assumes a: \"a > 0\"\n  shows   \"P integrable_on {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P integrable_on {a..}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P integrable_on {a..}", "define f where \"f = (\\<lambda>n x. if x \\<in> {a..real n} then P x else 0)\""], ["proof (state)\nthis:\n  f = (\\<lambda>n x. if x \\<in> {a..real n} then P x else 0)\n\ngoal (1 subgoal):\n 1. P integrable_on {a..}", "show \"P integrable_on {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P integrable_on {a..}", "proof (rule dominated_convergence)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k. ?f k integrable_on {a..}\n 2. ?h integrable_on {a..}\n 3. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (?f k x) \\<le> ?h x\n 4. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. ?f k x) \\<longlonglongrightarrow> P x", "fix n :: nat"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k. ?f k integrable_on {a..}\n 2. ?h integrable_on {a..}\n 3. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (?f k x) \\<le> ?h x\n 4. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. ?f k x) \\<longlonglongrightarrow> P x", "from a"], ["proof (chain)\npicking this:\n  0 < a", "have \"P integrable_on {a..real n}\""], ["proof (prove)\nusing this:\n  0 < a\n\ngoal (1 subgoal):\n 1. P integrable_on {a..real n}", "by (intro integrable_continuous_real P_continuous_on) auto"], ["proof (state)\nthis:\n  P integrable_on {a..real n}\n\ngoal (4 subgoals):\n 1. \\<And>k. ?f k integrable_on {a..}\n 2. ?h integrable_on {a..}\n 3. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (?f k x) \\<le> ?h x\n 4. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. ?f k x) \\<longlonglongrightarrow> P x", "hence \"f n integrable_on {a..real n}\""], ["proof (prove)\nusing this:\n  P integrable_on {a..real n}\n\ngoal (1 subgoal):\n 1. f n integrable_on {a..real n}", "by (rule integrable_eq) (simp add: f_def)"], ["proof (state)\nthis:\n  f n integrable_on {a..real n}\n\ngoal (4 subgoals):\n 1. \\<And>k. ?f k integrable_on {a..}\n 2. ?h integrable_on {a..}\n 3. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (?f k x) \\<le> ?h x\n 4. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. ?f k x) \\<longlonglongrightarrow> P x", "thus \"f n integrable_on {a..}\""], ["proof (prove)\nusing this:\n  f n integrable_on {a..real n}\n\ngoal (1 subgoal):\n 1. f n integrable_on {a..}", "by (rule integrable_on_superset) (auto simp: f_def)"], ["proof (state)\nthis:\n  f n integrable_on {a..}\n\ngoal (3 subgoals):\n 1. ?h integrable_on {a..}\n 2. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (f (?n8 k) x) \\<le> ?h x\n 3. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ?h integrable_on {a..}\n 2. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (f (?n8 k) x) \\<le> ?h x\n 3. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "fix n :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. ?h integrable_on {a..}\n 2. \\<And>k x. x \\<in> {a..} \\<Longrightarrow> norm (f (?n8 k) x) \\<le> ?h x\n 3. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "show \"norm (f n x) \\<le> of_real (1/12) * (1 / x^2)\" if \"x \\<in> {a..}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (f n x) \\<le> of_real (1 / 12) * (1 / x\\<^sup>2)", "using a P_ge_0 P_upper_bound"], ["proof (prove)\nusing this:\n  0 < a\n  0 < ?x \\<Longrightarrow> 0 \\<le> P ?x\n  0 < ?x \\<Longrightarrow> P ?x \\<le> 1 / (12 * ?x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. norm (f n x) \\<le> of_real (1 / 12) * (1 / x\\<^sup>2)", "by (auto simp: f_def)"], ["proof (state)\nthis:\n  ?x \\<in> {a..} \\<Longrightarrow>\n  norm (f n ?x) \\<le> of_real (1 / 12) * (1 / ?x\\<^sup>2)\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. of_real (1 / 12) * (1 / x\\<^sup>2)) integrable_on {a..}\n 2. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. of_real (1 / 12) * (1 / x\\<^sup>2)) integrable_on {a..}\n 2. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "show \"(\\<lambda>x::real. of_real (1/12) * (1 / x^2)) integrable_on {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. of_real (1 / 12) * (1 / x\\<^sup>2)) integrable_on {a..}", "using has_integral_inverse_power_to_inf[of 2 a] a"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 < 2; 0 < a\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. 1 / x\\<^sup>2) has_integral\n                     1 / (real (2 - 1) * a ^ (2 - 1)))\n                     {a..}\n  0 < a\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. of_real (1 / 12) * (1 / x\\<^sup>2)) integrable_on {a..}", "by (intro integrable_on_cmult_left) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. of_real (1 / 12) * (1 / x\\<^sup>2)) integrable_on {a..}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a..} \\<Longrightarrow>\n       (\\<lambda>k. f (?n8 k) x) \\<longlonglongrightarrow> P x", "show \"(\\<lambda>n. f n x) \\<longlonglongrightarrow> P x\" if \"x\\<in>{a..}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x", "have \"eventually (\\<lambda>n. real n \\<ge> x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. x \\<le> real n", "using filterlim_real_sequentially"], ["proof (prove)\nusing this:\n  filterlim real at_top sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. x \\<le> real n", "by (simp add: filterlim_at_top)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. x \\<le> real n\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x", "with that"], ["proof (chain)\npicking this:\n  x \\<in> {a..}\n  \\<forall>\\<^sub>F n in sequentially. x \\<le> real n", "have \"eventually (\\<lambda>n. f n x = P x) at_top\""], ["proof (prove)\nusing this:\n  x \\<in> {a..}\n  \\<forall>\\<^sub>F n in sequentially. x \\<le> real n\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. f n x = P x", "by (auto elim!: eventually_mono simp: f_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. f n x = P x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x", "thus \"(\\<lambda>n. f n x) \\<longlonglongrightarrow> P x\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially. f n x = P x\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x", "by (simp add: tendsto_eventually)"], ["proof (state)\nthis:\n  (\\<lambda>n. f n x) \\<longlonglongrightarrow> P x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> {a..} \\<Longrightarrow>\n  (\\<lambda>n. f n ?x) \\<longlonglongrightarrow> P ?x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P integrable_on {a..}\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "definition c :: real where \"c = integral {1..} (\\<lambda>x. -P x) + g 1\""], ["", "text \\<open>\n  We can now give bounds on @{term g}:\n\\<close>"], ["", "private"], ["", "lemma g_bounds:\n  assumes x: \"x \\<ge> 1\"\n  shows   \"g x \\<in> {c..c + 1/(12*x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "from assms"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have int_nonneg: \"integral {x..} P \\<ge> 0\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. 0 \\<le> integral {x..} P", "by (intro Henstock_Kurzweil_Integration.integral_nonneg P_integrable)\n       (auto simp: P_ge_0)"], ["proof (state)\nthis:\n  0 \\<le> integral {x..} P\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "have int_upper_bound: \"integral {x..} P \\<le> 1/(12*x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral {x..} P \\<le> 1 / (12 * x)", "proof (rule has_integral_le)"], ["proof (state)\ngoal (3 subgoals):\n 1. (?f has_integral integral {x..} P) ?S\n 2. (?g has_integral 1 / (12 * x)) ?S\n 3. \\<And>x. x \\<in> ?S \\<Longrightarrow> ?f x \\<le> ?g x", "from x"], ["proof (chain)\npicking this:\n  1 \\<le> x", "show \"(P has_integral integral {x..} P) {x..}\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. (P has_integral integral {x..} P) {x..}", "by (intro integrable_integral P_integrable) simp_all"], ["proof (state)\nthis:\n  (P has_integral integral {x..} P) {x..}\n\ngoal (2 subgoals):\n 1. (?g has_integral 1 / (12 * x)) {x..}\n 2. \\<And>xa. xa \\<in> {x..} \\<Longrightarrow> P xa \\<le> ?g xa", "from x has_integral_mult_right[OF has_integral_inverse_power_to_inf[of 2 x], of \"1/12\"]"], ["proof (chain)\npicking this:\n  1 \\<le> x\n  \\<lbrakk>1 < 2; 0 < x\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. 1 / 12 * (1 / x\\<^sup>2)) has_integral\n                     1 / 12 * (1 / (real (2 - 1) * x ^ (2 - 1))))\n                     {x..}", "show \"((\\<lambda>x. 1/(12*x^2)) has_integral (1/(12*x))) {x..}\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n  \\<lbrakk>1 < 2; 0 < x\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. 1 / 12 * (1 / x\\<^sup>2)) has_integral\n                     1 / 12 * (1 / (real (2 - 1) * x ^ (2 - 1))))\n                     {x..}\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. 1 / (12 * x\\<^sup>2)) has_integral 1 / (12 * x)) {x..}", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. 1 / (12 * x\\<^sup>2)) has_integral 1 / (12 * x)) {x..}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {x..} \\<Longrightarrow> P xa \\<le> 1 / (12 * xa\\<^sup>2)", "qed (insert P_upper_bound x, simp_all)"], ["proof (state)\nthis:\n  integral {x..} P \\<le> 1 / (12 * x)\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "note DERIV_g [THEN DERIV_chain2, derivative_intros]"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?g ?x;\n   (?g has_real_derivative ?Db) (at ?x within ?s)\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. g (?g x)) has_real_derivative\n                     - P (?g ?x) * ?Db)\n                     (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "from assms"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have int1: \"((\\<lambda>x. -P x) has_integral (g x - g 1)) {1..x}\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - P x) has_integral g x - g 1) {1..x}", "by (intro fundamental_theorem_of_calculus)\n       (auto simp: has_field_derivative_iff_has_vector_derivative [symmetric]\n             intro!: derivative_eq_intros)"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral g x - g 1) {1..x}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "from x"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have int2: \"((\\<lambda>x. -P x) has_integral integral {x..} (\\<lambda>x. -P x)) {x..}\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - P x) has_integral integral {x..} (\\<lambda>x. - P x))\n     {x..}", "by (intro integrable_integral integrable_neg P_integrable) simp_all"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral integral {x..} (\\<lambda>x. - P x))\n   {x..}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "from has_integral_Un[OF int1 int2] x"], ["proof (chain)\npicking this:\n  negligible ({1..x} \\<inter> {x..}) \\<Longrightarrow>\n  ((\\<lambda>x. - P x) has_integral\n   g x - g 1 + integral {x..} (\\<lambda>x. - P x))\n   ({1..x} \\<union> {x..})\n  1 \\<le> x", "have \"((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) ({1..x} \\<union> {x..})\""], ["proof (prove)\nusing this:\n  negligible ({1..x} \\<inter> {x..}) \\<Longrightarrow>\n  ((\\<lambda>x. - P x) has_integral\n   g x - g 1 + integral {x..} (\\<lambda>x. - P x))\n   ({1..x} \\<union> {x..})\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P)\n     ({1..x} \\<union> {x..})", "by (simp add: max_def)"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P)\n   ({1..x} \\<union> {x..})\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "also"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P)\n   ({1..x} \\<union> {x..})\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "from x"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have \"{1..x} \\<union> {x..} = {1..}\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. {1..x} \\<union> {x..} = {1..}", "by auto"], ["proof (state)\nthis:\n  {1..x} \\<union> {x..} = {1..}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "finally"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}", "have \"((\\<lambda>x. -P x) has_integral g x - g 1 - integral {x..} P) {1..}\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}", "."], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "have \"((\\<lambda>x. -P x) has_integral integral {1..} (\\<lambda>x. -P x)) {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - P x) has_integral integral {1..} (\\<lambda>x. - P x))\n     {1..}", "by (intro integrable_integral integrable_neg P_integrable) simp_all"], ["proof (state)\nthis:\n  ((\\<lambda>x. - P x) has_integral integral {1..} (\\<lambda>x. - P x))\n   {1..}\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}\n  ((\\<lambda>x. - P x) has_integral integral {1..} (\\<lambda>x. - P x))\n   {1..}", "have \"g x - g 1 - integral {x..} P = integral {1..} (\\<lambda>x. -P x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. - P x) has_integral g x - g 1 - integral {x..} P) {1..}\n  ((\\<lambda>x. - P x) has_integral integral {1..} (\\<lambda>x. - P x))\n   {1..}\n\ngoal (1 subgoal):\n 1. g x - g 1 - integral {x..} P = integral {1..} (\\<lambda>x. - P x)", "by (simp add: has_integral_unique)"], ["proof (state)\nthis:\n  g x - g 1 - integral {x..} P = integral {1..} (\\<lambda>x. - P x)\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "hence \"g x = c + integral {x..} P\""], ["proof (prove)\nusing this:\n  g x - g 1 - integral {x..} P = integral {1..} (\\<lambda>x. - P x)\n\ngoal (1 subgoal):\n 1. g x = c + integral {x..} P", "by (simp add: c_def algebra_simps)"], ["proof (state)\nthis:\n  g x = c + integral {x..} P\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "with int_upper_bound int_nonneg"], ["proof (chain)\npicking this:\n  integral {x..} P \\<le> 1 / (12 * x)\n  0 \\<le> integral {x..} P\n  g x = c + integral {x..} P", "show \"g x \\<in> {c..c + 1/(12*x)}\""], ["proof (prove)\nusing this:\n  integral {x..} P \\<le> 1 / (12 * x)\n  0 \\<le> integral {x..} P\n  g x = c + integral {x..} P\n\ngoal (1 subgoal):\n 1. g x \\<in> {c..c + 1 / (12 * x)}", "by simp"], ["proof (state)\nthis:\n  g x \\<in> {c..c + 1 / (12 * x)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Finally, we have bounds on @{term ln_Gamma}, @{term Gamma}, and @{term fact}.\n\\<close>"], ["", "private"], ["", "lemma ln_Gamma_bounds_aux:\n  \"x \\<ge> 1 \\<Longrightarrow> ln_Gamma x \\<ge> c + (x - 1/2) * ln x - x\"\n  \"x \\<ge> 1 \\<Longrightarrow> ln_Gamma x \\<le> c + (x - 1/2) * ln x - x + 1/(12*x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 \\<le> x \\<Longrightarrow>\n     c + (x - 1 / 2) * ln x - x \\<le> ln_Gamma x) &&&\n    (1 \\<le> x \\<Longrightarrow>\n     ln_Gamma x \\<le> c + (x - 1 / 2) * ln x - x + 1 / (12 * x))", "using g_bounds[of x]"], ["proof (prove)\nusing this:\n  1 \\<le> x \\<Longrightarrow> g x \\<in> {c..c + 1 / (12 * x)}\n\ngoal (1 subgoal):\n 1. (1 \\<le> x \\<Longrightarrow>\n     c + (x - 1 / 2) * ln x - x \\<le> ln_Gamma x) &&&\n    (1 \\<le> x \\<Longrightarrow>\n     ln_Gamma x \\<le> c + (x - 1 / 2) * ln x - x + 1 / (12 * x))", "by (simp_all add: g_def)"], ["", "private"], ["", "lemma Gamma_bounds_aux:\n  assumes x: \"x \\<ge> 1\"\n  shows   \"Gamma x \\<ge> exp c * x powr (x - 1/2) / exp x\"\n          \"Gamma x \\<le> exp c * x powr (x - 1/2) / exp x * exp (1/(12*x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x &&&\n    Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n 2. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "have \"exp (ln_Gamma x) \\<ge> exp (c + (x - 1/2) * ln x - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (c + (x - 1 / 2) * ln x - x) \\<le> exp (ln_Gamma x)", "by (subst exp_le_cancel_iff, rule ln_Gamma_bounds_aux) (simp add: x)"], ["proof (state)\nthis:\n  exp (c + (x - 1 / 2) * ln x - x) \\<le> exp (ln_Gamma x)\n\ngoal (2 subgoals):\n 1. exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n 2. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "with x"], ["proof (chain)\npicking this:\n  1 \\<le> x\n  exp (c + (x - 1 / 2) * ln x - x) \\<le> exp (ln_Gamma x)", "show \"Gamma x \\<ge> exp c * x powr (x - 1/2) / exp x\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n  exp (c + (x - 1 / 2) * ln x - x) \\<le> exp (ln_Gamma x)\n\ngoal (1 subgoal):\n 1. exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x", "by (simp add: Gamma_real_pos_exp exp_add exp_diff powr_def del: exp_le_cancel_iff)"], ["proof (state)\nthis:\n  exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n\ngoal (1 subgoal):\n 1. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "have \"exp (ln_Gamma x) \\<le> exp (c + (x - 1/2) * ln x - x + 1/(12*x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (ln_Gamma x) \\<le> exp (c + (x - 1 / 2) * ln x - x + 1 / (12 * x))", "by (subst exp_le_cancel_iff, rule ln_Gamma_bounds_aux) (simp add: x)"], ["proof (state)\nthis:\n  exp (ln_Gamma x) \\<le> exp (c + (x - 1 / 2) * ln x - x + 1 / (12 * x))\n\ngoal (1 subgoal):\n 1. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "with x"], ["proof (chain)\npicking this:\n  1 \\<le> x\n  exp (ln_Gamma x) \\<le> exp (c + (x - 1 / 2) * ln x - x + 1 / (12 * x))", "show \"Gamma x \\<le> exp c * x powr (x - 1/2) / exp x * exp (1/(12*x))\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n  exp (ln_Gamma x) \\<le> exp (c + (x - 1 / 2) * ln x - x + 1 / (12 * x))\n\ngoal (1 subgoal):\n 1. Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "by (simp add: Gamma_real_pos_exp exp_add exp_diff powr_def del: exp_le_cancel_iff)"], ["proof (state)\nthis:\n  Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma Gamma_asymp_equiv_aux: \n  \"Gamma \\<sim>[at_top] (\\<lambda>x. exp c * x powr (x - 1/2) / exp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x)", "proof (rule asymp_equiv_sandwich)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n 3. \\<forall>\\<^sub>F x in at_top. Gamma x \\<le> ?h x\n 4. (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x) \\<sim>[at_top] ?h", "include asymp_equiv_notation"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n 3. \\<forall>\\<^sub>F x in at_top. Gamma x \\<le> ?h x\n 4. (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x) \\<sim>[at_top] ?h", "show \"eventually (\\<lambda>x. exp c * x powr (x - 1/2) / exp x \\<le> Gamma x) at_top\"\n       \"eventually (\\<lambda>x. exp c * x powr (x - 1/2) / exp x * exp (1/(12*x)) \\<ge> Gamma x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x &&&\n    \\<forall>\\<^sub>F x in at_top.\n       Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "using eventually_ge_at_top[of \"1::real\"]"], ["proof (prove)\nusing this:\n  eventually ((\\<le>) 1) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x &&&\n    \\<forall>\\<^sub>F x in at_top.\n       Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))", "by (eventually_elim; use Gamma_bounds_aux in force)+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n  \\<forall>\\<^sub>F x in at_top.\n     Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) /\n        exp x) \\<sim>[at_top] (\\<lambda>x.\n                                  exp c * x powr (x - 1 / 2) / exp x *\n                                  exp (1 / (12 * x)))", "have \"((\\<lambda>x::real. exp (1 / (12 * x))) \\<longlongrightarrow> exp 0) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (1 / (12 * x))) \\<longlongrightarrow> exp 0) at_top", "by (rule tendsto_intros real_tendsto_divide_at_top filterlim_tendsto_pos_mult_at_top)+\n       (simp_all add: filterlim_ident)"], ["proof (state)\nthis:\n  ((\\<lambda>x. exp (1 / (12 * x))) \\<longlongrightarrow> exp 0) at_top\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) /\n        exp x) \\<sim>[at_top] (\\<lambda>x.\n                                  exp c * x powr (x - 1 / 2) / exp x *\n                                  exp (1 / (12 * x)))", "hence \"(\\<lambda>x. exp (1 / (12 * x))) \\<sim> (\\<lambda>x. 1 :: real)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. exp (1 / (12 * x))) \\<longlongrightarrow> exp 0) at_top\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. exp (1 / (12 * x))) \\<sim>[at_top] (\\<lambda>x. 1)", "by (intro asymp_equivI') simp_all"], ["proof (state)\nthis:\n  (\\<lambda>x. exp (1 / (12 * x))) \\<sim>[at_top] (\\<lambda>x. 1)\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) /\n        exp x) \\<sim>[at_top] (\\<lambda>x.\n                                  exp c * x powr (x - 1 / 2) / exp x *\n                                  exp (1 / (12 * x)))", "hence \"(\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x * 1) \\<sim>\n          (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. exp (1 / (12 * x))) \\<sim>[at_top] (\\<lambda>x. 1)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) / exp x *\n        1) \\<sim>[at_top] (\\<lambda>x.\n                              exp c * x powr (x - 1 / 2) / exp x *\n                              exp (1 / (12 * x)))", "by (intro asymp_equiv_mult asymp_equiv_refl) (simp add: asymp_equiv_sym)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      exp c * x powr (x - 1 / 2) / exp x *\n      1) \\<sim>[at_top] (\\<lambda>x.\n                            exp c * x powr (x - 1 / 2) / exp x *\n                            exp (1 / (12 * x)))\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x\n 2. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) /\n        exp x) \\<sim>[at_top] (\\<lambda>x.\n                                  exp c * x powr (x - 1 / 2) / exp x *\n                                  exp (1 / (12 * x)))", "thus \"(\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x) \\<sim>\n          (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      exp c * x powr (x - 1 / 2) / exp x *\n      1) \\<sim>[at_top] (\\<lambda>x.\n                            exp c * x powr (x - 1 / 2) / exp x *\n                            exp (1 / (12 * x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        exp c * x powr (x - 1 / 2) /\n        exp x) \\<sim>[at_top] (\\<lambda>x.\n                                  exp c * x powr (x - 1 / 2) / exp x *\n                                  exp (1 / (12 * x)))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      exp c * x powr (x - 1 / 2) /\n      exp x) \\<sim>[at_top] (\\<lambda>x.\n                                exp c * x powr (x - 1 / 2) / exp x *\n                                exp (1 / (12 * x)))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       0 \\<le> exp c * x powr (x - 1 / 2) / exp x", "qed simp_all"], ["", "private"], ["", "lemma exp_1_powr_real [simp]: \"exp (1::real) powr x = exp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp 1 powr x = exp x", "by (simp add: powr_def)"], ["", "private"], ["", "lemma fact_asymp_equiv_aux:\n  \"fact \\<sim>[at_top] (\\<lambda>x. exp c * sqrt (real x) * (real x / exp 1) powr real x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "include asymp_equiv_notation"], ["proof (state)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "have \"fact \\<sim> (\\<lambda>n. Gamma (real (Suc n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n. Gamma (real (Suc n)))", "by (simp add: Gamma_fact)"], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>n. Gamma (real (Suc n)))\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "also"], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>n. Gamma (real (Suc n)))\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "have \"eventually (\\<lambda>n. Gamma (real (Suc n)) = real n * Gamma (real n)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       Gamma (real (Suc n)) = real n * Gamma (real n)", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       Gamma (real (Suc n)) = real n * Gamma (real n)", "by eventually_elim (insert Gamma_plus1[of \"real n\" for n], \n                        auto simp: add_ac of_nat_in_nonpos_Ints_iff)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     Gamma (real (Suc n)) = real n * Gamma (real n)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "also"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     Gamma (real (Suc n)) = real n * Gamma (real n)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "have \"(\\<lambda>n. Gamma (real n)) \\<sim> (\\<lambda>n. exp c * real n powr (real n - 1/2) / exp (real n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        Gamma\n         (real\n           n)) \\<sim>[sequentially] (\\<lambda>n.\n  exp c * real n powr (real n - 1 / 2) / exp (real n))", "by (rule asymp_equiv_compose'[OF Gamma_asymp_equiv_aux] filterlim_real_sequentially)+"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      Gamma\n       (real\n         n)) \\<sim>[sequentially] (\\<lambda>n.\nexp c * real n powr (real n - 1 / 2) / exp (real n))\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      Gamma\n       (real\n         n)) \\<sim>[sequentially] (\\<lambda>n.\nexp c * real n powr (real n - 1 / 2) / exp (real n))\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "have \"eventually (\\<lambda>n. real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n               exp c * sqrt (real n) * (real n / exp 1) powr real n) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n       exp c * sqrt (real n) * (real n / exp 1) powr real n", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n       exp c * sqrt (real n) * (real n / exp 1) powr real n", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n       exp c * sqrt (real n) * (real n / exp 1) powr real n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n       exp c * sqrt (real n) * (real n / exp 1) powr real n", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n       exp c * sqrt (real n) * (real n / exp 1) powr real n", "thus \"real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n            exp c * sqrt (real n) * (real n / exp 1) powr real n\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n    exp c * sqrt (real n) * (real n / exp 1) powr real n", "by (subst powr_diff) (simp_all add: powr_divide powr_half_sqrt field_simps)"], ["proof (state)\nthis:\n  real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n  exp c * sqrt (real n) * (real n / exp 1) powr real n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     real n * (exp c * real n powr (real n - 1 / 2) / exp (real n)) =\n     exp c * sqrt (real n) * (real n / exp 1) powr real n\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>c d.\n      c \\<sim>[sequentially] d \\<Longrightarrow>\n      (\\<lambda>a.\n          real a *\n          c a) \\<sim>[sequentially] (\\<lambda>a.\n  real a * d a)) \\<Longrightarrow>\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                exp c * sqrt (real x) *\n                                (real x / exp 1) powr real x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>c d.\n      c \\<sim>[sequentially] d \\<Longrightarrow>\n      (\\<lambda>a.\n          real a *\n          c a) \\<sim>[sequentially] (\\<lambda>a.\n  real a * d a)) \\<Longrightarrow>\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                exp c * sqrt (real x) *\n                                (real x / exp 1) powr real x)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>x.\n                                  exp c * sqrt (real x) *\n                                  (real x / exp 1) powr real x)", "by - (simp_all add: asymp_equiv_mult)"], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                exp c * sqrt (real x) *\n                                (real x / exp 1) powr real x)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We still need to determine the constant term @{term c}, which we do using Wallis' \n  product formula: $$\\prod_{n=1}^\\infty \\frac{4n^2}{4n^2-1} = \\frac{\\pi}{2}$$\n\\<close>"], ["", "private"], ["", "lemma powr_mult_2: \"(x::real) > 0 \\<Longrightarrow> x powr (y * 2) = (x^2) powr y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> x powr (y * 2) = x\\<^sup>2 powr y", "by (subst mult.commute, subst powr_powr [symmetric]) (simp add: powr_numeral)"], ["", "private"], ["", "lemma exp_mult_2: \"exp (y * 2 :: real) = exp y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (y * 2) = exp y * exp y", "by (subst exp_add [symmetric]) simp"], ["", "private"], ["", "lemma exp_c: \"exp c = sqrt (2*pi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "include asymp_equiv_notation"], ["proof (state)\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "define p where \"p = (\\<lambda>n. \\<Prod>k=1..n. (4*real k^2) / (4*real k^2 - 1))\""], ["proof (state)\nthis:\n  p =\n  (\\<lambda>n.\n      \\<Prod>k = 1..n. 4 * (real k)\\<^sup>2 / (4 * (real k)\\<^sup>2 - 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have p_0 [simp]: \"p 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p 0 = 1", "by (simp add: p_def)"], ["proof (state)\nthis:\n  p 0 = 1\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have p_Suc: \"p (Suc n) = p n * (4 * real (Suc n)^2) / (4 * real (Suc n)^2 - 1)\"\n    for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. p (Suc n) =\n    p n * (4 * (real (Suc n))\\<^sup>2) / (4 * (real (Suc n))\\<^sup>2 - 1)", "unfolding p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..Suc n.\n        4 * (real k)\\<^sup>2 / (4 * (real k)\\<^sup>2 - 1)) =\n    (\\<Prod>k = 1..n. 4 * (real k)\\<^sup>2 / (4 * (real k)\\<^sup>2 - 1)) *\n    (4 * (real (Suc n))\\<^sup>2) /\n    (4 * (real (Suc n))\\<^sup>2 - 1)", "by (subst prod.nat_ivl_Suc') simp_all"], ["proof (state)\nthis:\n  p (Suc ?n) =\n  p ?n * (4 * (real (Suc ?n))\\<^sup>2) / (4 * (real (Suc ?n))\\<^sup>2 - 1)\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have p: \"p = (\\<lambda>n. 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p =\n    (\\<lambda>n.\n        16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"p n = (\\<Prod>k=1..n. (2*real k)^2 / (2*real k - 1) / (2 * real k + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p n =\n    (\\<Prod>k = 1..n.\n        (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1))", "unfolding p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. 4 * (real k)\\<^sup>2 / (4 * (real k)\\<^sup>2 - 1)) =\n    (\\<Prod>k = 1..n.\n        (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1))", "by (intro prod.cong refl) (simp add: field_simps power2_eq_square)"], ["proof (state)\nthis:\n  p n =\n  (\\<Prod>k = 1..n.\n      (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  p n =\n  (\\<Prod>k = 1..n.\n      (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"\\<dots> = (\\<Prod>k=1..n. (2*real k)^2 / (2*real k - 1)) / (\\<Prod>k=1..n. (2 * real (Suc k) - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n.\n        (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1)) =\n    (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n    (\\<Prod>k = 1..n. 2 * real (Suc k) - 1)", "by (simp add: prod_dividef prod.distrib add_ac)"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n.\n      (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1)) =\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n  (\\<Prod>k = 1..n. 2 * real (Suc k) - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n.\n      (2 * real k)\\<^sup>2 / (2 * real k - 1) / (2 * real k + 1)) =\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n  (\\<Prod>k = 1..n. 2 * real (Suc k) - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"(\\<Prod>k=1..n. (2 * real (Suc k) - 1)) = (\\<Prod>k=Suc 1..Suc n. (2 * real k - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. 2 * real (Suc k) - 1) =\n    (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1)", "by (subst prod.atLeast_Suc_atMost_Suc_shift) simp_all"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. 2 * real (Suc k) - 1) =\n  (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. 2 * real (Suc k) - 1) =\n  (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"\\<dots> = (\\<Prod>k=1..n. (2 * real k - 1)) * (2 * real n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1) =\n    (\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)", "by (induction n) (simp_all add: prod.nat_ivl_Suc')"], ["proof (state)\nthis:\n  (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1) =\n  (\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = Suc 1..Suc n. 2 * real k - 1) =\n  (\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"(\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) / \\<dots> =\n                 (\\<Prod>k = 1..n. (2 * real k)^2 / (2 * real k - 1)^2) / (2 * real n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n    ((\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)) =\n    (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) /\n    (2 * real n + 1)", "unfolding power2_eq_square"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. 2 * real k * (2 * real k) / (2 * real k - 1)) /\n    ((\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)) =\n    (\\<Prod>k = 1..n.\n        2 * real k * (2 * real k) / ((2 * real k - 1) * (2 * real k - 1))) /\n    (2 * real n + 1)", "by (simp add: prod.distrib prod_dividef)"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n  ((\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)) =\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) /\n  (2 * real n + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)) /\n  ((\\<Prod>k = 1..n. 2 * real k - 1) * (2 * real n + 1)) =\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) /\n  (2 * real n + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"(\\<Prod>k = 1..n. (2 * real k)^2 / (2 * real k - 1)^2) =\n                 (\\<Prod>k = 1..n. (2 * real k)^4 / ((2*real k)*(2 * real k - 1))^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) =\n    (\\<Prod>k = 1..n.\n        (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2)", "by (rule prod.cong) (simp_all add: power2_eq_square eval_nat_numeral)"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) =\n  (\\<Prod>k = 1..n.\n      (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. (2 * real k)\\<^sup>2 / (2 * real k - 1)\\<^sup>2) =\n  (\\<Prod>k = 1..n.\n      (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"\\<dots> = 16^n * fact n^4 / (\\<Prod>k=1..n. (2*real k) * (2*real k - 1))^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n.\n        (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2) =\n    16 ^ n * fact n ^ 4 /\n    (\\<Prod>k = 1..n. 2 * real k * (2 * real k - 1))\\<^sup>2", "by (simp add: prod.distrib prod_dividef fact_prod\n            prod_power_distrib [symmetric] prod_constant)"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n.\n      (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2) =\n  16 ^ n * fact n ^ 4 /\n  (\\<Prod>k = 1..n. 2 * real k * (2 * real k - 1))\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "also"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n.\n      (2 * real k) ^ 4 / (2 * real k * (2 * real k - 1))\\<^sup>2) =\n  16 ^ n * fact n ^ 4 /\n  (\\<Prod>k = 1..n. 2 * real k * (2 * real k - 1))\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "have \"(\\<Prod>k=1..n. (2*real k) * (2*real k - 1)) = fact (2*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>k = 1..n. 2 * real k * (2 * real k - 1)) = fact (2 * n)", "by (induction n) (simp_all add: algebra_simps prod.nat_ivl_Suc')"], ["proof (state)\nthis:\n  (\\<Prod>k = 1..n. 2 * real k * (2 * real k - 1)) = fact (2 * n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "finally"], ["proof (chain)\npicking this:\n  p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "show \"p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)\""], ["proof (prove)\nusing this:\n  p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)\n\ngoal (1 subgoal):\n 1. p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)", "."], ["proof (state)\nthis:\n  p n = 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p =\n  (\\<lambda>n.\n      16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"p \\<sim> (\\<lambda>n. 16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 / (2 * real n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sim>[sequentially] (\\<lambda>n.\n                               16 ^ n * fact n ^ 4 /\n                               (fact (2 * n))\\<^sup>2 /\n                               (2 * real n + 1))", "by (simp add: p)"], ["proof (state)\nthis:\n  p \\<sim>[sequentially] (\\<lambda>n.\n                             16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 /\n                             (2 * real n + 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "also"], ["proof (state)\nthis:\n  p \\<sim>[sequentially] (\\<lambda>n.\n                             16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 /\n                             (2 * real n + 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"\\<dots> \\<sim> (\\<lambda>n. 16^n * (exp c * sqrt (real n) * (real n / exp 1) powr real n)^4 /\n                       (exp c * sqrt (real (2*n)) * (real (2*n) / exp 1) powr real (2*n))^2 /\n                       (2 * real n + 1))\" (is \"_ \\<sim> ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 /\n        (2 * real n +\n         1)) \\<sim>[sequentially] (\\<lambda>n.\n16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n(exp c * sqrt (real (2 * n)) *\n (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n(2 * real n + 1))", "by (intro asymp_equiv_mult asymp_equiv_divide asymp_equiv_refl mult_nat_left_at_top\n              fact_asymp_equiv_aux asymp_equiv_power asymp_equiv_compose'[OF fact_asymp_equiv_aux]) \n       simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 /\n      (2 * real n +\n       1)) \\<sim>[sequentially] (\\<lambda>n.\n                                    16 ^ n *\n                                    (exp c * sqrt (real n) *\n                                     (real n / exp 1) powr real n) ^\n                                    4 /\n                                    (exp c * sqrt (real (2 * n)) *\n                                     (real (2 * n) / exp 1) powr\n                                     real (2 * n))\\<^sup>2 /\n                                    (2 * real n + 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      16 ^ n * fact n ^ 4 / (fact (2 * n))\\<^sup>2 /\n      (2 * real n +\n       1)) \\<sim>[sequentially] (\\<lambda>n.\n                                    16 ^ n *\n                                    (exp c * sqrt (real n) *\n                                     (real n / exp 1) powr real n) ^\n                                    4 /\n                                    (exp c * sqrt (real (2 * n)) *\n                                     (real (2 * n) / exp 1) powr\n                                     real (2 * n))\\<^sup>2 /\n                                    (2 * real n + 1))\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"eventually (\\<lambda>n. \\<dots> n = exp c ^ 2 / (4 + 2/n)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "have [simp]: \"16^n = 4^n * (4^n :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 16 ^ n = 4 ^ n * 4 ^ n", "by (simp add: power_mult_distrib [symmetric])"], ["proof (state)\nthis:\n  16 ^ n = 4 ^ n * 4 ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"?f n = exp c ^ 2 * (n / (2*(2*n+1)))\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n    (exp c * sqrt (real (2 * n)) *\n     (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n    (2 * real n + 1) =\n    (exp c)\\<^sup>2 * (real n / real (2 * (2 * n + 1)))", "by (simp add: power_mult_distrib divide_simps powr_mult real_sqrt_power_even)\n         (simp add: field_simps power2_eq_square eval_nat_numeral powr_mult_2 \n                    exp_mult_2 powr_realpow)"], ["proof (state)\nthis:\n  16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n  (exp c * sqrt (real (2 * n)) *\n   (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n  (2 * real n + 1) =\n  (exp c)\\<^sup>2 * (real n / real (2 * (2 * n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "also"], ["proof (state)\nthis:\n  16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n  (exp c * sqrt (real (2 * n)) *\n   (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n  (2 * real n + 1) =\n  (exp c)\\<^sup>2 * (real n / real (2 * (2 * n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = exp c ^ 2 / (4 + 2/n)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (exp c)\\<^sup>2 * (real n / real (2 * (2 * n + 1))) =\n    (exp c)\\<^sup>2 / (4 + 2 / real n)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (exp c)\\<^sup>2 * (real n / real (2 * (2 * n + 1))) =\n  (exp c)\\<^sup>2 / (4 + 2 / real n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n       (exp c * sqrt (real (2 * n)) *\n        (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n       (2 * real n + 1) =\n       (exp c)\\<^sup>2 / (4 + 2 / real n)", "finally"], ["proof (chain)\npicking this:\n  16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n  (exp c * sqrt (real (2 * n)) *\n   (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n  (2 * real n + 1) =\n  (exp c)\\<^sup>2 / (4 + 2 / real n)", "show \"?f n = \\<dots>\""], ["proof (prove)\nusing this:\n  16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n  (exp c * sqrt (real (2 * n)) *\n   (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n  (2 * real n + 1) =\n  (exp c)\\<^sup>2 / (4 + 2 / real n)\n\ngoal (1 subgoal):\n 1. 16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n    (exp c * sqrt (real (2 * n)) *\n     (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n    (2 * real n + 1) =\n    (exp c)\\<^sup>2 / (4 + 2 / real n)", "."], ["proof (state)\nthis:\n  16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n  (exp c * sqrt (real (2 * n)) *\n   (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n  (2 * real n + 1) =\n  (exp c)\\<^sup>2 / (4 + 2 / real n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n     (exp c * sqrt (real (2 * n)) *\n      (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n     (2 * real n + 1) =\n     (exp c)\\<^sup>2 / (4 + 2 / real n)\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "also"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     16 ^ n * (exp c * sqrt (real n) * (real n / exp 1) powr real n) ^ 4 /\n     (exp c * sqrt (real (2 * n)) *\n      (real (2 * n) / exp 1) powr real (2 * n))\\<^sup>2 /\n     (2 * real n + 1) =\n     (exp c)\\<^sup>2 / (4 + 2 / real n)\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"(\\<lambda>x. 4 + 2 / real x) \\<sim> (\\<lambda>x. 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 4 + 2 / real x) \\<sim>[sequentially] (\\<lambda>x. 4)", "by (subst asymp_equiv_add_right) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. 4 + 2 / real x) \\<sim>[sequentially] (\\<lambda>x. 4)\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>c d.\n              c \\<sim>[sequentially] d \\<Longrightarrow>\n              c \\<sim>[sequentially] d;\n   \\<And>ca d.\n      ca \\<sim>[sequentially] d \\<Longrightarrow>\n      (\\<lambda>a.\n          (exp c)\\<^sup>2 /\n          ca a) \\<sim>[sequentially] (\\<lambda>a.\n   (exp c)\\<^sup>2 / d a)\\<rbrakk>\n  \\<Longrightarrow> p \\<sim>[sequentially] (\\<lambda>a. (exp c)\\<^sup>2 / 4)", "have \"p \\<longlonglongrightarrow> exp c ^ 2 / 4\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>c d.\n              c \\<sim>[sequentially] d \\<Longrightarrow>\n              c \\<sim>[sequentially] d;\n   \\<And>ca d.\n      ca \\<sim>[sequentially] d \\<Longrightarrow>\n      (\\<lambda>a.\n          (exp c)\\<^sup>2 /\n          ca a) \\<sim>[sequentially] (\\<lambda>a.\n   (exp c)\\<^sup>2 / d a)\\<rbrakk>\n  \\<Longrightarrow> p \\<sim>[sequentially] (\\<lambda>a. (exp c)\\<^sup>2 / 4)\n\ngoal (1 subgoal):\n 1. p \\<longlonglongrightarrow> (exp c)\\<^sup>2 / 4", "by (rule asymp_equivD_const) (simp_all add: asymp_equiv_divide)"], ["proof (state)\nthis:\n  p \\<longlonglongrightarrow> (exp c)\\<^sup>2 / 4\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "moreover"], ["proof (state)\nthis:\n  p \\<longlonglongrightarrow> (exp c)\\<^sup>2 / 4\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"p \\<longlonglongrightarrow> pi / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<longlonglongrightarrow> pi / 2", "unfolding p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>k = 1..n. 4 * (real k)\\<^sup>2 / (4 * (real k)\\<^sup>2 - 1))\n    \\<longlonglongrightarrow> pi / 2", "by (rule wallis)"], ["proof (state)\nthis:\n  p \\<longlonglongrightarrow> pi / 2\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "ultimately"], ["proof (chain)\npicking this:\n  p \\<longlonglongrightarrow> (exp c)\\<^sup>2 / 4\n  p \\<longlonglongrightarrow> pi / 2", "have \"exp c ^ 2 / 4 = pi / 2\""], ["proof (prove)\nusing this:\n  p \\<longlonglongrightarrow> (exp c)\\<^sup>2 / 4\n  p \\<longlonglongrightarrow> pi / 2\n\ngoal (1 subgoal):\n 1. (exp c)\\<^sup>2 / 4 = pi / 2", "by (rule LIMSEQ_unique)"], ["proof (state)\nthis:\n  (exp c)\\<^sup>2 / 4 = pi / 2\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "hence \"2 * pi = exp c ^ 2\""], ["proof (prove)\nusing this:\n  (exp c)\\<^sup>2 / 4 = pi / 2\n\ngoal (1 subgoal):\n 1. 2 * pi = (exp c)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  2 * pi = (exp c)\\<^sup>2\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "also"], ["proof (state)\nthis:\n  2 * pi = (exp c)\\<^sup>2\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "have \"sqrt (exp c ^ 2) = exp c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt ((exp c)\\<^sup>2) = exp c", "by simp"], ["proof (state)\nthis:\n  sqrt ((exp c)\\<^sup>2) = exp c\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", "finally"], ["proof (chain)\npicking this:\n  sqrt (2 * pi) = exp c", "show \"exp c = sqrt (2 * pi)\""], ["proof (prove)\nusing this:\n  sqrt (2 * pi) = exp c\n\ngoal (1 subgoal):\n 1. exp c = sqrt (2 * pi)", ".."], ["proof (state)\nthis:\n  exp c = sqrt (2 * pi)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma c: \"c = ln (2*pi) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "note exp_c [symmetric]"], ["proof (state)\nthis:\n  sqrt (2 * pi) = exp c\n\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "also"], ["proof (state)\nthis:\n  sqrt (2 * pi) = exp c\n\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "have \"ln (exp c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (exp c) = c", "by simp"], ["proof (state)\nthis:\n  ln (exp c) = c\n\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "finally"], ["proof (chain)\npicking this:\n  ln (sqrt (2 * pi)) = c", "show ?thesis"], ["proof (prove)\nusing this:\n  ln (sqrt (2 * pi)) = c\n\ngoal (1 subgoal):\n 1. c = ln (2 * pi) / 2", "by (simp add: ln_sqrt)"], ["proof (state)\nthis:\n  c = ln (2 * pi) / 2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  This gives us the final bounds:\n\\<close>"], ["", "theorem Gamma_bounds:\n  assumes \"x \\<ge> 1\"\n  shows   \"Gamma x \\<ge> sqrt (2*pi/x) * (x / exp 1) powr x\" (is ?th1)\n          \"Gamma x \\<le> sqrt (2*pi/x) * (x / exp 1) powr x * exp (1 / (12 * x))\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (2 * pi / x) * (x / exp 1) powr x \\<le> Gamma x &&&\n    Gamma x\n    \\<le> sqrt (2 * pi / x) * (x / exp 1) powr x * exp (1 / (12 * x))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. sqrt (2 * pi / x) * (x / exp 1) powr x \\<le> Gamma x\n 2. Gamma x\n    \\<le> sqrt (2 * pi / x) * (x / exp 1) powr x * exp (1 / (12 * x))", "from assms"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have \"exp c * x powr (x - 1/2) / exp x = sqrt (2*pi/x) * (x / exp 1) powr x\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. exp c * x powr (x - 1 / 2) / exp x =\n    sqrt (2 * pi / x) * (x / exp 1) powr x", "by (subst powr_diff)\n       (simp add: exp_c real_sqrt_divide powr_divide powr_half_sqrt field_simps)"], ["proof (state)\nthis:\n  exp c * x powr (x - 1 / 2) / exp x =\n  sqrt (2 * pi / x) * (x / exp 1) powr x\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi / x) * (x / exp 1) powr x \\<le> Gamma x\n 2. Gamma x\n    \\<le> sqrt (2 * pi / x) * (x / exp 1) powr x * exp (1 / (12 * x))", "with Gamma_bounds_aux[OF assms]"], ["proof (chain)\npicking this:\n  exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n  Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))\n  exp c * x powr (x - 1 / 2) / exp x =\n  sqrt (2 * pi / x) * (x / exp 1) powr x", "show ?th1 ?th2"], ["proof (prove)\nusing this:\n  exp c * x powr (x - 1 / 2) / exp x \\<le> Gamma x\n  Gamma x \\<le> exp c * x powr (x - 1 / 2) / exp x * exp (1 / (12 * x))\n  exp c * x powr (x - 1 / 2) / exp x =\n  sqrt (2 * pi / x) * (x / exp 1) powr x\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi / x) * (x / exp 1) powr x \\<le> Gamma x &&&\n    Gamma x\n    \\<le> sqrt (2 * pi / x) * (x / exp 1) powr x * exp (1 / (12 * x))", "by simp_all"], ["proof (state)\nthis:\n  sqrt (2 * pi / x) * (x / exp 1) powr x \\<le> Gamma x\n  Gamma x \\<le> sqrt (2 * pi / x) * (x / exp 1) powr x * exp (1 / (12 * x))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem ln_Gamma_bounds:\n  assumes \"x \\<ge> 1\"\n  shows   \"ln_Gamma x \\<ge> ln (2*pi/x) / 2 + x * ln x - x\" (is ?th1)\n          \"ln_Gamma x \\<le> ln (2*pi/x) / 2 + x * ln x - x + 1/(12*x)\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (2 * pi / x) / 2 + x * ln x - x \\<le> ln_Gamma x &&&\n    ln_Gamma x \\<le> ln (2 * pi / x) / 2 + x * ln x - x + 1 / (12 * x)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ln (2 * pi / x) / 2 + x * ln x - x \\<le> ln_Gamma x\n 2. ln_Gamma x \\<le> ln (2 * pi / x) / 2 + x * ln x - x + 1 / (12 * x)", "from ln_Gamma_bounds_aux[OF assms] assms"], ["proof (chain)\npicking this:\n  c + (x - 1 / 2) * ln x - x \\<le> ln_Gamma x\n  ln_Gamma x \\<le> c + (x - 1 / 2) * ln x - x + 1 / (12 * x)\n  1 \\<le> x", "show ?th1 ?th2"], ["proof (prove)\nusing this:\n  c + (x - 1 / 2) * ln x - x \\<le> ln_Gamma x\n  ln_Gamma x \\<le> c + (x - 1 / 2) * ln x - x + 1 / (12 * x)\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. ln (2 * pi / x) / 2 + x * ln x - x \\<le> ln_Gamma x &&&\n    ln_Gamma x \\<le> ln (2 * pi / x) / 2 + x * ln x - x + 1 / (12 * x)", "by (simp_all add: c field_simps ln_div)"], ["proof (state)\nthis:\n  ln (2 * pi / x) / 2 + x * ln x - x \\<le> ln_Gamma x\n  ln_Gamma x \\<le> ln (2 * pi / x) / 2 + x * ln x - x + 1 / (12 * x)\n\ngoal:\nNo subgoals!", "from assms"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have \"exp c * x powr (x - 1/2) / exp x = sqrt (2*pi/x) * (x / exp 1) powr x\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. exp c * x powr (x - 1 / 2) / exp x =\n    sqrt (2 * pi / x) * (x / exp 1) powr x", "by (subst powr_diff)\n       (simp add: exp_c real_sqrt_divide powr_divide powr_half_sqrt field_simps)"], ["proof (state)\nthis:\n  exp c * x powr (x - 1 / 2) / exp x =\n  sqrt (2 * pi / x) * (x / exp 1) powr x\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fact_bounds:\n  assumes \"n > 0\"\n  shows   \"(fact n :: real) \\<ge> sqrt (2*pi*n) * (n / exp 1) ^ n\" (is ?th1)\n          \"(fact n :: real) \\<le> sqrt (2*pi*n) * (n / exp 1) ^ n * exp (1 / (12 * n))\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n &&&\n    fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have n: \"real n \\<ge> 1\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 1 \\<le> real n", "by simp"], ["proof (state)\nthis:\n  1 \\<le> real n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "from assms Gamma_plus1[of \"real n\"]"], ["proof (chain)\npicking this:\n  0 < n\n  real n \\<notin> \\<int>\\<^sub>\\<le>\\<^sub>0 \\<Longrightarrow>\n  Gamma (real n + 1) = real n * Gamma (real n)", "have \"real n * Gamma (real n) = Gamma (real (Suc n))\""], ["proof (prove)\nusing this:\n  0 < n\n  real n \\<notin> \\<int>\\<^sub>\\<le>\\<^sub>0 \\<Longrightarrow>\n  Gamma (real n + 1) = real n * Gamma (real n)\n\ngoal (1 subgoal):\n 1. real n * Gamma (real n) = Gamma (real (Suc n))", "by (simp add: of_nat_in_nonpos_Ints_iff add_ac)"], ["proof (state)\nthis:\n  real n * Gamma (real n) = Gamma (real (Suc n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  real n * Gamma (real n) = Gamma (real (Suc n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "have \"Gamma (real (Suc n)) = fact n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma (real (Suc n)) = fact n", "by (subst Gamma_fact [symmetric]) simp"], ["proof (state)\nthis:\n  Gamma (real (Suc n)) = fact n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "finally"], ["proof (chain)\npicking this:\n  real n * Gamma (real n) = fact n", "have *: \"fact n = real n * Gamma (real n)\""], ["proof (prove)\nusing this:\n  real n * Gamma (real n) = fact n\n\ngoal (1 subgoal):\n 1. fact n = real n * Gamma (real n)", "by simp"], ["proof (state)\nthis:\n  fact n = real n * Gamma (real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "have \"2*pi/n = 2*pi*n / n^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * pi / real n = 2 * pi * real n / real (n\\<^sup>2)", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  2 * pi / real n = 2 * pi * real n / real (n\\<^sup>2)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  2 * pi / real n = 2 * pi * real n / real (n\\<^sup>2)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "have \"sqrt \\<dots> = sqrt (2*pi*n) / n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n / real (n\\<^sup>2)) =\n    sqrt (2 * pi * real n) / real n", "by (subst real_sqrt_divide) simp_all"], ["proof (state)\nthis:\n  sqrt (2 * pi * real n / real (n\\<^sup>2)) =\n  sqrt (2 * pi * real n) / real n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  sqrt (2 * pi * real n / real (n\\<^sup>2)) =\n  sqrt (2 * pi * real n) / real n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "have \"real n * \\<dots> = sqrt (2*pi*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n * (sqrt (2 * pi * real n) / real n) = sqrt (2 * pi * real n)", "by simp"], ["proof (state)\nthis:\n  real n * (sqrt (2 * pi * real n) / real n) = sqrt (2 * pi * real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "finally"], ["proof (chain)\npicking this:\n  real n * sqrt (2 * pi / real n) = sqrt (2 * pi * real n)", "have **: \"real n * sqrt (2*pi/real n) = sqrt (2*pi*real n)\""], ["proof (prove)\nusing this:\n  real n * sqrt (2 * pi / real n) = sqrt (2 * pi * real n)\n\ngoal (1 subgoal):\n 1. real n * sqrt (2 * pi / real n) = sqrt (2 * pi * real n)", "."], ["proof (state)\nthis:\n  real n * sqrt (2 * pi / real n) = sqrt (2 * pi * real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "note *"], ["proof (state)\nthis:\n  fact n = real n * Gamma (real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  fact n = real n * Gamma (real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "note Gamma_bounds(2)[OF n]"], ["proof (state)\nthis:\n  Gamma (real n)\n  \\<le> sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n        exp (1 / (12 * real n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  Gamma (real n)\n  \\<le> sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n        exp (1 / (12 * real n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "have \"real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n * \n                  exp (1 / (12 * real n))) = \n               (real n * sqrt (2*pi/n)) * (n / exp 1) powr n * exp (1 / (12 * n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n *\n    (sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n     exp (1 / (12 * real n))) =\n    real n * sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n    exp (1 / real (12 * n))", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  real n *\n  (sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n   exp (1 / (12 * real n))) =\n  real n * sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n  exp (1 / real (12 * n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  real n *\n  (sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n   exp (1 / (12 * real n))) =\n  real n * sqrt (2 * pi / real n) * (real n / exp 1) powr real n *\n  exp (1 / real (12 * n))\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "from n"], ["proof (chain)\npicking this:\n  1 \\<le> real n", "have \"(real n / exp 1) powr real n = (real n / exp 1) ^ n\""], ["proof (prove)\nusing this:\n  1 \\<le> real n\n\ngoal (1 subgoal):\n 1. (real n / exp 1) powr real n = (real n / exp 1) ^ n", "by (subst powr_realpow) simp_all"], ["proof (state)\nthis:\n  (real n / exp 1) powr real n = (real n / exp 1) ^ n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "also"], ["proof (state)\nthis:\n  (real n / exp 1) powr real n = (real n / exp 1) ^ n\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "note **"], ["proof (state)\nthis:\n  real n * sqrt (2 * pi / real n) = sqrt (2 * pi * real n)\n\ngoal (2 subgoals):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n 2. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real n * x \\<le> real n * y) \\<Longrightarrow>\n  fact n\n  \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n        exp (1 / real (12 * n))", "show ?th2"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real n * x \\<le> real n * y) \\<Longrightarrow>\n  fact n\n  \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n        exp (1 / real (12 * n))\n\ngoal (1 subgoal):\n 1. fact n\n    \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n          exp (1 / (12 * real n))", "by - (insert assms, simp_all)"], ["proof (state)\nthis:\n  fact n\n  \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n        exp (1 / (12 * real n))\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "have \"sqrt (2*pi*n) * (n / exp 1) powr n = n * (sqrt (2*pi/n) * (n / exp 1) powr n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) powr real n =\n    real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)", "by (subst ** [symmetric]) (simp add: field_simps)"], ["proof (state)\nthis:\n  sqrt (2 * pi * real n) * (real n / exp 1) powr real n =\n  real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "also"], ["proof (state)\nthis:\n  sqrt (2 * pi * real n) * (real n / exp 1) powr real n =\n  real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> \\<le> real n * Gamma (real n)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)\n    \\<le> real n * Gamma (real n)", "by (intro mult_left_mono Gamma_bounds(1)) simp_all"], ["proof (state)\nthis:\n  real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)\n  \\<le> real n * Gamma (real n)\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "also"], ["proof (state)\nthis:\n  real n * (sqrt (2 * pi / real n) * (real n / exp 1) powr real n)\n  \\<le> real n * Gamma (real n)\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "from n"], ["proof (chain)\npicking this:\n  1 \\<le> real n", "have \"(real n / exp 1) powr real n = (real n / exp 1) ^ n\""], ["proof (prove)\nusing this:\n  1 \\<le> real n\n\ngoal (1 subgoal):\n 1. (real n / exp 1) powr real n = (real n / exp 1) ^ n", "by (subst powr_realpow) simp_all"], ["proof (state)\nthis:\n  (real n / exp 1) powr real n = (real n / exp 1) ^ n\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "also"], ["proof (state)\nthis:\n  (real n / exp 1) powr real n = (real n / exp 1) ^ n\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "note * [symmetric]"], ["proof (state)\nthis:\n  real n * Gamma (real n) = fact n\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "finally"], ["proof (chain)\npicking this:\n  sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "show ?th1"], ["proof (prove)\nusing this:\n  sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n\ngoal (1 subgoal):\n 1. sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n", "."], ["proof (state)\nthis:\n  sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem ln_fact_bounds:\n  assumes \"n > 0\"\n  shows   \"ln (fact n :: real) \\<ge> ln (2*pi*n)/2 + n * ln n - n\" (is ?th1)\n          \"ln (fact n :: real) \\<le> ln (2*pi*n)/2 + n * ln n - n + 1/(12*real n)\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n) &&&\n    ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n)\n 2. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "have \"ln (fact n :: real) \\<ge> ln (sqrt (2*pi*real n)*(real n/exp 1)^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) \\<le> ln (fact n)", "using fact_bounds(1)[OF assms] assms"], ["proof (prove)\nusing this:\n  sqrt (2 * pi * real n) * (real n / exp 1) ^ n \\<le> fact n\n  0 < n\n\ngoal (1 subgoal):\n 1. ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) \\<le> ln (fact n)", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) \\<le> ln (fact n)\n\ngoal (2 subgoals):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n)\n 2. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "also"], ["proof (state)\nthis:\n  ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) \\<le> ln (fact n)\n\ngoal (2 subgoals):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n)\n 2. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"ln (sqrt (2*pi*real n)*(real n/exp 1)^n) = ln (2*pi*n)/2 + n * ln n - n\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) =\n    ln (2 * pi * real n) / 2 + real n * ln (real n) - real n", "by (simp add: ln_mult ln_div ln_realpow ln_sqrt field_simps)"], ["proof (state)\nthis:\n  ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n) =\n  ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n\ngoal (2 subgoals):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n)\n 2. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "finally"], ["proof (chain)\npicking this:\n  ln (2 * pi * real n) / 2 + real n * ln (real n) - real n \\<le> ln (fact n)", "show ?th1"], ["proof (prove)\nusing this:\n  ln (2 * pi * real n) / 2 + real n * ln (real n) - real n \\<le> ln (fact n)\n\ngoal (1 subgoal):\n 1. ln (2 * pi * real n) / 2 + real n * ln (real n) - real n\n    \\<le> ln (fact n)", "."], ["proof (state)\nthis:\n  ln (2 * pi * real n) / 2 + real n * ln (real n) - real n \\<le> ln (fact n)\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "have \"ln (fact n :: real) \\<le> ln (sqrt (2*pi*real n) * (real n/exp 1)^n * exp (1/(12*real n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n              exp (1 / (12 * real n)))", "using fact_bounds(2)[OF assms] assms"], ["proof (prove)\nusing this:\n  fact n\n  \\<le> sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n        exp (1 / (12 * real n))\n  0 < n\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n              exp (1 / (12 * real n)))", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (fact n)\n  \\<le> ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n            exp (1 / (12 * real n)))\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "also"], ["proof (state)\nthis:\n  ln (fact n)\n  \\<le> ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n            exp (1 / (12 * real n)))\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = ln (2*pi*n)/2 + n * ln n - n + 1/(12*real n)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n        exp (1 / (12 * real n))) =\n    ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n    1 / (12 * real n)", "by (simp add: ln_mult ln_div ln_realpow ln_sqrt field_simps)"], ["proof (state)\nthis:\n  ln (sqrt (2 * pi * real n) * (real n / exp 1) ^ n *\n      exp (1 / (12 * real n))) =\n  ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n  1 / (12 * real n)\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "finally"], ["proof (chain)\npicking this:\n  ln (fact n)\n  \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n        1 / (12 * real n)", "show ?th2"], ["proof (prove)\nusing this:\n  ln (fact n)\n  \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n        1 / (12 * real n)\n\ngoal (1 subgoal):\n 1. ln (fact n)\n    \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n          1 / (12 * real n)", "."], ["proof (state)\nthis:\n  ln (fact n)\n  \\<le> ln (2 * pi * real n) / 2 + real n * ln (real n) - real n +\n        1 / (12 * real n)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Gamma_asymp_equiv: \n  \"Gamma \\<sim>[at_top] (\\<lambda>x. sqrt (2*pi/x) * (x / exp 1) powr x :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "note Gamma_asymp_equiv_aux"], ["proof (state)\nthis:\n  Gamma \\<sim>[at_top] (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x)\n\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "also"], ["proof (state)\nthis:\n  Gamma \\<sim>[at_top] (\\<lambda>x. exp c * x powr (x - 1 / 2) / exp x)\n\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "have \"eventually (\\<lambda>x. exp c * x powr (x - 1/2) / exp x = \n               sqrt (2*pi/x) * (x / exp 1) powr x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x =\n       sqrt (2 * pi / x) * (x / exp 1) powr x", "using eventually_gt_at_top[of \"0::real\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       exp c * x powr (x - 1 / 2) / exp x =\n       sqrt (2 * pi / x) * (x / exp 1) powr x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < x \\<Longrightarrow>\n       exp c * x powr (x - 1 / 2) / exp x =\n       sqrt (2 * pi / x) * (x / exp 1) powr x", "fix x :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < x \\<Longrightarrow>\n       exp c * x powr (x - 1 / 2) / exp x =\n       sqrt (2 * pi / x) * (x / exp 1) powr x", "assume x: \"x > 0\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < x \\<Longrightarrow>\n       exp c * x powr (x - 1 / 2) / exp x =\n       sqrt (2 * pi / x) * (x / exp 1) powr x", "thus \"exp c * x powr (x - 1/2) / exp x = sqrt (2*pi/x) * (x / exp 1) powr x\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. exp c * x powr (x - 1 / 2) / exp x =\n    sqrt (2 * pi / x) * (x / exp 1) powr x", "by (subst powr_diff) \n         (simp add: exp_c powr_half_sqrt powr_divide field_simps real_sqrt_divide)"], ["proof (state)\nthis:\n  exp c * x powr (x - 1 / 2) / exp x =\n  sqrt (2 * pi / x) * (x / exp 1) powr x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     exp c * x powr (x - 1 / 2) / exp x =\n     sqrt (2 * pi / x) * (x / exp 1) powr x\n\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "finally"], ["proof (chain)\npicking this:\n  Gamma \\<sim>[at_top] (\\<lambda>x. sqrt (2 * pi / x) * (x / exp 1) powr x)", "show ?thesis"], ["proof (prove)\nusing this:\n  Gamma \\<sim>[at_top] (\\<lambda>x. sqrt (2 * pi / x) * (x / exp 1) powr x)\n\ngoal (1 subgoal):\n 1. Gamma \\<sim>[at_top] (\\<lambda>x.\n                             sqrt (2 * pi / x) * (x / exp 1) powr x)", "."], ["proof (state)\nthis:\n  Gamma \\<sim>[at_top] (\\<lambda>x. sqrt (2 * pi / x) * (x / exp 1) powr x)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fact_asymp_equiv: \n  \"fact \\<sim>[at_top] (\\<lambda>n. sqrt (2*pi*n) * (n / exp 1) ^ n :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "note fact_asymp_equiv_aux"], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                exp c * sqrt (real x) *\n                                (real x / exp 1) powr real x)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "also"], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                exp c * sqrt (real x) *\n                                (real x / exp 1) powr real x)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "have \"eventually (\\<lambda>n. exp c * sqrt (real n) = sqrt (2 * pi * real n)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       exp c * sqrt (real n) = sqrt (2 * pi * real n)", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       exp c * sqrt (real n) = sqrt (2 * pi * real n)", "by eventually_elim (simp add: exp_c real_sqrt_mult)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     exp c * sqrt (real n) = sqrt (2 * pi * real n)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "also"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     exp c * sqrt (real n) = sqrt (2 * pi * real n)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "have \"eventually (\\<lambda>n. (n / exp 1) powr n = (n / exp 1) ^ n) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       (real n / exp 1) powr real n = (real n / exp 1) ^ n", "using eventually_gt_at_top[of \"0::nat\"]"], ["proof (prove)\nusing this:\n  eventually ((<) 0) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       (real n / exp 1) powr real n = (real n / exp 1) ^ n", "by eventually_elim (simp add: powr_realpow)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     (real n / exp 1) powr real n = (real n / exp 1) ^ n\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "finally"], ["proof (chain)\npicking this:\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                sqrt (2 * pi * real x) *\n                                (real x / exp 1) ^ x)", "show ?thesis"], ["proof (prove)\nusing this:\n  fact \\<sim>[sequentially] (\\<lambda>x.\n                                sqrt (2 * pi * real x) *\n                                (real x / exp 1) ^ x)\n\ngoal (1 subgoal):\n 1. fact \\<sim>[sequentially] (\\<lambda>n.\n                                  sqrt (2 * pi * real n) *\n                                  (real n / exp 1) ^ n)", "."], ["proof (state)\nthis:\n  fact \\<sim>[sequentially] (\\<lambda>n.\n                                sqrt (2 * pi * real n) *\n                                (real n / exp 1) ^ n)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}