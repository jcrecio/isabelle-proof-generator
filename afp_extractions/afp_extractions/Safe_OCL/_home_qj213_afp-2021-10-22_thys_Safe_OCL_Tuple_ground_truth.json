{"file_name": "/home/qj213/afp-2021-10-22/thys/Safe_OCL/Tuple.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Safe_OCL", "problem_names": ["lemma fmrel_to_subtuple:\n  \"fmrel r xm ym \\<Longrightarrow> subtuple r xm ym\"", "lemma subtuple_eq_fmrel_fmrestrict_fset:\n  \"subtuple r xm ym = fmrel r (fmrestrict_fset (fmdom ym) xm) ym\"", "lemma subtuple_fmdom:\n  \"subtuple f xm ym \\<Longrightarrow>\n   subtuple g ym xm \\<Longrightarrow>\n   fmdom xm = fmdom ym\"", "lemma subtuple_refl:\n  \"reflp R \\<Longrightarrow> subtuple R xm xm\"", "lemma subtuple_mono [mono]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> y \\<in> fmran' ym \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n   subtuple f xm ym \\<longrightarrow> subtuple g xm ym\"", "lemma strict_subtuple_mono [mono]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> y \\<in> fmran' ym \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n   strict_subtuple f xm ym \\<longrightarrow> strict_subtuple g xm ym\"", "lemma subtuple_antisym:\n  assumes \"subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\"\n  assumes \"subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\"\n  shows \"xm = ym\"", "lemma strict_subtuple_antisym:\n  \"strict_subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm \\<Longrightarrow> False\"", "lemma subtuple_acyclic:\n  assumes \"acyclicP_on (fmran' xm) P\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\"\n  shows \"xm = ym\"", "lemma subtuple_acyclic':\n  assumes \"acyclicP_on (fmran' ym) P\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\"\n  shows \"xm = ym\"", "lemma subtuple_acyclic'':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   subtuple R\\<^sup>*\\<^sup>* xm ym \\<Longrightarrow>\n   subtuple R ym xm \\<Longrightarrow>\n   xm = ym\"", "lemma strict_subtuple_trans:\n  \"acyclicP_on (fmran' xm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm zm\"", "lemma strict_subtuple_trans':\n  \"acyclicP_on (fmran' zm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm zm\"", "lemma strict_subtuple_trans'':\n  \"acyclicP_on (fmran' zm) R \\<Longrightarrow>\n   strict_subtuple R xm ym \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* ym zm \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* xm zm\"", "lemma strict_subtuple_trans''':\n  \"acyclicP_on (fmran' zm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* xm zm\"", "lemma subtuple_fmmerge2 [intro]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y)) \\<Longrightarrow>\n   subtuple f xm (fmmerge g xm ym)\"", "lemma trancl_to_subtuple:\n  \"(subtuple r)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   subtuple r\\<^sup>+\\<^sup>+ xm ym\"", "lemma rtrancl_to_subtuple:\n  \"(subtuple r)\\<^sup>*\\<^sup>* xm ym \\<Longrightarrow>\n   subtuple r\\<^sup>*\\<^sup>* xm ym\"", "lemma fmrel_to_subtuple_trancl:\n  \"reflp r \\<Longrightarrow>\n   (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym \\<Longrightarrow>\n   (subtuple r)\\<^sup>+\\<^sup>+ xm ym\"", "lemma subtuple_to_trancl:\n  \"reflp r \\<Longrightarrow>\n   subtuple r\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   (subtuple r)\\<^sup>+\\<^sup>+ xm ym\"", "lemma trancl_to_strict_subtuple:\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   (strict_subtuple R)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* xm ym\"", "lemma trancl_to_strict_subtuple':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym\"", "lemma subtuple_rtranclp_intro:\n  assumes \"\\<And>xm ym. R (f xm) (f ym) \\<Longrightarrow> subtuple R xm ym\"\n      and \"bij_on_trancl R f\"\n      and \"R\\<^sup>*\\<^sup>* (f xm) (f ym)\"\n    shows \"subtuple R\\<^sup>*\\<^sup>* xm ym\"", "lemma strict_subtuple_rtranclp_intro:\n  assumes \"\\<And>xm ym. R (f xm) (f ym) \\<Longrightarrow>\n           strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) xm ym\"\n      and \"bij_on_trancl R f\"\n      and \"acyclicP_on (fmran' ym) R\"\n      and \"R\\<^sup>+\\<^sup>+ (f xm) (f ym)\"\n    shows \"strict_subtuple R\\<^sup>*\\<^sup>* xm ym\"", "lemma subtuple_fun_simp [code_abbrev, simp]:\n  \"subtuple_fun f xm ym = subtuple f xm ym\"", "lemma strict_subtuple_fun_simp [code_abbrev, simp]:\n  \"strict_subtuple_fun f xm ym = strict_subtuple f xm ym\""], "translations": [["", "lemma fmrel_to_subtuple:\n  \"fmrel r xm ym \\<Longrightarrow> subtuple r xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrel r xm ym \\<Longrightarrow> subtuple r xm ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrel r xm ym \\<Longrightarrow>\n    fmrel r (fmrestrict_fset (fmdom ym) xm) (fmrestrict_fset (fmdom ym) ym)", "by blast"], ["", "lemma subtuple_eq_fmrel_fmrestrict_fset:\n  \"subtuple r xm ym = fmrel r (fmrestrict_fset (fmdom ym) xm) ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtuple r xm ym = fmrel r (fmrestrict_fset (fmdom ym) xm) ym", "by (simp add: fmrel_on_fset_fmrel_restrict)"], ["", "lemma subtuple_fmdom:\n  \"subtuple f xm ym \\<Longrightarrow>\n   subtuple g ym xm \\<Longrightarrow>\n   fmdom xm = fmdom ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>subtuple f xm ym; subtuple g ym xm\\<rbrakk>\n    \\<Longrightarrow> fmdom xm = fmdom ym", "by (meson fmrel_on_fset_fmdom fset_eqI)"], ["", "(*** Basic Properties *******************************************************)"], ["", "subsection \\<open>Basic Properties\\<close>"], ["", "lemma subtuple_refl:\n  \"reflp R \\<Longrightarrow> subtuple R xm xm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp R \\<Longrightarrow> subtuple R xm xm", "by (simp add: fmrel_on_fsetI option.rel_reflp reflpD)"], ["", "lemma subtuple_mono [mono]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> y \\<in> fmran' ym \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n   subtuple f xm ym \\<longrightarrow> subtuple g xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n        \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n    subtuple f xm ym \\<longrightarrow> subtuple g xm ym", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y.\n                \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n                \\<Longrightarrow> f x y \\<longrightarrow> g x y;\n     subtuple f xm ym\\<rbrakk>\n    \\<Longrightarrow> subtuple g xm ym", "apply (rule fmrel_on_fsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n                   \\<Longrightarrow> f x y \\<longrightarrow> g x y;\n        subtuple f xm ym; x |\\<in>| fmdom ym\\<rbrakk>\n       \\<Longrightarrow> rel_option g (fmlookup xm x) (fmlookup ym x)", "apply (drule_tac ?P=\"f\" and ?m=\"xm\" and ?n=\"ym\" in fmrel_on_fsetD, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n                   \\<Longrightarrow> f x y \\<longrightarrow> g x y;\n        subtuple f xm ym;\n        rel_option f (fmlookup xm x) (fmlookup ym x)\\<rbrakk>\n       \\<Longrightarrow> rel_option g (fmlookup xm x) (fmlookup ym x)", "apply (erule option.rel_cases, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n                   \\<Longrightarrow> f x y \\<longrightarrow> g x y;\n        subtuple f xm ym; fmlookup xm x = Some xa; fmlookup ym x = Some y;\n        f xa y\\<rbrakk>\n       \\<Longrightarrow> rel_option g (fmlookup xm x) (fmlookup ym x)", "by (auto simp add: option.rel_sel fmran'I)"], ["", "lemma strict_subtuple_mono [mono]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> y \\<in> fmran' ym \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n   strict_subtuple f xm ym \\<longrightarrow> strict_subtuple g xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n        \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n    strict_subtuple f xm ym \\<longrightarrow> strict_subtuple g xm ym", "using subtuple_mono"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> fmran' ?xm; y \\<in> fmran' ?ym\\<rbrakk>\n      \\<Longrightarrow> ?f x y \\<longrightarrow> ?g x y) \\<Longrightarrow>\n  subtuple ?f ?xm ?ym \\<longrightarrow> subtuple ?g ?xm ?ym\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> fmran' xm; y \\<in> fmran' ym\\<rbrakk>\n        \\<Longrightarrow> f x y \\<longrightarrow> g x y) \\<Longrightarrow>\n    strict_subtuple f xm ym \\<longrightarrow> strict_subtuple g xm ym", "by blast"], ["", "lemma subtuple_antisym:\n  assumes \"subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\"\n  assumes \"subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\"\n  shows \"xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xm = ym", "proof (rule fmap_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from assms"], ["proof (chain)\npicking this:\n  subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm", "have \"fmdom xm = fmdom ym\""], ["proof (prove)\nusing this:\n  subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "using subtuple_fmdom"], ["proof (prove)\nusing this:\n  subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n  \\<lbrakk>subtuple ?f ?xm ?ym; subtuple ?g ?ym ?xm\\<rbrakk>\n  \\<Longrightarrow> fmdom ?xm = fmdom ?ym\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "by blast"], ["proof (state)\nthis:\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "with assms"], ["proof (chain)\npicking this:\n  subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n  fmdom xm = fmdom ym", "have \"fmrel (\\<lambda>x y. f x y \\<or> x = y) xm ym\"\n      and \"fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\""], ["proof (prove)\nusing this:\n  subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. fmrel (\\<lambda>x y. f x y \\<or> x = y) xm ym &&&\n    fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm", "by (metis (mono_tags, lifting) fmrel_code fmrel_on_fset_alt_def)+"], ["proof (state)\nthis:\n  fmrel (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "thus \"fmlookup xm x = fmlookup ym x\""], ["proof (prove)\nusing this:\n  fmrel (\\<lambda>x y. f x y \\<or> x = y) xm ym\n  fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmlookup xm x = fmlookup ym x", "apply (erule_tac ?x=\"x\" in fmrel_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym\n              xm;\n     fmlookup xm x = None; fmlookup ym x = None\\<rbrakk>\n    \\<Longrightarrow> fmlookup xm x = fmlookup ym x\n 2. \\<And>a b.\n       \\<lbrakk>fmrel (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y)\n                 ym xm;\n        fmlookup xm x = Some a; fmlookup ym x = Some b;\n        f a b \\<or> a = b\\<rbrakk>\n       \\<Longrightarrow> fmlookup xm x = fmlookup ym x", "by (erule_tac ?x=\"x\" in fmrel_cases, auto)+"], ["proof (state)\nthis:\n  fmlookup xm x = fmlookup ym x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_subtuple_antisym:\n  \"strict_subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y) ym xm \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_subtuple (\\<lambda>x y. f x y \\<or> x = y) xm ym;\n     strict_subtuple (\\<lambda>x y. f x y \\<and> \\<not> f y x \\<or> x = y)\n      ym xm\\<rbrakk>\n    \\<Longrightarrow> False", "by (auto simp add: subtuple_antisym)"], ["", "lemma subtuple_acyclic:\n  assumes \"acyclicP_on (fmran' xm) P\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\"\n  shows \"xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xm = ym", "proof (rule fmap_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from assms"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' xm) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm", "have fmdom_eq: \"fmdom xm = fmdom ym\""], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' xm) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "using subtuple_fmdom"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' xm) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n  \\<lbrakk>subtuple ?f ?xm ?ym; subtuple ?g ?ym ?xm\\<rbrakk>\n  \\<Longrightarrow> fmdom ?xm = fmdom ?ym\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "by blast"], ["proof (state)\nthis:\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "have \"\\<And>x a b. acyclicP_on (fmran' xm) P \\<Longrightarrow>\n     fmlookup xm x = Some a \\<Longrightarrow>\n     fmlookup ym x = Some b \\<Longrightarrow>\n    P\\<^sup>*\\<^sup>* a b \\<Longrightarrow> P b a \\<or> a = b \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm x = Some a;\n        fmlookup ym x = Some b; P\\<^sup>*\\<^sup>* a b;\n        P b a \\<or> a = b\\<rbrakk>\n       \\<Longrightarrow> a = b", "by (meson Nitpick.tranclp_unfold fmran'I rtranclp_into_tranclp1)"], ["proof (state)\nthis:\n  \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from fmdom_eq assms(2)"], ["proof (chain)\npicking this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym", "have \"fmrel P\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. fmrel P\\<^sup>*\\<^sup>* xm ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+\n   (fmrestrict_fset (fmdom ym) xm) (fmrestrict_fset (fmdom ym) ym)\n\ngoal (1 subgoal):\n 1. fmrel P\\<^sup>*\\<^sup>* xm ym", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom xm = fmdom ym;\n     fmrel P\\<^sup>*\\<^sup>* (fmrestrict_fset (fmdom ym) xm) ym\\<rbrakk>\n    \\<Longrightarrow> fmrel P\\<^sup>*\\<^sup>* xm ym", "by (metis fmrestrict_fset_dom)"], ["proof (state)\nthis:\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "moreover"], ["proof (state)\nthis:\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from fmdom_eq assms(3)"], ["proof (chain)\npicking this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm", "have \"fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\""], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) (fmrestrict_fset (fmdom xm) ym)\n   (fmrestrict_fset (fmdom xm) xm)\n\ngoal (1 subgoal):\n 1. fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom xm = fmdom ym;\n     fmrel (\\<lambda>x y. P x y \\<or> x = y) ym\n      (fmrestrict_fset (fmdom ym) xm)\\<rbrakk>\n    \\<Longrightarrow> fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "by (metis fmrestrict_fset_dom)"], ["proof (state)\nthis:\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "show \"fmlookup xm x = fmlookup ym x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmlookup xm x = fmlookup ym x", "apply (erule_tac ?x=\"x\" in fmrel_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x a b.\n                \\<lbrakk>acyclicP_on (fmran' xm) P; fmlookup xm x = Some a;\n                 fmlookup ym x = Some b; P\\<^sup>*\\<^sup>* a b;\n                 P b a \\<or> a = b\\<rbrakk>\n                \\<Longrightarrow> a = b;\n     fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm; fmlookup xm x = None;\n     fmlookup ym x = None\\<rbrakk>\n    \\<Longrightarrow> fmlookup xm x = fmlookup ym x\n 2. \\<And>a b.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' xm) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm;\n        fmlookup xm x = Some a; fmlookup ym x = Some b;\n        P\\<^sup>*\\<^sup>* a b\\<rbrakk>\n       \\<Longrightarrow> fmlookup xm x = fmlookup ym x", "apply (erule_tac ?x=\"x\" in fmrel_cases, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' xm) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        ba = a; aa = b; P\\<^sup>*\\<^sup>* a b; fmlookup ym x = Some b;\n        fmlookup xm x = Some a; P b a \\<or> b = a\\<rbrakk>\n       \\<Longrightarrow> a = b", "using assms(1)"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' xm) P\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' xm) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        ba = a; aa = b; P\\<^sup>*\\<^sup>* a b; fmlookup ym x = Some b;\n        fmlookup xm x = Some a; P b a \\<or> b = a\\<rbrakk>\n       \\<Longrightarrow> a = b", "by blast"], ["proof (state)\nthis:\n  fmlookup xm x = fmlookup ym x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtuple_acyclic':\n  assumes \"acyclicP_on (fmran' ym) P\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\"\n  shows \"xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xm = ym", "proof (rule fmap_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from assms"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' ym) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm", "have fmdom_eq: \"fmdom xm = fmdom ym\""], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "using subtuple_fmdom"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) P\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n  \\<lbrakk>subtuple ?f ?xm ?ym; subtuple ?g ?ym ?xm\\<rbrakk>\n  \\<Longrightarrow> fmdom ?xm = fmdom ?ym\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "by blast"], ["proof (state)\nthis:\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "have \"\\<And>x a b. acyclicP_on (fmran' ym) P \\<Longrightarrow>\n     fmlookup xm x = Some a \\<Longrightarrow>\n     fmlookup ym x = Some b \\<Longrightarrow>\n    P\\<^sup>*\\<^sup>* a b \\<Longrightarrow> P b a \\<or> a = b \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm x = Some a;\n        fmlookup ym x = Some b; P\\<^sup>*\\<^sup>* a b;\n        P b a \\<or> a = b\\<rbrakk>\n       \\<Longrightarrow> a = b", "by (meson Nitpick.tranclp_unfold fmran'I rtranclp_into_tranclp2)"], ["proof (state)\nthis:\n  \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from fmdom_eq assms(2)"], ["proof (chain)\npicking this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym", "have \"fmrel P\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. fmrel P\\<^sup>*\\<^sup>* xm ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+\n   (fmrestrict_fset (fmdom ym) xm) (fmrestrict_fset (fmdom ym) ym)\n\ngoal (1 subgoal):\n 1. fmrel P\\<^sup>*\\<^sup>* xm ym", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom xm = fmdom ym;\n     fmrel P\\<^sup>*\\<^sup>* (fmrestrict_fset (fmdom ym) xm) ym\\<rbrakk>\n    \\<Longrightarrow> fmrel P\\<^sup>*\\<^sup>* xm ym", "by (metis fmrestrict_fset_dom)"], ["proof (state)\nthis:\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "moreover"], ["proof (state)\nthis:\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "from fmdom_eq assms(3)"], ["proof (chain)\npicking this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm", "have \"fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\""], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  subtuple (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\nusing this:\n  fmdom xm = fmdom ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) (fmrestrict_fset (fmdom xm) ym)\n   (fmrestrict_fset (fmdom xm) xm)\n\ngoal (1 subgoal):\n 1. fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom xm = fmdom ym;\n     fmrel (\\<lambda>x y. P x y \\<or> x = y) ym\n      (fmrestrict_fset (fmdom ym) xm)\\<rbrakk>\n    \\<Longrightarrow> fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "by (metis fmrestrict_fset_dom)"], ["proof (state)\nthis:\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. \\<And>x. fmlookup xm x = fmlookup ym x", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm", "show \"fmlookup xm x = fmlookup ym x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm ?x = Some ?a;\n   fmlookup ym ?x = Some ?b; P\\<^sup>*\\<^sup>* ?a ?b;\n   P ?b ?a \\<or> ?a = ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n  fmrel P\\<^sup>*\\<^sup>* xm ym\n  fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm\n\ngoal (1 subgoal):\n 1. fmlookup xm x = fmlookup ym x", "apply (erule_tac ?x=\"x\" in fmrel_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x a b.\n                \\<lbrakk>acyclicP_on (fmran' ym) P; fmlookup xm x = Some a;\n                 fmlookup ym x = Some b; P\\<^sup>*\\<^sup>* a b;\n                 P b a \\<or> a = b\\<rbrakk>\n                \\<Longrightarrow> a = b;\n     fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm; fmlookup xm x = None;\n     fmlookup ym x = None\\<rbrakk>\n    \\<Longrightarrow> fmlookup xm x = fmlookup ym x\n 2. \\<And>a b.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' ym) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        fmrel (\\<lambda>x y. P x y \\<or> x = y) ym xm;\n        fmlookup xm x = Some a; fmlookup ym x = Some b;\n        P\\<^sup>*\\<^sup>* a b\\<rbrakk>\n       \\<Longrightarrow> fmlookup xm x = fmlookup ym x", "apply (erule_tac ?x=\"x\" in fmrel_cases, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' ym) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        ba = a; aa = b; P\\<^sup>*\\<^sup>* a b; fmlookup ym x = Some b;\n        fmlookup xm x = Some a; P b a \\<or> b = a\\<rbrakk>\n       \\<Longrightarrow> a = b", "using assms(1)"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) P\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>x a b.\n                   \\<lbrakk>acyclicP_on (fmran' ym) P;\n                    fmlookup xm x = Some a; fmlookup ym x = Some b;\n                    P\\<^sup>*\\<^sup>* a b; P b a \\<or> a = b\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        ba = a; aa = b; P\\<^sup>*\\<^sup>* a b; fmlookup ym x = Some b;\n        fmlookup xm x = Some a; P b a \\<or> b = a\\<rbrakk>\n       \\<Longrightarrow> a = b", "by blast"], ["proof (state)\nthis:\n  fmlookup xm x = fmlookup ym x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtuple_acyclic'':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   subtuple R\\<^sup>*\\<^sup>* xm ym \\<Longrightarrow>\n   subtuple R ym xm \\<Longrightarrow>\n   xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' ym) R; subtuple R\\<^sup>*\\<^sup>* xm ym;\n     subtuple R ym xm\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "by (metis (no_types, lifting) subtuple_acyclic' subtuple_mono tranclp_eq_rtranclp)"], ["", "lemma strict_subtuple_trans:\n  \"acyclicP_on (fmran' xm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' xm) P;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm\n      ym;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple\n                       (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm\n                       zm", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>acyclicP_on (fmran' xm) P; subtuple P\\<^sup>*\\<^sup>* xm ym;\n     xm \\<noteq> ym; subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm;\n     ym \\<noteq> zm\\<rbrakk>\n    \\<Longrightarrow> subtuple P\\<^sup>*\\<^sup>* xm zm\n 2. \\<lbrakk>acyclicP_on (fmran' zm) P; subtuple P\\<^sup>*\\<^sup>* zm ym;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm; ym \\<noteq> zm;\n     xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule fmrel_on_fset_trans, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P; subtuple P\\<^sup>*\\<^sup>* zm ym;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) ym zm; ym \\<noteq> zm;\n     xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "by (drule_tac ?ym=\"ym\" in subtuple_acyclic; auto)"], ["", "lemma strict_subtuple_trans':\n  \"acyclicP_on (fmran' zm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ ym\n      zm\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple\n                       (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>+\\<^sup>+ xm\n                       zm", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym; xm \\<noteq> ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm\\<rbrakk>\n    \\<Longrightarrow> subtuple P\\<^sup>*\\<^sup>* xm zm\n 2. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) zm ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule fmrel_on_fset_trans, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) zm ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "by (drule_tac ?xm=\"ym\" in subtuple_acyclic'; auto)"], ["", "lemma strict_subtuple_trans'':\n  \"acyclicP_on (fmran' zm) R \\<Longrightarrow>\n   strict_subtuple R xm ym \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* ym zm \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) R; strict_subtuple R xm ym;\n     strict_subtuple R\\<^sup>*\\<^sup>* ym zm\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* xm zm", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) R; subtuple R xm ym; xm \\<noteq> ym;\n     subtuple R\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm\\<rbrakk>\n    \\<Longrightarrow> subtuple R\\<^sup>*\\<^sup>* xm zm\n 2. \\<lbrakk>acyclicP_on (fmran' zm) R; subtuple R zm ym;\n     subtuple R\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule fmrel_on_fset_trans, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) R; subtuple R zm ym;\n     subtuple R\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "by (drule_tac ?xm=\"ym\" in subtuple_acyclic''; auto)"], ["", "lemma strict_subtuple_trans''':\n  \"acyclicP_on (fmran' zm) P \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* ym zm \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym;\n     strict_subtuple (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* ym\n      zm\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple\n                       (\\<lambda>x y. P x y \\<or> x = y)\\<^sup>*\\<^sup>* xm\n                       zm", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) xm ym; xm \\<noteq> ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm\\<rbrakk>\n    \\<Longrightarrow> subtuple P\\<^sup>*\\<^sup>* xm zm\n 2. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) zm ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule fmrel_on_fset_trans, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' zm) P;\n     subtuple (\\<lambda>x y. P x y \\<or> x = y) zm ym;\n     subtuple P\\<^sup>*\\<^sup>* ym zm; ym \\<noteq> zm; xm = zm\\<rbrakk>\n    \\<Longrightarrow> False", "by (drule_tac ?xm=\"ym\" in subtuple_acyclic'; auto)"], ["", "lemma subtuple_fmmerge2 [intro]:\n  \"(\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y)) \\<Longrightarrow>\n   subtuple f xm (fmmerge g xm ym)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x \\<in> fmran' xm \\<Longrightarrow> f x (g x y)) \\<Longrightarrow>\n    subtuple f xm (fmmerge g xm ym)", "by (rule_tac ?S=\"fmdom ym\" in fmrel_on_fsubset; auto)"], ["", "(*** Transitive Closures ****************************************************)"], ["", "subsection \\<open>Transitive Closures\\<close>"], ["", "lemma trancl_to_subtuple:\n  \"(subtuple r)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   subtuple r\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subtuple r)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n    subtuple r\\<^sup>+\\<^sup>+ xm ym", "apply (induct rule: tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       subtuple r xm y \\<Longrightarrow> subtuple r\\<^sup>+\\<^sup>+ xm y\n 2. \\<And>y z.\n       \\<lbrakk>(subtuple r)\\<^sup>+\\<^sup>+ xm y; subtuple r y z;\n        subtuple r\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> subtuple r\\<^sup>+\\<^sup>+ xm z", "apply (metis subtuple_mono tranclp.r_into_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(subtuple r)\\<^sup>+\\<^sup>+ xm y; subtuple r y z;\n        subtuple r\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> subtuple r\\<^sup>+\\<^sup>+ xm z", "by (rule fmrel_on_fset_trans; auto)"], ["", "lemma rtrancl_to_subtuple:\n  \"(subtuple r)\\<^sup>*\\<^sup>* xm ym \\<Longrightarrow>\n   subtuple r\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subtuple r)\\<^sup>*\\<^sup>* xm ym \\<Longrightarrow>\n    subtuple r\\<^sup>*\\<^sup>* xm ym", "apply (induct rule: rtranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. subtuple r\\<^sup>*\\<^sup>* xm xm\n 2. \\<And>y z.\n       \\<lbrakk>(subtuple r)\\<^sup>*\\<^sup>* xm y; subtuple r y z;\n        subtuple r\\<^sup>*\\<^sup>* xm y\\<rbrakk>\n       \\<Longrightarrow> subtuple r\\<^sup>*\\<^sup>* xm z", "apply (simp add: fmap.rel_refl_strong fmrel_to_subtuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(subtuple r)\\<^sup>*\\<^sup>* xm y; subtuple r y z;\n        subtuple r\\<^sup>*\\<^sup>* xm y\\<rbrakk>\n       \\<Longrightarrow> subtuple r\\<^sup>*\\<^sup>* xm z", "by (rule fmrel_on_fset_trans; auto)"], ["", "lemma fmrel_to_subtuple_trancl:\n  \"reflp r \\<Longrightarrow>\n   (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym \\<Longrightarrow>\n   (subtuple r)\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reflp r;\n     (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym\\<rbrakk>\n    \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm ym", "apply (frule trancl_to_fmrel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reflp r;\n     (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n     fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym\\<rbrakk>\n    \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm ym", "apply (rule_tac ?r=\"r\" in fmrel_tranclp_induct, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>reflp r;\n        (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        fmrel r (fmrestrict_fset (fmdom ym) xm) y\\<rbrakk>\n       \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm y\n 2. \\<And>y z.\n       \\<lbrakk>reflp r;\n        (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) y;\n        fmrel r y z; (subtuple r)\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm z", "apply (metis (no_types, lifting) fmrel_fmdom_eq\n          subtuple_eq_fmrel_fmrestrict_fset tranclp.r_into_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>reflp r;\n        (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) ym;\n        (fmrel r)\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm) y;\n        fmrel r y z; (subtuple r)\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm z", "by (meson fmrel_to_subtuple tranclp.simps)"], ["", "lemma subtuple_to_trancl:\n  \"reflp r \\<Longrightarrow>\n   subtuple r\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   (subtuple r)\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reflp r; subtuple r\\<^sup>+\\<^sup>+ xm ym\\<rbrakk>\n    \\<Longrightarrow> (subtuple r)\\<^sup>+\\<^sup>+ xm ym", "apply (rule fmrel_to_subtuple_trancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>reflp r; subtuple r\\<^sup>+\\<^sup>+ xm ym\\<rbrakk>\n    \\<Longrightarrow> reflp r\n 2. \\<lbrakk>reflp r; subtuple r\\<^sup>+\\<^sup>+ xm ym\\<rbrakk>\n    \\<Longrightarrow> (fmrel r)\\<^sup>+\\<^sup>+\n                       (fmrestrict_fset (fmdom ym) xm) ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>reflp r;\n     fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm)\n      (fmrestrict_fset (fmdom ym) ym)\\<rbrakk>\n    \\<Longrightarrow> reflp r\n 2. \\<lbrakk>reflp r;\n     fmrel r\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm)\n      (fmrestrict_fset (fmdom ym) ym)\\<rbrakk>\n    \\<Longrightarrow> (fmrel r)\\<^sup>+\\<^sup>+\n                       (fmrestrict_fset (fmdom ym) xm) ym", "by (simp_all add: fmrel_to_trancl)"], ["", "lemma trancl_to_strict_subtuple:\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   (strict_subtuple R)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple R\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' ym) R;\n     (strict_subtuple R)\\<^sup>+\\<^sup>+ xm ym\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "apply (erule converse_tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>acyclicP_on (fmran' ym) R; strict_subtuple R y ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* y ym\n 2. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R; strict_subtuple R y z;\n        (strict_subtuple R)\\<^sup>+\\<^sup>+ z ym;\n        strict_subtuple R\\<^sup>*\\<^sup>* z ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* y ym", "apply (metis r_into_rtranclp strict_subtuple_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R; strict_subtuple R y z;\n        (strict_subtuple R)\\<^sup>+\\<^sup>+ z ym;\n        strict_subtuple R\\<^sup>*\\<^sup>* z ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* y ym", "using strict_subtuple_trans''"], ["proof (prove)\nusing this:\n  \\<lbrakk>acyclicP_on (fmran' ?zm) ?R; strict_subtuple ?R ?xm ?ym;\n   strict_subtuple ?R\\<^sup>*\\<^sup>* ?ym ?zm\\<rbrakk>\n  \\<Longrightarrow> strict_subtuple ?R\\<^sup>*\\<^sup>* ?xm ?zm\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R; strict_subtuple R y z;\n        (strict_subtuple R)\\<^sup>+\\<^sup>+ z ym;\n        strict_subtuple R\\<^sup>*\\<^sup>* z ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple R\\<^sup>*\\<^sup>* y ym", "by blast"], ["", "lemma trancl_to_strict_subtuple':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' ym) R;\n     (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm\n      ym\\<rbrakk>\n    \\<Longrightarrow> strict_subtuple\n                       (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm\n                       ym", "apply (erule converse_tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>acyclicP_on (fmran' ym) R;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) y ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple\n                          (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>*\n                          y ym\n 2. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) y z;\n        (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+\n         z ym;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* z\n         ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple\n                          (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>*\n                          y ym", "apply (metis (no_types, lifting) r_into_rtranclp strict_subtuple_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) y z;\n        (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+\n         z ym;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* z\n         ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple\n                          (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>*\n                          y ym", "using strict_subtuple_trans'''"], ["proof (prove)\nusing this:\n  \\<lbrakk>acyclicP_on (fmran' ?zm) ?P;\n   strict_subtuple (\\<lambda>x y. ?P x y \\<or> x = y) ?xm ?ym;\n   strict_subtuple (\\<lambda>x y. ?P x y \\<or> x = y)\\<^sup>*\\<^sup>* ?ym\n    ?zm\\<rbrakk>\n  \\<Longrightarrow> strict_subtuple\n                     (\\<lambda>x y. ?P x y \\<or> x = y)\\<^sup>*\\<^sup>* ?xm\n                     ?zm\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>acyclicP_on (fmran' ym) R;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) y z;\n        (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+\n         z ym;\n        strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* z\n         ym\\<rbrakk>\n       \\<Longrightarrow> strict_subtuple\n                          (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>*\n                          y ym", "by blast"], ["", "lemma subtuple_rtranclp_intro:\n  assumes \"\\<And>xm ym. R (f xm) (f ym) \\<Longrightarrow> subtuple R xm ym\"\n      and \"bij_on_trancl R f\"\n      and \"R\\<^sup>*\\<^sup>* (f xm) (f ym)\"\n    shows \"subtuple R\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "have \"(\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm ym", "apply (insert assms(2) assms(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_on_trancl R f; R\\<^sup>*\\<^sup>* (f xm) (f ym)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm\n                       ym", "by (rule reflect_rtranclp; auto)"], ["proof (state)\nthis:\n  (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "with assms(1)"], ["proof (chain)\npicking this:\n  R (f ?xm) (f ?ym) \\<Longrightarrow> subtuple R ?xm ?ym\n  (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm ym", "have \"(subtuple R)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  R (f ?xm) (f ?ym) \\<Longrightarrow> subtuple R ?xm ?ym\n  (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (subtuple R)\\<^sup>*\\<^sup>* xm ym", "by (metis (mono_tags, lifting) mono_rtranclp)"], ["proof (state)\nthis:\n  (subtuple R)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "hence \"subtuple R\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  (subtuple R)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "by (rule rtrancl_to_subtuple)"], ["proof (state)\nthis:\n  subtuple R\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "thus ?thesis"], ["proof (prove)\nusing this:\n  subtuple R\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. subtuple R\\<^sup>*\\<^sup>* xm ym", "by simp"], ["proof (state)\nthis:\n  subtuple R\\<^sup>*\\<^sup>* xm ym\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_subtuple_rtranclp_intro:\n  assumes \"\\<And>xm ym. R (f xm) (f ym) \\<Longrightarrow>\n           strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) xm ym\"\n      and \"bij_on_trancl R f\"\n      and \"acyclicP_on (fmran' ym) R\"\n      and \"R\\<^sup>+\\<^sup>+ (f xm) (f ym)\"\n    shows \"strict_subtuple R\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "have \"(\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>+\\<^sup>+ xm ym", "apply (insert assms(1) assms(2) assms(4))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xm ym.\n                R (f xm) (f ym) \\<Longrightarrow>\n                strict_subtuple (\\<lambda>x y. R x y \\<or> x = y) xm ym;\n     bij_on_trancl R f; R\\<^sup>+\\<^sup>+ (f xm) (f ym)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>+\\<^sup>+ xm\n                       ym", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "hence \"(strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\nusing this:\n  (\\<lambda>xm ym. R (f xm) (f ym))\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm\n     ym", "by (rule tranclp_trans_induct;\n        auto simp add: assms(1) tranclp.r_into_trancl)"], ["proof (state)\nthis:\n  (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "with assms(3)"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' ym) R\n  (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym", "have \"strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) R\n  (strict_subtuple (\\<lambda>x y. R x y \\<or> x = y))\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym", "by (rule trancl_to_strict_subtuple')"], ["proof (state)\nthis:\n  strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "thus ?thesis"], ["proof (prove)\nusing this:\n  strict_subtuple (\\<lambda>x y. R x y \\<or> x = y)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. strict_subtuple R\\<^sup>*\\<^sup>* xm ym", "by simp"], ["proof (state)\nthis:\n  strict_subtuple R\\<^sup>*\\<^sup>* xm ym\n\ngoal:\nNo subgoals!", "qed"], ["", "(*** Code Setup *************************************************************)"], ["", "subsection \\<open>Code Setup\\<close>"], ["", "abbreviation \"subtuple_fun f xm ym \\<equiv>\n  fBall (fmdom ym) (\\<lambda>x. rel_option f (fmlookup xm x) (fmlookup ym x))\""], ["", "abbreviation \"strict_subtuple_fun f xm ym \\<equiv>\n  subtuple_fun f xm ym \\<and> xm \\<noteq> ym\""], ["", "lemma subtuple_fun_simp [code_abbrev, simp]:\n  \"subtuple_fun f xm ym = subtuple f xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtuple_fun f xm ym = subtuple f xm ym", "by (simp add: fmrel_on_fset_alt_def)"], ["", "lemma strict_subtuple_fun_simp [code_abbrev, simp]:\n  \"strict_subtuple_fun f xm ym = strict_subtuple f xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_subtuple_fun f xm ym = strict_subtuple f xm ym", "by simp"], ["", "end"]]}