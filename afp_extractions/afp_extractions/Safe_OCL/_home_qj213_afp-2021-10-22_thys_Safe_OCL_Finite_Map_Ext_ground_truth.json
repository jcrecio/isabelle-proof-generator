{"file_name": "/home/qj213/afp-2021-10-22/thys/Safe_OCL/Finite_Map_Ext.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Safe_OCL", "problem_names": ["lemma fmrel_on_fset_fmdom:\n  \"fmrel_on_fset (fmdom ym) f xm ym \\<Longrightarrow>\n   k |\\<in>| fmdom ym \\<Longrightarrow>\n   k |\\<in>| fmdom xm\"", "lemma fmdom_fmmerge [simp]:\n  \"fmdom (fmmerge g xm ym) = fmdom xm |\\<inter>| fmdom ym\"", "lemma fmmerge_commut:\n  assumes \"\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x y = f y x\"\n  shows \"fmmerge f xm ym = fmmerge f ym xm\"", "lemma fmrel_on_fset_fmmerge1 [intro]:\n  assumes \"\\<And>x y z. z \\<in> fmran' zm \\<Longrightarrow> f x z \\<Longrightarrow> f y z \\<Longrightarrow> f (g x y) z\"\n  assumes \"fmrel_on_fset (fmdom zm) f xm zm\"\n  assumes \"fmrel_on_fset (fmdom zm) f ym zm\"\n  shows \"fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm\"", "lemma fmrel_on_fset_fmmerge2 [intro]:\n  assumes \"\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y)\"\n  shows \"fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)\"", "lemma fmrel_acyclic:\n  \"acyclicP_on (fmran' xm) R \\<Longrightarrow>\n   fmrel R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel R ym xm \\<Longrightarrow>\n   xm = ym\"", "lemma fmrel_acyclic':\n  assumes \"acyclicP_on (fmran' ym) R\"\n  assumes \"fmrel R\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"fmrel R ym xm\"\n  shows \"xm = ym\"", "lemma fmrel_on_fset_acyclic:\n  \"acyclicP_on (fmran' xm) R \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom xm) R ym xm \\<Longrightarrow>\n   xm = ym\"", "lemma fmrel_on_fset_acyclic':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom xm) R ym xm \\<Longrightarrow>\n   xm = ym\"", "lemma fmrel_trans:\n  \"(\\<And>x y z. x \\<in> fmran' xm \\<Longrightarrow> P x y \\<Longrightarrow> Q y z \\<Longrightarrow> R x z) \\<Longrightarrow>\n   fmrel P xm ym \\<Longrightarrow> fmrel Q ym zm \\<Longrightarrow> fmrel R xm zm\"", "lemma fmrel_on_fset_trans:\n  \"(\\<And>x y z. x \\<in> fmran' xm \\<Longrightarrow> P x y \\<Longrightarrow> Q y z \\<Longrightarrow> R x z) \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) P xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom zm) Q ym zm \\<Longrightarrow>\n   fmrel_on_fset (fmdom zm) R xm zm\"", "lemma trancl_to_fmrel:\n  \"(fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow> fmrel f\\<^sup>+\\<^sup>+ xm ym\"", "lemma fmrel_trancl_fmdom_eq:\n  \"(fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow> fmdom xm = fmdom ym\"", "lemma fmupd_fmdrop:\n  \"fmlookup xm k = Some x \\<Longrightarrow>\n   xm = fmupd k x (fmdrop k xm)\"", "lemma fmap_eqdom_Cons1:\n  assumes \"fmlookup xm i = None\"\n      and \"fmdom (fmupd i x xm) = fmdom ym\"\n      and \"fmrel R (fmupd i x xm) ym\"\n    shows \"(\\<exists>z zm. fmlookup zm i = None \\<and> ym = (fmupd i z zm) \\<and>\n                   R x z \\<and> fmrel R xm zm)\"", "lemma fmap_eqdom_induct [consumes 2, case_names nil step]:\n  assumes R: \"fmrel R xm ym\"\n    and dom_eq: \"fmdom xm = fmdom ym\"\n    and nil: \"P (fmap_of_list []) (fmap_of_list [])\"\n    and step:\n    \"\\<And>x xm y ym i.\n    \\<lbrakk>R x y; fmrel R xm ym; fmdom xm = fmdom ym; P xm ym\\<rbrakk> \\<Longrightarrow>\n    P (fmupd i x xm) (fmupd i y ym)\"\n  shows \"P xm ym\"", "lemma fmrel_to_rtrancl:\n  assumes as_r: \"reflp r\"\n      and rel_rpp_xm_ym: \"fmrel r\\<^sup>*\\<^sup>* xm ym\"\n    shows \"(fmrel r)\\<^sup>*\\<^sup>* xm ym\"", "lemma fmrel_to_trancl:\n  assumes \"reflp r\"\n      and \"fmrel r\\<^sup>+\\<^sup>+ xm ym\"\n    shows \"(fmrel r)\\<^sup>+\\<^sup>+ xm ym\"", "lemma fmrel_tranclp_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>y. fmrel r a y \\<Longrightarrow> P y) \\<Longrightarrow>\n   (\\<And>y z. (fmrel r)\\<^sup>+\\<^sup>+ a y \\<Longrightarrow> fmrel r y z \\<Longrightarrow> P y \\<Longrightarrow> P z) \\<Longrightarrow> P b\"", "lemma fmrel_converse_tranclp_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>y. fmrel r y b \\<Longrightarrow> P y) \\<Longrightarrow>\n   (\\<And>y z. fmrel r y z \\<Longrightarrow> fmrel r\\<^sup>+\\<^sup>+ z b \\<Longrightarrow> P z \\<Longrightarrow> P y) \\<Longrightarrow> P a\"", "lemma fmrel_tranclp_trans_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>x y. fmrel r x y \\<Longrightarrow> P x y) \\<Longrightarrow>\n   (\\<And>x y z. fmrel r\\<^sup>+\\<^sup>+ x y \\<Longrightarrow> P x y \\<Longrightarrow> fmrel r\\<^sup>+\\<^sup>+ y z \\<Longrightarrow> P y z \\<Longrightarrow> P x z) \\<Longrightarrow>\n   P a b\"", "lemma ffold_rec_exp:\n  assumes \"k |\\<in>| fmdom x\"\n    and \"ky = (k, the (fmlookup (fmmap f x) k))\"\n  shows \"ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n        tcf ky (ffold tcf 0 ((fset_of_fmap (fmmap f x)) |-| {|ky|}))\"", "lemma elem_le_ffold [intro]:\n  \"k |\\<in>| fmdom x \\<Longrightarrow>\n   f (the (fmlookup x k)) < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))\"", "lemma elem_le_ffold' [intro]:\n  \"z \\<in> fmran' x \\<Longrightarrow>\n   f z < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))\"", "lemma fmmerge_fun_simp [code_abbrev, simp]:\n  \"fmmerge_fun f xm ym = fmmerge f xm ym\""], "translations": [["", "lemma fmrel_on_fset_fmdom:\n  \"fmrel_on_fset (fmdom ym) f xm ym \\<Longrightarrow>\n   k |\\<in>| fmdom ym \\<Longrightarrow>\n   k |\\<in>| fmdom xm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel_on_fset (fmdom ym) f xm ym; k |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> k |\\<in>| fmdom xm", "by (metis fmdom_notD fmdom_notI fmrel_on_fsetD option.rel_sel)"], ["", "(*** Finite Map Merge *******************************************************)"], ["", "subsection \\<open>Merge Operation\\<close>"], ["", "definition \"fmmerge f xm ym \\<equiv>\n  fmap_of_list (map\n    (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n    (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)))\""], ["", "lemma fmdom_fmmerge [simp]:\n  \"fmdom (fmmerge g xm ym) = fmdom xm |\\<inter>| fmdom ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom (fmmerge g xm ym) = fmdom xm |\\<inter>| fmdom ym", "by (auto simp add: fmmerge_def fmdom_of_list)"], ["", "lemma fmmerge_commut:\n  assumes \"\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x y = f y x\"\n  shows \"fmmerge f xm ym = fmmerge f ym xm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmerge f xm ym = fmmerge f ym xm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmmerge f xm ym = fmmerge f ym xm", "obtain zm where zm: \"zm = sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>zm.\n        zm =\n        sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  zm = sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)\n\ngoal (1 subgoal):\n 1. fmmerge f xm ym = fmmerge f ym xm", "with assms"], ["proof (chain)\npicking this:\n  ?x \\<in> fmran' xm \\<Longrightarrow> f ?x ?y = f ?y ?x\n  zm = sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)", "have\n    \"map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k)))) zm =\n     map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k)))) zm\""], ["proof (prove)\nusing this:\n  ?x \\<in> fmran' xm \\<Longrightarrow> f ?x ?y = f ?y ?x\n  zm = sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n     zm =\n    map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k)))) zm", "by (auto) (metis fmdom_notI fmran'I notin_fset option.collapse)"], ["proof (state)\nthis:\n  map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k)))) zm =\n  map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k)))) zm\n\ngoal (1 subgoal):\n 1. fmmerge f xm ym = fmmerge f ym xm", "thus ?thesis"], ["proof (prove)\nusing this:\n  map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k)))) zm =\n  map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k)))) zm\n\ngoal (1 subgoal):\n 1. fmmerge f xm ym = fmmerge f ym xm", "unfolding fmmerge_def zm"], ["proof (prove)\nusing this:\n  map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n   (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)) =\n  map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k))))\n   (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym))\n\ngoal (1 subgoal):\n 1. fmap_of_list\n     (map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n       (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym))) =\n    fmap_of_list\n     (map (\\<lambda>k. (k, f (the (fmlookup ym k)) (the (fmlookup xm k))))\n       (sorted_list_of_fset (fmdom ym |\\<inter>| fmdom xm)))", "by (metis (no_types, lifting) inf_commute)"], ["proof (state)\nthis:\n  fmmerge f xm ym = fmmerge f ym xm\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmrel_on_fset_fmmerge1 [intro]:\n  assumes \"\\<And>x y z. z \\<in> fmran' zm \\<Longrightarrow> f x z \\<Longrightarrow> f y z \\<Longrightarrow> f (g x y) z\"\n  assumes \"fmrel_on_fset (fmdom zm) f xm zm\"\n  assumes \"fmrel_on_fset (fmdom zm) f ym zm\"\n  shows \"fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "fix x a b c"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "assume \"x |\\<in>| fmdom zm\""], ["proof (state)\nthis:\n  x |\\<in>| fmdom zm\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "moreover"], ["proof (state)\nthis:\n  x |\\<in>| fmdom zm\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "hence \"x |\\<in>| fmdom xm |\\<inter>| fmdom ym\""], ["proof (prove)\nusing this:\n  x |\\<in>| fmdom zm\n\ngoal (1 subgoal):\n 1. x |\\<in>| fmdom xm |\\<inter>| fmdom ym", "by (meson assms(2) assms(3) finterI fmrel_on_fset_fmdom)"], ["proof (state)\nthis:\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "moreover"], ["proof (state)\nthis:\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "assume \"fmlookup xm x = Some a\"\n                and \"fmlookup ym x = Some b\"\n                and \"fmlookup zm x = Some c\""], ["proof (state)\nthis:\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "moreover"], ["proof (state)\nthis:\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "from assms calculation"], ["proof (chain)\npicking this:\n  \\<lbrakk>?z \\<in> fmran' zm; f ?x ?z; f ?y ?z\\<rbrakk>\n  \\<Longrightarrow> f (g ?x ?y) ?z\n  fmrel_on_fset (fmdom zm) f xm zm\n  fmrel_on_fset (fmdom zm) f ym zm\n  x |\\<in>| fmdom zm\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c", "have \"f (g a b) c\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?z \\<in> fmran' zm; f ?x ?z; f ?y ?z\\<rbrakk>\n  \\<Longrightarrow> f (g ?x ?y) ?z\n  fmrel_on_fset (fmdom zm) f xm zm\n  fmrel_on_fset (fmdom zm) f ym zm\n  x |\\<in>| fmdom zm\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n\ngoal (1 subgoal):\n 1. f (g a b) c", "by (metis fmran'I fmrel_on_fsetD option.rel_inject(2))"], ["proof (state)\nthis:\n  f (g a b) c\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "ultimately"], ["proof (chain)\npicking this:\n  x |\\<in>| fmdom zm\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n  f (g a b) c", "have\n      \"rel_option f (fmlookup (fmmerge g xm ym) x) (fmlookup zm x)\""], ["proof (prove)\nusing this:\n  x |\\<in>| fmdom zm\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n  f (g a b) c\n\ngoal (1 subgoal):\n 1. rel_option f (fmlookup (fmmerge g xm ym) x) (fmlookup zm x)", "unfolding fmmerge_def fmlookup_of_list"], ["proof (prove)\nusing this:\n  x |\\<in>| fmdom zm\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n  fmlookup zm x = Some c\n  f (g a b) c\n\ngoal (1 subgoal):\n 1. rel_option f\n     (map_of\n       (map (\\<lambda>k. (k, g (the (fmlookup xm k)) (the (fmlookup ym k))))\n         (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)))\n       x)\n     (fmlookup zm x)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| fmdom zm; fmlookup xm x = Some a;\n     fmlookup ym x = Some b; fmlookup zm x = Some c; f (g a b) c;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> rel_option f\n                       (map_of\n                         (map (\\<lambda>k.\n                                  (k, g (the (fmlookup xm k))\n (the (fmlookup ym k))))\n                           (sorted_list_of_fset\n                             (fmdom xm |\\<inter>| fmdom ym)))\n                         x)\n                       (Some c)", "unfolding option_rel_Some2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| fmdom zm; fmlookup xm x = Some a;\n     fmlookup ym x = Some b; fmlookup zm x = Some c; f (g a b) c;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x'.\n                         map_of\n                          (map (\\<lambda>k.\n                                   (k, g (the (fmlookup xm k))\n  (the (fmlookup ym k))))\n                            (sorted_list_of_fset\n                              (fmdom xm |\\<inter>| fmdom ym)))\n                          x =\n                         Some x' \\<and>\n                         f x' c", "apply (rule_tac ?x=\"g a b\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| fmdom zm; fmlookup xm x = Some a;\n     fmlookup ym x = Some b; fmlookup zm x = Some c; f (g a b) c;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>k.\n                                (k, g (the (fmlookup xm k))\n                                     (the (fmlookup ym k))))\n                         (sorted_list_of_fset\n                           (fmdom xm |\\<inter>| fmdom ym)))\n                       x =\n                      Some (g a b) \\<and>\n                      f (g a b) c", "unfolding map_of_map_restrict restrict_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| fmdom zm; fmlookup xm x = Some a;\n     fmlookup ym x = Some b; fmlookup zm x = Some c; f (g a b) c;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> (if x \\<in> set (sorted_list_of_fset\n  (fmdom xm |\\<inter>| fmdom ym))\n                       then (Some \\<circ>\n                             (\\<lambda>k.\n                                 g (the (fmlookup xm k))\n                                  (the (fmlookup ym k))))\n                             x\n                       else None) =\n                      Some (g a b) \\<and>\n                      f (g a b) c", "by (auto simp: fmember.rep_eq)"], ["proof (state)\nthis:\n  rel_option f (fmlookup (fmmerge g xm ym) x) (fmlookup zm x)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 |\\<in>| fmdom zm; fmlookup xm ?x2 = Some ?a2;\n   fmlookup ym ?x2 = Some ?b2; fmlookup zm ?x2 = Some ?c2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup (fmmerge g xm ym) ?x2)\n                     (fmlookup zm ?x2)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "with assms(2) assms(3)"], ["proof (chain)\npicking this:\n  fmrel_on_fset (fmdom zm) f xm zm\n  fmrel_on_fset (fmdom zm) f ym zm\n  \\<lbrakk>?x2 |\\<in>| fmdom zm; fmlookup xm ?x2 = Some ?a2;\n   fmlookup ym ?x2 = Some ?b2; fmlookup zm ?x2 = Some ?c2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup (fmmerge g xm ym) ?x2)\n                     (fmlookup zm ?x2)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrel_on_fset (fmdom zm) f xm zm\n  fmrel_on_fset (fmdom zm) f ym zm\n  \\<lbrakk>?x2 |\\<in>| fmdom zm; fmlookup xm ?x2 = Some ?a2;\n   fmlookup ym ?x2 = Some ?b2; fmlookup zm ?x2 = Some ?c2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup (fmmerge g xm ym) ?x2)\n                     (fmlookup zm ?x2)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm", "by (meson fmdomE fmrel_on_fsetI fmrel_on_fset_fmdom)"], ["proof (state)\nthis:\n  fmrel_on_fset (fmdom zm) f (fmmerge g xm ym) zm\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmrel_on_fset_fmmerge2 [intro]:\n  assumes \"\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y)\"\n  shows \"fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "fix x a b"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "assume \"x |\\<in>| fmdom xm |\\<inter>| fmdom ym\"\n       and \"fmlookup xm x = Some a\"\n       and \"fmlookup ym x = Some b\""], ["proof (state)\nthis:\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "hence \"rel_option f (fmlookup xm x) (fmlookup (fmmerge g xm ym) x)\""], ["proof (prove)\nusing this:\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n\ngoal (1 subgoal):\n 1. rel_option f (fmlookup xm x) (fmlookup (fmmerge g xm ym) x)", "unfolding fmmerge_def fmlookup_of_list"], ["proof (prove)\nusing this:\n  x |\\<in>| fmdom xm |\\<inter>| fmdom ym\n  fmlookup xm x = Some a\n  fmlookup ym x = Some b\n\ngoal (1 subgoal):\n 1. rel_option f (fmlookup xm x)\n     (map_of\n       (map (\\<lambda>k. (k, g (the (fmlookup xm k)) (the (fmlookup ym k))))\n         (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)))\n       x)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup xm x = Some a; fmlookup ym x = Some b;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> rel_option f (Some a)\n                       (map_of\n                         (map (\\<lambda>k.\n                                  (k, g (the (fmlookup xm k))\n (the (fmlookup ym k))))\n                           (sorted_list_of_fset\n                             (fmdom xm |\\<inter>| fmdom ym)))\n                         x)", "unfolding option_rel_Some1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup xm x = Some a; fmlookup ym x = Some b;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y'.\n                         map_of\n                          (map (\\<lambda>k.\n                                   (k, g (the (fmlookup xm k))\n  (the (fmlookup ym k))))\n                            (sorted_list_of_fset\n                              (fmdom xm |\\<inter>| fmdom ym)))\n                          x =\n                         Some y' \\<and>\n                         f a y'", "apply (rule_tac ?x=\"g a b\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup xm x = Some a; fmlookup ym x = Some b;\n     x |\\<in>| fmdom xm; x |\\<in>| fmdom ym\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>k.\n                                (k, g (the (fmlookup xm k))\n                                     (the (fmlookup ym k))))\n                         (sorted_list_of_fset\n                           (fmdom xm |\\<inter>| fmdom ym)))\n                       x =\n                      Some (g a b) \\<and>\n                      f a (g a b)", "by (auto simp add: map_of_map_restrict fmember.rep_eq assms fmran'I)"], ["proof (state)\nthis:\n  rel_option f (fmlookup xm x) (fmlookup (fmmerge g xm ym) x)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 |\\<in>| fmdom xm |\\<inter>| fmdom ym;\n   fmlookup xm ?x2 = Some ?a2; fmlookup ym ?x2 = Some ?b2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup xm ?x2)\n                     (fmlookup (fmmerge g xm ym) ?x2)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "with assms"], ["proof (chain)\npicking this:\n  ?x \\<in> fmran' xm \\<Longrightarrow> f ?x (g ?x ?y)\n  \\<lbrakk>?x2 |\\<in>| fmdom xm |\\<inter>| fmdom ym;\n   fmlookup xm ?x2 = Some ?a2; fmlookup ym ?x2 = Some ?b2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup xm ?x2)\n                     (fmlookup (fmmerge g xm ym) ?x2)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> fmran' xm \\<Longrightarrow> f ?x (g ?x ?y)\n  \\<lbrakk>?x2 |\\<in>| fmdom xm |\\<inter>| fmdom ym;\n   fmlookup xm ?x2 = Some ?a2; fmlookup ym ?x2 = Some ?b2\\<rbrakk>\n  \\<Longrightarrow> rel_option f (fmlookup xm ?x2)\n                     (fmlookup (fmmerge g xm ym) ?x2)\n\ngoal (1 subgoal):\n 1. fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y);\n     \\<And>x a b.\n        \\<lbrakk>x |\\<in>| fmdom xm \\<and> x |\\<in>| fmdom ym;\n         fmlookup xm x = Some a; fmlookup ym x = Some b\\<rbrakk>\n        \\<Longrightarrow> rel_option f (Some a)\n                           (fmlookup (fmmerge g xm ym) x)\\<rbrakk>\n    \\<Longrightarrow> fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)", "apply (rule fmrel_on_fsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y. x \\<in> fmran' xm \\<Longrightarrow> f x (g x y);\n        \\<And>x a b.\n           \\<lbrakk>x |\\<in>| fmdom xm \\<and> x |\\<in>| fmdom ym;\n            fmlookup xm x = Some a; fmlookup ym x = Some b\\<rbrakk>\n           \\<Longrightarrow> rel_option f (Some a)\n                              (fmlookup (fmmerge g xm ym) x);\n        x |\\<in>| fmdom ym\\<rbrakk>\n       \\<Longrightarrow> rel_option f (fmlookup xm x)\n                          (fmlookup (fmmerge g xm ym) x)", "by (metis (full_types) finterD1 fmdomE fmdom_fmmerge fmdom_notD rel_option_None2)"], ["proof (state)\nthis:\n  fmrel_on_fset (fmdom ym) f xm (fmmerge g xm ym)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*** Acyclicity *************************************************************)"], ["", "subsection \\<open>Acyclicity\\<close>"], ["", "abbreviation \"acyclic_on xs r \\<equiv> (\\<forall>x. x \\<in> xs \\<longrightarrow> (x, x) \\<notin> r\\<^sup>+)\""], ["", "abbreviation \"acyclicP_on xs r \\<equiv> acyclic_on xs {(x, y). r x y}\""], ["", "lemma fmrel_acyclic:\n  \"acyclicP_on (fmran' xm) R \\<Longrightarrow>\n   fmrel R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel R ym xm \\<Longrightarrow>\n   xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' xm) R; fmrel R\\<^sup>+\\<^sup>+ xm ym;\n     fmrel R ym xm\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "by (metis (full_types) fmap_ext fmran'I fmrel_cases option.sel\n        tranclp.trancl_into_trancl tranclp_unfold)"], ["", "lemma fmrel_acyclic':\n  assumes \"acyclicP_on (fmran' ym) R\"\n  assumes \"fmrel R\\<^sup>+\\<^sup>+ xm ym\"\n  assumes \"fmrel R ym xm\"\n  shows \"xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xm = ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xm = ym", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. xm = ym", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. xm = ym", "from assms(1)"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' ym) R", "have\n      \"rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm x) (fmlookup ym x) \\<Longrightarrow>\n       rel_option R (fmlookup ym x) (fmlookup xm x) \\<Longrightarrow>\n       rel_option R (fmlookup xm x) (fmlookup ym x)\""], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm x) (fmlookup ym x);\n     rel_option R (fmlookup ym x) (fmlookup xm x)\\<rbrakk>\n    \\<Longrightarrow> rel_option R (fmlookup xm x) (fmlookup ym x)", "by (metis (full_types) fmdom'_notD fmlookup_dom'_iff\n            fmran'I option.rel_sel option.sel\n            tranclp_into_tranclp2 tranclp_unfold)"], ["proof (state)\nthis:\n  \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm x) (fmlookup ym x);\n   rel_option R (fmlookup ym x) (fmlookup xm x)\\<rbrakk>\n  \\<Longrightarrow> rel_option R (fmlookup xm x) (fmlookup ym x)\n\ngoal (1 subgoal):\n 1. xm = ym", "}"], ["proof (state)\nthis:\n  \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm ?x2) (fmlookup ym ?x2);\n   rel_option R (fmlookup ym ?x2) (fmlookup xm ?x2)\\<rbrakk>\n  \\<Longrightarrow> rel_option R (fmlookup xm ?x2) (fmlookup ym ?x2)\n\ngoal (1 subgoal):\n 1. xm = ym", "with assms"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' ym) R\n  fmrel R\\<^sup>+\\<^sup>+ xm ym\n  fmrel R ym xm\n  \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm ?x2) (fmlookup ym ?x2);\n   rel_option R (fmlookup ym ?x2) (fmlookup xm ?x2)\\<rbrakk>\n  \\<Longrightarrow> rel_option R (fmlookup xm ?x2) (fmlookup ym ?x2)", "show ?thesis"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) R\n  fmrel R\\<^sup>+\\<^sup>+ xm ym\n  fmrel R ym xm\n  \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm ?x2) (fmlookup ym ?x2);\n   rel_option R (fmlookup ym ?x2) (fmlookup xm ?x2)\\<rbrakk>\n  \\<Longrightarrow> rel_option R (fmlookup xm ?x2) (fmlookup ym ?x2)\n\ngoal (1 subgoal):\n 1. xm = ym", "unfolding fmrel_iff"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' ym) R\n  \\<forall>x. rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm x) (fmlookup ym x)\n  \\<forall>x. rel_option R (fmlookup ym x) (fmlookup xm x)\n  \\<lbrakk>rel_option R\\<^sup>+\\<^sup>+ (fmlookup xm ?x2) (fmlookup ym ?x2);\n   rel_option R (fmlookup ym ?x2) (fmlookup xm ?x2)\\<rbrakk>\n  \\<Longrightarrow> rel_option R (fmlookup xm ?x2) (fmlookup ym ?x2)\n\ngoal (1 subgoal):\n 1. xm = ym", "by (metis fmap.rel_mono_strong fmrelI fmrel_acyclic tranclp.simps)"], ["proof (state)\nthis:\n  xm = ym\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmrel_on_fset_acyclic:\n  \"acyclicP_on (fmran' xm) R \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom xm) R ym xm \\<Longrightarrow>\n   xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' xm) R;\n     fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym;\n     fmrel_on_fset (fmdom xm) R ym xm\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' xm) R;\n     fmrel R\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm)\n      (fmrestrict_fset (fmdom ym) ym);\n     fmrel R (fmrestrict_fset (fmdom xm) ym)\n      (fmrestrict_fset (fmdom xm) xm)\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "by (metis (no_types, lifting) fmdom_filter fmfilter_alt_defs(5)\n        fmfilter_cong fmlookup_filter fmrel_acyclic fmrel_fmdom_eq\n        fmrestrict_fset_dom option.simps(3))"], ["", "lemma fmrel_on_fset_acyclic':\n  \"acyclicP_on (fmran' ym) R \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom xm) R ym xm \\<Longrightarrow>\n   xm = ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' ym) R;\n     fmrel_on_fset (fmdom ym) R\\<^sup>+\\<^sup>+ xm ym;\n     fmrel_on_fset (fmdom xm) R ym xm\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "unfolding fmrel_on_fset_fmrel_restrict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acyclicP_on (fmran' ym) R;\n     fmrel R\\<^sup>+\\<^sup>+ (fmrestrict_fset (fmdom ym) xm)\n      (fmrestrict_fset (fmdom ym) ym);\n     fmrel R (fmrestrict_fset (fmdom xm) ym)\n      (fmrestrict_fset (fmdom xm) xm)\\<rbrakk>\n    \\<Longrightarrow> xm = ym", "by (metis (no_types, lifting) ffmember_filter fmdom_filter\n        fmfilter_alt_defs(5) fmfilter_cong fmrel_acyclic'\n        fmrel_fmdom_eq fmrestrict_fset_dom)"], ["", "(*** Transitive Closures ****************************************************)"], ["", "subsection \\<open>Transitive Closures\\<close>"], ["", "lemma fmrel_trans:\n  \"(\\<And>x y z. x \\<in> fmran' xm \\<Longrightarrow> P x y \\<Longrightarrow> Q y z \\<Longrightarrow> R x z) \\<Longrightarrow>\n   fmrel P xm ym \\<Longrightarrow> fmrel Q ym zm \\<Longrightarrow> fmrel R xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y z.\n                \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                \\<Longrightarrow> R x z;\n     fmrel P xm ym; fmrel Q ym zm\\<rbrakk>\n    \\<Longrightarrow> fmrel R xm zm", "unfolding fmrel_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y z.\n                \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                \\<Longrightarrow> R x z;\n     \\<forall>x. rel_option P (fmlookup xm x) (fmlookup ym x);\n     \\<forall>x. rel_option Q (fmlookup ym x) (fmlookup zm x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         rel_option R (fmlookup xm x) (fmlookup zm x)", "by (metis fmdomE fmdom_notD fmran'I option.rel_inject(2) option.rel_sel)"], ["", "lemma fmrel_on_fset_trans:\n  \"(\\<And>x y z. x \\<in> fmran' xm \\<Longrightarrow> P x y \\<Longrightarrow> Q y z \\<Longrightarrow> R x z) \\<Longrightarrow>\n   fmrel_on_fset (fmdom ym) P xm ym \\<Longrightarrow>\n   fmrel_on_fset (fmdom zm) Q ym zm \\<Longrightarrow>\n   fmrel_on_fset (fmdom zm) R xm zm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y z.\n                \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                \\<Longrightarrow> R x z;\n     fmrel_on_fset (fmdom ym) P xm ym;\n     fmrel_on_fset (fmdom zm) Q ym zm\\<rbrakk>\n    \\<Longrightarrow> fmrel_on_fset (fmdom zm) R xm zm", "apply (rule fmrel_on_fsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y z.\n                   \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                   \\<Longrightarrow> R x z;\n        fmrel_on_fset (fmdom ym) P xm ym; fmrel_on_fset (fmdom zm) Q ym zm;\n        x |\\<in>| fmdom zm\\<rbrakk>\n       \\<Longrightarrow> rel_option R (fmlookup xm x) (fmlookup zm x)", "unfolding option.rel_sel"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y z.\n                   \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                   \\<Longrightarrow> R x z;\n        fmrel_on_fset (fmdom ym) P xm ym; fmrel_on_fset (fmdom zm) Q ym zm;\n        x |\\<in>| fmdom zm\\<rbrakk>\n       \\<Longrightarrow> (fmlookup xm x = None) =\n                         (fmlookup zm x = None) \\<and>\n                         (fmlookup xm x \\<noteq> None \\<longrightarrow>\n                          fmlookup zm x \\<noteq> None \\<longrightarrow>\n                          R (the (fmlookup xm x)) (the (fmlookup zm x)))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x y z.\n                   \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                   \\<Longrightarrow> R x z;\n        fmrel_on_fset (fmdom ym) P xm ym; fmrel_on_fset (fmdom zm) Q ym zm;\n        x |\\<in>| fmdom zm; fmlookup xm x = None\\<rbrakk>\n       \\<Longrightarrow> fmlookup zm x = None\n 2. \\<And>x y ya.\n       \\<lbrakk>\\<And>x y z.\n                   \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                   \\<Longrightarrow> R x z;\n        fmrel_on_fset (fmdom ym) P xm ym; fmrel_on_fset (fmdom zm) Q ym zm;\n        x |\\<in>| fmdom zm; fmlookup xm x = Some y;\n        fmlookup zm x = Some ya\\<rbrakk>\n       \\<Longrightarrow> R y ya", "apply (meson fmdom_notI fmrel_on_fset_fmdom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y ya.\n       \\<lbrakk>\\<And>x y z.\n                   \\<lbrakk>x \\<in> fmran' xm; P x y; Q y z\\<rbrakk>\n                   \\<Longrightarrow> R x z;\n        fmrel_on_fset (fmdom ym) P xm ym; fmrel_on_fset (fmdom zm) Q ym zm;\n        x |\\<in>| fmdom zm; fmlookup xm x = Some y;\n        fmlookup zm x = Some ya\\<rbrakk>\n       \\<Longrightarrow> R y ya", "by (metis fmdom_notI fmran'I fmrel_on_fsetD fmrel_on_fset_fmdom\n            option.rel_sel option.sel)"], ["", "lemma trancl_to_fmrel:\n  \"(fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow> fmrel f\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow>\n    fmrel f\\<^sup>+\\<^sup>+ xm ym", "apply (induct rule: tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y. fmrel f xm y \\<Longrightarrow> fmrel f\\<^sup>+\\<^sup>+ xm y\n 2. \\<And>y z.\n       \\<lbrakk>(fmrel f)\\<^sup>+\\<^sup>+ xm y; fmrel f y z;\n        fmrel f\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> fmrel f\\<^sup>+\\<^sup>+ xm z", "apply (simp add: fmap.rel_mono_strong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(fmrel f)\\<^sup>+\\<^sup>+ xm y; fmrel f y z;\n        fmrel f\\<^sup>+\\<^sup>+ xm y\\<rbrakk>\n       \\<Longrightarrow> fmrel f\\<^sup>+\\<^sup>+ xm z", "by (rule fmrel_trans; auto)"], ["", "lemma fmrel_trancl_fmdom_eq:\n  \"(fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow> fmdom xm = fmdom ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel f)\\<^sup>+\\<^sup>+ xm ym \\<Longrightarrow> fmdom xm = fmdom ym", "by (induct rule: tranclp_induct; simp add: fmrel_fmdom_eq)"], ["", "text \\<open>\n  The proof was derived from the accepted answer on the website\n  Stack Overflow that is available at\n  @{url \"https://stackoverflow.com/a/53585232/632199\"}\n  and provided with the permission of the author of the answer.\\<close>"], ["", "lemma fmupd_fmdrop:\n  \"fmlookup xm k = Some x \\<Longrightarrow>\n   xm = fmupd k x (fmdrop k xm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup xm k = Some x \\<Longrightarrow>\n    xm = fmdrop k xm(k \\<mapsto>\\<^sub>f x)", "apply (rule fmap_ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       fmlookup xm k = Some x \\<Longrightarrow>\n       fmlookup xm xa = fmlookup (fmdrop k xm(k \\<mapsto>\\<^sub>f x)) xa", "unfolding fmlookup_drop fmupd_lookup"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       fmlookup xm k = Some x \\<Longrightarrow>\n       fmlookup xm xa =\n       (if k = xa then Some x\n        else if xa \\<noteq> k then fmlookup xm xa else None)", "by auto"], ["", "lemma fmap_eqdom_Cons1:\n  assumes \"fmlookup xm i = None\"\n      and \"fmdom (fmupd i x xm) = fmdom ym\"\n      and \"fmrel R (fmupd i x xm) ym\"\n    shows \"(\\<exists>z zm. fmlookup zm i = None \\<and> ym = (fmupd i z zm) \\<and>\n                   R x z \\<and> fmrel R xm zm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "from assms(2)"], ["proof (chain)\npicking this:\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym", "obtain y where \"fmlookup ym i = Some y\""], ["proof (prove)\nusing this:\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        fmlookup ym i = Some y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  fmlookup ym i = Some y\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "then"], ["proof (chain)\npicking this:\n  fmlookup ym i = Some y", "obtain z zm where z_zm: \"ym = fmupd i z zm \\<and> fmlookup zm i = None\""], ["proof (prove)\nusing this:\n  fmlookup ym i = Some y\n\ngoal (1 subgoal):\n 1. (\\<And>z zm.\n        ym = zm(i \\<mapsto>\\<^sub>f z) \\<and>\n        fmlookup zm i = None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fmupd_fmdrop"], ["proof (prove)\nusing this:\n  fmlookup ym i = Some y\n  fmlookup ?xm ?k = Some ?x \\<Longrightarrow>\n  ?xm = fmdrop ?k ?xm(?k \\<mapsto>\\<^sub>f ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>z zm.\n        ym = zm(i \\<mapsto>\\<^sub>f z) \\<and>\n        fmlookup zm i = None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> fmlookup zm i = None\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "{"], ["proof (state)\nthis:\n  ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> fmlookup zm i = None\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "assume \"\\<not> R x z\""], ["proof (state)\nthis:\n  \\<not> R x z\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "with z_zm"], ["proof (chain)\npicking this:\n  ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> fmlookup zm i = None\n  \\<not> R x z", "have \"\\<not> fmrel R (fmupd i x xm) ym\""], ["proof (prove)\nusing this:\n  ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> fmlookup zm i = None\n  \\<not> R x z\n\ngoal (1 subgoal):\n 1. \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "by (metis fmrel_iff fmupd_lookup option.simps(11))"], ["proof (state)\nthis:\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "}"], ["proof (state)\nthis:\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "with assms(3)"], ["proof (chain)\npicking this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "moreover"], ["proof (chain)\npicking this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "have \"R x z\""], ["proof (prove)\nusing this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. R x z", "by auto"], ["proof (state)\nthis:\n  R x z\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "{"], ["proof (state)\nthis:\n  R x z\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "assume \"\\<not> fmrel R xm zm\""], ["proof (state)\nthis:\n  \\<not> fmrel R xm zm\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "with assms(1)"], ["proof (chain)\npicking this:\n  fmlookup xm i = None\n  \\<not> fmrel R xm zm", "have \"\\<not> fmrel R (fmupd i x xm) ym\""], ["proof (prove)\nusing this:\n  fmlookup xm i = None\n  \\<not> fmrel R xm zm\n\ngoal (1 subgoal):\n 1. \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "by (metis fmrel_iff fmupd_lookup option.rel_sel z_zm)"], ["proof (state)\nthis:\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "}"], ["proof (state)\nthis:\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "with assms(3)"], ["proof (chain)\npicking this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "moreover"], ["proof (chain)\npicking this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym", "have \"fmrel R xm zm\""], ["proof (prove)\nusing this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal (1 subgoal):\n 1. fmrel R xm zm", "by auto"], ["proof (state)\nthis:\n  fmrel R xm zm\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "ultimately"], ["proof (chain)\npicking this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R xm zm", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R xm zm\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "using z_zm"], ["proof (prove)\nusing this:\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> R x z \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  \\<not> fmrel R xm zm \\<Longrightarrow>\n  \\<not> fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmrel R xm zm\n  ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> fmlookup zm i = None\n\ngoal (1 subgoal):\n 1. \\<exists>z zm.\n       fmlookup zm i = None \\<and>\n       ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm", "by blast"], ["proof (state)\nthis:\n  \\<exists>z zm.\n     fmlookup zm i = None \\<and>\n     ym = zm(i \\<mapsto>\\<^sub>f z) \\<and> R x z \\<and> fmrel R xm zm\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The proof was derived from the accepted answer on the website\n  Stack Overflow that is available at\n  @{url \"https://stackoverflow.com/a/53585232/632199\"}\n  and provided with the permission of the author of the answer.\\<close>"], ["", "lemma fmap_eqdom_induct [consumes 2, case_names nil step]:\n  assumes R: \"fmrel R xm ym\"\n    and dom_eq: \"fmdom xm = fmdom ym\"\n    and nil: \"P (fmap_of_list []) (fmap_of_list [])\"\n    and step:\n    \"\\<And>x xm y ym i.\n    \\<lbrakk>R x y; fmrel R xm ym; fmdom xm = fmdom ym; P xm ym\\<rbrakk> \\<Longrightarrow>\n    P (fmupd i x xm) (fmupd i y ym)\"\n  shows \"P xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P xm ym", "using R dom_eq"], ["proof (prove)\nusing this:\n  fmrel R xm ym\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. P xm ym", "proof (induct xm arbitrary: ym)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ym.\n       \\<lbrakk>fmrel R fmempty ym; fmdom fmempty = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P fmempty ym\n 2. \\<And>x y xm ym.\n       \\<lbrakk>\\<And>ym.\n                   \\<lbrakk>fmrel R xm ym; fmdom xm = fmdom ym\\<rbrakk>\n                   \\<Longrightarrow> P xm ym;\n        fmlookup xm x = None; fmrel R (xm(x \\<mapsto>\\<^sub>f y)) ym;\n        fmdom (xm(x \\<mapsto>\\<^sub>f y)) = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P (xm(x \\<mapsto>\\<^sub>f y)) ym", "case fmempty"], ["proof (state)\nthis:\n  fmrel R fmempty ym\n  fmdom fmempty = fmdom ym\n\ngoal (2 subgoals):\n 1. \\<And>ym.\n       \\<lbrakk>fmrel R fmempty ym; fmdom fmempty = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P fmempty ym\n 2. \\<And>x y xm ym.\n       \\<lbrakk>\\<And>ym.\n                   \\<lbrakk>fmrel R xm ym; fmdom xm = fmdom ym\\<rbrakk>\n                   \\<Longrightarrow> P xm ym;\n        fmlookup xm x = None; fmrel R (xm(x \\<mapsto>\\<^sub>f y)) ym;\n        fmdom (xm(x \\<mapsto>\\<^sub>f y)) = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P (xm(x \\<mapsto>\\<^sub>f y)) ym", "thus ?case"], ["proof (prove)\nusing this:\n  fmrel R fmempty ym\n  fmdom fmempty = fmdom ym\n\ngoal (1 subgoal):\n 1. P fmempty ym", "by (metis fempty_iff fmdom_empty fmempty_of_list fmfilter_alt_defs(5)\n              fmfilter_false fmrestrict_fset_dom local.nil)"], ["proof (state)\nthis:\n  P fmempty ym\n\ngoal (1 subgoal):\n 1. \\<And>x y xm ym.\n       \\<lbrakk>\\<And>ym.\n                   \\<lbrakk>fmrel R xm ym; fmdom xm = fmdom ym\\<rbrakk>\n                   \\<Longrightarrow> P xm ym;\n        fmlookup xm x = None; fmrel R (xm(x \\<mapsto>\\<^sub>f y)) ym;\n        fmdom (xm(x \\<mapsto>\\<^sub>f y)) = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P (xm(x \\<mapsto>\\<^sub>f y)) ym", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xm ym.\n       \\<lbrakk>\\<And>ym.\n                   \\<lbrakk>fmrel R xm ym; fmdom xm = fmdom ym\\<rbrakk>\n                   \\<Longrightarrow> P xm ym;\n        fmlookup xm x = None; fmrel R (xm(x \\<mapsto>\\<^sub>f y)) ym;\n        fmdom (xm(x \\<mapsto>\\<^sub>f y)) = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P (xm(x \\<mapsto>\\<^sub>f y)) ym", "case (fmupd i x xm)"], ["proof (state)\nthis:\n  \\<lbrakk>fmrel R xm ?ym; fmdom xm = fmdom ?ym\\<rbrakk>\n  \\<Longrightarrow> P xm ?ym\n  fmlookup xm i = None\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym\n\ngoal (1 subgoal):\n 1. \\<And>x y xm ym.\n       \\<lbrakk>\\<And>ym.\n                   \\<lbrakk>fmrel R xm ym; fmdom xm = fmdom ym\\<rbrakk>\n                   \\<Longrightarrow> P xm ym;\n        fmlookup xm x = None; fmrel R (xm(x \\<mapsto>\\<^sub>f y)) ym;\n        fmdom (xm(x \\<mapsto>\\<^sub>f y)) = fmdom ym\\<rbrakk>\n       \\<Longrightarrow> P (xm(x \\<mapsto>\\<^sub>f y)) ym", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "obtain y where \"fmlookup ym i = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        fmlookup ym i = Some y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis fmupd.prems(1) fmrel_cases fmupd_lookup option.discI)"], ["proof (state)\nthis:\n  fmlookup ym i = Some y\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "from fmupd.hyps(2) fmupd.prems(1) fmupd.prems(2)"], ["proof (chain)\npicking this:\n  fmlookup xm i = None\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym", "obtain z zm where\n      \"fmlookup zm i = None\" and\n      ym_eq_z_zm: \"ym = (fmupd i z zm)\" and\n      R_x_z: \"R x z\" and\n      R_xm_zm: \"fmrel R xm zm\""], ["proof (prove)\nusing this:\n  fmlookup xm i = None\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym\n\ngoal (1 subgoal):\n 1. (\\<And>zm z.\n        \\<lbrakk>fmlookup zm i = None; ym = zm(i \\<mapsto>\\<^sub>f z);\n         R x z; fmrel R xm zm\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fmap_eqdom_Cons1"], ["proof (prove)\nusing this:\n  fmlookup xm i = None\n  fmrel R (xm(i \\<mapsto>\\<^sub>f x)) ym\n  fmdom (xm(i \\<mapsto>\\<^sub>f x)) = fmdom ym\n  \\<lbrakk>fmlookup ?xm ?i = None;\n   fmdom (?xm(?i \\<mapsto>\\<^sub>f ?x)) = fmdom ?ym;\n   fmrel ?R (?xm(?i \\<mapsto>\\<^sub>f ?x)) ?ym\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z zm.\n                       fmlookup zm ?i = None \\<and>\n                       ?ym = zm(?i \\<mapsto>\\<^sub>f z) \\<and>\n                       ?R ?x z \\<and> fmrel ?R ?xm zm\n\ngoal (1 subgoal):\n 1. (\\<And>zm z.\n        \\<lbrakk>fmlookup zm i = None; ym = zm(i \\<mapsto>\\<^sub>f z);\n         R x z; fmrel R xm zm\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  fmlookup zm i = None\n  ym = zm(i \\<mapsto>\\<^sub>f z)\n  R x z\n  fmrel R xm zm\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "hence dom_xm_eq_dom_zm: \"fmdom xm = fmdom zm\""], ["proof (prove)\nusing this:\n  fmlookup zm i = None\n  ym = zm(i \\<mapsto>\\<^sub>f z)\n  R x z\n  fmrel R xm zm\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom zm", "using fmrel_fmdom_eq"], ["proof (prove)\nusing this:\n  fmlookup zm i = None\n  ym = zm(i \\<mapsto>\\<^sub>f z)\n  R x z\n  fmrel R xm zm\n  fmrel ?P ?x ?y \\<Longrightarrow> fmdom ?x = fmdom ?y\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom zm", "by blast"], ["proof (state)\nthis:\n  fmdom xm = fmdom zm\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "with R_xm_zm fmupd.hyps(1)"], ["proof (chain)\npicking this:\n  fmrel R xm zm\n  \\<lbrakk>fmrel R xm ?ym; fmdom xm = fmdom ?ym\\<rbrakk>\n  \\<Longrightarrow> P xm ?ym\n  fmdom xm = fmdom zm", "have \"P xm zm\""], ["proof (prove)\nusing this:\n  fmrel R xm zm\n  \\<lbrakk>fmrel R xm ?ym; fmdom xm = fmdom ?ym\\<rbrakk>\n  \\<Longrightarrow> P xm ?ym\n  fmdom xm = fmdom zm\n\ngoal (1 subgoal):\n 1. P xm zm", "by blast"], ["proof (state)\nthis:\n  P xm zm\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "with R_x_z R_xm_zm dom_xm_eq_dom_zm"], ["proof (chain)\npicking this:\n  R x z\n  fmrel R xm zm\n  fmdom xm = fmdom zm\n  P xm zm", "have\n      \"P (fmupd i x xm) (fmupd i z zm)\""], ["proof (prove)\nusing this:\n  R x z\n  fmrel R xm zm\n  fmdom xm = fmdom zm\n  P xm zm\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) (zm(i \\<mapsto>\\<^sub>f z))", "by (rule step)"], ["proof (state)\nthis:\n  P (xm(i \\<mapsto>\\<^sub>f x)) (zm(i \\<mapsto>\\<^sub>f z))\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "thus ?thesis"], ["proof (prove)\nusing this:\n  P (xm(i \\<mapsto>\\<^sub>f x)) (zm(i \\<mapsto>\\<^sub>f z))\n\ngoal (1 subgoal):\n 1. P (xm(i \\<mapsto>\\<^sub>f x)) ym", "by (simp add: ym_eq_z_zm)"], ["proof (state)\nthis:\n  P (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (xm(i \\<mapsto>\\<^sub>f x)) ym\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The proof was derived from the accepted answer on the website\n  Stack Overflow that is available at\n  @{url \"https://stackoverflow.com/a/53585232/632199\"}\n  and provided with the permission of the author of the answer.\\<close>"], ["", "lemma fmrel_to_rtrancl:\n  assumes as_r: \"reflp r\"\n      and rel_rpp_xm_ym: \"fmrel r\\<^sup>*\\<^sup>* xm ym\"\n    shows \"(fmrel r)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* xm ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* xm ym", "from rel_rpp_xm_ym"], ["proof (chain)\npicking this:\n  fmrel r\\<^sup>*\\<^sup>* xm ym", "have \"fmdom xm = fmdom ym\""], ["proof (prove)\nusing this:\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "using fmrel_fmdom_eq"], ["proof (prove)\nusing this:\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n  fmrel ?P ?x ?y \\<Longrightarrow> fmdom ?x = fmdom ?y\n\ngoal (1 subgoal):\n 1. fmdom xm = fmdom ym", "by blast"], ["proof (state)\nthis:\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* xm ym", "with rel_rpp_xm_ym"], ["proof (chain)\npicking this:\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n  fmdom xm = fmdom ym", "show \"(fmrel r)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n  fmdom xm = fmdom ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* xm ym", "proof (induct rule: fmap_eqdom_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (fmap_of_list []) (fmap_of_list [])\n 2. \\<And>x xm y ym i.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; fmrel r\\<^sup>*\\<^sup>* xm ym;\n        fmdom xm = fmdom ym; (fmrel r)\\<^sup>*\\<^sup>* xm ym\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (ym(i \\<mapsto>\\<^sub>f y))", "case nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (fmap_of_list []) (fmap_of_list [])\n 2. \\<And>x xm y ym i.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; fmrel r\\<^sup>*\\<^sup>* xm ym;\n        fmdom xm = fmdom ym; (fmrel r)\\<^sup>*\\<^sup>* xm ym\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (ym(i \\<mapsto>\\<^sub>f y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (fmap_of_list []) (fmap_of_list [])", "by auto"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (fmap_of_list []) (fmap_of_list [])\n\ngoal (1 subgoal):\n 1. \\<And>x xm y ym i.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; fmrel r\\<^sup>*\\<^sup>* xm ym;\n        fmdom xm = fmdom ym; (fmrel r)\\<^sup>*\\<^sup>* xm ym\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (ym(i \\<mapsto>\\<^sub>f y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xm y ym i.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; fmrel r\\<^sup>*\\<^sup>* xm ym;\n        fmdom xm = fmdom ym; (fmrel r)\\<^sup>*\\<^sup>* xm ym\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (ym(i \\<mapsto>\\<^sub>f y))", "case (step x xm y ym i)"], ["proof (state)\nthis:\n  r\\<^sup>*\\<^sup>* x y\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n  fmdom xm = fmdom ym\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. \\<And>x xm y ym i.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; fmrel r\\<^sup>*\\<^sup>* xm ym;\n        fmdom xm = fmdom ym; (fmrel r)\\<^sup>*\\<^sup>* xm ym\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (ym(i \\<mapsto>\\<^sub>f y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "from step.hyps(1)"], ["proof (chain)\npicking this:\n  r\\<^sup>*\\<^sup>* x y", "have \"(fmrel r)\\<^sup>*\\<^sup>* (fmupd i x xm) (fmupd i y xm)\""], ["proof (prove)\nusing this:\n  r\\<^sup>*\\<^sup>* x y\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f y))", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f x))\n 2. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n         (xm(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (xm(i \\<mapsto>\\<^sub>f z))", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f x))\n 2. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n         (xm(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (xm(i \\<mapsto>\\<^sub>f z))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f x))", "by simp"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f x))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n         (xm(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (xm(i \\<mapsto>\\<^sub>f z))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n         (xm(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (xm(i \\<mapsto>\\<^sub>f z))", "case (step y z)"], ["proof (state)\nthis:\n  r\\<^sup>*\\<^sup>* x y\n  r y z\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n         (xm(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f x))\n                          (xm(i \\<mapsto>\\<^sub>f z))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f z))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f z))", "from as_r"], ["proof (chain)\npicking this:\n  reflp r", "have \"fmrel r xm xm\""], ["proof (prove)\nusing this:\n  reflp r\n\ngoal (1 subgoal):\n 1. fmrel r xm xm", "by (simp add: fmap.rel_reflp reflpD)"], ["proof (state)\nthis:\n  fmrel r xm xm\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f z))", "with step.hyps(2)"], ["proof (chain)\npicking this:\n  r y z\n  fmrel r xm xm", "have \"(fmrel r)\\<^sup>*\\<^sup>* (fmupd i y xm) (fmupd i z xm)\""], ["proof (prove)\nusing this:\n  r y z\n  fmrel r xm xm\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (xm(i \\<mapsto>\\<^sub>f z))", "by (simp add: fmrel_upd r_into_rtranclp)"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (xm(i \\<mapsto>\\<^sub>f z))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f z))", "with step.hyps(3)"], ["proof (chain)\npicking this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f y))\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (xm(i \\<mapsto>\\<^sub>f z))", "show ?thesis"], ["proof (prove)\nusing this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f y))\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (xm(i \\<mapsto>\\<^sub>f z))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (xm(i \\<mapsto>\\<^sub>f z))", "by simp"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f z))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f z))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "also"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (xm(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "from step.hyps(4)"], ["proof (chain)\npicking this:\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym", "have \"(fmrel r)\\<^sup>*\\<^sup>* (fmupd i y xm) (fmupd i y ym)\""], ["proof (prove)\nusing this:\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (ym(i \\<mapsto>\\<^sub>f y))", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (xm(i \\<mapsto>\\<^sub>f y))\n 2. \\<And>ya z.\n       \\<lbrakk>(fmrel r)\\<^sup>*\\<^sup>* xm ya; fmrel r ya z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n         (ya(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f y))\n                          (z(i \\<mapsto>\\<^sub>f y))", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (xm(i \\<mapsto>\\<^sub>f y))\n 2. \\<And>ya z.\n       \\<lbrakk>(fmrel r)\\<^sup>*\\<^sup>* xm ya; fmrel r ya z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n         (ya(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f y))\n                          (z(i \\<mapsto>\\<^sub>f y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (xm(i \\<mapsto>\\<^sub>f y))", "by simp"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (xm(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. \\<And>ya z.\n       \\<lbrakk>(fmrel r)\\<^sup>*\\<^sup>* xm ya; fmrel r ya z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n         (ya(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f y))\n                          (z(i \\<mapsto>\\<^sub>f y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya z.\n       \\<lbrakk>(fmrel r)\\<^sup>*\\<^sup>* xm ya; fmrel r ya z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n         (ya(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f y))\n                          (z(i \\<mapsto>\\<^sub>f y))", "case (step ya za)"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* xm ya\n  fmrel r ya za\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (ya(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. \\<And>ya z.\n       \\<lbrakk>(fmrel r)\\<^sup>*\\<^sup>* xm ya; fmrel r ya z;\n        (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n         (ya(i \\<mapsto>\\<^sub>f y))\\<rbrakk>\n       \\<Longrightarrow> (fmrel r)\\<^sup>*\\<^sup>*\n                          (xm(i \\<mapsto>\\<^sub>f y))\n                          (z(i \\<mapsto>\\<^sub>f y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (za(i \\<mapsto>\\<^sub>f y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (za(i \\<mapsto>\\<^sub>f y))", "from step.hyps(2) as_r"], ["proof (chain)\npicking this:\n  fmrel r ya za\n  reflp r", "have \"(fmrel r)\\<^sup>*\\<^sup>* (fmupd i y ya) (fmupd i y za)\""], ["proof (prove)\nusing this:\n  fmrel r ya za\n  reflp r\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (ya(i \\<mapsto>\\<^sub>f y))\n     (za(i \\<mapsto>\\<^sub>f y))", "by (simp add: fmrel_upd r_into_rtranclp reflp_def)"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (ya(i \\<mapsto>\\<^sub>f y))\n   (za(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (za(i \\<mapsto>\\<^sub>f y))", "with step.hyps(3)"], ["proof (chain)\npicking this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (ya(i \\<mapsto>\\<^sub>f y))\n  (fmrel r)\\<^sup>*\\<^sup>* (ya(i \\<mapsto>\\<^sub>f y))\n   (za(i \\<mapsto>\\<^sub>f y))", "show ?thesis"], ["proof (prove)\nusing this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (ya(i \\<mapsto>\\<^sub>f y))\n  (fmrel r)\\<^sup>*\\<^sup>* (ya(i \\<mapsto>\\<^sub>f y))\n   (za(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n     (za(i \\<mapsto>\\<^sub>f y))", "by simp"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (za(i \\<mapsto>\\<^sub>f y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (za(i \\<mapsto>\\<^sub>f y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f y))\n   (ym(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "finally"], ["proof (chain)\npicking this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (ym(i \\<mapsto>\\<^sub>f y))", "show ?thesis"], ["proof (prove)\nusing this:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (ym(i \\<mapsto>\\<^sub>f y))\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n     (ym(i \\<mapsto>\\<^sub>f y))", "by simp"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (ym(i \\<mapsto>\\<^sub>f y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* (xm(i \\<mapsto>\\<^sub>f x))\n   (ym(i \\<mapsto>\\<^sub>f y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The proof was derived from the accepted answer on the website\n  Stack Overflow that is available at\n  @{url \"https://stackoverflow.com/a/53585232/632199\"}\n  and provided with the permission of the author of the answer.\\<close>"], ["", "lemma fmrel_to_trancl:\n  assumes \"reflp r\"\n      and \"fmrel r\\<^sup>+\\<^sup>+ xm ym\"\n    shows \"(fmrel r)\\<^sup>+\\<^sup>+ xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>+\\<^sup>+ xm ym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>+\\<^sup>+ xm ym", "from assms(2)"], ["proof (chain)\npicking this:\n  fmrel r\\<^sup>+\\<^sup>+ xm ym", "have \"fmrel r\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  fmrel r\\<^sup>+\\<^sup>+ xm ym\n\ngoal (1 subgoal):\n 1. fmrel r\\<^sup>*\\<^sup>* xm ym", "by (drule_tac ?Ra=\"r\\<^sup>*\\<^sup>*\" in fmap.rel_mono_strong; auto)"], ["proof (state)\nthis:\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>+\\<^sup>+ xm ym", "with assms(1)"], ["proof (chain)\npicking this:\n  reflp r\n  fmrel r\\<^sup>*\\<^sup>* xm ym", "have \"(fmrel r)\\<^sup>*\\<^sup>* xm ym\""], ["proof (prove)\nusing this:\n  reflp r\n  fmrel r\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>*\\<^sup>* xm ym", "by (simp add: fmrel_to_rtrancl)"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>+\\<^sup>+ xm ym", "with assms(1)"], ["proof (chain)\npicking this:\n  reflp r\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym", "show ?thesis"], ["proof (prove)\nusing this:\n  reflp r\n  (fmrel r)\\<^sup>*\\<^sup>* xm ym\n\ngoal (1 subgoal):\n 1. (fmrel r)\\<^sup>+\\<^sup>+ xm ym", "by (metis fmap.rel_reflp reflpD rtranclpD tranclp.r_into_trancl)"], ["proof (state)\nthis:\n  (fmrel r)\\<^sup>+\\<^sup>+ xm ym\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmrel_tranclp_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>y. fmrel r a y \\<Longrightarrow> P y) \\<Longrightarrow>\n   (\\<And>y z. (fmrel r)\\<^sup>+\\<^sup>+ a y \\<Longrightarrow> fmrel r y z \\<Longrightarrow> P y \\<Longrightarrow> P z) \\<Longrightarrow> P b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b; reflp r;\n     \\<And>y. fmrel r a y \\<Longrightarrow> P y;\n     \\<And>y z.\n        \\<lbrakk>(fmrel r)\\<^sup>+\\<^sup>+ a y; fmrel r y z; P y\\<rbrakk>\n        \\<Longrightarrow> P z\\<rbrakk>\n    \\<Longrightarrow> P b", "apply (drule fmrel_to_trancl, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b;\n     \\<And>y. fmrel r a y \\<Longrightarrow> P y;\n     \\<And>y z.\n        \\<lbrakk>(fmrel r)\\<^sup>+\\<^sup>+ a y; fmrel r y z; P y\\<rbrakk>\n        \\<Longrightarrow> P z;\n     (fmrel r)\\<^sup>+\\<^sup>+ a b\\<rbrakk>\n    \\<Longrightarrow> P b", "by (erule tranclp_induct; simp)"], ["", "lemma fmrel_converse_tranclp_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>y. fmrel r y b \\<Longrightarrow> P y) \\<Longrightarrow>\n   (\\<And>y z. fmrel r y z \\<Longrightarrow> fmrel r\\<^sup>+\\<^sup>+ z b \\<Longrightarrow> P z \\<Longrightarrow> P y) \\<Longrightarrow> P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b; reflp r;\n     \\<And>y. fmrel r y b \\<Longrightarrow> P y;\n     \\<And>y z.\n        \\<lbrakk>fmrel r y z; fmrel r\\<^sup>+\\<^sup>+ z b; P z\\<rbrakk>\n        \\<Longrightarrow> P y\\<rbrakk>\n    \\<Longrightarrow> P a", "apply (drule fmrel_to_trancl, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b;\n     \\<And>y. fmrel r y b \\<Longrightarrow> P y;\n     \\<And>y z.\n        \\<lbrakk>fmrel r y z; fmrel r\\<^sup>+\\<^sup>+ z b; P z\\<rbrakk>\n        \\<Longrightarrow> P y;\n     (fmrel r)\\<^sup>+\\<^sup>+ a b\\<rbrakk>\n    \\<Longrightarrow> P a", "by (erule converse_tranclp_induct; simp add: trancl_to_fmrel)"], ["", "lemma fmrel_tranclp_trans_induct:\n  \"fmrel r\\<^sup>+\\<^sup>+ a b \\<Longrightarrow>\n   reflp r \\<Longrightarrow>\n   (\\<And>x y. fmrel r x y \\<Longrightarrow> P x y) \\<Longrightarrow>\n   (\\<And>x y z. fmrel r\\<^sup>+\\<^sup>+ x y \\<Longrightarrow> P x y \\<Longrightarrow> fmrel r\\<^sup>+\\<^sup>+ y z \\<Longrightarrow> P y z \\<Longrightarrow> P x z) \\<Longrightarrow>\n   P a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b; reflp r;\n     \\<And>x y. fmrel r x y \\<Longrightarrow> P x y;\n     \\<And>x y z.\n        \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ x y; P x y;\n         fmrel r\\<^sup>+\\<^sup>+ y z; P y z\\<rbrakk>\n        \\<Longrightarrow> P x z\\<rbrakk>\n    \\<Longrightarrow> P a b", "apply (drule fmrel_to_trancl, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b;\n     \\<And>x y. fmrel r x y \\<Longrightarrow> P x y;\n     \\<And>x y z.\n        \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ x y; P x y;\n         fmrel r\\<^sup>+\\<^sup>+ y z; P y z\\<rbrakk>\n        \\<Longrightarrow> P x z;\n     (fmrel r)\\<^sup>+\\<^sup>+ a b\\<rbrakk>\n    \\<Longrightarrow> P a b", "apply (erule tranclp_trans_induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b;\n        \\<And>x y. fmrel r x y \\<Longrightarrow> P x y;\n        \\<And>x y z.\n           \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ x y; P x y;\n            fmrel r\\<^sup>+\\<^sup>+ y z; P y z\\<rbrakk>\n           \\<Longrightarrow> P x z;\n        (fmrel r)\\<^sup>+\\<^sup>+ x y; P x y; (fmrel r)\\<^sup>+\\<^sup>+ y z;\n        P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "using trancl_to_fmrel"], ["proof (prove)\nusing this:\n  (fmrel ?f)\\<^sup>+\\<^sup>+ ?xm ?ym \\<Longrightarrow>\n  fmrel ?f\\<^sup>+\\<^sup>+ ?xm ?ym\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ a b;\n        \\<And>x y. fmrel r x y \\<Longrightarrow> P x y;\n        \\<And>x y z.\n           \\<lbrakk>fmrel r\\<^sup>+\\<^sup>+ x y; P x y;\n            fmrel r\\<^sup>+\\<^sup>+ y z; P y z\\<rbrakk>\n           \\<Longrightarrow> P x z;\n        (fmrel r)\\<^sup>+\\<^sup>+ x y; P x y; (fmrel r)\\<^sup>+\\<^sup>+ y z;\n        P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "by blast"], ["", "(*** Finite Map Size Calculation ********************************************)"], ["", "subsection \\<open>Size Calculation\\<close>"], ["", "text \\<open>\n  The contents of the subsection was derived from the accepted answer\n  on the website Stack Overflow that is available at\n  @{url \"https://stackoverflow.com/a/53244203/632199\"}\n  and provided with the permission of the author of the answer.\\<close>"], ["", "abbreviation \"tcf \\<equiv> (\\<lambda> v::('a \\<times> nat). (\\<lambda> r::nat. snd v + r))\""], ["", "interpretation tcf: comp_fun_commute tcf"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute tcf", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "fix x y :: \"'a \\<times> nat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "show \"tcf y \\<circ> tcf x = tcf x \\<circ> tcf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "have \"(tcf y \\<circ> tcf x) z = snd y + snd x + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tcf y \\<circ> tcf x) z = tcf y (snd x) + z", "by auto"], ["proof (state)\nthis:\n  (tcf y \\<circ> tcf x) z = tcf y (snd x) + z\n\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "also"], ["proof (state)\nthis:\n  (tcf y \\<circ> tcf x) z = tcf y (snd x) + z\n\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "have \"(tcf x \\<circ> tcf y) z = snd y + snd x + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tcf x \\<circ> tcf y) z = tcf y (snd x) + z", "by auto"], ["proof (state)\nthis:\n  (tcf x \\<circ> tcf y) z = tcf y (snd x) + z\n\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "finally"], ["proof (chain)\npicking this:\n  (tcf x \\<circ> tcf y) z = (tcf y \\<circ> tcf x) z", "have \"(tcf y \\<circ> tcf x) z = (tcf x \\<circ> tcf y) z\""], ["proof (prove)\nusing this:\n  (tcf x \\<circ> tcf y) z = (tcf y \\<circ> tcf x) z\n\ngoal (1 subgoal):\n 1. (tcf y \\<circ> tcf x) z = (tcf x \\<circ> tcf y) z", "by auto"], ["proof (state)\nthis:\n  (tcf y \\<circ> tcf x) z = (tcf x \\<circ> tcf y) z\n\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "thus \"(tcf y \\<circ> tcf x) = (tcf x \\<circ> tcf y)\""], ["proof (prove)\nusing this:\n  (tcf y \\<circ> tcf x) z = (tcf x \\<circ> tcf y) z\n\ngoal (1 subgoal):\n 1. tcf y \\<circ> tcf x = tcf x \\<circ> tcf y", "by auto"], ["proof (state)\nthis:\n  tcf y \\<circ> tcf x = tcf x \\<circ> tcf y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tcf y \\<circ> tcf x = tcf x \\<circ> tcf y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ffold_rec_exp:\n  assumes \"k |\\<in>| fmdom x\"\n    and \"ky = (k, the (fmlookup (fmmap f x) k))\"\n  shows \"ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n        tcf ky (ffold tcf 0 ((fset_of_fmap (fmmap f x)) |-| {|ky|}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n    tcf ky (ffold tcf 0 (fset_of_fmap (fmmap f x) |-| {|ky|}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n    tcf ky (ffold tcf 0 (fset_of_fmap (fmmap f x) |-| {|ky|}))", "have \"ky |\\<in>| (fset_of_fmap (fmmap f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ky |\\<in>| fset_of_fmap (fmmap f x)", "using assms"], ["proof (prove)\nusing this:\n  k |\\<in>| fmdom x\n  ky = (k, the (fmlookup (fmmap f x) k))\n\ngoal (1 subgoal):\n 1. ky |\\<in>| fset_of_fmap (fmmap f x)", "by auto"], ["proof (state)\nthis:\n  ky |\\<in>| fset_of_fmap (fmmap f x)\n\ngoal (1 subgoal):\n 1. ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n    tcf ky (ffold tcf 0 (fset_of_fmap (fmmap f x) |-| {|ky|}))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ky |\\<in>| fset_of_fmap (fmmap f x)\n\ngoal (1 subgoal):\n 1. ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n    tcf ky (ffold tcf 0 (fset_of_fmap (fmmap f x) |-| {|ky|}))", "by (simp add: tcf.ffold_rec)"], ["proof (state)\nthis:\n  ffold tcf 0 (fset_of_fmap (fmmap f x)) =\n  tcf ky (ffold tcf 0 (fset_of_fmap (fmmap f x) |-| {|ky|}))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma elem_le_ffold [intro]:\n  \"k |\\<in>| fmdom x \\<Longrightarrow>\n   f (the (fmlookup x k)) < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k |\\<in>| fmdom x \\<Longrightarrow>\n    f (the (fmlookup x k)) < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))", "by (subst ffold_rec_exp, auto)"], ["", "lemma elem_le_ffold' [intro]:\n  \"z \\<in> fmran' x \\<Longrightarrow>\n   f z < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> fmran' x \\<Longrightarrow>\n    f z < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))", "apply (erule fmran'E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       fmlookup x xa = Some z \\<Longrightarrow>\n       f z < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))", "apply (frule fmdomI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>fmlookup x xa = Some z; xa |\\<in>| fmdom x\\<rbrakk>\n       \\<Longrightarrow> f z < Suc (ffold tcf 0 (fset_of_fmap (fmmap f x)))", "by (subst ffold_rec_exp, auto)"], ["", "(*** Code Setup *************************************************************)"], ["", "subsection \\<open>Code Setup\\<close>"], ["", "abbreviation \"fmmerge_fun f xm ym \\<equiv>\n  fmap_of_list (map\n    (\\<lambda>k. if k |\\<in>| fmdom xm \\<and> k |\\<in>| fmdom ym\n         then (k, f (the (fmlookup xm k)) (the (fmlookup ym k)))\n         else (k, undefined))\n    (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)))\""], ["", "lemma fmmerge_fun_simp [code_abbrev, simp]:\n  \"fmmerge_fun f xm ym = fmmerge f xm ym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmerge_fun f xm ym = fmmerge f xm ym", "unfolding fmmerge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmerge_fun f xm ym =\n    fmap_of_list\n     (map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n       (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)))", "apply (rule_tac ?f=\"fmap_of_list\" in HOL.arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>k.\n            if k |\\<in>| fmdom xm \\<and> k |\\<in>| fmdom ym\n            then (k, f (the (fmlookup xm k)) (the (fmlookup ym k)))\n            else (k, undefined))\n     (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym)) =\n    map (\\<lambda>k. (k, f (the (fmlookup xm k)) (the (fmlookup ym k))))\n     (sorted_list_of_fset (fmdom xm |\\<inter>| fmdom ym))", "by (simp add: notin_fset)"], ["", "end"]]}