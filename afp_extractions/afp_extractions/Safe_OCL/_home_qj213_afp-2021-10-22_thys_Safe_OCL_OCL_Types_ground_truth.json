{"file_name": "/home/qj213/afp-2021-10-22/thys/Safe_OCL/OCL_Types.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Safe_OCL", "problem_names": ["lemma subtype_asym:\n  \"\\<tau> \\<sqsubset> \\<sigma> \\<Longrightarrow> \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False\"", "lemma Required_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Required\"", "lemma not_subtype_Optional_Required:\n  \"subtype\\<^sup>+\\<^sup>+ \\<tau>[?] \\<sigma> \\<Longrightarrow> \\<sigma> = \\<rho>[1] \\<Longrightarrow> P\"", "lemma Optional_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Optional\"", "lemma subtype_tranclp_Collection_x:\n  \"subtype\\<^sup>+\\<^sup>+ (Collection \\<tau>) \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<sigma> = Collection \\<rho> \\<Longrightarrow> subtype\\<^sup>+\\<^sup>+ \\<tau> \\<rho> \\<Longrightarrow> P) \\<Longrightarrow>\n   (\\<sigma> = OclSuper \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma Collection_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Collection\"", "lemma Set_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Set\"", "lemma OrderedSet_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype OrderedSet\"", "lemma Bag_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Bag\"", "lemma Sequence_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Sequence\"", "lemma Tuple_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Tuple\"", "lemma type_less_x_Required_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[1]\"", "lemma type_less_x_Optional_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[?]\"\n  \"\\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[?]\"", "lemma type_less_x_Collection_intro [intro]:\n  \"\\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"", "lemma type_less_x_Set_intro [intro]:\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Set \\<sigma>\"", "lemma type_less_x_OrderedSet_intro [intro]:\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\"", "lemma type_less_x_Bag_intro [intro]:\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Bag \\<sigma>\"", "lemma type_less_x_Sequence_intro [intro]:\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\"", "lemma fun_or_eq_refl [intro]:\n  \"reflp (\\<lambda>x y. f x y \\<or> x = y)\"", "lemma type_less_x_Tuple_intro [intro]:\n  assumes \"\\<tau> = Tuple \\<pi>\"\n      and \"strict_subtuple (\\<le>) \\<pi> \\<xi>\"\n    shows \"\\<tau> < Tuple \\<xi>\"", "lemma type_less_x_OclSuper_intro [intro]:\n  \"\\<tau> \\<noteq> OclSuper \\<Longrightarrow> \\<tau> < OclSuper\"", "lemma type_less_x_Required [elim!]:\n  assumes \"\\<tau> < \\<sigma>[1]\"\n      and \"\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_Optional [elim!]:\n  \"\\<tau> < \\<sigma>[?] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_x_Collection [elim!]:\n  \"\\<tau> < Collection \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_x_Set [elim!]:\n  assumes \"\\<tau> < Set \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_OrderedSet [elim!]:\n  assumes \"\\<tau> < OrderedSet \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_Bag [elim!]:\n  assumes \"\\<tau> < Bag \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_Sequence [elim!]:\n  assumes \"\\<tau> < Sequence \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_Tuple':\n  assumes \"\\<tau> < Tuple \\<xi>\"\n      and \"acyclicP_on (fmran' \\<xi>) subtype\"\n      and \"\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> strict_subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P\"\n    shows \"P\"", "lemma type_less_x_OclSuper [elim!]:\n  \"\\<tau> < OclSuper \\<Longrightarrow> (\\<tau> \\<noteq> OclSuper \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma subtype_irrefl:\n  \"\\<tau> < \\<tau> \\<Longrightarrow> False\"\n  for \\<tau> :: \"'a type\"", "lemma subtype_acyclic:\n  \"acyclicP subtype\"", "lemma less_le_not_le_type:\n  \"\\<tau> < \\<sigma> \\<longleftrightarrow> \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>\"\n  for \\<tau> \\<sigma> :: \"'a type\"", "lemma order_refl_type [iff]:\n  \"\\<tau> \\<le> \\<tau>\"\n  for \\<tau> :: \"'a type\"", "lemma order_trans_type:\n  \"\\<tau> \\<le> \\<sigma> \\<Longrightarrow> \\<sigma> \\<le> \\<rho> \\<Longrightarrow> \\<tau> \\<le> \\<rho>\"\n  for \\<tau> \\<sigma> \\<rho> :: \"'a type\"", "lemma antisym_type:\n  \"\\<tau> \\<le> \\<sigma> \\<Longrightarrow> \\<sigma> \\<le> \\<tau> \\<Longrightarrow> \\<tau> = \\<sigma>\"\n  for \\<tau> \\<sigma> :: \"'a type\"", "lemma type_less_eq_x_Required_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[1]\"", "lemma type_less_eq_x_Optional_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?]\"\n  \"\\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?]\"", "lemma type_less_eq_x_Collection_intro [intro]:\n  \"\\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"", "lemma type_less_eq_x_Set_intro [intro]:\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Set \\<sigma>\"", "lemma type_less_eq_x_OrderedSet_intro [intro]:\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> OrderedSet \\<sigma>\"", "lemma type_less_eq_x_Bag_intro [intro]:\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Bag \\<sigma>\"", "lemma type_less_eq_x_Sequence_intro [intro]:\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Sequence \\<sigma>\"", "lemma type_less_eq_x_Tuple_intro [intro]:\n  \"\\<tau> = Tuple \\<pi> \\<Longrightarrow> subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> \\<tau> \\<le> Tuple \\<xi>\"", "lemma type_less_eq_x_OclSuper_intro [intro]:\n  \"\\<tau> \\<le> OclSuper\"", "lemma type_less_eq_x_Required [elim!]:\n  \"\\<tau> \\<le> \\<sigma>[1] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Optional [elim!]:\n  \"\\<tau> \\<le> \\<sigma>[?] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Collection [elim!]:\n  \"\\<tau> \\<le> Collection \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Set [elim!]:\n   \"\\<tau> \\<le> Set \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_OrderedSet [elim!]:\n   \"\\<tau> \\<le> OrderedSet \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Bag [elim!]:\n   \"\\<tau> \\<le> Bag \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Sequence [elim!]:\n   \"\\<tau> \\<le> Sequence \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_x_Tuple [elim!]:\n  \"\\<tau> < Tuple \\<xi> \\<Longrightarrow>\n   (\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> strict_subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_eq_x_Tuple [elim!]:\n  \"\\<tau> \\<le> Tuple \\<xi> \\<Longrightarrow>\n   (\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma type_less_left_simps [simp]:\n  \"OclSuper < \\<sigma> = False\"\n  \"\\<rho>[1] < \\<sigma> = (\\<exists>\\<upsilon>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = \\<upsilon>[1] \\<and> \\<rho> < \\<upsilon> \\<or>\n      \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> \\<le> \\<upsilon>)\"\n  \"\\<rho>[?] < \\<sigma> = (\\<exists>\\<upsilon>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> < \\<upsilon>)\"\n  \"Collection \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Set \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Set \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"OrderedSet \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = OrderedSet \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Bag \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Bag \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Sequence \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Sequence \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Tuple \\<pi> < \\<sigma> = (\\<exists>\\<xi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Tuple \\<xi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)\"", "lemma type_less_right_simps [simp]:\n  \"\\<tau> < OclSuper = (\\<tau> \\<noteq> OclSuper)\"\n  \"\\<tau> < \\<upsilon>[1] = (\\<exists>\\<rho>. \\<tau> = \\<rho>[1] \\<and> \\<rho> < \\<upsilon>)\"\n  \"\\<tau> < \\<upsilon>[?] = (\\<exists>\\<rho>. \\<tau> = \\<rho>[1] \\<and> \\<rho> \\<le> \\<upsilon> \\<or> \\<tau> = \\<rho>[?] \\<and> \\<rho> < \\<upsilon>)\"\n  \"\\<tau> < Collection \\<sigma> = (\\<exists>\\<phi>.\n      \\<tau> = Collection \\<phi> \\<and> \\<phi> < \\<sigma> \\<or>\n      \\<tau> = Set \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = Bag \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = Sequence \\<phi> \\<and> \\<phi> \\<le> \\<sigma>)\"\n  \"\\<tau> < Set \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Set \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < OrderedSet \\<sigma> = (\\<exists>\\<phi>. \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Bag \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Bag \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Sequence \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Sequence \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Tuple \\<xi> = (\\<exists>\\<pi>. \\<tau> = Tuple \\<pi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)\"", "lemma sup_ge1_type:\n  \"\\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>\"\n  for \\<tau> \\<sigma> :: \"'a type\"", "lemma sup_commut_type:\n  \"\\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>\"\n  for \\<tau> \\<sigma> :: \"'a type\"", "lemma sup_least_type:\n  \"\\<tau> \\<le> \\<rho> \\<Longrightarrow> \\<sigma> \\<le> \\<rho> \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>\"\n  for \\<tau> \\<sigma> \\<rho> :: \"'a type\"", "lemma element_type_alt_simps:\n  \"element_type \\<tau> \\<sigma> = \n     (Collection \\<sigma> = \\<tau> \\<or>\n      Set \\<sigma> = \\<tau> \\<or>\n      OrderedSet \\<sigma> = \\<tau> \\<or>\n      Bag \\<sigma> = \\<tau> \\<or>\n      Sequence \\<sigma> = \\<tau>)\"", "lemma element_type_det:\n  \"element_type \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   element_type \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\"", "lemma update_element_type_det:\n  \"update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>1 \\<Longrightarrow>\n   update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>2 \\<Longrightarrow> \\<rho>\\<^sub>1 = \\<rho>\\<^sub>2\"", "lemma to_unique_collection_det:\n  \"to_unique_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_unique_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\"", "lemma to_nonunique_collection_det:\n  \"to_nonunique_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_nonunique_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\"", "lemma to_ordered_collection_det:\n  \"to_ordered_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_ordered_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\"", "lemma less_type_code [code]:\n  \"(<) = subtype_fun\"", "lemma less_eq_type_code [code]:\n  \"(\\<le>) = (\\<lambda>x y. subtype_fun x y \\<or> x = y)\""], "translations": [["", "lemma subtype_asym:\n  \"\\<tau> \\<sqsubset> \\<sigma> \\<Longrightarrow> \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n     \\<sigma> \\<sqsubset> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (induct rule: subtype.induct)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n        \\<sigma>[1] \\<sqsubset> \\<tau>[1]\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n        \\<sigma>[?] \\<sqsubset> \\<tau>[?]\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>\\<tau>. \\<tau>[?] \\<sqsubset> \\<tau>[1] \\<Longrightarrow> False\n 4. OclSuper \\<sqsubset> OclAny[?] \\<Longrightarrow> False\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Collection \\<sigma> \\<sqsubset> Collection \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Set \\<sigma> \\<sqsubset> Set \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        OrderedSet \\<sigma> \\<sqsubset> OrderedSet \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Bag \\<sigma> \\<sqsubset> Bag \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Sequence \\<sigma> \\<sqsubset> Sequence \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>\\<tau>.\n        Collection \\<tau> \\<sqsubset> Set \\<tau> \\<Longrightarrow> False\nA total of 16 subgoals...", "using basic_subtype_asym"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<tau> \\<sqsubset>\\<^sub>B ?\\<sigma>;\n   ?\\<sigma> \\<sqsubset>\\<^sub>B ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (16 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n        \\<sigma>[1] \\<sqsubset> \\<tau>[1]\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n        \\<sigma>[?] \\<sqsubset> \\<tau>[?]\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>\\<tau>. \\<tau>[?] \\<sqsubset> \\<tau>[1] \\<Longrightarrow> False\n 4. OclSuper \\<sqsubset> OclAny[?] \\<Longrightarrow> False\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Collection \\<sigma> \\<sqsubset> Collection \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Set \\<sigma> \\<sqsubset> Set \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        OrderedSet \\<sigma> \\<sqsubset> OrderedSet \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Bag \\<sigma> \\<sqsubset> Bag \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<sqsubset> \\<sigma>;\n        \\<sigma> \\<sqsubset> \\<tau> \\<Longrightarrow> False;\n        Sequence \\<sigma> \\<sqsubset> Sequence \\<tau>\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>\\<tau>.\n        Collection \\<tau> \\<sqsubset> Set \\<tau> \\<Longrightarrow> False\nA total of 16 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<pi>'.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n                    \\<sigma> \\<sqsubset>\\<^sub>B \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> False;\n        subtuple\n         (\\<lambda>\\<tau> \\<sigma>.\n             \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n         \\<pi>' \\<pi>;\n        subtuple\n         (\\<lambda>\\<tau> \\<sigma>.\n             \\<tau> \\<sqsubset> \\<sigma> \\<and>\n             \\<not> \\<sigma> \\<sqsubset> \\<tau> \\<or>\n             \\<tau> = \\<sigma>)\n         \\<pi> \\<pi>';\n        \\<pi> \\<noteq> \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> False", "using subtuple_antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>subtuple (\\<lambda>x y. ?f x y \\<or> x = y) ?xm ?ym;\n   subtuple (\\<lambda>x y. ?f x y \\<and> \\<not> ?f y x \\<or> x = y) ?ym\n    ?xm\\<rbrakk>\n  \\<Longrightarrow> ?xm = ?ym\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<pi>'.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<sqsubset>\\<^sub>B \\<sigma>;\n                    \\<sigma> \\<sqsubset>\\<^sub>B \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> False;\n        subtuple\n         (\\<lambda>\\<tau> \\<sigma>.\n             \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n         \\<pi>' \\<pi>;\n        subtuple\n         (\\<lambda>\\<tau> \\<sigma>.\n             \\<tau> \\<sqsubset> \\<sigma> \\<and>\n             \\<not> \\<sigma> \\<sqsubset> \\<tau> \\<or>\n             \\<tau> = \\<sigma>)\n         \\<pi> \\<pi>';\n        \\<pi> \\<noteq> \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> False", "by fastforce"], ["", "(*** Constructors Bijectivity on Transitive Closures ************************)"], ["", "section \\<open>Constructors Bijectivity on Transitive Closures\\<close>"], ["", "lemma Required_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Required\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Required", "by (auto simp add: inj_def)"], ["", "lemma not_subtype_Optional_Required:\n  \"subtype\\<^sup>+\\<^sup>+ \\<tau>[?] \\<sigma> \\<Longrightarrow> \\<sigma> = \\<rho>[1] \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[?] \\<sigma>;\n     \\<sigma> = \\<rho>[1]\\<rbrakk>\n    \\<Longrightarrow> P", "by (induct arbitrary: \\<rho> rule: tranclp_induct; auto)"], ["", "lemma Optional_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Optional\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Optional", "apply (auto simp add: inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] z[1] \\<Longrightarrow>\n       z[1] \\<in> range Optional", "using not_subtype_Optional_Required"], ["proof (prove)\nusing this:\n  \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ ?\\<tau>[?] ?\\<sigma>;\n   ?\\<sigma> = ?\\<rho>[1]\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] z[1] \\<Longrightarrow>\n       z[1] \\<in> range Optional", "by blast"], ["", "lemma subtype_tranclp_Collection_x:\n  \"subtype\\<^sup>+\\<^sup>+ (Collection \\<tau>) \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<sigma> = Collection \\<rho> \\<Longrightarrow> subtype\\<^sup>+\\<^sup>+ \\<tau> \\<rho> \\<Longrightarrow> P) \\<Longrightarrow>\n   (\\<sigma> = OclSuper \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<sigma> = Collection \\<rho>;\n         (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<rho>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<sigma> = OclSuper \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (induct rule: tranclp_induct, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) y;\n        y \\<sqsubset> z;\n        \\<lbrakk>\\<And>\\<rho>.\n                    \\<lbrakk>y = Collection \\<rho>;\n                     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<rho>\\<rbrakk>\n                    \\<Longrightarrow> P;\n         y = OclSuper \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>z = Collection \\<rho>;\n            (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<rho>\\<rbrakk>\n           \\<Longrightarrow> P;\n        z = OclSuper \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "by (metis subtype_Collection_x subtype_OclSuper_x tranclp.trancl_into_trancl)"], ["", "lemma Collection_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Collection\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Collection", "apply (auto simp add: inj_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Set z) \\<Longrightarrow>\n       Set z \\<in> range Collection\n 2. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (OrderedSet z) \\<Longrightarrow>\n       OrderedSet z \\<in> range Collection\n 3. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Bag z) \\<Longrightarrow>\n       Bag z \\<in> range Collection\n 4. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Sequence z) \\<Longrightarrow>\n       Sequence z \\<in> range Collection", "using subtype_tranclp_Collection_x"], ["proof (prove)\nusing this:\n  \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection ?\\<tau>) ?\\<sigma>;\n   \\<And>\\<rho>.\n      \\<lbrakk>?\\<sigma> = Collection \\<rho>;\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ ?\\<tau> \\<rho>\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   ?\\<sigma> = OclSuper \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (4 subgoals):\n 1. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Set z) \\<Longrightarrow>\n       Set z \\<in> range Collection\n 2. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (OrderedSet z) \\<Longrightarrow>\n       OrderedSet z \\<in> range Collection\n 3. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Bag z) \\<Longrightarrow>\n       Bag z \\<in> range Collection\n 4. \\<And>x z.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection x)\n        (Sequence z) \\<Longrightarrow>\n       Sequence z \\<in> range Collection", "by auto"], ["", "lemma Set_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Set", "by (auto simp add: inj_def)"], ["", "lemma OrderedSet_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype OrderedSet\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) OrderedSet", "by (auto simp add: inj_def)"], ["", "lemma Bag_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Bag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Bag", "by (auto simp add: inj_def)"], ["", "lemma Sequence_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Sequence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Sequence", "by (auto simp add: inj_def)"], ["", "lemma Tuple_bij_on_trancl [simp]:\n  \"bij_on_trancl subtype Tuple\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_on_trancl (\\<sqsubset>) Tuple", "by (auto simp add: inj_def)"], ["", "(*** Partial Order of Types *************************************************)"], ["", "section \\<open>Partial Order of Types\\<close>"], ["", "instantiation type :: (order) order\nbegin"], ["", "definition \"(<) \\<equiv> subtype\\<^sup>+\\<^sup>+\""], ["", "definition \"(\\<le>) \\<equiv> subtype\\<^sup>*\\<^sup>*\""], ["", "(*** Strict Introduction Rules **********************************************)"], ["", "subsection \\<open>Strict Introduction Rules\\<close>"], ["", "lemma type_less_x_Required_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> < \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < \\<sigma>[1]", "unfolding less_type_def less_basic_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<rho>[1];\n     (\\<sqsubset>\\<^sub>B)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>[1]", "by simp (rule preserve_tranclp; auto)"], ["", "lemma type_less_x_Optional_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[?]\"\n  \"\\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>[?]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < \\<sigma>[?]) &&&\n    (\\<lbrakk>\\<tau> = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < \\<sigma>[?])", "unfolding less_type_def less_basic_type_def less_eq_basic_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau> = \\<rho>[1];\n      (\\<sqsubset>\\<^sub>B)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>[?]) &&&\n    (\\<lbrakk>\\<tau> = \\<rho>[?];\n      (\\<sqsubset>\\<^sub>B)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>[?])", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> = \\<rho>[1];\n     (\\<sqsubset>\\<^sub>B)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho>[1] \\<sigma>[?]\n 2. \\<lbrakk>\\<tau> = \\<rho>[?];\n     (\\<sqsubset>\\<^sub>B)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho>[?] \\<sigma>[?]", "apply (rule preserve_rtranclp''; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<rho>[?];\n     (\\<sqsubset>\\<^sub>B)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho>[?] \\<sigma>[?]", "by (rule preserve_tranclp; auto)"], ["", "lemma type_less_x_Collection_intro [intro]:\n  \"\\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\"\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> < Collection \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>\\<tau> = Collection \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> < Collection \\<sigma>) &&&\n     (\\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> < Collection \\<sigma>)) &&&\n    (\\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma>) &&&\n    (\\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma>) &&&\n    (\\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma>)", "unfolding less_type_def less_eq_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>\\<tau> = Collection \\<rho>;\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                         (Collection \\<sigma>)) &&&\n     (\\<lbrakk>\\<tau> = Set \\<rho>;\n       (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                         (Collection \\<sigma>))) &&&\n    (\\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n      (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                        (Collection \\<sigma>)) &&&\n    (\\<lbrakk>\\<tau> = Bag \\<rho>;\n      (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                        (Collection \\<sigma>)) &&&\n    (\\<lbrakk>\\<tau> = Sequence \\<rho>;\n      (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                        (Collection \\<sigma>))", "apply simp_all"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<tau> = Collection \\<rho>;\n     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<rho>)\n                       (Collection \\<sigma>)\n 2. \\<lbrakk>\\<tau> = Set \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<rho>)\n                       (Collection \\<sigma>)\n 3. \\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<rho>)\n                       (Collection \\<sigma>)\n 4. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<rho>)\n                       (Collection \\<sigma>)\n 5. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<rho>)\n                       (Collection \\<sigma>)", "apply (rule_tac ?f=\"Collection\" in preserve_tranclp; auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> = Set \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<rho>)\n                       (Collection \\<sigma>)\n 2. \\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<rho>)\n                       (Collection \\<sigma>)\n 3. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<rho>)\n                       (Collection \\<sigma>)\n 4. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<rho>)\n                       (Collection \\<sigma>)", "apply (rule preserve_rtranclp''; auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<rho>)\n                       (Collection \\<sigma>)\n 2. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<rho>)\n                       (Collection \\<sigma>)\n 3. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<rho>)\n                       (Collection \\<sigma>)", "apply (rule preserve_rtranclp''; auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<rho>)\n                       (Collection \\<sigma>)\n 2. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<rho>)\n                       (Collection \\<sigma>)", "apply (rule preserve_rtranclp''; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<rho>)\n                       (Collection \\<sigma>)", "by (rule preserve_rtranclp''; auto)"], ["", "lemma type_less_x_Set_intro [intro]:\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Set \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Set \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Set \\<rho>;\n     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Set \\<sigma>)", "by simp (rule preserve_tranclp; auto)"], ["", "lemma type_less_x_OrderedSet_intro [intro]:\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                       (OrderedSet \\<sigma>)", "by simp (rule preserve_tranclp; auto)"], ["", "lemma type_less_x_Bag_intro [intro]:\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Bag \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Bag \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Bag \\<sigma>)", "by simp (rule preserve_tranclp; auto)"], ["", "lemma type_less_x_Sequence_intro [intro]:\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Sequence \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>\n                       (Sequence \\<sigma>)", "by simp (rule preserve_tranclp; auto)"], ["", "lemma fun_or_eq_refl [intro]:\n  \"reflp (\\<lambda>x y. f x y \\<or> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp (\\<lambda>x y. f x y \\<or> x = y)", "by (simp add: reflpI)"], ["", "lemma type_less_x_Tuple_intro [intro]:\n  assumes \"\\<tau> = Tuple \\<pi>\"\n      and \"strict_subtuple (\\<le>) \\<pi> \\<xi>\"\n    shows \"\\<tau> < Tuple \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "have \"subtuple (\\<lambda>\\<tau> \\<sigma>. \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>)\\<^sup>*\\<^sup>* \\<pi> \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtuple\n     (\\<lambda>\\<tau> \\<sigma>.\n         \\<tau> \\<sqsubset> \\<sigma> \\<or>\n         \\<tau> = \\<sigma>)\\<^sup>*\\<^sup>*\n     \\<pi> \\<xi>", "using assms(2) less_eq_type_def"], ["proof (prove)\nusing this:\n  strict_subtuple (\\<le>) \\<pi> \\<xi>\n  (\\<le>) \\<equiv> (\\<sqsubset>)\\<^sup>*\\<^sup>*\n\ngoal (1 subgoal):\n 1. subtuple\n     (\\<lambda>\\<tau> \\<sigma>.\n         \\<tau> \\<sqsubset> \\<sigma> \\<or>\n         \\<tau> = \\<sigma>)\\<^sup>*\\<^sup>*\n     \\<pi> \\<xi>", "by auto"], ["proof (state)\nthis:\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>)\\<^sup>*\\<^sup>*\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "hence \"(subtuple (\\<lambda>\\<tau> \\<sigma>. \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+ \\<pi> \\<xi>\""], ["proof (prove)\nusing this:\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>)\\<^sup>*\\<^sup>*\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. (subtuple\n      (\\<lambda>\\<tau> \\<sigma>.\n          \\<tau> \\<sqsubset> \\<sigma> \\<or>\n          \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n     \\<pi> \\<xi>", "by simp (rule subtuple_to_trancl; auto)"], ["proof (state)\nthis:\n  (subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "hence \"(strict_subtuple (\\<lambda>\\<tau> \\<sigma>. \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>))\\<^sup>*\\<^sup>* \\<pi> \\<xi>\""], ["proof (prove)\nusing this:\n  (subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. (strict_subtuple\n      (\\<lambda>\\<tau> \\<sigma>.\n          \\<tau> \\<sqsubset> \\<sigma> \\<or>\n          \\<tau> = \\<sigma>))\\<^sup>*\\<^sup>*\n     \\<pi> \\<xi>", "by (simp add: tranclp_into_rtranclp)"], ["proof (state)\nthis:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>*\\<^sup>*\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "hence \"(strict_subtuple (\\<lambda>\\<tau> \\<sigma>. \\<tau> \\<sqsubset> \\<sigma> \\<or> \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+ \\<pi> \\<xi>\""], ["proof (prove)\nusing this:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>*\\<^sup>*\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. (strict_subtuple\n      (\\<lambda>\\<tau> \\<sigma>.\n          \\<tau> \\<sqsubset> \\<sigma> \\<or>\n          \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n     \\<pi> \\<xi>", "by (meson assms(2) rtranclpD)"], ["proof (state)\nthis:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Tuple \\<xi>)", "using assms(1)"], ["proof (prove)\nusing this:\n  (strict_subtuple\n    (\\<lambda>\\<tau> \\<sigma>.\n        \\<tau> \\<sqsubset> \\<sigma> \\<or>\n        \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n   \\<pi> \\<xi>\n  \\<tau> = Tuple \\<pi>\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Tuple \\<xi>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(strict_subtuple\n               (\\<lambda>\\<tau> \\<sigma>.\n                   \\<tau> \\<sqsubset> \\<sigma> \\<or>\n                   \\<tau> = \\<sigma>))\\<^sup>+\\<^sup>+\n              \\<pi> \\<xi>;\n     \\<tau> = Tuple \\<pi>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple \\<pi>)\n                       (Tuple \\<xi>)", "by (rule preserve_tranclp; auto)"], ["proof (state)\nthis:\n  \\<tau> < Tuple \\<xi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_less_x_OclSuper_intro [intro]:\n  \"\\<tau> \\<noteq> OclSuper \\<Longrightarrow> \\<tau> < OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<noteq> OclSuper \\<Longrightarrow> \\<tau> < OclSuper", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n    (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper", "proof (induct \\<tau>)"], ["proof (state)\ngoal (9 subgoals):\n 1. OclSuper \\<noteq> OclSuper \\<Longrightarrow>\n    (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclSuper OclSuper\n 2. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 3. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 8. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 9. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case OclSuper"], ["proof (state)\nthis:\n  OclSuper \\<noteq> OclSuper\n\ngoal (9 subgoals):\n 1. OclSuper \\<noteq> OclSuper \\<Longrightarrow>\n    (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclSuper OclSuper\n 2. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 3. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 8. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 9. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "thus ?case"], ["proof (prove)\nusing this:\n  OclSuper \\<noteq> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclSuper OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclSuper OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Required \\<tau>)"], ["proof (state)\nthis:\n  \\<tau>[1] \\<noteq> OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* \\<tau>[1] OclAny[1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[1] OclAny[1]", "apply (rule_tac ?f=\"Required\" in preserve_rtranclp[of basic_subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>\\<^sub>B)\\<^sup>*\\<^sup>* \\<tau> OclAny", "by (metis less_eq_basic_type_def type_less_eq_x_OclAny_intro)"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[1] OclAny[1]\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[1] OclAny[1]\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ OclAny[1] OclAny[?]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[1] OclAny[?]", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[1] OclAny[?]\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[1] OclAny[?]\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ OclAny[?] OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[?] OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[?] OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x.\n       x[1] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[1] OclSuper\n 2. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 7. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[1] OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[1] OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[1] OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[1] OclSuper\n\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Optional \\<tau>)"], ["proof (state)\nthis:\n  \\<tau>[?] \\<noteq> OclSuper\n\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* \\<tau>[?] OclAny[?]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[?] OclAny[?]", "apply (rule_tac ?f=\"Optional\" in preserve_rtranclp[of basic_subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>\\<^sub>B)\\<^sup>*\\<^sup>* \\<tau> OclAny", "by (metis less_eq_basic_type_def type_less_eq_x_OclAny_intro)"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[?] OclAny[?]\n\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau>[?] OclAny[?]\n\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ OclAny[?] OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[?] OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ OclAny[?] OclSuper\n\ngoal (7 subgoals):\n 1. \\<And>x.\n       x[?] \\<noteq> OclSuper \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ x[?] OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 6. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[?] OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[?] OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[?] OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[?] OclSuper\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Collection \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n  Collection \\<tau> \\<noteq> OclSuper\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)", "apply (rule_tac ?f=\"Collection\" in preserve_rtranclp[of subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "using Collection.hyps"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "by force"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ (Collection OclSuper) OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection OclSuper) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection OclSuper) OclSuper\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Collection \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 5. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Collection \\<tau>) OclSuper\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Set \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n  Set \\<tau> \\<noteq> OclSuper\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ (Set \\<tau>) (Collection \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) (Collection \\<tau>)", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) (Collection \\<tau>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) (Collection \\<tau>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)", "apply (rule_tac ?f=\"Collection\" in preserve_rtranclp[of subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "using Set.hyps"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "by force"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Set \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>) OclSuper\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (OrderedSet \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n  OrderedSet \\<tau> \\<noteq> OclSuper\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) (Collection \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) (Collection \\<tau>)", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) (Collection \\<tau>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) (Collection \\<tau>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)", "apply (rule_tac ?f=\"Collection\" in preserve_rtranclp[of subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "using OrderedSet.hyps"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "by force"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        OrderedSet \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n                          OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>) OclSuper\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Bag \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n  Bag \\<tau> \\<noteq> OclSuper\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ (Bag \\<tau>) (Collection \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) (Collection \\<tau>)", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) (Collection \\<tau>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) (Collection \\<tau>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)", "apply (rule_tac ?f=\"Collection\" in preserve_rtranclp[of subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "using Bag.hyps"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "by force"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Bag \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>) OclSuper\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Sequence \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n  Sequence \\<tau> \\<noteq> OclSuper\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>+\\<^sup>+ (Sequence \\<tau>) (Collection \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) (Collection \\<tau>)", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) (Collection \\<tau>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) (Collection \\<tau>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)", "apply (rule_tac ?f=\"Collection\" in preserve_rtranclp[of subtype], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "using Sequence.hyps"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> OclSuper", "by force"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "also"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection \\<tau>) (Collection OclSuper)\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "have \"subtype\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>*\\<^sup>* (Collection OclSuper) OclSuper\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<noteq> OclSuper \\<Longrightarrow>\n                (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n        Sequence \\<tau> \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n                          OclSuper\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "finally"], ["proof (chain)\npicking this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) OclSuper", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>) OclSuper\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "case (Tuple x)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> fmran' x; ?xa \\<noteq> OclSuper\\<rbrakk>\n  \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ ?xa OclSuper\n  Tuple x \\<noteq> OclSuper\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa \\<noteq> OclSuper\\<rbrakk>\n                   \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ xa\nOclSuper;\n        Tuple x \\<noteq> OclSuper\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa \\<in> fmran' x; ?xa \\<noteq> OclSuper\\<rbrakk>\n  \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ ?xa OclSuper\n  Tuple x \\<noteq> OclSuper\n\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper", "by auto"], ["proof (state)\nthis:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple x) OclSuper\n\ngoal:\nNo subgoals!", "qed"], ["", "(*** Strict Elimination Rules ***********************************************)"], ["", "subsection \\<open>Strict Elimination Rules\\<close>"], ["", "lemma type_less_x_Required [elim!]:\n  assumes \"\\<tau> < \\<sigma>[1]\"\n      and \"\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < \\<sigma>[1]", "obtain \\<rho> where \"\\<tau> = \\<rho>[1]\""], ["proof (prove)\nusing this:\n  \\<tau> < \\<sigma>[1]\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = \\<rho>[1] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>[1]\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = \\<rho>[1] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = \\<rho>[1]\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = \\<rho>[1]\n\ngoal (1 subgoal):\n 1. P", "have \"\\<And>\\<tau> \\<sigma>. \\<tau>[1] < \\<sigma>[1] \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<tau>[1] < \\<sigma>[1] \\<Longrightarrow> \\<tau> < \\<sigma>", "unfolding less_type_def less_basic_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau>[1] \\<sigma>[1] \\<Longrightarrow>\n       (\\<sqsubset>\\<^sub>B)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  ?\\<tau>[1] < ?\\<sigma>[1] \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = \\<rho>[1]\n  ?\\<tau>[1] < ?\\<sigma>[1] \\<Longrightarrow> ?\\<tau> < ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = \\<rho>[1]\n  ?\\<tau>[1] < ?\\<sigma>[1] \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = \\<rho>[1]\n  ?\\<tau>[1] < ?\\<sigma>[1] \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n  \\<tau> < \\<sigma>[1]\n  \\<lbrakk>\\<tau> = ?\\<rho>[1]; ?\\<rho> < \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma type_less_x_Optional [elim!]:\n  assumes \"\\<tau> < \\<sigma>[?]\"\n      and \"\\<tau> = OclVoid \\<Longrightarrow> P\"\n      and \"\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P\"\n      and \"\\<And>\\<rho>. \\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\"\nproof -\n  from assms(1) obtain \\<rho> where\n    \"\\<tau> = OclVoid \\<or> \\<tau> = \\<rho>[1] \\<or> \\<tau> = \\<rho>[?]\"\n    unfolding less_type_def\n    by (induct rule: converse_tranclp_induct; auto)\n  moreover have \"\\<And>\\<tau> \\<sigma>. \\<tau>[1] < \\<sigma>[?] \\<Longrightarrow> \\<tau> \\<le> \\<sigma>\"\n    unfolding less_type_def less_eq_basic_type_def\n    apply (drule tranclpD, auto)\n    apply (erule subtype.cases, auto)\n  moreover have \"\\<And>\\<tau> \\<sigma>. \\<tau>[?] < \\<sigma>[?] \\<Longrightarrow> \\<tau> < \\<sigma>\"\n    unfolding less_type_def less_basic_type_def\n    by (rule reflect_tranclp; auto)\n  ultimately show ?thesis\n    using assms by auto\nqed\n*)"], ["", "lemma type_less_x_Optional [elim!]:\n  \"\\<tau> < \\<sigma>[?] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> < \\<sigma>[?];\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>[?];\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (induct rule: converse_tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<sqsubset> \\<sigma>[?];\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>y z.\n       \\<lbrakk>y \\<sqsubset> z;\n        (\\<sqsubset>)\\<^sup>+\\<^sup>+ z \\<sigma>[?];\n        \\<lbrakk>\\<And>\\<rho>.\n                    \\<lbrakk>z = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n                    \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "apply (metis subtype_x_Optional eq_refl less_basic_type_def tranclp.r_into_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<sqsubset> z;\n        (\\<sqsubset>)\\<^sup>+\\<^sup>+ z \\<sigma>[?];\n        \\<lbrakk>\\<And>\\<rho>.\n                    \\<lbrakk>z = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n                    \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = \\<rho>[?]; \\<rho> < \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "apply (erule subtype.cases; auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>'.\n       \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<sigma>'[1] \\<sigma>[?];\n        (\\<sigma>' \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P;\n        \\<tau> \\<le> \\<sigma> \\<Longrightarrow> P;\n        \\<tau> \\<sqsubset>\\<^sub>B \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>\\<tau> \\<sigma>'.\n       \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<sigma>'[?] \\<sigma>[?];\n        (\\<sigma>' < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P;\n        \\<tau> < \\<sigma> \\<Longrightarrow> P;\n        \\<tau> \\<sqsubset>\\<^sub>B \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P", "apply (simp add: converse_rtranclp_into_rtranclp less_eq_basic_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>'.\n       \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<sigma>'[?] \\<sigma>[?];\n        (\\<sigma>' < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P;\n        \\<tau> < \\<sigma> \\<Longrightarrow> P;\n        \\<tau> \\<sqsubset>\\<^sub>B \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P", "by (simp add: less_basic_type_def tranclp_into_tranclp2)"], ["", "lemma type_less_x_Collection [elim!]:\n  \"\\<tau> < Collection \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> < Collection \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Collection \\<rho>; \\<rho> < \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Collection \\<sigma>);\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Collection \\<rho>;\n         (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (induct rule: converse_tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<sqsubset> Collection \\<sigma>;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Collection \\<rho>;\n            (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>y z.\n       \\<lbrakk>y \\<sqsubset> z;\n        (\\<sqsubset>)\\<^sup>+\\<^sup>+ z (Collection \\<sigma>);\n        \\<lbrakk>\\<And>\\<rho>.\n                    \\<lbrakk>z = Collection \\<rho>;\n                     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n                    \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Collection \\<rho>;\n            (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "apply (metis (mono_tags) Nitpick.rtranclp_unfold\n          subtype_x_Collection less_eq_type_def tranclp.r_into_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<sqsubset> z;\n        (\\<sqsubset>)\\<^sup>+\\<^sup>+ z (Collection \\<sigma>);\n        \\<lbrakk>\\<And>\\<rho>.\n                    \\<lbrakk>z = Collection \\<rho>;\n                     (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n                    \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P;\n         \\<And>\\<rho>.\n            \\<lbrakk>z = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Collection \\<rho>;\n            (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<rho> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>\\<rho>.\n           \\<lbrakk>y = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "by (erule subtype.cases;\n      auto simp add: converse_rtranclp_into_rtranclp less_eq_type_def\n                     tranclp_into_tranclp2 tranclp_into_rtranclp)"], ["", "lemma type_less_x_Set [elim!]:\n  assumes \"\\<tau> < Set \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < Set \\<sigma>", "obtain \\<rho> where \"\\<tau> = Set \\<rho>\""], ["proof (prove)\nusing this:\n  \\<tau> < Set \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Set \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Set \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Set \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = Set \\<rho>\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = Set \\<rho>\n\ngoal (1 subgoal):\n 1. P", "have \"\\<And>\\<tau> \\<sigma>. Set \\<tau> < Set \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       Set \\<tau> < Set \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Set \\<tau>)\n        (Set \\<sigma>) \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  Set ?\\<tau> < Set ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = Set \\<rho>\n  Set ?\\<tau> < Set ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = Set \\<rho>\n  Set ?\\<tau> < Set ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = Set \\<rho>\n  Set ?\\<tau> < Set ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n  \\<tau> < Set \\<sigma>\n  \\<lbrakk>\\<tau> = Set ?\\<rho>; ?\\<rho> < \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_less_x_OrderedSet [elim!]:\n  assumes \"\\<tau> < OrderedSet \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < OrderedSet \\<sigma>", "obtain \\<rho> where \"\\<tau> = OrderedSet \\<rho>\""], ["proof (prove)\nusing this:\n  \\<tau> < OrderedSet \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = OrderedSet \\<rho> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (OrderedSet \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = OrderedSet \\<rho> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = OrderedSet \\<rho>\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = OrderedSet \\<rho>\n\ngoal (1 subgoal):\n 1. P", "have \"\\<And>\\<tau> \\<sigma>. OrderedSet \\<tau> < OrderedSet \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       OrderedSet \\<tau> < OrderedSet \\<sigma> \\<Longrightarrow>\n       \\<tau> < \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (OrderedSet \\<tau>)\n        (OrderedSet \\<sigma>) \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  OrderedSet ?\\<tau> < OrderedSet ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = OrderedSet \\<rho>\n  OrderedSet ?\\<tau> < OrderedSet ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = OrderedSet \\<rho>\n  OrderedSet ?\\<tau> < OrderedSet ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = OrderedSet \\<rho>\n  OrderedSet ?\\<tau> < OrderedSet ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n  \\<tau> < OrderedSet \\<sigma>\n  \\<lbrakk>\\<tau> = OrderedSet ?\\<rho>; ?\\<rho> < \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_less_x_Bag [elim!]:\n  assumes \"\\<tau> < Bag \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < Bag \\<sigma>", "obtain \\<rho> where \"\\<tau> = Bag \\<rho>\""], ["proof (prove)\nusing this:\n  \\<tau> < Bag \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Bag \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Bag \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Bag \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = Bag \\<rho>\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = Bag \\<rho>\n\ngoal (1 subgoal):\n 1. P", "have \"\\<And>\\<tau> \\<sigma>. Bag \\<tau> < Bag \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       Bag \\<tau> < Bag \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Bag \\<tau>)\n        (Bag \\<sigma>) \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  Bag ?\\<tau> < Bag ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = Bag \\<rho>\n  Bag ?\\<tau> < Bag ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = Bag \\<rho>\n  Bag ?\\<tau> < Bag ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = Bag \\<rho>\n  Bag ?\\<tau> < Bag ?\\<sigma> \\<Longrightarrow> ?\\<tau> < ?\\<sigma>\n  \\<tau> < Bag \\<sigma>\n  \\<lbrakk>\\<tau> = Bag ?\\<rho>; ?\\<rho> < \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_less_x_Sequence [elim!]:\n  assumes \"\\<tau> < Sequence \\<sigma>\"\n      and \"\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> < \\<sigma> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < Sequence \\<sigma>", "obtain \\<rho> where \"\\<tau> = Sequence \\<rho>\""], ["proof (prove)\nusing this:\n  \\<tau> < Sequence \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Sequence \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Sequence \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<tau> = Sequence \\<rho> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = Sequence \\<rho>\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = Sequence \\<rho>\n\ngoal (1 subgoal):\n 1. P", "have \"\\<And>\\<tau> \\<sigma>. Sequence \\<tau> < Sequence \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       Sequence \\<tau> < Sequence \\<sigma> \\<Longrightarrow>\n       \\<tau> < \\<sigma>", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Sequence \\<tau>)\n        (Sequence \\<sigma>) \\<Longrightarrow>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (rule reflect_tranclp; auto)"], ["proof (state)\nthis:\n  Sequence ?\\<tau> < Sequence ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = Sequence \\<rho>\n  Sequence ?\\<tau> < Sequence ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = Sequence \\<rho>\n  Sequence ?\\<tau> < Sequence ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = Sequence \\<rho>\n  Sequence ?\\<tau> < Sequence ?\\<sigma> \\<Longrightarrow>\n  ?\\<tau> < ?\\<sigma>\n  \\<tau> < Sequence \\<sigma>\n  \\<lbrakk>\\<tau> = Sequence ?\\<rho>; ?\\<rho> < \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We will be able to remove the acyclicity assumption only after\n  we prove that the subtype relation is acyclic.\\<close>"], ["", "lemma type_less_x_Tuple':\n  assumes \"\\<tau> < Tuple \\<xi>\"\n      and \"acyclicP_on (fmran' \\<xi>) subtype\"\n      and \"\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> strict_subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P\"\n    shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<tau> < Tuple \\<xi>", "obtain \\<pi> where \"\\<tau> = Tuple \\<pi>\""], ["proof (prove)\nusing this:\n  \\<tau> < Tuple \\<xi>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<tau> = Tuple \\<pi> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding less_type_def"], ["proof (prove)\nusing this:\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> (Tuple \\<xi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<tau> = Tuple \\<pi> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct rule: converse_tranclp_induct; auto)"], ["proof (state)\nthis:\n  \\<tau> = Tuple \\<pi>\n\ngoal (1 subgoal):\n 1. P", "moreover"], ["proof (state)\nthis:\n  \\<tau> = Tuple \\<pi>\n\ngoal (1 subgoal):\n 1. P", "from assms(2)"], ["proof (chain)\npicking this:\n  acyclicP_on (fmran' \\<xi>) (\\<sqsubset>)", "have\n    \"\\<And>\\<pi>. Tuple \\<pi> < Tuple \\<xi> \\<Longrightarrow> strict_subtuple (\\<le>) \\<pi> \\<xi>\""], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' \\<xi>) (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>.\n       Tuple \\<pi> < Tuple \\<xi> \\<Longrightarrow>\n       strict_subtuple (\\<le>) \\<pi> \\<xi>", "unfolding less_type_def less_eq_type_def"], ["proof (prove)\nusing this:\n  acyclicP_on (fmran' \\<xi>) (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>.\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ (Tuple \\<pi>)\n        (Tuple \\<xi>) \\<Longrightarrow>\n       strict_subtuple (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<pi> \\<xi>", "by (rule_tac ?f=\"Tuple\" in strict_subtuple_rtranclp_intro; auto)"], ["proof (state)\nthis:\n  Tuple ?\\<pi> < Tuple \\<xi> \\<Longrightarrow>\n  strict_subtuple (\\<le>) ?\\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. P", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = Tuple \\<pi>\n  Tuple ?\\<pi> < Tuple \\<xi> \\<Longrightarrow>\n  strict_subtuple (\\<le>) ?\\<pi> \\<xi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = Tuple \\<pi>\n  Tuple ?\\<pi> < Tuple \\<xi> \\<Longrightarrow>\n  strict_subtuple (\\<le>) ?\\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> = Tuple \\<pi>\n  Tuple ?\\<pi> < Tuple \\<xi> \\<Longrightarrow>\n  strict_subtuple (\\<le>) ?\\<pi> \\<xi>\n  \\<tau> < Tuple \\<xi>\n  acyclicP_on (fmran' \\<xi>) (\\<sqsubset>)\n  \\<lbrakk>\\<tau> = Tuple ?\\<pi>;\n   strict_subtuple (\\<le>) ?\\<pi> \\<xi>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_less_x_OclSuper [elim!]:\n  \"\\<tau> < OclSuper \\<Longrightarrow> (\\<tau> \\<noteq> OclSuper \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> < OclSuper;\n     \\<tau> \\<noteq> OclSuper \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "unfolding less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> OclSuper;\n     \\<tau> \\<noteq> OclSuper \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule tranclpD, auto)"], ["", "(*** Properties *************************************************************)"], ["", "subsection \\<open>Properties\\<close>"], ["", "lemma subtype_irrefl:\n  \"\\<tau> < \\<tau> \\<Longrightarrow> False\"\n  for \\<tau> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < \\<tau> \\<Longrightarrow> False", "apply (induct \\<tau>, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < xa\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Tuple x < Tuple x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule type_less_x_Tuple', auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < xa\\<rbrakk>\n                   \\<Longrightarrow> False;\n        xa \\<in> fmran' x;\n        (xa, xa) \\<in> {(x, y). x \\<sqsubset> y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding less_type_def tranclp_unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    (xa, xa)\n                    \\<in> {(x, y). x \\<sqsubset> y}\\<^sup>+\\<rbrakk>\n                   \\<Longrightarrow> False;\n        xa \\<in> fmran' x;\n        (xa, xa) \\<in> {(x, y). x \\<sqsubset> y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma subtype_acyclic:\n  \"acyclicP subtype\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acyclicP (\\<sqsubset>)", "apply (rule acyclicI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (x, x) \\<notin> {(x, y). x \\<sqsubset> y}\\<^sup>+", "apply (simp add: trancl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<not> (\\<sqsubset>)\\<^sup>+\\<^sup>+ x x", "by (metis (mono_tags) OCL_Types.less_type_def OCL_Types.subtype_irrefl)"], ["", "lemma less_le_not_le_type:\n  \"\\<tau> < \\<sigma> \\<longleftrightarrow> \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>\"\n  for \\<tau> \\<sigma> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> < \\<sigma>) =\n    (\\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<tau> < \\<sigma> \\<Longrightarrow>\n    \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>\n 2. \\<tau> \\<le> \\<sigma> \\<and>\n    \\<not> \\<sigma> \\<le> \\<tau> \\<Longrightarrow>\n    \\<tau> < \\<sigma>", "show \"\\<tau> < \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < \\<sigma> \\<Longrightarrow>\n    \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>", "apply (auto simp add: less_type_def less_eq_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<sigma> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis (mono_tags) subtype_irrefl less_type_def tranclp_rtranclp_tranclp)"], ["proof (state)\nthis:\n  \\<tau> < \\<sigma> \\<Longrightarrow>\n  \\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau> \\<le> \\<sigma> \\<and>\n    \\<not> \\<sigma> \\<le> \\<tau> \\<Longrightarrow>\n    \\<tau> < \\<sigma>", "show \"\\<tau> \\<le> \\<sigma> \\<and> \\<not> \\<sigma> \\<le> \\<tau> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<le> \\<sigma> \\<and>\n    \\<not> \\<sigma> \\<le> \\<tau> \\<Longrightarrow>\n    \\<tau> < \\<sigma>", "apply (auto simp add: less_type_def less_eq_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> \\<sigma>;\n     \\<not> (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<sigma> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>+\\<^sup>+ \\<tau> \\<sigma>", "by (metis rtranclpD)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<sigma> \\<and>\n  \\<not> \\<sigma> \\<le> \\<tau> \\<Longrightarrow>\n  \\<tau> < \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_refl_type [iff]:\n  \"\\<tau> \\<le> \\<tau>\"\n  for \\<tau> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<le> \\<tau>", "unfolding less_eq_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> \\<tau>", "by simp"], ["", "lemma order_trans_type:\n  \"\\<tau> \\<le> \\<sigma> \\<Longrightarrow> \\<sigma> \\<le> \\<rho> \\<Longrightarrow> \\<tau> \\<le> \\<rho>\"\n  for \\<tau> \\<sigma> \\<rho> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> \\<sigma>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> \\<rho>", "unfolding less_eq_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> \\<sigma>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<sigma> \\<rho>\\<rbrakk>\n    \\<Longrightarrow> (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> \\<rho>", "by simp"], ["", "lemma antisym_type:\n  \"\\<tau> \\<le> \\<sigma> \\<Longrightarrow> \\<sigma> \\<le> \\<tau> \\<Longrightarrow> \\<tau> = \\<sigma>\"\n  for \\<tau> \\<sigma> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> \\<sigma>; \\<sigma> \\<le> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> = \\<sigma>", "unfolding less_eq_type_def less_type_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sqsubset>)\\<^sup>*\\<^sup>* \\<tau> \\<sigma>;\n     (\\<sqsubset>)\\<^sup>*\\<^sup>* \\<sigma> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> = \\<sigma>", "by (metis (mono_tags, lifting) less_eq_type_def\n      less_le_not_le_type less_type_def rtranclpD)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a OCL_Types.type, order_class)", "apply intro_classes"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (simp add: less_le_not_le_type)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "using order_trans_type"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<tau> \\<le> ?\\<sigma>; ?\\<sigma> \\<le> ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<le> ?\\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (simp add: antisym_type)"], ["", "end"], ["", "(*** Non-Strict Introduction Rules ******************************************)"], ["", "subsection \\<open>Non-Strict Introduction Rules\\<close>"], ["", "lemma type_less_eq_x_Required_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[1]", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<rho>[1];\n     \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < \\<sigma>[1] \\<or> \\<sigma>[1] = \\<tau>", "by auto"], ["", "lemma type_less_eq_x_Optional_intro [intro]:\n  \"\\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?]\"\n  \"\\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?]) &&&\n    (\\<lbrakk>\\<tau> = \\<rho>[?]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> \\<le> \\<sigma>[?])", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau> = \\<rho>[1];\n      \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < \\<sigma>[?] \\<or> \\<sigma>[?] = \\<tau>) &&&\n    (\\<lbrakk>\\<tau> = \\<rho>[?];\n      \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < \\<sigma>[?] \\<or> \\<sigma>[?] = \\<tau>)", "by auto"], ["", "lemma type_less_eq_x_Collection_intro [intro]:\n  \"\\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\"\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>\\<tau> = Collection \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>) &&&\n     (\\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>)) &&&\n    (\\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>) &&&\n    (\\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>) &&&\n    (\\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> \\<le> Collection \\<sigma>)", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>\\<tau> = Collection \\<rho>;\n       \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> < Collection \\<sigma> \\<or>\n                        Collection \\<sigma> = \\<tau>) &&&\n     (\\<lbrakk>\\<tau> = Set \\<rho>;\n       \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n      \\<Longrightarrow> \\<tau> < Collection \\<sigma> \\<or>\n                        Collection \\<sigma> = \\<tau>)) &&&\n    (\\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n      \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma> \\<or>\n                       Collection \\<sigma> = \\<tau>) &&&\n    (\\<lbrakk>\\<tau> = Bag \\<rho>;\n      \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma> \\<or>\n                       Collection \\<sigma> = \\<tau>) &&&\n    (\\<lbrakk>\\<tau> = Sequence \\<rho>;\n      \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n     \\<Longrightarrow> \\<tau> < Collection \\<sigma> \\<or>\n                       Collection \\<sigma> = \\<tau>)", "by auto"], ["", "lemma type_less_eq_x_Set_intro [intro]:\n  \"\\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Set \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> Set \\<sigma>", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Set \\<rho>;\n     \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Set \\<sigma> \\<or> Set \\<sigma> = \\<tau>", "by auto"], ["", "lemma type_less_eq_x_OrderedSet_intro [intro]:\n  \"\\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> OrderedSet \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> OrderedSet \\<sigma>", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = OrderedSet \\<rho>;\n     \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma> \\<or>\n                      OrderedSet \\<sigma> = \\<tau>", "by auto"], ["", "lemma type_less_eq_x_Bag_intro [intro]:\n  \"\\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Bag \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> Bag \\<sigma>", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Bag \\<rho>;\n     \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Bag \\<sigma> \\<or> Bag \\<sigma> = \\<tau>", "by auto"], ["", "lemma type_less_eq_x_Sequence_intro [intro]:\n  \"\\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> \\<tau> \\<le> Sequence \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> Sequence \\<sigma>", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Sequence \\<rho>;\n     \\<rho> < \\<sigma> \\<or> \\<sigma> = \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Sequence \\<sigma> \\<or>\n                      Sequence \\<sigma> = \\<tau>", "by auto"], ["", "lemma type_less_eq_x_Tuple_intro [intro]:\n  \"\\<tau> = Tuple \\<pi> \\<Longrightarrow> subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> \\<tau> \\<le> Tuple \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Tuple \\<pi>; subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> Tuple \\<xi>", "using dual_order.strict_iff_order"], ["proof (prove)\nusing this:\n  (?b < ?a) = (?b \\<le> ?a \\<and> ?a \\<noteq> ?b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = Tuple \\<pi>; subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<le> Tuple \\<xi>", "by blast"], ["", "lemma type_less_eq_x_OclSuper_intro [intro]:\n  \"\\<tau> \\<le> OclSuper\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<le> OclSuper", "unfolding dual_order.order_iff_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < OclSuper \\<or> OclSuper = \\<tau>", "by auto"], ["", "(*** Non-Strict Elimination Rules *******************************************)"], ["", "subsection \\<open>Non-Strict Elimination Rules\\<close>"], ["", "lemma type_less_eq_x_Required [elim!]:\n  \"\\<tau> \\<le> \\<sigma>[1] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> \\<sigma>[1];\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_eq_x_Optional [elim!]:\n  \"\\<tau> \\<le> \\<sigma>[?] \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = \\<rho>[1] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = \\<rho>[?] \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> \\<sigma>[?];\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[1]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = \\<rho>[?]; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq, auto)"], ["", "lemma type_less_eq_x_Collection [elim!]:\n  \"\\<tau> \\<le> Collection \\<sigma> \\<Longrightarrow>\n   (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> \n   (\\<And>\\<rho>. \\<tau> = Collection \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> Collection \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Collection \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_eq_x_Set [elim!]:\n   \"\\<tau> \\<le> Set \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Set \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> Set \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Set \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_eq_x_OrderedSet [elim!]:\n   \"\\<tau> \\<le> OrderedSet \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = OrderedSet \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> OrderedSet \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = OrderedSet \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_eq_x_Bag [elim!]:\n   \"\\<tau> \\<le> Bag \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Bag \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> Bag \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Bag \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_eq_x_Sequence [elim!]:\n   \"\\<tau> \\<le> Sequence \\<sigma> \\<Longrightarrow>\n    (\\<And>\\<rho>. \\<tau> = Sequence \\<rho> \\<Longrightarrow> \\<rho> \\<le> \\<sigma> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> Sequence \\<sigma>;\n     \\<And>\\<rho>.\n        \\<lbrakk>\\<tau> = Sequence \\<rho>; \\<rho> \\<le> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (drule le_imp_less_or_eq; auto)"], ["", "lemma type_less_x_Tuple [elim!]:\n  \"\\<tau> < Tuple \\<xi> \\<Longrightarrow>\n   (\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> strict_subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> < Tuple \\<xi>;\n     \\<And>\\<pi>.\n        \\<lbrakk>\\<tau> = Tuple \\<pi>;\n         strict_subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (erule type_less_x_Tuple')"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>\\<pi>.\n        \\<lbrakk>\\<tau> = Tuple \\<pi>;\n         strict_subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n        \\<Longrightarrow> P) \\<Longrightarrow>\n    acyclicP_on (fmran' \\<xi>) (\\<sqsubset>)\n 2. \\<And>\\<pi>.\n       \\<lbrakk>\\<And>\\<pi>.\n                   \\<lbrakk>\\<tau> = Tuple \\<pi>;\n                    strict_subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<tau> = Tuple \\<pi>; strict_subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> P", "by (meson acyclic_def subtype_acyclic)"], ["", "lemma type_less_eq_x_Tuple [elim!]:\n  \"\\<tau> \\<le> Tuple \\<xi> \\<Longrightarrow>\n   (\\<And>\\<pi>. \\<tau> = Tuple \\<pi> \\<Longrightarrow> subtuple (\\<le>) \\<pi> \\<xi> \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> Tuple \\<xi>;\n     \\<And>\\<pi>.\n        \\<lbrakk>\\<tau> = Tuple \\<pi>; subtuple (\\<le>) \\<pi> \\<xi>\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (drule le_imp_less_or_eq, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>subtuple (\\<le>) \\<xi> \\<xi> \\<Longrightarrow> P;\n     \\<tau> = Tuple \\<xi>\\<rbrakk>\n    \\<Longrightarrow> P", "by (simp add: fmap.rel_refl fmrel_to_subtuple)"], ["", "(*** Simplification Rules ***************************************************)"], ["", "subsection \\<open>Simplification Rules\\<close>"], ["", "lemma type_less_left_simps [simp]:\n  \"OclSuper < \\<sigma> = False\"\n  \"\\<rho>[1] < \\<sigma> = (\\<exists>\\<upsilon>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = \\<upsilon>[1] \\<and> \\<rho> < \\<upsilon> \\<or>\n      \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> \\<le> \\<upsilon>)\"\n  \"\\<rho>[?] < \\<sigma> = (\\<exists>\\<upsilon>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> < \\<upsilon>)\"\n  \"Collection \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Set \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Set \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"OrderedSet \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = OrderedSet \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Bag \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Bag \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Sequence \\<tau> < \\<sigma> = (\\<exists>\\<phi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n      \\<sigma> = Sequence \\<phi> \\<and> \\<tau> < \\<phi>)\"\n  \"Tuple \\<pi> < \\<sigma> = (\\<exists>\\<xi>.\n      \\<sigma> = OclSuper \\<or>\n      \\<sigma> = Tuple \\<xi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((OclSuper < \\<sigma>) = False &&&\n      (\\<rho>[1] < \\<sigma>) =\n      (\\<exists>\\<upsilon>.\n          \\<sigma> = OclSuper \\<or>\n          \\<sigma> = \\<upsilon>[1] \\<and> \\<rho> < \\<upsilon> \\<or>\n          \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> \\<le> \\<upsilon>)) &&&\n     (\\<rho>[?] < \\<sigma>) =\n     (\\<exists>\\<upsilon>.\n         \\<sigma> = OclSuper \\<or>\n         \\<sigma> = \\<upsilon>[?] \\<and> \\<rho> < \\<upsilon>) &&&\n     (Collection \\<tau> < \\<sigma>) =\n     (\\<exists>\\<phi>.\n         \\<sigma> = OclSuper \\<or>\n         \\<sigma> = Collection \\<phi> \\<and> \\<tau> < \\<phi>)) &&&\n    ((Set \\<tau> < \\<sigma>) =\n     (\\<exists>\\<phi>.\n         \\<sigma> = OclSuper \\<or>\n         \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n         \\<sigma> = Set \\<phi> \\<and> \\<tau> < \\<phi>) &&&\n     (OrderedSet \\<tau> < \\<sigma>) =\n     (\\<exists>\\<phi>.\n         \\<sigma> = OclSuper \\<or>\n         \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n         \\<sigma> = OrderedSet \\<phi> \\<and> \\<tau> < \\<phi>)) &&&\n    (Bag \\<tau> < \\<sigma>) =\n    (\\<exists>\\<phi>.\n        \\<sigma> = OclSuper \\<or>\n        \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n        \\<sigma> = Bag \\<phi> \\<and> \\<tau> < \\<phi>) &&&\n    (Sequence \\<tau> < \\<sigma>) =\n    (\\<exists>\\<phi>.\n        \\<sigma> = OclSuper \\<or>\n        \\<sigma> = Collection \\<phi> \\<and> \\<tau> \\<le> \\<phi> \\<or>\n        \\<sigma> = Sequence \\<phi> \\<and> \\<tau> < \\<phi>) &&&\n    (Tuple \\<pi> < \\<sigma>) =\n    (\\<exists>\\<xi>.\n        \\<sigma> = OclSuper \\<or>\n        \\<sigma> = Tuple \\<xi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)", "by (induct \\<sigma>; auto)+"], ["", "lemma type_less_right_simps [simp]:\n  \"\\<tau> < OclSuper = (\\<tau> \\<noteq> OclSuper)\"\n  \"\\<tau> < \\<upsilon>[1] = (\\<exists>\\<rho>. \\<tau> = \\<rho>[1] \\<and> \\<rho> < \\<upsilon>)\"\n  \"\\<tau> < \\<upsilon>[?] = (\\<exists>\\<rho>. \\<tau> = \\<rho>[1] \\<and> \\<rho> \\<le> \\<upsilon> \\<or> \\<tau> = \\<rho>[?] \\<and> \\<rho> < \\<upsilon>)\"\n  \"\\<tau> < Collection \\<sigma> = (\\<exists>\\<phi>.\n      \\<tau> = Collection \\<phi> \\<and> \\<phi> < \\<sigma> \\<or>\n      \\<tau> = Set \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = Bag \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n      \\<tau> = Sequence \\<phi> \\<and> \\<phi> \\<le> \\<sigma>)\"\n  \"\\<tau> < Set \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Set \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < OrderedSet \\<sigma> = (\\<exists>\\<phi>. \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Bag \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Bag \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Sequence \\<sigma> = (\\<exists>\\<phi>. \\<tau> = Sequence \\<phi> \\<and> \\<phi> < \\<sigma>)\"\n  \"\\<tau> < Tuple \\<xi> = (\\<exists>\\<pi>. \\<tau> = Tuple \\<pi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<tau> < OclSuper) = (\\<tau> \\<noteq> OclSuper) &&&\n      (\\<tau> < \\<upsilon>[1]) =\n      (\\<exists>\\<rho>. \\<tau> = \\<rho>[1] \\<and> \\<rho> < \\<upsilon>)) &&&\n     (\\<tau> < \\<upsilon>[?]) =\n     (\\<exists>\\<rho>.\n         \\<tau> = \\<rho>[1] \\<and> \\<rho> \\<le> \\<upsilon> \\<or>\n         \\<tau> = \\<rho>[?] \\<and> \\<rho> < \\<upsilon>) &&&\n     (\\<tau> < Collection \\<sigma>) =\n     (\\<exists>\\<phi>.\n         \\<tau> = Collection \\<phi> \\<and> \\<phi> < \\<sigma> \\<or>\n         \\<tau> = Set \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n         \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n         \\<tau> = Bag \\<phi> \\<and> \\<phi> \\<le> \\<sigma> \\<or>\n         \\<tau> = Sequence \\<phi> \\<and> \\<phi> \\<le> \\<sigma>)) &&&\n    ((\\<tau> < Set \\<sigma>) =\n     (\\<exists>\\<phi>. \\<tau> = Set \\<phi> \\<and> \\<phi> < \\<sigma>) &&&\n     (\\<tau> < OrderedSet \\<sigma>) =\n     (\\<exists>\\<phi>.\n         \\<tau> = OrderedSet \\<phi> \\<and> \\<phi> < \\<sigma>)) &&&\n    (\\<tau> < Bag \\<sigma>) =\n    (\\<exists>\\<phi>. \\<tau> = Bag \\<phi> \\<and> \\<phi> < \\<sigma>) &&&\n    (\\<tau> < Sequence \\<sigma>) =\n    (\\<exists>\\<phi>. \\<tau> = Sequence \\<phi> \\<and> \\<phi> < \\<sigma>) &&&\n    (\\<tau> < Tuple \\<xi>) =\n    (\\<exists>\\<pi>.\n        \\<tau> = Tuple \\<pi> \\<and> strict_subtuple (\\<le>) \\<pi> \\<xi>)", "by auto"], ["", "(*** Upper Semilattice of Types *********************************************)"], ["", "section \\<open>Upper Semilattice of Types\\<close>"], ["", "instantiation type :: (semilattice_sup) semilattice_sup\nbegin"], ["", "fun sup_type where\n  \"OclSuper \\<squnion> \\<sigma> = OclSuper\"\n| \"Required \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of \\<rho>[1] \\<Rightarrow> (\\<tau> \\<squnion> \\<rho>)[1]\n     | \\<rho>[?] \\<Rightarrow> (\\<tau> \\<squnion> \\<rho>)[?]\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Optional \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of \\<rho>[1] \\<Rightarrow> (\\<tau> \\<squnion> \\<rho>)[?]\n     | \\<rho>[?] \\<Rightarrow> (\\<tau> \\<squnion> \\<rho>)[?]\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Collection \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Collection \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Set \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | OrderedSet \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Bag \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Sequence \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Set \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Collection \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Set \\<rho> \\<Rightarrow> Set (\\<tau> \\<squnion> \\<rho>)\n     | OrderedSet \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Bag \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Sequence \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | _ \\<Rightarrow> OclSuper)\"\n| \"OrderedSet \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Collection \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Set \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | OrderedSet \\<rho> \\<Rightarrow> OrderedSet (\\<tau> \\<squnion> \\<rho>)\n     | Bag \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Sequence \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Bag \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Collection \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Set \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | OrderedSet \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Bag \\<rho> \\<Rightarrow> Bag (\\<tau> \\<squnion> \\<rho>)\n     | Sequence \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Sequence \\<tau> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Collection \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Set \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | OrderedSet \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Bag \\<rho> \\<Rightarrow> Collection (\\<tau> \\<squnion> \\<rho>)\n     | Sequence \\<rho> \\<Rightarrow> Sequence (\\<tau> \\<squnion> \\<rho>)\n     | _ \\<Rightarrow> OclSuper)\"\n| \"Tuple \\<pi> \\<squnion> \\<sigma> = (case \\<sigma>\n    of Tuple \\<xi> \\<Rightarrow> Tuple (fmmerge_fun (\\<squnion>) \\<pi> \\<xi>)\n     | _ \\<Rightarrow> OclSuper)\""], ["", "lemma sup_ge1_type:\n  \"\\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>\"\n  for \\<tau> \\<sigma> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>", "proof (induct \\<tau> arbitrary: \\<sigma>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>. OclSuper \\<le> OclSuper \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>. x[1] \\<le> x[1] \\<squnion> \\<sigma>\n 3. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 8. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 9. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case OclSuper"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>. OclSuper \\<le> OclSuper \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>. x[1] \\<le> x[1] \\<squnion> \\<sigma>\n 3. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 8. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 9. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSuper \\<le> OclSuper \\<squnion> \\<sigma>", "by simp"], ["proof (state)\nthis:\n  OclSuper \\<le> OclSuper \\<squnion> \\<sigma>\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>. x[1] \\<le> x[1] \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 8. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Required \\<tau>)"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>. x[1] \\<le> x[1] \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 8. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>[1] \\<le> \\<tau>[1] \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  \\<tau>[1] \\<le> \\<tau>[1] \\<squnion> \\<sigma>\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Optional \\<tau>)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>. x[?] \\<le> x[?] \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 7. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>[?] \\<le> \\<tau>[?] \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  \\<tau>[?] \\<le> \\<tau>[?] \\<squnion> \\<sigma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Collection \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 6. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  Collection \\<tau> \\<le> Collection \\<tau> \\<squnion> \\<sigma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Set \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 5. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  Set \\<tau> \\<le> Set \\<tau> \\<squnion> \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (OrderedSet \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 4. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  OrderedSet \\<tau> \\<le> OrderedSet \\<tau> \\<squnion> \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Bag \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 3. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  Bag \\<tau> \\<le> Bag \\<tau> \\<squnion> \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Sequence \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n 2. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<le> \\<tau> \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>", "by (induct \\<sigma>; auto)"], ["proof (state)\nthis:\n  Sequence \\<tau> \\<le> Sequence \\<tau> \\<squnion> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "case (Tuple \\<pi>)"], ["proof (state)\nthis:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<le> ?xa \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "moreover"], ["proof (state)\nthis:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<le> ?xa \\<squnion> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "have Tuple_less_eq_sup:\n    \"(\\<And>\\<tau> \\<sigma>. \\<tau> \\<in> fmran' \\<pi> \\<Longrightarrow> \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n     Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma>.\n        \\<tau> \\<in> fmran' \\<pi> \\<Longrightarrow>\n        \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n    Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>", "by (cases \\<sigma>, auto)"], ["proof (state)\nthis:\n  (\\<And>\\<tau> \\<sigma>.\n      \\<tau> \\<in> fmran' \\<pi> \\<Longrightarrow>\n      \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n  Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<le> xa \\<squnion> \\<sigma>) \\<Longrightarrow>\n       Tuple x \\<le> Tuple x \\<squnion> \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<le> ?xa \\<squnion> ?\\<sigma>\n  (\\<And>\\<tau> \\<sigma>.\n      \\<tau> \\<in> fmran' \\<pi> \\<Longrightarrow>\n      \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n  Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<le> ?xa \\<squnion> ?\\<sigma>\n  (\\<And>\\<tau> \\<sigma>.\n      \\<tau> \\<in> fmran' \\<pi> \\<Longrightarrow>\n      \\<tau> \\<le> \\<tau> \\<squnion> \\<sigma>) \\<Longrightarrow>\n  Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>\n\ngoal (1 subgoal):\n 1. Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>", "by (cases \\<sigma>, auto)"], ["proof (state)\nthis:\n  Tuple \\<pi> \\<le> Tuple \\<pi> \\<squnion> \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sup_commut_type:\n  \"\\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>\"\n  for \\<tau> \\<sigma> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>", "proof (induct \\<tau> arbitrary: \\<sigma>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>.\n       OclSuper \\<squnion> \\<sigma> = \\<sigma> \\<squnion> OclSuper\n 2. \\<And>x \\<sigma>. x[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[1]\n 3. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 8. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 9. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case OclSuper"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>.\n       OclSuper \\<squnion> \\<sigma> = \\<sigma> \\<squnion> OclSuper\n 2. \\<And>x \\<sigma>. x[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[1]\n 3. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 8. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 9. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSuper \\<squnion> \\<sigma> = \\<sigma> \\<squnion> OclSuper", "by (cases \\<sigma>; simp add: less_eq_type_def)"], ["proof (state)\nthis:\n  OclSuper \\<squnion> \\<sigma> = \\<sigma> \\<squnion> OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>. x[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[1]\n 2. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 8. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Required \\<tau>)"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>. x[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[1]\n 2. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 7. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 8. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>[1]", "by (cases \\<sigma>; simp add: sup_commute)"], ["proof (state)\nthis:\n  \\<tau>[1] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>[1]\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 7. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Optional \\<tau>)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>. x[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> x[?]\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 6. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 7. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>[?]", "by (cases \\<sigma>; simp add: sup_commute)"], ["proof (state)\nthis:\n  \\<tau>[?] \\<squnion> \\<sigma> = \\<sigma> \\<squnion> \\<tau>[?]\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 6. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Collection \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Collection \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Collection \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 5. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 6. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (1 subgoal):\n 1. Collection \\<tau> \\<squnion> \\<sigma> =\n    \\<sigma> \\<squnion> Collection \\<tau>", "by (cases \\<sigma>; simp)"], ["proof (state)\nthis:\n  Collection \\<tau> \\<squnion> \\<sigma> =\n  \\<sigma> \\<squnion> Collection \\<tau>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 5. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Set \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 4. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 5. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (1 subgoal):\n 1. Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>", "by (cases \\<sigma>; simp)"], ["proof (state)\nthis:\n  Set \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Set \\<tau>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 4. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (OrderedSet \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       OrderedSet \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> OrderedSet \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 3. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 4. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (1 subgoal):\n 1. OrderedSet \\<tau> \\<squnion> \\<sigma> =\n    \\<sigma> \\<squnion> OrderedSet \\<tau>", "by (cases \\<sigma>; simp)"], ["proof (state)\nthis:\n  OrderedSet \\<tau> \\<squnion> \\<sigma> =\n  \\<sigma> \\<squnion> OrderedSet \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 3. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Bag \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n 2. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 3. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (1 subgoal):\n 1. Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>", "by (cases \\<sigma>; simp)"], ["proof (state)\nthis:\n  Bag \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Bag \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 2. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Sequence \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       (\\<And>\\<sigma>.\n           \\<tau> \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> \\<tau>) \\<Longrightarrow>\n       Sequence \\<tau> \\<squnion> \\<sigma> =\n       \\<sigma> \\<squnion> Sequence \\<tau>\n 2. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> \\<tau>\n\ngoal (1 subgoal):\n 1. Sequence \\<tau> \\<squnion> \\<sigma> =\n    \\<sigma> \\<squnion> Sequence \\<tau>", "by (cases \\<sigma>; simp)"], ["proof (state)\nthis:\n  Sequence \\<tau> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Sequence \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "case (Tuple \\<pi>)"], ["proof (state)\nthis:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> ?xa\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       (\\<And>xa \\<sigma>.\n           xa \\<in> fmran' x \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> =\n           \\<sigma> \\<squnion> xa) \\<Longrightarrow>\n       Tuple x \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n  ?xa \\<squnion> ?\\<sigma> = ?\\<sigma> \\<squnion> ?xa\n\ngoal (1 subgoal):\n 1. Tuple \\<pi> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple \\<pi>", "apply (cases \\<sigma>; simp add: less_eq_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x9.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n                   xa \\<squnion> \\<sigma> = \\<sigma> \\<squnion> xa;\n        \\<sigma> = Tuple x9;\n        \\<And>xa \\<sigma>.\n           xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> = \\<sigma> \\<squnion> xa\\<rbrakk>\n       \\<Longrightarrow> fmmerge (\\<squnion>) \\<pi> x9 =\n                         fmmerge (\\<squnion>) x9 \\<pi>", "using fmmerge_commut"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<in> fmran' ?xm \\<Longrightarrow>\n      ?f x y = ?f y x) \\<Longrightarrow>\n  fmmerge ?f ?xm ?ym = fmmerge ?f ?ym ?xm\n\ngoal (1 subgoal):\n 1. \\<And>x9.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n                   xa \\<squnion> \\<sigma> = \\<sigma> \\<squnion> xa;\n        \\<sigma> = Tuple x9;\n        \\<And>xa \\<sigma>.\n           xa \\<in> fmran' \\<pi> \\<Longrightarrow>\n           xa \\<squnion> \\<sigma> = \\<sigma> \\<squnion> xa\\<rbrakk>\n       \\<Longrightarrow> fmmerge (\\<squnion>) \\<pi> x9 =\n                         fmmerge (\\<squnion>) x9 \\<pi>", "by blast"], ["proof (state)\nthis:\n  Tuple \\<pi> \\<squnion> \\<sigma> = \\<sigma> \\<squnion> Tuple \\<pi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sup_least_type:\n  \"\\<tau> \\<le> \\<rho> \\<Longrightarrow> \\<sigma> \\<le> \\<rho> \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>\"\n  for \\<tau> \\<sigma> \\<rho> :: \"'a type\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>", "proof (induct \\<rho> arbitrary: \\<tau> \\<sigma>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> OclSuper; \\<sigma> \\<le> OclSuper\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OclSuper\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n 3. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 7. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 8. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 9. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case OclSuper"], ["proof (state)\nthis:\n  \\<tau> \\<le> OclSuper\n  \\<sigma> \\<le> OclSuper\n\ngoal (9 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> OclSuper; \\<sigma> \\<le> OclSuper\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OclSuper\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n 3. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 7. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 8. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 9. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> OclSuper", "using eq_refl"], ["proof (prove)\nusing this:\n  ?x = ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> OclSuper", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 7. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 8. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 7. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 8. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Required x)"], ["proof (state)\nthis:\n  \\<tau> \\<le> x[1]\n  \\<sigma> \\<le> x[1]\n\ngoal (8 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 7. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 8. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> x[1]", "apply (insert Required)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> x[1]; \\<sigma> \\<le> x[1]\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[1]", "by (erule type_less_eq_x_Required; erule type_less_eq_x_Required; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> x[1]\n\ngoal (7 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 7. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 7. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Optional x)"], ["proof (state)\nthis:\n  \\<tau> \\<le> x[?]\n  \\<sigma> \\<le> x[?]\n\ngoal (7 subgoals):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 6. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 7. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> x[?]", "apply (insert Optional)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<le> x[?]; \\<sigma> \\<le> x[?]\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> x[?]", "by (erule type_less_eq_x_Optional; erule type_less_eq_x_Optional; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> x[?]\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 6. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 6. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Collection \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> Collection \\<rho>\n  \\<sigma> \\<le> Collection \\<rho>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Collection \\<rho>;\n        \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 5. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 6. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>", "apply (insert Collection)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>;\n     \\<tau> \\<le> Collection \\<rho>;\n     \\<sigma> \\<le> Collection \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>", "by (erule type_less_eq_x_Collection; erule type_less_eq_x_Collection; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> Collection \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 5. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 5. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Set \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> Set \\<rho>\n  \\<sigma> \\<le> Set \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 4. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 5. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>", "apply (insert Set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>;\n     \\<tau> \\<le> Set \\<rho>; \\<sigma> \\<le> Set \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>", "by (erule type_less_eq_x_Set; erule type_less_eq_x_Set; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> Set \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 4. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 4. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (OrderedSet \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> OrderedSet \\<rho>\n  \\<sigma> \\<le> OrderedSet \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> OrderedSet \\<rho>;\n        \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 3. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 4. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>", "apply (insert OrderedSet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>;\n     \\<tau> \\<le> OrderedSet \\<rho>;\n     \\<sigma> \\<le> OrderedSet \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>", "by (erule type_less_eq_x_OrderedSet; erule type_less_eq_x_OrderedSet; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> OrderedSet \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 3. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 3. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Bag \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> Bag \\<rho>\n  \\<sigma> \\<le> Bag \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n 2. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 3. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>", "apply (insert Bag)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>;\n     \\<tau> \\<le> Bag \\<rho>; \\<sigma> \\<le> Bag \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>", "by (erule type_less_eq_x_Bag; erule type_less_eq_x_Bag; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> Bag \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Sequence \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> Sequence \\<rho>\n  \\<sigma> \\<le> Sequence \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>\\<rho> \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                   \\<lbrakk>\\<tau> \\<le> \\<rho>;\n                    \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma>\n                                     \\<le> \\<rho>;\n        \\<tau> \\<le> Sequence \\<rho>;\n        \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n 2. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<tau> \\<le> \\<rho>; ?\\<sigma> \\<le> \\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> \\<rho>\n  \\<tau> \\<le> Sequence \\<rho>\n  \\<sigma> \\<le> Sequence \\<rho>\n\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>", "apply (insert Sequence)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau> \\<sigma>.\n                \\<lbrakk>\\<tau> \\<le> \\<rho>; \\<sigma> \\<le> \\<rho>\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> \\<rho>;\n     \\<tau> \\<le> Sequence \\<rho>; \\<sigma> \\<le> Sequence \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>", "by (erule type_less_eq_x_Sequence; erule type_less_eq_x_Sequence; auto)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> Sequence \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "case (Tuple \\<pi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> fmran' \\<pi>; ?\\<tau> \\<le> ?xa;\n   ?\\<sigma> \\<le> ?xa\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<squnion> ?\\<sigma> \\<le> ?xa\n  \\<tau> \\<le> Tuple \\<pi>\n  \\<sigma> \\<le> Tuple \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> \\<le> Tuple x; \\<sigma> \\<le> Tuple x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<squnion> \\<sigma> \\<le> Tuple \\<pi>", "apply (insert Tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                \\<lbrakk>xa \\<in> fmran' \\<pi>; \\<tau> \\<le> xa;\n                 \\<sigma> \\<le> xa\\<rbrakk>\n                \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n     \\<tau> \\<le> Tuple \\<pi>; \\<sigma> \\<le> Tuple \\<pi>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> Tuple \\<pi>", "apply (erule type_less_eq_x_Tuple; erule type_less_eq_x_Tuple; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>''.\n       \\<lbrakk>\\<And>xa \\<tau> \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' \\<pi>; \\<tau> \\<le> xa;\n                    \\<sigma> \\<le> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> \\<squnion> \\<sigma> \\<le> xa;\n        \\<tau> = Tuple \\<pi>'; subtuple (\\<le>) \\<pi>' \\<pi>;\n        \\<sigma> = Tuple \\<pi>''; subtuple (\\<le>) \\<pi>'' \\<pi>\\<rbrakk>\n       \\<Longrightarrow> Tuple (fmmerge (\\<squnion>) \\<pi>' \\<pi>'')\n                         \\<le> Tuple \\<pi>", "by (rule_tac ?\\<pi>=\"(fmmerge (\\<squnion>) \\<pi>' \\<pi>'')\" in type_less_eq_x_Tuple_intro;\n        simp add: fmrel_on_fset_fmmerge1)"], ["proof (state)\nthis:\n  \\<tau> \\<squnion> \\<sigma> \\<le> Tuple \\<pi>\n\ngoal:\nNo subgoals!", "qed"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a OCL_Types.type, semilattice_sup_class)", "apply intro_classes"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x", "apply (simp add: sup_ge1_type)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x", "apply (simp add: sup_commut_type sup_ge1_type)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (simp add: sup_least_type)"], ["", "end"], ["", "(*** Helper Relations *******************************************************)"], ["", "section \\<open>Helper Relations\\<close>"], ["", "abbreviation between (\"_/ = _\\<midarrow>_\"  [51, 51, 51] 50) where\n  \"x = y\\<midarrow>z \\<equiv> y \\<le> x \\<and> x \\<le> z\""], ["", "inductive element_type where\n  \"element_type (Collection \\<tau>) \\<tau>\"\n| \"element_type (Set \\<tau>) \\<tau>\"\n| \"element_type (OrderedSet \\<tau>) \\<tau>\"\n| \"element_type (Bag \\<tau>) \\<tau>\"\n| \"element_type (Sequence \\<tau>) \\<tau>\""], ["", "lemma element_type_alt_simps:\n  \"element_type \\<tau> \\<sigma> = \n     (Collection \\<sigma> = \\<tau> \\<or>\n      Set \\<sigma> = \\<tau> \\<or>\n      OrderedSet \\<sigma> = \\<tau> \\<or>\n      Bag \\<sigma> = \\<tau> \\<or>\n      Sequence \\<sigma> = \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. element_type \\<tau> \\<sigma> =\n    (Collection \\<sigma> = \\<tau> \\<or>\n     Set \\<sigma> = \\<tau> \\<or>\n     OrderedSet \\<sigma> = \\<tau> \\<or>\n     Bag \\<sigma> = \\<tau> \\<or> Sequence \\<sigma> = \\<tau>)", "by (auto simp add: element_type.simps)"], ["", "inductive update_element_type where\n  \"update_element_type (Collection _) \\<tau> (Collection \\<tau>)\"\n| \"update_element_type (Set _) \\<tau> (Set \\<tau>)\"\n| \"update_element_type (OrderedSet _) \\<tau> (OrderedSet \\<tau>)\"\n| \"update_element_type (Bag _) \\<tau> (Bag \\<tau>)\"\n| \"update_element_type (Sequence _) \\<tau> (Sequence \\<tau>)\""], ["", "inductive to_unique_collection where\n  \"to_unique_collection (Collection \\<tau>) (Set \\<tau>)\"\n| \"to_unique_collection (Set \\<tau>) (Set \\<tau>)\"\n| \"to_unique_collection (OrderedSet \\<tau>) (OrderedSet \\<tau>)\"\n| \"to_unique_collection (Bag \\<tau>) (Set \\<tau>)\"\n| \"to_unique_collection (Sequence \\<tau>) (OrderedSet \\<tau>)\""], ["", "inductive to_nonunique_collection where\n  \"to_nonunique_collection (Collection \\<tau>) (Bag \\<tau>)\"\n| \"to_nonunique_collection (Set \\<tau>) (Bag \\<tau>)\"\n| \"to_nonunique_collection (OrderedSet \\<tau>) (Sequence \\<tau>)\"\n| \"to_nonunique_collection (Bag \\<tau>) (Bag \\<tau>)\"\n| \"to_nonunique_collection (Sequence \\<tau>) (Sequence \\<tau>)\""], ["", "inductive to_ordered_collection where\n  \"to_ordered_collection (Collection \\<tau>) (Sequence \\<tau>)\"\n| \"to_ordered_collection (Set \\<tau>) (OrderedSet \\<tau>)\"\n| \"to_ordered_collection (OrderedSet \\<tau>) (OrderedSet \\<tau>)\"\n| \"to_ordered_collection (Bag \\<tau>) (Sequence \\<tau>)\"\n| \"to_ordered_collection (Sequence \\<tau>) (Sequence \\<tau>)\""], ["", "fun to_single_type where\n  \"to_single_type OclSuper = OclSuper\"\n| \"to_single_type \\<tau>[1] = \\<tau>[1]\"\n| \"to_single_type \\<tau>[?] = \\<tau>[?]\"\n| \"to_single_type (Collection \\<tau>) = to_single_type \\<tau>\"\n| \"to_single_type (Set \\<tau>) = to_single_type \\<tau>\"\n| \"to_single_type (OrderedSet \\<tau>) = to_single_type \\<tau>\"\n| \"to_single_type (Bag \\<tau>) = to_single_type \\<tau>\"\n| \"to_single_type (Sequence \\<tau>) = to_single_type \\<tau>\"\n| \"to_single_type (Tuple \\<pi>) = Tuple \\<pi>\""], ["", "fun to_required_type where\n  \"to_required_type \\<tau>[1] = \\<tau>[1]\"\n| \"to_required_type \\<tau>[?] = \\<tau>[1]\"\n| \"to_required_type \\<tau> = \\<tau>\""], ["", "fun to_optional_type_nested where\n  \"to_optional_type_nested OclSuper = OclSuper\"\n| \"to_optional_type_nested \\<tau>[1] = \\<tau>[?]\"\n| \"to_optional_type_nested \\<tau>[?] = \\<tau>[?]\"\n| \"to_optional_type_nested (Collection \\<tau>) = Collection (to_optional_type_nested \\<tau>)\"\n| \"to_optional_type_nested (Set \\<tau>) = Set (to_optional_type_nested \\<tau>)\"\n| \"to_optional_type_nested (OrderedSet \\<tau>) = OrderedSet (to_optional_type_nested \\<tau>)\"\n| \"to_optional_type_nested (Bag \\<tau>) = Bag (to_optional_type_nested \\<tau>)\"\n| \"to_optional_type_nested (Sequence \\<tau>) = Sequence (to_optional_type_nested \\<tau>)\"\n| \"to_optional_type_nested (Tuple \\<pi>) = Tuple (fmmap to_optional_type_nested \\<pi>)\""], ["", "(*** Determinism ************************************************************)"], ["", "section \\<open>Determinism\\<close>"], ["", "lemma element_type_det:\n  \"element_type \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   element_type \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>element_type \\<tau> \\<sigma>\\<^sub>1;\n     element_type \\<tau> \\<sigma>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2", "by (induct rule: element_type.induct; simp add: element_type.simps)"], ["", "lemma update_element_type_det:\n  \"update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>1 \\<Longrightarrow>\n   update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>2 \\<Longrightarrow> \\<rho>\\<^sub>1 = \\<rho>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>1;\n     update_element_type \\<tau> \\<sigma> \\<rho>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<rho>\\<^sub>1 = \\<rho>\\<^sub>2", "by (induct rule: update_element_type.induct; simp add: update_element_type.simps)"], ["", "lemma to_unique_collection_det:\n  \"to_unique_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_unique_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>to_unique_collection \\<tau> \\<sigma>\\<^sub>1;\n     to_unique_collection \\<tau> \\<sigma>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2", "by (induct rule: to_unique_collection.induct; simp add: to_unique_collection.simps)"], ["", "lemma to_nonunique_collection_det:\n  \"to_nonunique_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_nonunique_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>to_nonunique_collection \\<tau> \\<sigma>\\<^sub>1;\n     to_nonunique_collection \\<tau> \\<sigma>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2", "by (induct rule: to_nonunique_collection.induct; simp add: to_nonunique_collection.simps)"], ["", "lemma to_ordered_collection_det:\n  \"to_ordered_collection \\<tau> \\<sigma>\\<^sub>1 \\<Longrightarrow>\n   to_ordered_collection \\<tau> \\<sigma>\\<^sub>2 \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>to_ordered_collection \\<tau> \\<sigma>\\<^sub>1;\n     to_ordered_collection \\<tau> \\<sigma>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>\\<^sub>1 = \\<sigma>\\<^sub>2", "by (induct rule: to_ordered_collection.induct; simp add: to_ordered_collection.simps)"], ["", "(*** Code Setup *************************************************************)"], ["", "section \\<open>Code Setup\\<close>"], ["", "code_pred subtype"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "function subtype_fun :: \"'a::order type \\<Rightarrow> 'a type \\<Rightarrow> bool\" where\n  \"subtype_fun OclSuper _ = False\"\n| \"subtype_fun (Required \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | \\<rho>[1] \\<Rightarrow> basic_subtype_fun \\<tau> \\<rho>\n     | \\<rho>[?] \\<Rightarrow> basic_subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Optional \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | \\<rho>[?] \\<Rightarrow> basic_subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Collection \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Collection \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Set \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Collection \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n     | Set \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (OrderedSet \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Collection \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n     | OrderedSet \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Bag \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Collection \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n     | Bag \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Sequence \\<tau>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Collection \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n     | Sequence \\<rho> \\<Rightarrow> subtype_fun \\<tau> \\<rho>\n     | _ \\<Rightarrow> False)\"\n| \"subtype_fun (Tuple \\<pi>) \\<sigma> = (case \\<sigma>\n    of OclSuper \\<Rightarrow> True\n     | Tuple \\<xi> \\<Rightarrow> strict_subtuple_fun (\\<lambda>\\<tau> \\<sigma>. subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>) \\<pi> \\<xi>\n     | _ \\<Rightarrow> False)\""], ["proof (prove)\ngoal (46 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>uu_. x = (OclSuper, uu_) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (\\<tau>[1], \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (\\<tau>[?], \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (Collection \\<tau>, \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (Set \\<tau>, \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (OrderedSet \\<tau>, \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (Bag \\<tau>, \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<tau> \\<sigma>.\n           x = (Sequence \\<tau>, \\<sigma>) \\<Longrightarrow> P;\n        \\<And>\\<pi> \\<sigma>.\n           x = (Tuple \\<pi>, \\<sigma>) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>uu_ uua_.\n       (OclSuper, uu_) = (OclSuper, uua_) \\<Longrightarrow> False = False\n 3. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (\\<tau>[1], \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | x[1] \\<Rightarrow> basic_subtype_fun \\<tau> x\n        | \\<rho>[?] \\<Rightarrow>\n            basic_subtype_fun \\<tau> \\<rho> \\<or> \\<tau> = \\<rho>\n        | _ \\<Rightarrow> False)\n 4. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (\\<tau>[?], \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | x[?] \\<Rightarrow> basic_subtype_fun \\<tau> x\n        | _ \\<Rightarrow> False)\n 5. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (Collection \\<tau>, \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | Collection x1 \\<Rightarrow> subtype_fun_sumC (\\<tau>, x1)\n        | _ \\<Rightarrow> False)\n 6. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (Set \\<tau>, \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | Collection \\<rho> \\<Rightarrow>\n            subtype_fun_sumC (\\<tau>, \\<rho>) \\<or> \\<tau> = \\<rho>\n        | Set x1 \\<Rightarrow> subtype_fun_sumC (\\<tau>, x1)\n        | _ \\<Rightarrow> False)\n 7. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (OrderedSet \\<tau>, \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | Collection \\<rho> \\<Rightarrow>\n            subtype_fun_sumC (\\<tau>, \\<rho>) \\<or> \\<tau> = \\<rho>\n        | OrderedSet x1 \\<Rightarrow> subtype_fun_sumC (\\<tau>, x1)\n        | _ \\<Rightarrow> False)\n 8. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (Bag \\<tau>, \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | Collection \\<rho> \\<Rightarrow>\n            subtype_fun_sumC (\\<tau>, \\<rho>) \\<or> \\<tau> = \\<rho>\n        | Bag x1 \\<Rightarrow> subtype_fun_sumC (\\<tau>, x1)\n        | _ \\<Rightarrow> False)\n 9. \\<And>uu_ \\<tau> \\<sigma>.\n       (OclSuper, uu_) = (Sequence \\<tau>, \\<sigma>) \\<Longrightarrow>\n       False =\n       (case \\<sigma> of OclSuper \\<Rightarrow> True\n        | Collection \\<rho> \\<Rightarrow>\n            subtype_fun_sumC (\\<tau>, \\<rho>) \\<or> \\<tau> = \\<rho>\n        | Sequence x1 \\<Rightarrow> subtype_fun_sumC (\\<tau>, x1)\n        | _ \\<Rightarrow> False)\n 10. \\<And>uu_ \\<pi> \\<sigma>.\n        (OclSuper, uu_) = (Tuple \\<pi>, \\<sigma>) \\<Longrightarrow>\n        False =\n        (case \\<sigma> of OclSuper \\<Rightarrow> True\n         | Tuple \\<xi> \\<Rightarrow>\n             strict_subtuple_fun\n              (\\<lambda>\\<tau> \\<sigma>.\n                  subtype_fun_sumC (\\<tau>, \\<sigma>) \\<or>\n                  \\<tau> = \\<sigma>)\n              \\<pi> \\<xi>\n         | _ \\<Rightarrow> False)\nA total of 46 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All subtype_fun_dom", "by (relation \"measure (\\<lambda>(xs, ys). size ys)\";\n      auto simp add: elem_le_ffold' fmran'I)"], ["", "lemma less_type_code [code]:\n  \"(<) = subtype_fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (<) = subtype_fun", "proof (intro ext iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa. x < xa \\<Longrightarrow> subtype_fun x xa\n 2. \\<And>x xa. subtype_fun x xa \\<Longrightarrow> x < xa", "fix \\<tau> \\<sigma> :: \"'a type\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa. x < xa \\<Longrightarrow> subtype_fun x xa\n 2. \\<And>x xa. subtype_fun x xa \\<Longrightarrow> x < xa", "show \"\\<tau> < \\<sigma> \\<Longrightarrow> subtype_fun \\<tau> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < \\<sigma> \\<Longrightarrow> subtype_fun \\<tau> \\<sigma>", "proof (induct \\<tau> arbitrary: \\<sigma>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>.\n       OclSuper < \\<sigma> \\<Longrightarrow> subtype_fun OclSuper \\<sigma>\n 2. \\<And>x \\<sigma>.\n       x[1] < \\<sigma> \\<Longrightarrow> subtype_fun x[1] \\<sigma>\n 3. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 8. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 9. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case OclSuper"], ["proof (state)\nthis:\n  OclSuper < \\<sigma>\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>.\n       OclSuper < \\<sigma> \\<Longrightarrow> subtype_fun OclSuper \\<sigma>\n 2. \\<And>x \\<sigma>.\n       x[1] < \\<sigma> \\<Longrightarrow> subtype_fun x[1] \\<sigma>\n 3. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 8. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 9. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  OclSuper < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun OclSuper \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun OclSuper \\<sigma>\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[1] < \\<sigma> \\<Longrightarrow> subtype_fun x[1] \\<sigma>\n 2. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 8. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[1] < \\<sigma> \\<Longrightarrow> subtype_fun x[1] \\<sigma>\n 2. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 8. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Required \\<tau>)"], ["proof (state)\nthis:\n  \\<tau>[1] < \\<sigma>\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[1] < \\<sigma> \\<Longrightarrow> subtype_fun x[1] \\<sigma>\n 2. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 7. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 8. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau>[1] < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun \\<tau>[1] \\<sigma>", "by (cases \\<sigma>; auto simp: less_basic_type_code less_eq_basic_type_code)"], ["proof (state)\nthis:\n  subtype_fun \\<tau>[1] \\<sigma>\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 7. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 7. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Optional \\<tau>)"], ["proof (state)\nthis:\n  \\<tau>[?] < \\<sigma>\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>.\n       x[?] < \\<sigma> \\<Longrightarrow> subtype_fun x[?] \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 6. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 7. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau>[?] < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun \\<tau>[?] \\<sigma>", "by (cases \\<sigma>; auto simp: less_basic_type_code less_eq_basic_type_code)"], ["proof (state)\nthis:\n  subtype_fun \\<tau>[?] \\<sigma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 6. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 6. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Collection \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Collection \\<tau> < \\<sigma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Collection \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Collection \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 5. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 6. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Collection \\<tau> < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun (Collection \\<tau>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (Collection \\<tau>) \\<sigma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 5. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 5. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Set \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Set \\<tau> < \\<sigma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Set \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Set \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 4. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 5. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Set \\<tau> < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun (Set \\<tau>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (Set \\<tau>) \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 4. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 4. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (OrderedSet \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  OrderedSet \\<tau> < \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        OrderedSet \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (OrderedSet \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 3. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 4. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  OrderedSet \\<tau> < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun (OrderedSet \\<tau>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (OrderedSet \\<tau>) \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 3. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 3. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Bag \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Bag \\<tau> < \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Bag \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Bag \\<tau>) \\<sigma>\n 2. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 3. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Bag \\<tau> < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun (Bag \\<tau>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (Bag \\<tau>) \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 2. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 2. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Sequence \\<tau>)"], ["proof (state)\nthis:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Sequence \\<tau> < \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<tau> < \\<sigma> \\<Longrightarrow>\n                   subtype_fun \\<tau> \\<sigma>;\n        Sequence \\<tau> < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Sequence \\<tau>) \\<sigma>\n 2. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<tau> < ?\\<sigma> \\<Longrightarrow> subtype_fun \\<tau> ?\\<sigma>\n  Sequence \\<tau> < \\<sigma>\n\ngoal (1 subgoal):\n 1. subtype_fun (Sequence \\<tau>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (Sequence \\<tau>) \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "case (Tuple \\<pi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> fmran' \\<pi>; ?xa < ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> subtype_fun ?xa ?\\<sigma>\n  Tuple \\<pi> < \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "have\n      \"\\<And>\\<xi>. subtuple (\\<le>) \\<pi> \\<xi> \\<longrightarrow>\n       subtuple (\\<lambda>\\<tau> \\<sigma>. subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>) \\<pi> \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<xi>.\n       subtuple (\\<le>) \\<pi> \\<xi> \\<longrightarrow>\n       subtuple\n        (\\<lambda>\\<tau> \\<sigma>.\n            subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n        \\<pi> \\<xi>", "by (rule subtuple_mono; auto simp add: Tuple.hyps)"], ["proof (state)\nthis:\n  subtuple (\\<le>) \\<pi> ?\\<xi> \\<longrightarrow>\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n   \\<pi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<sigma>.\n       \\<lbrakk>\\<And>xa \\<sigma>.\n                   \\<lbrakk>xa \\<in> fmran' x; xa < \\<sigma>\\<rbrakk>\n                   \\<Longrightarrow> subtype_fun xa \\<sigma>;\n        Tuple x < \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> subtype_fun (Tuple x) \\<sigma>", "with Tuple.prems"], ["proof (chain)\npicking this:\n  Tuple \\<pi> < \\<sigma>\n  subtuple (\\<le>) \\<pi> ?\\<xi> \\<longrightarrow>\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n   \\<pi> ?\\<xi>", "show ?case"], ["proof (prove)\nusing this:\n  Tuple \\<pi> < \\<sigma>\n  subtuple (\\<le>) \\<pi> ?\\<xi> \\<longrightarrow>\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n   \\<pi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. subtype_fun (Tuple \\<pi>) \\<sigma>", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  subtype_fun (Tuple \\<pi>) \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau> < \\<sigma> \\<Longrightarrow> subtype_fun \\<tau> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x xa. subtype_fun x xa \\<Longrightarrow> x < xa", "show \"subtype_fun \\<tau> \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtype_fun \\<tau> \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>", "proof (induct \\<sigma> arbitrary: \\<tau>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<tau>.\n       subtype_fun \\<tau> OclSuper \\<Longrightarrow> \\<tau> < OclSuper\n 2. \\<And>x \\<tau>. subtype_fun \\<tau> x[1] \\<Longrightarrow> \\<tau> < x[1]\n 3. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 7. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 8. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 9. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case OclSuper"], ["proof (state)\nthis:\n  subtype_fun \\<tau> OclSuper\n\ngoal (9 subgoals):\n 1. \\<And>\\<tau>.\n       subtype_fun \\<tau> OclSuper \\<Longrightarrow> \\<tau> < OclSuper\n 2. \\<And>x \\<tau>. subtype_fun \\<tau> x[1] \\<Longrightarrow> \\<tau> < x[1]\n 3. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 7. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 8. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 9. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "thus ?case"], ["proof (prove)\nusing this:\n  subtype_fun \\<tau> OclSuper\n\ngoal (1 subgoal):\n 1. \\<tau> < OclSuper", "by (cases \\<sigma>; auto)"], ["proof (state)\nthis:\n  \\<tau> < OclSuper\n\ngoal (8 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[1] \\<Longrightarrow> \\<tau> < x[1]\n 2. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 7. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 8. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[1] \\<Longrightarrow> \\<tau> < x[1]\n 2. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 7. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 8. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Required \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun \\<tau> \\<sigma>[1]\n\ngoal (8 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[1] \\<Longrightarrow> \\<tau> < x[1]\n 2. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 7. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 8. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < \\<sigma>[1]", "by (insert Required) (erule subtype_fun.elims;\n          auto simp: less_basic_type_code less_eq_basic_type_code)"], ["proof (state)\nthis:\n  \\<tau> < \\<sigma>[1]\n\ngoal (7 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 7. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 7. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Optional \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun \\<tau> \\<sigma>[?]\n\ngoal (7 subgoals):\n 1. \\<And>x \\<tau>. subtype_fun \\<tau> x[?] \\<Longrightarrow> \\<tau> < x[?]\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 6. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 7. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < \\<sigma>[?]", "by (insert Optional) (erule subtype_fun.elims;\n          auto simp: less_basic_type_code less_eq_basic_type_code)"], ["proof (state)\nthis:\n  \\<tau> < \\<sigma>[?]\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 6. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 6. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Collection \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun ?\\<tau> \\<sigma> \\<Longrightarrow> ?\\<tau> < \\<sigma>\n  subtype_fun \\<tau> (Collection \\<sigma>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Collection \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 5. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 6. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Collection \\<sigma>", "apply (insert Collection)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<tau>.\n                subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                \\<tau> < \\<sigma>;\n     subtype_fun \\<tau> (Collection \\<sigma>)\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Collection \\<sigma>", "apply (erule subtype_fun.elims; auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Set \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = OrderedSet \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Bag \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Sequence \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False", "using order.strict_implies_order"], ["proof (prove)\nusing this:\n  ?a < ?b \\<Longrightarrow> ?a \\<le> ?b\n\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Set \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = OrderedSet \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Bag \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        \\<tau> = Sequence \\<tau>; \\<not> \\<tau> \\<le> \\<sigma>;\n        subtype_fun \\<tau> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  \\<tau> < Collection \\<sigma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 5. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 5. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Set \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun ?\\<tau> \\<sigma> \\<Longrightarrow> ?\\<tau> < \\<sigma>\n  subtype_fun \\<tau> (Set \\<sigma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Set \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Set \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 4. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 5. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Set \\<sigma>", "by (insert Set) (erule subtype_fun.elims; auto)"], ["proof (state)\nthis:\n  \\<tau> < Set \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 4. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 4. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (OrderedSet \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun ?\\<tau> \\<sigma> \\<Longrightarrow> ?\\<tau> < \\<sigma>\n  subtype_fun \\<tau> (OrderedSet \\<sigma>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (OrderedSet \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < OrderedSet \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 3. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 4. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < OrderedSet \\<sigma>", "by (insert OrderedSet) (erule subtype_fun.elims; auto)"], ["proof (state)\nthis:\n  \\<tau> < OrderedSet \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 3. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 3. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Bag \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun ?\\<tau> \\<sigma> \\<Longrightarrow> ?\\<tau> < \\<sigma>\n  subtype_fun \\<tau> (Bag \\<sigma>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Bag \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Bag \\<sigma>\n 2. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 3. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Bag \\<sigma>", "by (insert Bag) (erule subtype_fun.elims; auto)"], ["proof (state)\nthis:\n  \\<tau> < Bag \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 2. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 2. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Sequence \\<sigma>)"], ["proof (state)\nthis:\n  subtype_fun ?\\<tau> \\<sigma> \\<Longrightarrow> ?\\<tau> < \\<sigma>\n  subtype_fun \\<tau> (Sequence \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau>.\n       \\<lbrakk>\\<And>\\<tau>.\n                   subtype_fun \\<tau> \\<sigma> \\<Longrightarrow>\n                   \\<tau> < \\<sigma>;\n        subtype_fun \\<tau> (Sequence \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Sequence \\<sigma>\n 2. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Sequence \\<sigma>", "by (insert Sequence) (erule subtype_fun.elims; auto)"], ["proof (state)\nthis:\n  \\<tau> < Sequence \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "case (Tuple \\<xi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> fmran' \\<xi>; subtype_fun ?\\<tau> ?xa\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> < ?xa\n  subtype_fun \\<tau> (Tuple \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "have subtuple_imp_simp:\n      \"\\<And>\\<pi>. subtuple (\\<lambda>\\<tau> \\<sigma>. subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>) \\<pi> \\<xi> \\<longrightarrow>\n       subtuple (\\<le>) \\<pi> \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>.\n       subtuple\n        (\\<lambda>\\<tau> \\<sigma>.\n            subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n        \\<pi> \\<xi> \\<longrightarrow>\n       subtuple (\\<le>) \\<pi> \\<xi>", "by (rule subtuple_mono; auto simp add: Tuple.hyps less_imp_le)"], ["proof (state)\nthis:\n  subtuple\n   (\\<lambda>\\<tau> \\<sigma>.\n       subtype_fun \\<tau> \\<sigma> \\<or> \\<tau> = \\<sigma>)\n   ?\\<pi> \\<xi> \\<longrightarrow>\n  subtuple (\\<le>) ?\\<pi> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       \\<lbrakk>\\<And>xa \\<tau>.\n                   \\<lbrakk>xa \\<in> fmran' x;\n                    subtype_fun \\<tau> xa\\<rbrakk>\n                   \\<Longrightarrow> \\<tau> < xa;\n        subtype_fun \\<tau> (Tuple x)\\<rbrakk>\n       \\<Longrightarrow> \\<tau> < Tuple x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> < Tuple \\<xi>", "apply (insert Tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xa \\<tau>.\n                \\<lbrakk>xa \\<in> fmran' \\<xi>;\n                 subtype_fun \\<tau> xa\\<rbrakk>\n                \\<Longrightarrow> \\<tau> < xa;\n     subtype_fun \\<tau> (Tuple \\<xi>)\\<rbrakk>\n    \\<Longrightarrow> \\<tau> < Tuple \\<xi>", "by (erule subtype_fun.elims; auto simp add: subtuple_imp_simp)"], ["proof (state)\nthis:\n  \\<tau> < Tuple \\<xi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subtype_fun \\<tau> \\<sigma> \\<Longrightarrow> \\<tau> < \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_eq_type_code [code]:\n  \"(\\<le>) = (\\<lambda>x y. subtype_fun x y \\<or> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<le>) = (\\<lambda>x y. subtype_fun x y \\<or> x = y)", "unfolding dual_order.order_iff_strict less_type_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b a. subtype_fun b a \\<or> a = b) =\n    (\\<lambda>x y. subtype_fun x y \\<or> x = y)", "by auto"], ["", "code_pred element_type"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "code_pred update_element_type"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "code_pred to_unique_collection"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "code_pred to_nonunique_collection"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "code_pred to_ordered_collection"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"]]}