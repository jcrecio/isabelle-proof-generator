{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Imperative_HOL/Examples/Sepref_Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Imperative_HOL", "problem_names": ["lemma [pat_rules]: \"((``))$E$(insert$u${}) \\<equiv> op_graph_succ$E$u\"", "lemma param_op_graph_succ[param]: \n  \"\\<lbrakk>IS_LEFT_UNIQUE A; IS_RIGHT_UNIQUE A\\<rbrakk> \\<Longrightarrow> (op_graph_succ, op_graph_succ) \\<in> \\<langle>A\\<rangle>graph_rel \\<rightarrow> A \\<rightarrow> \\<langle>A\\<rangle>set_rel\"", "lemma succ1_refine: \"(succ1,op_graph_succ) \\<in> graph_rel1 \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>set_rel\"", "lemma adjg_succ_hnr[sepref_fr_rules]: \"\\<lbrakk>CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) A; CONSTRAINT (IS_PURE IS_RIGHT_UNIQUE) A\\<rbrakk> \n  \\<Longrightarrow> (uncurry succ2, uncurry (RETURN \\<circ>\\<circ> op_graph_succ)) \\<in> (adjg_assn A)\\<^sup>k *\\<^sub>a A\\<^sup>k \\<rightarrow>\\<^sub>a pure (\\<langle>the_pure A\\<rangle>list_set_rel)\"", "lemma [intf_of_assn]: \n  \"intf_of_assn A (i::'I itself) \\<Longrightarrow> intf_of_assn (adjg_assn A) TYPE('I i_graph)\""], "translations": [["", "lemma [pat_rules]: \"((``))$E$(insert$u${}) \\<equiv> op_graph_succ$E$u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (``) $ E $ (insert $ u $ {}) \\<equiv> op_graph_succ $ E $ u", "by simp"], ["", "definition [to_relAPP]: \"graph_rel A \\<equiv> \\<langle>A\\<times>\\<^sub>rA\\<rangle>set_rel\""], ["", "text \\<open>Adjacency List Implementation\\<close>"], ["", "lemma param_op_graph_succ[param]: \n  \"\\<lbrakk>IS_LEFT_UNIQUE A; IS_RIGHT_UNIQUE A\\<rbrakk> \\<Longrightarrow> (op_graph_succ, op_graph_succ) \\<in> \\<langle>A\\<rangle>graph_rel \\<rightarrow> A \\<rightarrow> \\<langle>A\\<rangle>set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IS_LEFT_UNIQUE A; single_valued A\\<rbrakk>\n    \\<Longrightarrow> (op_graph_succ, op_graph_succ)\n                      \\<in> \\<langle>A\\<rangle>graph_rel \\<rightarrow>\n                            A \\<rightarrow> \\<langle>A\\<rangle>set_rel", "unfolding op_graph_succ_def[abs_def] graph_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IS_LEFT_UNIQUE A; single_valued A\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>E u. E `` {u}, \\<lambda>E u. E `` {u})\n                      \\<in> \\<langle>A \\<times>\\<^sub>r\n                                     A\\<rangle>set_rel \\<rightarrow>\n                            A \\<rightarrow> \\<langle>A\\<rangle>set_rel", "by parametricity"], ["", "context begin"], ["", "private"], ["", "definition \"graph_\\<alpha>1 l \\<equiv> { (i,j). i<length l \\<and> j\\<in>l!i } \""], ["", "private"], ["", "definition \"graph_rel1 \\<equiv> br graph_\\<alpha>1 (\\<lambda>_. True)\""], ["", "private"], ["", "definition \"succ1 l i \\<equiv> if i<length l then l!i else {}\""], ["", "private"], ["", "lemma succ1_refine: \"(succ1,op_graph_succ) \\<in> graph_rel1 \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (succ1, op_graph_succ)\n    \\<in> graph_rel1 \\<rightarrow>\n          nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle>set_rel", "by (auto simp: graph_rel1_def graph_\\<alpha>1_def br_def succ1_def split: if_split_asm intro!: ext)"], ["", "private"], ["", "definition \"assn2 \\<equiv> array_assn (pure (\\<langle>Id\\<rangle>list_set_rel))\""], ["", "definition \"adjg_assn A \\<equiv> hr_comp (hr_comp assn2 graph_rel1) (\\<langle>the_pure A\\<rangle>graph_rel)\""], ["", "context\n  notes [sepref_import_param] = list_set_autoref_empty[folded op_set_empty_def]\n  notes [fcomp_norm_unfold] = adjg_assn_def[symmetric]\nbegin"], ["", "sepref_definition succ2 is \"(uncurry (RETURN oo succ1))\" :: \"(assn2\\<^sup>k*\\<^sub>aid_assn\\<^sup>k \\<rightarrow>\\<^sub>a pure (\\<langle>Id\\<rangle>list_set_rel))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry ?f2, uncurry (RETURN \\<circ>\\<circ> succ1))\n    \\<in> assn2\\<^sup>k *\\<^sub>a\n          nat_assn\\<^sup>k \\<rightarrow>\\<^sub>a pure\n            (\\<langle>Id\\<rangle>list_set_rel)", "unfolding succ1_def[abs_def] assn2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry ?f2,\n     uncurry\n      (\\<lambda>x.\n          RETURN \\<circ> (\\<lambda>i. if i < length x then x ! i else {})))\n    \\<in> (array_assn\n            (pure (\\<langle>Id\\<rangle>list_set_rel)))\\<^sup>k *\\<^sub>a\n          nat_assn\\<^sup>k \\<rightarrow>\\<^sub>a pure\n            (\\<langle>Id\\<rangle>list_set_rel)", "by sepref"], ["", "lemma adjg_succ_hnr[sepref_fr_rules]: \"\\<lbrakk>CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) A; CONSTRAINT (IS_PURE IS_RIGHT_UNIQUE) A\\<rbrakk> \n  \\<Longrightarrow> (uncurry succ2, uncurry (RETURN \\<circ>\\<circ> op_graph_succ)) \\<in> (adjg_assn A)\\<^sup>k *\\<^sub>a A\\<^sup>k \\<rightarrow>\\<^sub>a pure (\\<langle>the_pure A\\<rangle>list_set_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sepref_Constraints.CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) A;\n     Sepref_Constraints.CONSTRAINT (IS_PURE single_valued) A\\<rbrakk>\n    \\<Longrightarrow> (uncurry succ2,\n                       uncurry (RETURN \\<circ>\\<circ> op_graph_succ))\n                      \\<in> (adjg_assn A)\\<^sup>k *\\<^sub>a\n                            A\\<^sup>k \\<rightarrow>\\<^sub>a pure\n                       (\\<langle>the_pure A\\<rangle>list_set_rel)", "using succ2.refine[FCOMP succ1_refine, FCOMP param_op_graph_succ, simplified, of A]"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_pure A; IS_LEFT_UNIQUE (the_pure A);\n   single_valued (the_pure A)\\<rbrakk>\n  \\<Longrightarrow> (uncurry succ2,\n                     uncurry (RETURN \\<circ>\\<circ> op_graph_succ))\n                    \\<in> (adjg_assn A, adjg_assn A) *\\<^sub>a\n                          (A, A) \\<rightarrow>\\<^sub>a pure\n                  (\\<langle>nat_rel\\<rangle>list_set_rel O\n                   \\<langle>the_pure A\\<rangle>set_rel)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sepref_Constraints.CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) A;\n     Sepref_Constraints.CONSTRAINT (IS_PURE single_valued) A\\<rbrakk>\n    \\<Longrightarrow> (uncurry succ2,\n                       uncurry (RETURN \\<circ>\\<circ> op_graph_succ))\n                      \\<in> (adjg_assn A)\\<^sup>k *\\<^sub>a\n                            A\\<^sup>k \\<rightarrow>\\<^sub>a pure\n                       (\\<langle>the_pure A\\<rangle>list_set_rel)", "by (simp add: IS_PURE_def list_set_rel_compp)"], ["", "end"], ["", "end"], ["", "lemma [intf_of_assn]: \n  \"intf_of_assn A (i::'I itself) \\<Longrightarrow> intf_of_assn (adjg_assn A) TYPE('I i_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intf_of_assn A i \\<Longrightarrow>\n    intf_of_assn (adjg_assn A) TYPE('I i_graph)", "by simp"], ["", "definition cr_graph \n  :: \"nat \\<Rightarrow> (nat \\<times> nat) list \\<Rightarrow> nat list Heap.array Heap\"\nwhere\n  \"cr_graph numV Es \\<equiv> do {\n    a \\<leftarrow> Array.new numV [];\n    a \\<leftarrow> imp_nfoldli Es (\\<lambda>_. return True) (\\<lambda>(u,v) a. do {\n      l \\<leftarrow> Array.nth a u;\n      let l = v#l;\n      a \\<leftarrow> Array.upd u l a;\n      return a\n    }) a;\n    return a\n  }\""], ["", "(* TODO: Show correctness property for cr_graph *)"], ["", "export_code cr_graph checking SML_imp"], ["", "end"]]}