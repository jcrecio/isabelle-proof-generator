{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Imperative_HOL/IICF/Intf/IICF_Prio_Map.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Imperative_HOL", "problem_names": ["lemma uncurry_fun_rel_conv: \n    \"(uncurry f, uncurry g) \\<in> A\\<times>\\<^sub>rB \\<rightarrow> R \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>R\"", "lemma uncurry0_fun_rel_conv: \n    \"(uncurry0 f, uncurry0 g) \\<in> unit_rel \\<rightarrow> R \\<longleftrightarrow> (f,g)\\<in>R\"", "lemma RETURN_rel_conv0: \"(RETURN f, RETURN g)\\<in>\\<langle>A\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\"", "lemma RETURN_rel_conv1: \"(RETURN o f, RETURN o g)\\<in>A \\<rightarrow> \\<langle>B\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\"", "lemma RETURN_rel_conv2: \"(RETURN oo f, RETURN oo g)\\<in>A \\<rightarrow> B \\<rightarrow> \\<langle>R\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>R\"", "lemma RETURN_rel_conv3: \"(RETURN ooo f, RETURN ooo g)\\<in>A\\<rightarrow>B\\<rightarrow>C \\<rightarrow> \\<langle>R\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>C\\<rightarrow>R\"", "lemmas fref2param_unfold = \n    uncurry_fun_rel_conv uncurry0_fun_rel_conv \n    RETURN_rel_conv0 RETURN_rel_conv1 RETURN_rel_conv2 RETURN_rel_conv3", "lemmas param_op_map_update[param] = op_map_update.fref[THEN fref_ncD, unfolded fref2param_unfold]", "lemmas param_op_map_delete[param] = op_map_delete.fref[THEN fref_ncD, unfolded fref2param_unfold]", "lemmas param_op_map_is_empty[param] = op_map_is_empty.fref[THEN fref_ncD, unfolded fref2param_unfold]", "lemma IS_BELOW_ID_D: \"(a,b)\\<in>R \\<Longrightarrow> IS_BELOW_ID R \\<Longrightarrow> a=b\""], "translations": [["", "lemma uncurry_fun_rel_conv: \n    \"(uncurry f, uncurry g) \\<in> A\\<times>\\<^sub>rB \\<rightarrow> R \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((uncurry f, uncurry g) \\<in> A \\<times>\\<^sub>r B \\<rightarrow> R) =\n    ((f, g) \\<in> A \\<rightarrow> B \\<rightarrow> R)", "by (auto simp: uncurry_def dest!: fun_relD intro: prod_relI)"], ["", "lemma uncurry0_fun_rel_conv: \n    \"(uncurry0 f, uncurry0 g) \\<in> unit_rel \\<rightarrow> R \\<longleftrightarrow> (f,g)\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((uncurry0 f, uncurry0 g) \\<in> unit_rel \\<rightarrow> R) =\n    ((f, g) \\<in> R)", "by (auto dest!: fun_relD)"], ["", "lemma RETURN_rel_conv0: \"(RETURN f, RETURN g)\\<in>\\<langle>A\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN f, RETURN g) \\<in> \\<langle>A\\<rangle>nres_rel) =\n    ((f, g) \\<in> A)", "by (auto simp: nres_rel_def)"], ["", "lemma RETURN_rel_conv1: \"(RETURN o f, RETURN o g)\\<in>A \\<rightarrow> \\<langle>B\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN \\<circ> f, RETURN \\<circ> g)\n     \\<in> A \\<rightarrow> \\<langle>B\\<rangle>nres_rel) =\n    ((f, g) \\<in> A \\<rightarrow> B)", "by (auto simp: nres_rel_def dest!: fun_relD)"], ["", "lemma RETURN_rel_conv2: \"(RETURN oo f, RETURN oo g)\\<in>A \\<rightarrow> B \\<rightarrow> \\<langle>R\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN \\<circ>\\<circ> f, RETURN \\<circ>\\<circ> g)\n     \\<in> A \\<rightarrow> B \\<rightarrow> \\<langle>R\\<rangle>nres_rel) =\n    ((f, g) \\<in> A \\<rightarrow> B \\<rightarrow> R)", "by (auto simp: nres_rel_def dest!: fun_relD)"], ["", "lemma RETURN_rel_conv3: \"(RETURN ooo f, RETURN ooo g)\\<in>A\\<rightarrow>B\\<rightarrow>C \\<rightarrow> \\<langle>R\\<rangle>nres_rel \\<longleftrightarrow> (f,g)\\<in>A\\<rightarrow>B\\<rightarrow>C\\<rightarrow>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN \\<circ>\\<circ>\\<circ> f, RETURN \\<circ>\\<circ>\\<circ> g)\n     \\<in> A \\<rightarrow>\n           B \\<rightarrow> C \\<rightarrow> \\<langle>R\\<rangle>nres_rel) =\n    ((f, g) \\<in> A \\<rightarrow> B \\<rightarrow> C \\<rightarrow> R)", "by (auto simp: nres_rel_def dest!: fun_relD)"], ["", "lemmas fref2param_unfold = \n    uncurry_fun_rel_conv uncurry0_fun_rel_conv \n    RETURN_rel_conv0 RETURN_rel_conv1 RETURN_rel_conv2 RETURN_rel_conv3"], ["", "(* TODO: Generate these lemmas in sepref_decl_op! *)"], ["", "lemmas param_op_map_update[param] = op_map_update.fref[THEN fref_ncD, unfolded fref2param_unfold]"], ["", "lemmas param_op_map_delete[param] = op_map_delete.fref[THEN fref_ncD, unfolded fref2param_unfold]"], ["", "lemmas param_op_map_is_empty[param] = op_map_is_empty.fref[THEN fref_ncD, unfolded fref2param_unfold]"], ["", "subsection \\<open>Additional Operations\\<close>"], ["", "sepref_decl_op map_update_new: \"op_map_update\" :: \"[\\<lambda>((k,v),m). k\\<notin>dom m]\\<^sub>f (K\\<times>\\<^sub>rV)\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel \\<rightarrow> \\<langle>K,V\\<rangle>map_rel\"\n    where \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sepref_decl_op map_update_ex: \"op_map_update\" :: \"[\\<lambda>((k,v),m). k\\<in>dom m]\\<^sub>f (K\\<times>\\<^sub>rV)\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel \\<rightarrow> \\<langle>K,V\\<rangle>map_rel\"\n    where \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sepref_decl_op map_delete_ex: \"op_map_delete\" :: \"[\\<lambda>(k,m). k\\<in>dom m]\\<^sub>f K\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel \\<rightarrow> \\<langle>K,V\\<rangle>map_rel\"\n    where \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "context\n    fixes prio :: \"'v \\<Rightarrow> 'p::linorder\"  \n  begin"], ["", "sepref_decl_op pm_decrease_key: \"op_map_update\" \n      :: \"[\\<lambda>((k,v),m). k\\<in>dom m \\<and> prio v \\<le> prio (the (m k))]\\<^sub>f (K\\<times>\\<^sub>rV)\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel \\<rightarrow> \\<langle>K,(V::('v\\<times>'v) set)\\<rangle>map_rel\"\n      where \"single_valued K\" \"single_valued (K\\<inverse>)\" \"IS_BELOW_ID V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)),\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)),\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "case 1"], ["proof (state)\nthis:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)),\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "have [param]: \"((\\<le>),(\\<le>))\\<in>Id\\<rightarrow>Id\\<rightarrow>bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<le>), (\\<le>)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel", "by simp"], ["proof (state)\nthis:\n  ((\\<le>), (\\<le>)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)),\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio v \\<le> prio (the (m k)))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "from 1"], ["proof (chain)\npicking this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V", "show ?case"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V\n\ngoal (1 subgoal):\n 1. (\\<lambda>((k, v), m).\n        k \\<in> dom m \\<and> prio v \\<le> prio (the (m k)),\n     \\<lambda>((k, v), m).\n        k \\<in> dom m \\<and> prio v \\<le> prio (the (m k)))\n    \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r \\<langle>K,\n          V\\<rangle>map_rel \\<rightarrow>\n          bool_rel", "apply (parametricity add: param_and_cong1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (a, a') \\<in> K; (aa, a'a) \\<in> V;\n        (ab, a'b) \\<in> \\<langle>K, V\\<rangle>map_rel; a \\<in> dom ab;\n        a' \\<in> dom a'b\\<rbrakk>\n       \\<Longrightarrow> (prio aa, prio a'a) \\<in> Id\n 2. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (a, a') \\<in> K; (aa, a'a) \\<in> V;\n        (ab, a'b) \\<in> \\<langle>K, V\\<rangle>map_rel; a \\<in> dom ab;\n        a' \\<in> dom a'b\\<rbrakk>\n       \\<Longrightarrow> (prio (the (ab a)), prio (the (a'b a'))) \\<in> Id", "apply (auto simp: IS_BELOW_ID_def map_rel_def dest!: fun_relD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>((k, v), m). k \\<in> dom m \\<and> prio v \\<le> prio (the (m k)),\n   \\<lambda>((k, v), m). k \\<in> dom m \\<and> prio v \\<le> prio (the (m k)))\n  \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r \\<langle>K,\n        V\\<rangle>map_rel \\<rightarrow>\n        bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "sepref_decl_op pm_increase_key: \"op_map_update\" \n      :: \"[\\<lambda>((k,v),m). k\\<in>dom m \\<and> prio v \\<ge> prio (the (m k))]\\<^sub>f (K\\<times>\\<^sub>rV)\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel \\<rightarrow> \\<langle>K,(V::('v\\<times>'v) set)\\<rangle>map_rel\"\n      where \"single_valued K\" \"single_valued (K\\<inverse>)\" \"IS_BELOW_ID V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v,\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v)\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v,\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v)\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "case 1"], ["proof (state)\nthis:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v,\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v)\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "have [param]: \"((\\<le>),(\\<le>))\\<in>Id\\<rightarrow>Id\\<rightarrow>bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<le>), (\\<le>)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel", "by simp"], ["proof (state)\nthis:\n  ((\\<le>), (\\<le>)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v,\n                       \\<lambda>((k, v), m).\n                          k \\<in> dom m \\<and>\n                          prio (the (m k)) \\<le> prio v)\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>map_rel \\<rightarrow>\n                            bool_rel", "from 1"], ["proof (chain)\npicking this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V", "show ?case"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  IS_BELOW_ID V\n\ngoal (1 subgoal):\n 1. (\\<lambda>((k, v), m).\n        k \\<in> dom m \\<and> prio (the (m k)) \\<le> prio v,\n     \\<lambda>((k, v), m).\n        k \\<in> dom m \\<and> prio (the (m k)) \\<le> prio v)\n    \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r \\<langle>K,\n          V\\<rangle>map_rel \\<rightarrow>\n          bool_rel", "apply (parametricity add: param_and_cong1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (a, a') \\<in> K; (aa, a'a) \\<in> V;\n        (ab, a'b) \\<in> \\<langle>K, V\\<rangle>map_rel; a \\<in> dom ab;\n        a' \\<in> dom a'b\\<rbrakk>\n       \\<Longrightarrow> (prio (the (ab a)), prio (the (a'b a'))) \\<in> Id\n 2. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (a, a') \\<in> K; (aa, a'a) \\<in> V;\n        (ab, a'b) \\<in> \\<langle>K, V\\<rangle>map_rel; a \\<in> dom ab;\n        a' \\<in> dom a'b\\<rbrakk>\n       \\<Longrightarrow> (prio aa, prio a'a) \\<in> Id", "apply (auto simp: IS_BELOW_ID_def map_rel_def dest!: fun_relD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>((k, v), m). k \\<in> dom m \\<and> prio (the (m k)) \\<le> prio v,\n   \\<lambda>((k, v), m). k \\<in> dom m \\<and> prio (the (m k)) \\<le> prio v)\n  \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r \\<langle>K,\n        V\\<rangle>map_rel \\<rightarrow>\n        bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma IS_BELOW_ID_D: \"(a,b)\\<in>R \\<Longrightarrow> IS_BELOW_ID R \\<Longrightarrow> a=b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> R; IS_BELOW_ID R\\<rbrakk> \\<Longrightarrow> a = b", "by (auto simp: IS_BELOW_ID_def)"], ["", "sepref_decl_op pm_peek_min: \"\\<lambda>m. SPEC (\\<lambda>(k,v). \n      m k = Some v \\<and> (\\<forall>k' v'. m k' = Some v' \\<longrightarrow> prio v \\<le> prio v'))\"\n      :: \"[Not o op_map_is_empty]\\<^sub>f \\<langle>K,V\\<rangle>map_rel \\<rightarrow> K\\<times>\\<^sub>r(V::('v\\<times>'v) set)\"\n      where \"IS_BELOW_ID V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IS_BELOW_ID V \\<Longrightarrow>\n    (\\<lambda>m.\n        SPEC\n         (\\<lambda>(k, v).\n             m k = Some v \\<and>\n             (\\<forall>k' v'.\n                 m k' = Some v' \\<longrightarrow> prio v \\<le> prio v')),\n     \\<lambda>m.\n        SPEC\n         (\\<lambda>(k, v).\n             m k = Some v \\<and>\n             (\\<forall>k' v'.\n                 m k' = Some v' \\<longrightarrow> prio v \\<le> prio v')))\n    \\<in> [Not \\<circ> op_map_is_empty]\\<^sub>f \\<langle>K,\n    V\\<rangle>map_rel \\<rightarrow> \\<langle>K \\<times>\\<^sub>r\n       V\\<rangle>nres_rel", "apply (rule frefI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>IS_BELOW_ID V; (Not \\<circ> op_map_is_empty) y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\\<rbrakk>\n       \\<Longrightarrow> (SPEC\n                           (\\<lambda>(k, v).\n                               x k = Some v \\<and>\n                               (\\<forall>k' v'.\n                                   x k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')),\n                          SPEC\n                           (\\<lambda>(k, v).\n                               y k = Some v \\<and>\n                               (\\<forall>k' v'.\n                                   y k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')))\n                         \\<in> \\<langle>K \\<times>\\<^sub>r\n  V\\<rangle>nres_rel", "apply (intro nres_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>IS_BELOW_ID V; (Not \\<circ> op_map_is_empty) y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\\<rbrakk>\n       \\<Longrightarrow> SPEC\n                          (\\<lambda>(k, v).\n                              x k = Some v \\<and>\n                              (\\<forall>k' v'.\n                                  x k' = Some v' \\<longrightarrow>\n                                  prio v \\<le> prio v'))\n                         \\<le> \\<Down> (K \\<times>\\<^sub>r V)\n                                (SPEC\n                                  (\\<lambda>(k, v).\ny k = Some v \\<and>\n(\\<forall>k' v'. y k' = Some v' \\<longrightarrow> prio v \\<le> prio v')))", "apply (clarsimp simp: pw_le_iff refine_pw_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa.\n                            (a, aa) \\<in> K \\<and>\n                            (\\<exists>ba.\n                                (b, ba) \\<in> V \\<and>\n                                y aa = Some ba \\<and>\n                                (\\<forall>k' v'.\n                                    y k' = Some v' \\<longrightarrow>\n                                    prio ba \\<le> prio v'))", "apply (rule map_rel_obtain2, assumption, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa.\n                            (a, aa) \\<in> K \\<and>\n                            (\\<exists>ba.\n                                (b, ba) \\<in> V \\<and>\n                                y aa = Some ba \\<and>\n                                (\\<forall>k' v'.\n                                    y k' = Some v' \\<longrightarrow>\n                                    prio ba \\<le> prio v'))", "apply1 (intro exI conjI allI impI; assumption?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "fix x y k' v' b w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"(x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\" \"y k' = Some v'\""], ["proof (state)\nthis:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'", "obtain k v where \"(k,k')\\<in>K\" \"(v,v')\\<in>V\" \"x k = Some v\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'\n\ngoal (1 subgoal):\n 1. (\\<And>k v.\n        \\<lbrakk>(k, k') \\<in> K; (v, v') \\<in> V; x k = Some v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule map_rel_obtain1)"], ["proof (state)\nthis:\n  (k, k') \\<in> K\n  (v, v') \\<in> V\n  x k = Some v\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"IS_BELOW_ID V\" \"(b, w) \\<in> V\""], ["proof (state)\nthis:\n  IS_BELOW_ID V\n  (b, w) \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "with \\<open>(v,v')\\<in>V\\<close>"], ["proof (chain)\npicking this:\n  (v, v') \\<in> V\n  IS_BELOW_ID V\n  (b, w) \\<in> V", "have [simp]: \"b=w\" \"v=v'\""], ["proof (prove)\nusing this:\n  (v, v') \\<in> V\n  IS_BELOW_ID V\n  (b, w) \\<in> V\n\ngoal (1 subgoal):\n 1. b = w &&& v = v'", "by (auto simp: IS_BELOW_ID_def)"], ["proof (state)\nthis:\n  b = w\n  v = v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"\\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\""], ["proof (state)\nthis:\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>IS_BELOW_ID V; Map.empty \\<noteq> y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel; x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "with \\<open>x k = Some v\\<close>"], ["proof (chain)\npicking this:\n  x k = Some v\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'", "show \"prio w \\<le> prio v'\""], ["proof (prove)\nusing this:\n  x k = Some v\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\n\ngoal (1 subgoal):\n 1. prio w \\<le> prio v'", "by auto"], ["proof (state)\nthis:\n  prio w \\<le> prio v'\n\ngoal:\nNo subgoals!", "qed"], ["", "sepref_decl_op pm_pop_min: \"\\<lambda>m. SPEC (\\<lambda>((k,v),m'). \n        m k = Some v\n      \\<and> m' = op_map_delete k m  \n      \\<and> (\\<forall>k' v'. m k' = Some v' \\<longrightarrow> prio v \\<le> prio v')\n      )\" :: \"[Not o op_map_is_empty]\\<^sub>f \\<langle>K,V\\<rangle>map_rel \\<rightarrow> (K\\<times>\\<^sub>r(V::('v\\<times>'v) set))\\<times>\\<^sub>r\\<langle>K,V\\<rangle>map_rel\"\n      where \"single_valued K\" \"single_valued (K\\<inverse>)\" \"IS_BELOW_ID V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n     IS_BELOW_ID V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>m.\n                          SPEC\n                           (\\<lambda>((k, v), m').\n                               m k = Some v \\<and>\n                               m' = op_map_delete k m \\<and>\n                               (\\<forall>k' v'.\n                                   m k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')),\n                       \\<lambda>m.\n                          SPEC\n                           (\\<lambda>((k, v), m').\n                               m k = Some v \\<and>\n                               m' = op_map_delete k m \\<and>\n                               (\\<forall>k' v'.\n                                   m k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')))\n                      \\<in> [Not \\<circ>\n                             op_map_is_empty]\\<^sub>f \\<langle>K,\n                      V\\<rangle>map_rel \\<rightarrow> \\<langle>(K \\<times>\\<^sub>r\n                          V) \\<times>\\<^sub>r\n                         \\<langle>K, V\\<rangle>map_rel\\<rangle>nres_rel", "apply (rule frefI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (Not \\<circ> op_map_is_empty) y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\\<rbrakk>\n       \\<Longrightarrow> (SPEC\n                           (\\<lambda>((k, v), m').\n                               x k = Some v \\<and>\n                               m' = op_map_delete k x \\<and>\n                               (\\<forall>k' v'.\n                                   x k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')),\n                          SPEC\n                           (\\<lambda>((k, v), m').\n                               y k = Some v \\<and>\n                               m' = op_map_delete k y \\<and>\n                               (\\<forall>k' v'.\n                                   y k' = Some v' \\<longrightarrow>\n                                   prio v \\<le> prio v')))\n                         \\<in> \\<langle>(K \\<times>\\<^sub>r\n   V) \\<times>\\<^sub>r\n  \\<langle>K, V\\<rangle>map_rel\\<rangle>nres_rel", "apply (intro nres_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        (Not \\<circ> op_map_is_empty) y;\n        (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\\<rbrakk>\n       \\<Longrightarrow> SPEC\n                          (\\<lambda>((k, v), m').\n                              x k = Some v \\<and>\n                              m' = op_map_delete k x \\<and>\n                              (\\<forall>k' v'.\n                                  x k' = Some v' \\<longrightarrow>\n                                  prio v \\<le> prio v'))\n                         \\<le> \\<Down>\n                                ((K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                                 \\<langle>K, V\\<rangle>map_rel)\n                                (SPEC\n                                  (\\<lambda>((k, v), m').\ny k = Some v \\<and>\nm' = op_map_delete k y \\<and>\n(\\<forall>k' v'. y k' = Some v' \\<longrightarrow> prio v \\<le> prio v')))", "apply (clarsimp simp: pw_le_iff refine_pw_simps simp del: op_map_delete_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa.\n                            (a, aa) \\<in> K \\<and>\n                            (\\<exists>ba.\n                                (b, ba) \\<in> V \\<and>\n                                (op_map_delete a x, op_map_delete aa y)\n                                \\<in> \\<langle>K, V\\<rangle>map_rel \\<and>\n                                y aa = Some ba \\<and>\n                                (\\<forall>k' v'.\n                                    y k' = Some v' \\<longrightarrow>\n                                    prio ba \\<le> prio v'))", "apply (rule map_rel_obtain2, assumption, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa.\n                            (a, aa) \\<in> K \\<and>\n                            (\\<exists>ba.\n                                (b, ba) \\<in> V \\<and>\n                                (op_map_delete a x, op_map_delete aa y)\n                                \\<in> \\<langle>K, V\\<rangle>map_rel \\<and>\n                                y aa = Some ba \\<and>\n                                (\\<forall>k' v'.\n                                    y k' = Some v' \\<longrightarrow>\n                                    prio ba \\<le> prio v'))", "apply (intro exI conjI allI impI; assumption?)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y a b l w.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V\\<rbrakk>\n       \\<Longrightarrow> (op_map_delete a x, op_map_delete l y)\n                         \\<in> \\<langle>K, V\\<rangle>map_rel\n 2. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "applyS parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "fix x y k' v' b w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"(x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\" \"y k' = Some v'\""], ["proof (state)\nthis:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'", "obtain k v where \"(k,k')\\<in>K\" \"(v,v')\\<in>V\" \"x k = Some v\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel\n  y k' = Some v'\n\ngoal (1 subgoal):\n 1. (\\<And>k v.\n        \\<lbrakk>(k, k') \\<in> K; (v, v') \\<in> V; x k = Some v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule map_rel_obtain1)"], ["proof (state)\nthis:\n  (k, k') \\<in> K\n  (v, v') \\<in> V\n  x k = Some v\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"IS_BELOW_ID V\" \"(b, w) \\<in> V\""], ["proof (state)\nthis:\n  IS_BELOW_ID V\n  (b, w) \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "with \\<open>(v,v')\\<in>V\\<close>"], ["proof (chain)\npicking this:\n  (v, v') \\<in> V\n  IS_BELOW_ID V\n  (b, w) \\<in> V", "have [simp]: \"b=w\" \"v=v'\""], ["proof (prove)\nusing this:\n  (v, v') \\<in> V\n  IS_BELOW_ID V\n  (b, w) \\<in> V\n\ngoal (1 subgoal):\n 1. b = w &&& v = v'", "by (auto simp: IS_BELOW_ID_def)"], ["proof (state)\nthis:\n  b = w\n  v = v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "assume \"\\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\""], ["proof (state)\nthis:\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\n\ngoal (1 subgoal):\n 1. \\<And>x y a b l w k' v'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>); IS_BELOW_ID V;\n        Map.empty \\<noteq> y; (x, y) \\<in> \\<langle>K, V\\<rangle>map_rel;\n        x a = Some b;\n        \\<forall>k' v'.\n           x k' = Some v' \\<longrightarrow> prio b \\<le> prio v';\n        y l = Some w; (a, l) \\<in> K; (b, w) \\<in> V;\n        y k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> prio w \\<le> prio v'", "with \\<open>x k = Some v\\<close>"], ["proof (chain)\npicking this:\n  x k = Some v\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'", "show \"prio w \\<le> prio v'\""], ["proof (prove)\nusing this:\n  x k = Some v\n  \\<forall>k' v'. x k' = Some v' \\<longrightarrow> prio b \\<le> prio v'\n\ngoal (1 subgoal):\n 1. prio w \\<le> prio v'", "by auto"], ["proof (state)\nthis:\n  prio w \\<le> prio v'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}