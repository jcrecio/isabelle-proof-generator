{"file_name": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA/CPSUtils.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA", "problem_names": ["lemma finite_lambdas[simp]: \"finite (lambdas l)\" and \"finite (lambdasC c)\" \"finite (lambdasV v)\"", "lemma finite_calls[simp]: \"finite (calls l)\" and \"finite (callsC c)\" \"finite (callsV v)\"", "lemma finite_vars[simp]: \"finite (vars l)\" and \"finite (varsC c)\" \"finite (varsV v)\"", "lemma finite_labels[simp]: \"finite (labels l)\" and \"finite (labelsC c)\" \"finite (labelsV v)\"", "lemma finite_prims[simp]: \"finite (prims l)\" and \"finite (primsC c)\" \"finite (primsV v)\"", "lemma\n  fixes list2 :: \"(var \\<times> lambda) list\" and t :: \"var\\<times>lambda\"\n  shows lambdas1: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> c \\<in> calls x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> c \\<in> callsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> c \\<in> callsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> c \\<in> callsV z\"\n  and \"\\<forall>x\\<in> set list2. Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> c \\<in> calls (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd t) \\<Longrightarrow> c \\<in> calls (snd t)\"", "lemma \n  shows lambdas2: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> l \\<in> labels x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> l \\<in> labelsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> l \\<in> labels (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> labels (snd t)\"", "lemma \n  shows lambdas3: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> set vs \\<subseteq> vars x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> set vs \\<subseteq> varsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> set vs \\<subseteq> varsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> set vs \\<subseteq> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> set vs \\<subseteq> vars (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd (t:: var\\<times>lambda)) \\<Longrightarrow> set vs \\<subseteq> vars (snd t)\"", "lemma \n  shows app1: \"App l d ds \\<in> calls x \\<Longrightarrow> d \\<in> vals x\"\n  and \"App l d ds \\<in> callsC y \\<Longrightarrow> d \\<in> valsC y\"\n  and \"App l d ds \\<in> callsV z \\<Longrightarrow> d \\<in> valsV z\"\n  and \"\\<forall>z\\<in> set list. App l d ds \\<in> callsV z \\<longrightarrow> d \\<in> valsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . App l d ds \\<in> calls (snd x) \\<longrightarrow> d \\<in> vals (snd x)\"\n  and \"App l d ds \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> d \\<in> vals (snd t)\"", "lemma \n  shows app2: \"App l d ds \\<in> calls x \\<Longrightarrow> set ds \\<subseteq> vals x\"\n  and \"App l d ds \\<in> callsC y \\<Longrightarrow> set ds \\<subseteq> valsC y\"\n  and \"App l d ds \\<in> callsV z \\<Longrightarrow> set ds \\<subseteq> valsV z\"\n  and \"\\<forall>z\\<in> set list. App l d ds \\<in> callsV z \\<longrightarrow> set ds \\<subseteq> valsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . App l d ds \\<in> calls (snd x) \\<longrightarrow> set ds \\<subseteq> vals (snd x)\"\n  and \"App l d ds \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> set ds \\<subseteq> vals (snd t)\"", "lemma \n  shows let1: \"Let l binds c' \\<in> calls x \\<Longrightarrow> l \\<in> labels x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> l \\<in> labelsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> l \\<in> labels (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> labels (snd t)\"", "lemma \n  shows let2: \"Let l binds c' \\<in> calls x \\<Longrightarrow> c' \\<in> calls x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> c' \\<in> callsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> c' \\<in> callsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> c' \\<in> callsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> c' \\<in> calls (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> c' \\<in> calls (snd t)\"", "lemma \n  shows let3: \"Let l binds c' \\<in> calls x \\<Longrightarrow> fst ` set binds \\<subseteq> vars x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> fst ` set binds \\<subseteq> varsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> fst ` set binds \\<subseteq> varsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> fst ` set binds \\<subseteq> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> fst ` set binds \\<subseteq> vars (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> fst ` set binds \\<subseteq> vars (snd t)\"", "lemma\n  shows let4: \"Let l binds c' \\<in> calls x \\<Longrightarrow> snd ` set binds \\<subseteq> lambdas x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> snd ` set binds \\<subseteq> lambdasV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> snd ` set binds \\<subseteq> lambdas (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> snd ` set binds \\<subseteq> lambdas (snd t)\"", "lemma\nshows vals1: \"P prim \\<in> vals p \\<Longrightarrow> prim \\<in> prims p\"\n  and \"P prim \\<in> valsC y \\<Longrightarrow> prim \\<in> primsC y\"\n  and \"P prim \\<in> valsV z \\<Longrightarrow> prim \\<in> primsV z\"\n  and \"\\<forall>z\\<in> set list. P prim \\<in> valsV z \\<longrightarrow> prim \\<in> primsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . P prim \\<in> vals (snd x) \\<longrightarrow> prim \\<in> prims (snd x)\"\n  and \"P prim \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> prim \\<in> prims (snd t)\"", "lemma\nshows vals2: \"R l var \\<in> vals p \\<Longrightarrow> var \\<in> vars p\"\n  and \"R l var \\<in> valsC y \\<Longrightarrow> var \\<in> varsC y\"\n  and \"R l var \\<in> valsV z \\<Longrightarrow> var \\<in> varsV z\"\n  and \"\\<forall>z\\<in> set list. R l var \\<in> valsV z \\<longrightarrow> var \\<in> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . R l var \\<in> vals (snd x) \\<longrightarrow> var \\<in> vars (snd x)\"\n  and \"R l var \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> var \\<in> vars (snd t)\"", "lemma\nshows vals3: \"L l \\<in> vals p \\<Longrightarrow> l \\<in> lambdas p\"\n  and \"L l \\<in> valsC y \\<Longrightarrow> l \\<in> lambdasC y\"\n  and \"L l \\<in> valsV z \\<Longrightarrow> l \\<in> lambdasV z\"\n  and \"\\<forall>z\\<in> set list. L l \\<in> valsV z \\<longrightarrow> l \\<in> lambdasV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . L l \\<in> vals (snd x) \\<longrightarrow> l \\<in> lambdas (snd x)\"\n  and \"L l \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> lambdas (snd t)\"", "lemma finite_nList[intro]:\n  assumes finA: \"finite A\"\n  shows \"finite (nList A n)\"", "lemma finite_Nlist[intro]:\n  \"\\<lbrakk> finite A; finite N \\<rbrakk> \\<Longrightarrow> finite (NList A N)\"", "lemma finite_call_list_lengths[simp]: \"finite (call_list_lengths p)\""], "translations": [["", "lemma finite_lambdas[simp]: \"finite (lambdas l)\" and \"finite (lambdasC c)\" \"finite (lambdasV v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lambdas l) &&& finite (lambdasC c) &&& finite (lambdasV v)", "by (induct rule: lambdas_lambdasC_lambdasV.induct, auto)"], ["", "lemma finite_calls[simp]: \"finite (calls l)\" and \"finite (callsC c)\" \"finite (callsV v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (calls l) &&& finite (callsC c) &&& finite (callsV v)", "by (induct rule: calls_callsC_callsV.induct, auto)"], ["", "fun vars :: \"lambda \\<Rightarrow> var set\"\nand varsC :: \"call \\<Rightarrow> var set\"\nand varsV :: \"val \\<Rightarrow> var set\"\nwhere \"vars (Lambda _ vs c) = set vs \\<union> varsC c\"\n    | \"varsC (App _ a as) = varsV a \\<union> \\<Union>(varsV ` (set as))\"\n    | \"varsC (Let _ binds c') = (\\<Union>(v, l)\\<in>set binds. {v} \\<union> vars l) \\<union> varsC c'\"\n    | \"varsV (L l) = vars l\"\n    | \"varsV (R _ v) = {v}\"\n    | \"varsV _  = {}\""], ["", "lemma finite_vars[simp]: \"finite (vars l)\" and \"finite (varsC c)\" \"finite (varsV v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars l) &&& finite (varsC c) &&& finite (varsV v)", "by (induct rule: vars_varsC_varsV.induct, auto)"], ["", "fun label :: \"lambda + call \\<Rightarrow> label\"\nwhere \"label (Inl (Lambda l _ _)) = l\"\n    | \"label (Inr (App l _ _)) = l\"\n    | \"label (Inr (Let l _ _)) = l\""], ["", "fun labels :: \"lambda \\<Rightarrow> label set\"\nand labelsC :: \"call \\<Rightarrow> label set\"\nand labelsV :: \"val \\<Rightarrow> label set\"\nwhere \"labels (Lambda l vs c) = {l} \\<union> labelsC c\"\n    | \"labelsC (App l a as) = {l} \\<union> labelsV a \\<union> \\<Union>(labelsV ` (set as))\"\n    | \"labelsC (Let l binds c') = {l} \\<union> (\\<Union>(v, y)\\<in>set binds. labels y) \\<union> labelsC c'\"\n    | \"labelsV (L l) = labels l\"\n    | \"labelsV (R l _) = {l}\"\n    | \"labelsV _  = {}\""], ["", "lemma finite_labels[simp]: \"finite (labels l)\" and \"finite (labelsC c)\" \"finite (labelsV v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (labels l) &&& finite (labelsC c) &&& finite (labelsV v)", "by (induct rule: labels_labelsC_labelsV.induct, auto)"], ["", "fun prims :: \"lambda \\<Rightarrow> prim set\"\nand primsC :: \"call \\<Rightarrow> prim set\"\nand primsV :: \"val \\<Rightarrow> prim set\"\nwhere \"prims (Lambda _ vs c) = primsC c\"\n    | \"primsC (App _ a as) = primsV a \\<union> \\<Union>(primsV ` (set as))\"\n    | \"primsC (Let _ binds c') = (\\<Union>(_, y)\\<in>set binds. prims y) \\<union> primsC c'\"\n    | \"primsV (L l) = prims l\"\n    | \"primsV (R l v) = {}\"\n    | \"primsV (P prim) = {prim}\"\n    | \"primsV (C l v) = {}\""], ["", "lemma finite_prims[simp]: \"finite (prims l)\" and \"finite (primsC c)\" \"finite (primsV v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prims l) &&& finite (primsC c) &&& finite (primsV v)", "by (induct rule: labels_labelsC_labelsV.induct, auto)"], ["", "fun vals :: \"lambda \\<Rightarrow> val set\"\nand valsC :: \"call \\<Rightarrow> val set\"\nand valsV :: \"val \\<Rightarrow> val set\"\nwhere \"vals (Lambda _ vs c) = valsC c\"\n    | \"valsC (App _ a as) = valsV a \\<union> \\<Union>(valsV ` (set as))\"\n    | \"valsC (Let _ binds c') = (\\<Union>(_, y)\\<in>set binds. vals y) \\<union> valsC c'\"\n    | \"valsV (L l) = {L l} \\<union> vals l\"\n    | \"valsV (R l v) = {R l v}\"\n    | \"valsV (P prim) = {P prim}\"\n    | \"valsV (C l v) = {C l v}\""], ["", "lemma\n  fixes list2 :: \"(var \\<times> lambda) list\" and t :: \"var\\<times>lambda\"\n  shows lambdas1: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> c \\<in> calls x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> c \\<in> callsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> c \\<in> callsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> c \\<in> callsV z\"\n  and \"\\<forall>x\\<in> set list2. Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> c \\<in> calls (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd t) \\<Longrightarrow> c \\<in> calls (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Lambda l vs c \\<in> lambdas x \\<Longrightarrow> c \\<in> calls x) &&&\n     (Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> c \\<in> callsC y) &&&\n     (Lambda l vs c \\<in> lambdasV z \\<Longrightarrow>\n      c \\<in> callsV z)) &&&\n    \\<forall>z\\<in>set list.\n       Lambda l vs c \\<in> lambdasV z \\<longrightarrow> c \\<in> callsV z &&&\n    \\<forall>x\\<in>set list2.\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       c \\<in> calls (snd x) &&&\n    (Lambda l vs c \\<in> lambdas (snd t) \\<Longrightarrow>\n     c \\<in> calls (snd t))", "apply (induct rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n                c \\<in> callsC x3;\n        Lambda l vs c \\<in> lambdas (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c \\<in> calls (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasV x2 \\<Longrightarrow>\n                c \\<in> callsV x2;\n        \\<forall>z\\<in>set x3.\n           Lambda l vs c \\<in> lambdasV z \\<longrightarrow>\n           c \\<in> callsV z;\n        Lambda l vs c \\<in> lambdasC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c \\<in> callsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   c \\<in> calls (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow> c \\<in> callsC x3;\n        Lambda l vs c \\<in> lambdasC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c \\<in> callsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x \\<Longrightarrow>\n                c \\<in> calls x;\n        Lambda l vs c \\<in> lambdasV (L x)\\<rbrakk>\n       \\<Longrightarrow> c \\<in> callsV (L x)\n 5. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (R x1 x2) \\<Longrightarrow>\n       c \\<in> callsV (R x1 x2)\n 6. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (C x1 x2) \\<Longrightarrow>\n       c \\<in> callsV (C x1 x2)\n 7. \\<And>x.\n       Lambda l vs c \\<in> lambdasV (P x) \\<Longrightarrow>\n       c \\<in> callsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x2 \\<Longrightarrow>\n                c \\<in> calls x2;\n        Lambda l vs c \\<in> lambdas (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> c \\<in> calls (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       c \\<in> calls (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>Lambda l vs c \\<in> lambdas (snd x1) \\<Longrightarrow>\n                 c \\<in> calls (snd x1);\n         \\<forall>x\\<in>set x2.\n            Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n            c \\<in> calls (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             Lambda l vs c\n                             \\<in> lambdas (snd x) \\<longrightarrow>\n                             c \\<in> calls (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. (Lambda l vs c \\<in> lambdasC c \\<Longrightarrow>\n     c \\<in> callsC c) \\<Longrightarrow>\n    c \\<in> callsC c\n 2. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   c \\<in> calls (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow> False;\n        c \\<noteq> call.Let x1 x2 x3; c \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2; Lambda l vs c \\<in> lambdas ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> calls x)", "apply (case_tac c, auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   c \\<in> calls (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow> False;\n        c \\<noteq> call.Let x1 x2 x3; c \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2; Lambda l vs c \\<in> lambdas ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> calls x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows lambdas2: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> l \\<in> labels x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> l \\<in> labelsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> l \\<in> labels (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> labels (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Lambda l vs c \\<in> lambdas x \\<Longrightarrow> l \\<in> labels x) &&&\n     (Lambda l vs c \\<in> lambdasC y \\<Longrightarrow>\n      l \\<in> labelsC y) &&&\n     (Lambda l vs c \\<in> lambdasV z \\<Longrightarrow>\n      l \\<in> labelsV z)) &&&\n    \\<forall>z\\<in>set list.\n       Lambda l vs c \\<in> lambdasV z \\<longrightarrow>\n       l \\<in> labelsV z &&&\n    \\<forall>x\\<in>set list2.\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       l \\<in> labels (snd x) &&&\n    (Lambda l vs c \\<in> lambdas (snd t) \\<Longrightarrow>\n     l \\<in> labels (snd t))", "apply (induct rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n                l \\<in> labelsC x3;\n        Lambda l vs c \\<in> lambdas (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labels (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasV x2 \\<Longrightarrow>\n                l \\<in> labelsV x2;\n        \\<forall>z\\<in>set x3.\n           Lambda l vs c \\<in> lambdasV z \\<longrightarrow>\n           l \\<in> labelsV z;\n        Lambda l vs c \\<in> lambdasC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   l \\<in> labels (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n        l \\<in> labelsC x3;\n        Lambda l vs c \\<in> lambdasC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x \\<Longrightarrow>\n                l \\<in> labels x;\n        Lambda l vs c \\<in> lambdasV (L x)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsV (L x)\n 5. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (R x1 x2) \\<Longrightarrow>\n       l \\<in> labelsV (R x1 x2)\n 6. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (C x1 x2) \\<Longrightarrow>\n       l \\<in> labelsV (C x1 x2)\n 7. \\<And>x.\n       Lambda l vs c \\<in> lambdasV (P x) \\<Longrightarrow>\n       l \\<in> labelsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x2 \\<Longrightarrow>\n                l \\<in> labels x2;\n        Lambda l vs c \\<in> lambdas (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labels (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       l \\<in> labels (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>Lambda l vs c \\<in> lambdas (snd x1) \\<Longrightarrow>\n                 l \\<in> labels (snd x1);\n         \\<forall>x\\<in>set x2.\n            Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n            l \\<in> labels (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             Lambda l vs c\n                             \\<in> lambdas (snd x) \\<longrightarrow>\n                             l \\<in> labels (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   l \\<in> labels (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow> False;\n        l \\<noteq> x1; l \\<notin> labelsC x3; ((a, b), ba) \\<in> set x2;\n        Lambda l vs c \\<in> lambdas ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (v, x) \\<Rightarrow> labels x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows lambdas3: \"Lambda l vs c \\<in> lambdas x \\<Longrightarrow> set vs \\<subseteq> vars x\"\n  and \"Lambda l vs c \\<in> lambdasC y \\<Longrightarrow> set vs \\<subseteq> varsC y\"\n  and \"Lambda l vs c \\<in> lambdasV z \\<Longrightarrow> set vs \\<subseteq> varsV z\"\n  and \"\\<forall>z\\<in> set list. Lambda l vs c \\<in> lambdasV z \\<longrightarrow> set vs \\<subseteq> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow> set vs \\<subseteq> vars (snd x)\"\n  and \"Lambda l vs c \\<in> lambdas (snd (t:: var\\<times>lambda)) \\<Longrightarrow> set vs \\<subseteq> vars (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Lambda l vs c \\<in> lambdas x \\<Longrightarrow>\n      set vs \\<subseteq> vars x) &&&\n     (Lambda l vs c \\<in> lambdasC y \\<Longrightarrow>\n      set vs \\<subseteq> varsC y) &&&\n     (Lambda l vs c \\<in> lambdasV z \\<Longrightarrow>\n      set vs \\<subseteq> varsV z)) &&&\n    \\<forall>z\\<in>set list.\n       Lambda l vs c \\<in> lambdasV z \\<longrightarrow>\n       set vs \\<subseteq> varsV z &&&\n    \\<forall>x\\<in>set list2.\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       set vs \\<subseteq> vars (snd x) &&&\n    (Lambda l vs c \\<in> lambdas (snd t) \\<Longrightarrow>\n     set vs \\<subseteq> vars (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n                set vs \\<subseteq> varsC x3;\n        Lambda l vs c \\<in> lambdas (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set vs \\<subseteq> vars (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasV x2 \\<Longrightarrow>\n                set vs \\<subseteq> varsV x2;\n        \\<forall>z\\<in>set x3.\n           Lambda l vs c \\<in> lambdasV z \\<longrightarrow>\n           set vs \\<subseteq> varsV z;\n        Lambda l vs c \\<in> lambdasC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set vs \\<subseteq> varsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   set vs \\<subseteq> vars (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n        set vs \\<subseteq> varsC x3;\n        Lambda l vs c \\<in> lambdasC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set vs \\<subseteq> varsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x \\<Longrightarrow>\n                set vs \\<subseteq> vars x;\n        Lambda l vs c \\<in> lambdasV (L x)\\<rbrakk>\n       \\<Longrightarrow> set vs \\<subseteq> varsV (L x)\n 5. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (R x1 x2) \\<Longrightarrow>\n       set vs \\<subseteq> varsV (R x1 x2)\n 6. \\<And>x1 x2.\n       Lambda l vs c \\<in> lambdasV (C x1 x2) \\<Longrightarrow>\n       set vs \\<subseteq> varsV (C x1 x2)\n 7. \\<And>x.\n       Lambda l vs c \\<in> lambdasV (P x) \\<Longrightarrow>\n       set vs \\<subseteq> varsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>Lambda l vs c \\<in> lambdas x2 \\<Longrightarrow>\n                set vs \\<subseteq> vars x2;\n        Lambda l vs c \\<in> lambdas (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> set vs \\<subseteq> vars (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n       set vs \\<subseteq> vars (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>Lambda l vs c \\<in> lambdas (snd x1) \\<Longrightarrow>\n                 set vs \\<subseteq> vars (snd x1);\n         \\<forall>x\\<in>set x2.\n            Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n            set vs \\<subseteq> vars (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             Lambda l vs c\n                             \\<in> lambdas (snd x) \\<longrightarrow>\n                             set vs \\<subseteq> vars (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 a b aa ba baa.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   Lambda l vs c \\<in> lambdas (snd x) \\<longrightarrow>\n                   set vs \\<subseteq> vars (snd x);\n        Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n        set vs \\<subseteq> varsC x3;\n        (a, b) \\<in> set vs; (a, b) \\<notin> varsC x3;\n        ((aa, ba), baa) \\<in> set x2;\n        Lambda l vs c \\<in> lambdas baa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            (a, b)\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))", "apply (erule_tac x=\"((aa, ba), bb)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b aa ba bb.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n                set vs \\<subseteq> varsC x3;\n        (a, b) \\<in> set vs; (a, b) \\<notin> varsC x3;\n        ((aa, ba), bb) \\<in> set x2; Lambda l vs c \\<in> lambdas bb;\n        Lambda l vs c \\<in> lambdas (snd ((aa, ba), bb)) \\<longrightarrow>\n        set vs \\<subseteq> vars (snd ((aa, ba), bb))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            (a, b)\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))\n 2. \\<And>x2 x3 a b aa ba bb.\n       \\<lbrakk>Lambda l vs c \\<in> lambdasC x3 \\<Longrightarrow>\n                set vs \\<subseteq> varsC x3;\n        (a, b) \\<in> set vs; (a, b) \\<notin> varsC x3;\n        ((aa, ba), bb) \\<in> set x2; Lambda l vs c \\<in> lambdas bb;\n        ((aa, ba), bb) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            (a, b)\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))", "apply (rule_tac x=\"((aa, ba), bb)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows app1: \"App l d ds \\<in> calls x \\<Longrightarrow> d \\<in> vals x\"\n  and \"App l d ds \\<in> callsC y \\<Longrightarrow> d \\<in> valsC y\"\n  and \"App l d ds \\<in> callsV z \\<Longrightarrow> d \\<in> valsV z\"\n  and \"\\<forall>z\\<in> set list. App l d ds \\<in> callsV z \\<longrightarrow> d \\<in> valsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . App l d ds \\<in> calls (snd x) \\<longrightarrow> d \\<in> vals (snd x)\"\n  and \"App l d ds \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> d \\<in> vals (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((App l d ds \\<in> calls x \\<Longrightarrow> d \\<in> vals x) &&&\n     (App l d ds \\<in> callsC y \\<Longrightarrow> d \\<in> valsC y) &&&\n     (App l d ds \\<in> callsV z \\<Longrightarrow> d \\<in> valsV z)) &&&\n    \\<forall>z\\<in>set list.\n       App l d ds \\<in> callsV z \\<longrightarrow> d \\<in> valsV z &&&\n    \\<forall>x\\<in>set list2.\n       App l d ds \\<in> calls (snd x) \\<longrightarrow>\n       d \\<in> vals (snd x) &&&\n    (App l d ds \\<in> calls (snd t) \\<Longrightarrow> d \\<in> vals (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow>\n                d \\<in> valsC x3;\n        App l d ds \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> d \\<in> vals (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>App l d ds \\<in> callsV x2 \\<Longrightarrow>\n                d \\<in> valsV x2;\n        \\<forall>z\\<in>set x3.\n           App l d ds \\<in> callsV z \\<longrightarrow> d \\<in> valsV z;\n        App l d ds \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> d \\<in> valsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   d \\<in> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow> d \\<in> valsC x3;\n        App l d ds \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> d \\<in> valsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>App l d ds \\<in> calls x \\<Longrightarrow> d \\<in> vals x;\n        App l d ds \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> d \\<in> valsV (L x)\n 5. \\<And>x1 x2.\n       App l d ds \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       d \\<in> valsV (R x1 x2)\n 6. \\<And>x1 x2.\n       App l d ds \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       d \\<in> valsV (C x1 x2)\n 7. \\<And>x.\n       App l d ds \\<in> callsV (P x) \\<Longrightarrow> d \\<in> valsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>App l d ds \\<in> calls x2 \\<Longrightarrow> d \\<in> vals x2;\n        App l d ds \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> d \\<in> vals (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       App l d ds \\<in> calls (snd x) \\<longrightarrow> d \\<in> vals (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>App l d ds \\<in> calls (snd x1) \\<Longrightarrow>\n                 d \\<in> vals (snd x1);\n         \\<forall>x\\<in>set x2.\n            App l d ds \\<in> calls (snd x) \\<longrightarrow>\n            d \\<in> vals (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             App l d ds\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             d \\<in> vals (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>App l d ds \\<in> callsV d \\<Longrightarrow> d \\<in> valsV d;\n     \\<forall>z\\<in>set ds. App l d ds \\<notin> callsV z;\n     \\<forall>x\\<in>set ds. d \\<notin> valsV x\\<rbrakk>\n    \\<Longrightarrow> d \\<in> valsV d\n 2. \\<And>x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   d \\<in> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow> False;\n        d \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            d \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (case_tac d, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   d \\<in> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow> False;\n        d \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            d \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow> False;\n        d \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba;\n        App l d ds \\<in> calls (snd ((a, b), ba)) \\<longrightarrow>\n        d \\<in> vals (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            d \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> vals x)\n 2. \\<And>x2 x3 a b ba.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow> False;\n        d \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba; ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            d \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows app2: \"App l d ds \\<in> calls x \\<Longrightarrow> set ds \\<subseteq> vals x\"\n  and \"App l d ds \\<in> callsC y \\<Longrightarrow> set ds \\<subseteq> valsC y\"\n  and \"App l d ds \\<in> callsV z \\<Longrightarrow> set ds \\<subseteq> valsV z\"\n  and \"\\<forall>z\\<in> set list. App l d ds \\<in> callsV z \\<longrightarrow> set ds \\<subseteq> valsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . App l d ds \\<in> calls (snd x) \\<longrightarrow> set ds \\<subseteq> vals (snd x)\"\n  and \"App l d ds \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> set ds \\<subseteq> vals (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((App l d ds \\<in> calls x \\<Longrightarrow>\n      set ds \\<subseteq> vals x) &&&\n     (App l d ds \\<in> callsC y \\<Longrightarrow>\n      set ds \\<subseteq> valsC y) &&&\n     (App l d ds \\<in> callsV z \\<Longrightarrow>\n      set ds \\<subseteq> valsV z)) &&&\n    \\<forall>z\\<in>set list.\n       App l d ds \\<in> callsV z \\<longrightarrow>\n       set ds \\<subseteq> valsV z &&&\n    \\<forall>x\\<in>set list2.\n       App l d ds \\<in> calls (snd x) \\<longrightarrow>\n       set ds \\<subseteq> vals (snd x) &&&\n    (App l d ds \\<in> calls (snd t) \\<Longrightarrow>\n     set ds \\<subseteq> vals (snd t))", "apply (induct  x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow>\n                set ds \\<subseteq> valsC x3;\n        App l d ds \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set ds \\<subseteq> vals (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>App l d ds \\<in> callsV x2 \\<Longrightarrow>\n                set ds \\<subseteq> valsV x2;\n        \\<forall>z\\<in>set x3.\n           App l d ds \\<in> callsV z \\<longrightarrow>\n           set ds \\<subseteq> valsV z;\n        App l d ds \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set ds \\<subseteq> valsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   set ds \\<subseteq> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow>\n        set ds \\<subseteq> valsC x3;\n        App l d ds \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> set ds \\<subseteq> valsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>App l d ds \\<in> calls x \\<Longrightarrow>\n                set ds \\<subseteq> vals x;\n        App l d ds \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> set ds \\<subseteq> valsV (L x)\n 5. \\<And>x1 x2.\n       App l d ds \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       set ds \\<subseteq> valsV (R x1 x2)\n 6. \\<And>x1 x2.\n       App l d ds \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       set ds \\<subseteq> valsV (C x1 x2)\n 7. \\<And>x.\n       App l d ds \\<in> callsV (P x) \\<Longrightarrow>\n       set ds \\<subseteq> valsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>App l d ds \\<in> calls x2 \\<Longrightarrow>\n                set ds \\<subseteq> vals x2;\n        App l d ds \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> set ds \\<subseteq> vals (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       App l d ds \\<in> calls (snd x) \\<longrightarrow>\n       set ds \\<subseteq> vals (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>App l d ds \\<in> calls (snd x1) \\<Longrightarrow>\n                 set ds \\<subseteq> vals (snd x1);\n         \\<forall>x\\<in>set x2.\n            App l d ds \\<in> calls (snd x) \\<longrightarrow>\n            set ds \\<subseteq> vals (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             App l d ds\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             set ds \\<subseteq> vals (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>App l d ds \\<in> callsV d \\<Longrightarrow>\n                set ds \\<subseteq> valsV d;\n        \\<forall>z\\<in>set ds.\n           App l d ds \\<in> callsV z \\<longrightarrow>\n           set ds \\<subseteq> valsV z;\n        x \\<in> set ds; \\<forall>xa\\<in>set ds. x \\<notin> valsV xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> valsV d\n 2. \\<And>x2 x3 x a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   set ds \\<subseteq> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow>\n        set ds \\<subseteq> valsC x3;\n        x \\<in> set ds; x \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set x2.\n                            x \\<in> (case xa of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (case_tac x, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 x a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   App l d ds \\<in> calls (snd x) \\<longrightarrow>\n                   set ds \\<subseteq> vals (snd x);\n        App l d ds \\<in> callsC x3 \\<Longrightarrow>\n        set ds \\<subseteq> valsC x3;\n        x \\<in> set ds; x \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set x2.\n                            x \\<in> (case xa of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 x a b ba.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow>\n                set ds \\<subseteq> valsC x3;\n        x \\<in> set ds; x \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba;\n        App l d ds \\<in> calls (snd ((a, b), ba)) \\<longrightarrow>\n        set ds \\<subseteq> vals (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set x2.\n                            x \\<in> (case xa of\n                                     (uu_, x) \\<Rightarrow> vals x)\n 2. \\<And>x2 x3 x a b ba.\n       \\<lbrakk>App l d ds \\<in> callsC x3 \\<Longrightarrow>\n                set ds \\<subseteq> valsC x3;\n        x \\<in> set ds; x \\<notin> valsC x3; ((a, b), ba) \\<in> set x2;\n        App l d ds \\<in> calls ba; ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set x2.\n                            x \\<in> (case xa of\n                                     (uu_, x) \\<Rightarrow> vals x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows let1: \"Let l binds c' \\<in> calls x \\<Longrightarrow> l \\<in> labels x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> l \\<in> labelsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> l \\<in> labelsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> l \\<in> labels (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> labels (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n      l \\<in> labels x) &&&\n     (call.Let l binds c' \\<in> callsC y \\<Longrightarrow>\n      l \\<in> labelsC y) &&&\n     (call.Let l binds c' \\<in> callsV z \\<Longrightarrow>\n      l \\<in> labelsV z)) &&&\n    \\<forall>z\\<in>set list.\n       call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n       l \\<in> labelsV z &&&\n    \\<forall>x\\<in>set list2.\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       l \\<in> labels (snd x) &&&\n    (call.Let l binds c' \\<in> calls (snd t) \\<Longrightarrow>\n     l \\<in> labels (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                l \\<in> labelsC x3;\n        call.Let l binds c' \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labels (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsV x2 \\<Longrightarrow>\n                l \\<in> labelsV x2;\n        \\<forall>z\\<in>set x3.\n           call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n           l \\<in> labelsV z;\n        call.Let l binds c' \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   l \\<in> labels (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        l \\<in> labelsC x3;\n        call.Let l binds c' \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n                l \\<in> labels x;\n        call.Let l binds c' \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labelsV (L x)\n 5. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       l \\<in> labelsV (R x1 x2)\n 6. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       l \\<in> labelsV (C x1 x2)\n 7. \\<And>x.\n       call.Let l binds c' \\<in> callsV (P x) \\<Longrightarrow>\n       l \\<in> labelsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x2 \\<Longrightarrow>\n                l \\<in> labels x2;\n        call.Let l binds c' \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> l \\<in> labels (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       l \\<in> labels (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>call.Let l binds c' \\<in> calls (snd x1) \\<Longrightarrow>\n                 l \\<in> labels (snd x1);\n         \\<forall>x\\<in>set x2.\n            call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n            l \\<in> labels (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             call.Let l binds c'\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             l \\<in> labels (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   l \\<in> labels (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        l \\<noteq> x1; l \\<notin> labelsC x3; ((a, b), ba) \\<in> set x2;\n        call.Let l binds c' \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (v, x) \\<Rightarrow> labels x)", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        l \\<noteq> x1; l \\<notin> labelsC x3; ((a, b), ba) \\<in> set x2;\n        call.Let l binds c' \\<in> calls ba;\n        call.Let l binds c' \\<in> calls (snd ((a, b), ba)) \\<longrightarrow>\n        l \\<in> labels (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (v, x) \\<Rightarrow> labels x)\n 2. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        l \\<noteq> x1; l \\<notin> labelsC x3; ((a, b), ba) \\<in> set x2;\n        call.Let l binds c' \\<in> calls ba;\n        ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (v, x) \\<Rightarrow> labels x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows let2: \"Let l binds c' \\<in> calls x \\<Longrightarrow> c' \\<in> calls x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> c' \\<in> callsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> c' \\<in> callsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> c' \\<in> callsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> c' \\<in> calls (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> c' \\<in> calls (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n      c' \\<in> calls x) &&&\n     (call.Let l binds c' \\<in> callsC y \\<Longrightarrow>\n      c' \\<in> callsC y) &&&\n     (call.Let l binds c' \\<in> callsV z \\<Longrightarrow>\n      c' \\<in> callsV z)) &&&\n    \\<forall>z\\<in>set list.\n       call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n       c' \\<in> callsV z &&&\n    \\<forall>x\\<in>set list2.\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       c' \\<in> calls (snd x) &&&\n    (call.Let l binds c' \\<in> calls (snd t) \\<Longrightarrow>\n     c' \\<in> calls (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                c' \\<in> callsC x3;\n        call.Let l binds c' \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c' \\<in> calls (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsV x2 \\<Longrightarrow>\n                c' \\<in> callsV x2;\n        \\<forall>z\\<in>set x3.\n           call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n           c' \\<in> callsV z;\n        call.Let l binds c' \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c' \\<in> callsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   c' \\<in> calls (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        c' \\<in> callsC x3;\n        call.Let l binds c' \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> c' \\<in> callsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n                c' \\<in> calls x;\n        call.Let l binds c' \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> c' \\<in> callsV (L x)\n 5. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       c' \\<in> callsV (R x1 x2)\n 6. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       c' \\<in> callsV (C x1 x2)\n 7. \\<And>x.\n       call.Let l binds c' \\<in> callsV (P x) \\<Longrightarrow>\n       c' \\<in> callsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x2 \\<Longrightarrow>\n                c' \\<in> calls x2;\n        call.Let l binds c' \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> c' \\<in> calls (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       c' \\<in> calls (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>call.Let l binds c' \\<in> calls (snd x1) \\<Longrightarrow>\n                 c' \\<in> calls (snd x1);\n         \\<forall>x\\<in>set x2.\n            call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n            c' \\<in> calls (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             call.Let l binds c'\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             c' \\<in> calls (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set binds.\n                call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                c' \\<in> calls (snd x);\n     call.Let l binds c' \\<in> callsC c' \\<Longrightarrow> False;\n     c' \\<notin> callsC c'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>set binds.\n                         c' \\<in> (case x of (uu_, x) \\<Rightarrow> calls x)\n 2. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   c' \\<in> calls (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        c' \\<noteq> call.Let x1 x2 x3; c' \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2;\n        call.Let l binds c' \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c' \\<in> (case x of\n(uu_, x) \\<Rightarrow> calls x)", "apply (case_tac c', auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   c' \\<in> calls (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        c' \\<noteq> call.Let x1 x2 x3; c' \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2;\n        call.Let l binds c' \\<in> calls ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c' \\<in> (case x of\n(uu_, x) \\<Rightarrow> calls x)", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        c' \\<noteq> call.Let x1 x2 x3; c' \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2; call.Let l binds c' \\<in> calls ba;\n        call.Let l binds c' \\<in> calls (snd ((a, b), ba)) \\<longrightarrow>\n        c' \\<in> calls (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c' \\<in> (case x of\n(uu_, x) \\<Rightarrow> calls x)\n 2. \\<And>x1 x2 x3 a b ba.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow> False;\n        c' \\<noteq> call.Let x1 x2 x3; c' \\<notin> callsC x3;\n        ((a, b), ba) \\<in> set x2; call.Let l binds c' \\<in> calls ba;\n        ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            c' \\<in> (case x of\n(uu_, x) \\<Rightarrow> calls x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \n  shows let3: \"Let l binds c' \\<in> calls x \\<Longrightarrow> fst ` set binds \\<subseteq> vars x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> fst ` set binds \\<subseteq> varsC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> fst ` set binds \\<subseteq> varsV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> fst ` set binds \\<subseteq> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> fst ` set binds \\<subseteq> vars (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> fst ` set binds \\<subseteq> vars (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n      fst ` set binds \\<subseteq> vars x) &&&\n     (call.Let l binds c' \\<in> callsC y \\<Longrightarrow>\n      fst ` set binds \\<subseteq> varsC y) &&&\n     (call.Let l binds c' \\<in> callsV z \\<Longrightarrow>\n      fst ` set binds \\<subseteq> varsV z)) &&&\n    \\<forall>z\\<in>set list.\n       call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n       fst ` set binds \\<subseteq> varsV z &&&\n    \\<forall>x\\<in>set list2.\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       fst ` set binds \\<subseteq> vars (snd x) &&&\n    (call.Let l binds c' \\<in> calls (snd t) \\<Longrightarrow>\n     fst ` set binds \\<subseteq> vars (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                fst ` set binds \\<subseteq> varsC x3;\n        call.Let l binds c' \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> fst ` set binds \\<subseteq> vars (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsV x2 \\<Longrightarrow>\n                fst ` set binds \\<subseteq> varsV x2;\n        \\<forall>z\\<in>set x3.\n           call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n           fst ` set binds \\<subseteq> varsV z;\n        call.Let l binds c' \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> fst ` set binds \\<subseteq> varsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   fst ` set binds \\<subseteq> vars (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        fst ` set binds \\<subseteq> varsC x3;\n        call.Let l binds c' \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> fst ` set binds\n                         \\<subseteq> varsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n                fst ` set binds \\<subseteq> vars x;\n        call.Let l binds c' \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> fst ` set binds \\<subseteq> varsV (L x)\n 5. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       fst ` set binds \\<subseteq> varsV (R x1 x2)\n 6. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       fst ` set binds \\<subseteq> varsV (C x1 x2)\n 7. \\<And>x.\n       call.Let l binds c' \\<in> callsV (P x) \\<Longrightarrow>\n       fst ` set binds \\<subseteq> varsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x2 \\<Longrightarrow>\n                fst ` set binds \\<subseteq> vars x2;\n        call.Let l binds c' \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> fst ` set binds \\<subseteq> vars (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       fst ` set binds \\<subseteq> vars (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>call.Let l binds c' \\<in> calls (snd x1) \\<Longrightarrow>\n                 fst ` set binds \\<subseteq> vars (snd x1);\n         \\<forall>x\\<in>set x2.\n            call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n            fst ` set binds \\<subseteq> vars (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             call.Let l binds c'\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             fst ` set binds \\<subseteq> vars (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 b aa bb ab ba bc.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   fst ` set binds \\<subseteq> vars (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        fst ` set binds \\<subseteq> varsC x3;\n        ((aa, b), bb) \\<in> set binds; (aa, b) \\<notin> varsC x3;\n        ((ab, ba), bc) \\<in> set x2;\n        call.Let l binds c' \\<in> calls bc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            (aa, b)\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  shows let4: \"Let l binds c' \\<in> calls x \\<Longrightarrow> snd ` set binds \\<subseteq> lambdas x\"\n  and \"Let l binds c' \\<in> callsC y \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasC y\"\n  and \"Let l binds c' \\<in> callsV z \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasV z\"\n  and \"\\<forall>z\\<in> set list. Let l binds c' \\<in> callsV z \\<longrightarrow> snd ` set binds \\<subseteq> lambdasV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . Let l binds c' \\<in> calls (snd x) \\<longrightarrow> snd ` set binds \\<subseteq> lambdas (snd x)\"\n  and \"Let l binds c' \\<in> calls (snd (t:: var\\<times>lambda)) \\<Longrightarrow> snd ` set binds \\<subseteq> lambdas (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n      snd ` set binds \\<subseteq> lambdas x) &&&\n     (call.Let l binds c' \\<in> callsC y \\<Longrightarrow>\n      snd ` set binds \\<subseteq> lambdasC y) &&&\n     (call.Let l binds c' \\<in> callsV z \\<Longrightarrow>\n      snd ` set binds \\<subseteq> lambdasV z)) &&&\n    \\<forall>z\\<in>set list.\n       call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n       snd ` set binds \\<subseteq> lambdasV z &&&\n    \\<forall>x\\<in>set list2.\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       snd ` set binds \\<subseteq> lambdas (snd x) &&&\n    (call.Let l binds c' \\<in> calls (snd t) \\<Longrightarrow>\n     snd ` set binds \\<subseteq> lambdas (snd t))", "apply (induct x and y and z and list and list2 and t rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdasC x3;\n        call.Let l binds c' \\<in> calls (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> snd ` set binds\n                         \\<subseteq> lambdas (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call.Let l binds c' \\<in> callsV x2 \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdasV x2;\n        \\<forall>z\\<in>set x3.\n           call.Let l binds c' \\<in> callsV z \\<longrightarrow>\n           snd ` set binds \\<subseteq> lambdasV z;\n        call.Let l binds c' \\<in> callsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC x3;\n        call.Let l binds c' \\<in> callsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> snd ` set binds\n                         \\<subseteq> lambdasC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdas x;\n        call.Let l binds c' \\<in> callsV (L x)\\<rbrakk>\n       \\<Longrightarrow> snd ` set binds \\<subseteq> lambdasV (L x)\n 5. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (R x1 x2) \\<Longrightarrow>\n       snd ` set binds \\<subseteq> lambdasV (R x1 x2)\n 6. \\<And>x1 x2.\n       call.Let l binds c' \\<in> callsV (C x1 x2) \\<Longrightarrow>\n       snd ` set binds \\<subseteq> lambdasV (C x1 x2)\n 7. \\<And>x.\n       call.Let l binds c' \\<in> callsV (P x) \\<Longrightarrow>\n       snd ` set binds \\<subseteq> lambdasV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>call.Let l binds c' \\<in> calls x2 \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdas x2;\n        call.Let l binds c' \\<in> calls (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> snd ` set binds \\<subseteq> lambdas (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n       snd ` set binds \\<subseteq> lambdas (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>call.Let l binds c' \\<in> calls (snd x1) \\<Longrightarrow>\n                 snd ` set binds \\<subseteq> lambdas (snd x1);\n         \\<forall>x\\<in>set x2.\n            call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n            snd ` set binds \\<subseteq> lambdas (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             call.Let l binds c'\n                             \\<in> calls (snd x) \\<longrightarrow>\n                             snd ` set binds \\<subseteq> lambdas (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set binds.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC c' \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC c';\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set binds.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)\n 2. \\<And>x2 x3 a b ba aa baa baaa.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC x3;\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC x3;\n        ((aa, baa), baaa) \\<in> set x2;\n        call.Let l binds c' \\<in> calls baaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set binds.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC c' \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC c';\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC c'\\<rbrakk>\n       \\<Longrightarrow> ba \\<in> lambdas ba\n 2. \\<And>x2 x3 a b ba aa baa baaa.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC x3;\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC x3;\n        ((aa, baa), baaa) \\<in> set x2;\n        call.Let l binds c' \\<in> calls baaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)", "apply (case_tac ba, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 a b ba aa baa baaa.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   call.Let l binds c' \\<in> calls (snd x) \\<longrightarrow>\n                   snd ` set binds \\<subseteq> lambdas (snd x);\n        call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n        snd ` set binds \\<subseteq> lambdasC x3;\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC x3;\n        ((aa, baa), baaa) \\<in> set x2;\n        call.Let l binds c' \\<in> calls baaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)", "apply (erule_tac x=\"((aa, bb), bc)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b ba aa bb bc.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdasC x3;\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC x3;\n        ((aa, bb), bc) \\<in> set x2; call.Let l binds c' \\<in> calls bc;\n        call.Let l binds c'\n        \\<in> calls (snd ((aa, bb), bc)) \\<longrightarrow>\n        snd ` set binds \\<subseteq> lambdas (snd ((aa, bb), bc))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)\n 2. \\<And>x2 x3 a b ba aa bb bc.\n       \\<lbrakk>call.Let l binds c' \\<in> callsC x3 \\<Longrightarrow>\n                snd ` set binds \\<subseteq> lambdasC x3;\n        ((a, b), ba) \\<in> set binds; ba \\<notin> lambdasC x3;\n        ((aa, bb), bc) \\<in> set x2; call.Let l binds c' \\<in> calls bc;\n        ((aa, bb), bc) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            ba \\<in> (case x of\n(uu_, x) \\<Rightarrow> lambdas x)", "apply (rule_tac x=\"((aa, bb), bc)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\nshows vals1: \"P prim \\<in> vals p \\<Longrightarrow> prim \\<in> prims p\"\n  and \"P prim \\<in> valsC y \\<Longrightarrow> prim \\<in> primsC y\"\n  and \"P prim \\<in> valsV z \\<Longrightarrow> prim \\<in> primsV z\"\n  and \"\\<forall>z\\<in> set list. P prim \\<in> valsV z \\<longrightarrow> prim \\<in> primsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . P prim \\<in> vals (snd x) \\<longrightarrow> prim \\<in> prims (snd x)\"\n  and \"P prim \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> prim \\<in> prims (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((P prim \\<in> vals p \\<Longrightarrow> prim \\<in> prims p) &&&\n     (P prim \\<in> valsC y \\<Longrightarrow> prim \\<in> primsC y) &&&\n     (P prim \\<in> valsV z \\<Longrightarrow> prim \\<in> primsV z)) &&&\n    \\<forall>z\\<in>set list.\n       P prim \\<in> valsV z \\<longrightarrow> prim \\<in> primsV z &&&\n    \\<forall>x\\<in>set list2.\n       P prim \\<in> vals (snd x) \\<longrightarrow>\n       prim \\<in> prims (snd x) &&&\n    (P prim \\<in> vals (snd t) \\<Longrightarrow> prim \\<in> prims (snd t))", "apply (induct rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>P prim \\<in> valsC x3 \\<Longrightarrow>\n                prim \\<in> primsC x3;\n        P prim \\<in> vals (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> prim \\<in> prims (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>P prim \\<in> valsV x2 \\<Longrightarrow>\n                prim \\<in> primsV x2;\n        \\<forall>z\\<in>set x3.\n           P prim \\<in> valsV z \\<longrightarrow> prim \\<in> primsV z;\n        P prim \\<in> valsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> prim \\<in> primsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   P prim \\<in> vals (snd x) \\<longrightarrow>\n                   prim \\<in> prims (snd x);\n        P prim \\<in> valsC x3 \\<Longrightarrow> prim \\<in> primsC x3;\n        P prim \\<in> valsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> prim \\<in> primsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>P prim \\<in> vals x \\<Longrightarrow> prim \\<in> prims x;\n        P prim \\<in> valsV (L x)\\<rbrakk>\n       \\<Longrightarrow> prim \\<in> primsV (L x)\n 5. \\<And>x1 x2.\n       P prim \\<in> valsV (R x1 x2) \\<Longrightarrow>\n       prim \\<in> primsV (R x1 x2)\n 6. \\<And>x1 x2.\n       P prim \\<in> valsV (C x1 x2) \\<Longrightarrow>\n       prim \\<in> primsV (C x1 x2)\n 7. \\<And>x.\n       P prim \\<in> valsV (P x) \\<Longrightarrow> prim \\<in> primsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>P prim \\<in> vals x2 \\<Longrightarrow> prim \\<in> prims x2;\n        P prim \\<in> vals (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> prim \\<in> prims (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       P prim \\<in> vals (snd x) \\<longrightarrow> prim \\<in> prims (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>P prim \\<in> vals (snd x1) \\<Longrightarrow>\n                 prim \\<in> prims (snd x1);\n         \\<forall>x\\<in>set x2.\n            P prim \\<in> vals (snd x) \\<longrightarrow>\n            prim \\<in> prims (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             P prim \\<in> vals (snd x) \\<longrightarrow>\n                             prim \\<in> prims (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   P prim \\<in> vals (snd x) \\<longrightarrow>\n                   prim \\<in> prims (snd x);\n        P prim \\<in> valsC x3 \\<Longrightarrow> False;\n        prim \\<notin> primsC x3; ((a, b), ba) \\<in> set x2;\n        P prim \\<in> vals ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            prim\n                            \\<in> (case x of (uu_, x) \\<Rightarrow> prims x)", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>P prim \\<in> valsC x3 \\<Longrightarrow> False;\n        prim \\<notin> primsC x3; ((a, b), ba) \\<in> set x2;\n        P prim \\<in> vals ba;\n        P prim \\<in> vals (snd ((a, b), ba)) \\<longrightarrow>\n        prim \\<in> prims (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            prim\n                            \\<in> (case x of (uu_, x) \\<Rightarrow> prims x)\n 2. \\<And>x2 x3 a b ba.\n       \\<lbrakk>P prim \\<in> valsC x3 \\<Longrightarrow> False;\n        prim \\<notin> primsC x3; ((a, b), ba) \\<in> set x2;\n        P prim \\<in> vals ba; ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            prim\n                            \\<in> (case x of (uu_, x) \\<Rightarrow> prims x)", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\nshows vals2: \"R l var \\<in> vals p \\<Longrightarrow> var \\<in> vars p\"\n  and \"R l var \\<in> valsC y \\<Longrightarrow> var \\<in> varsC y\"\n  and \"R l var \\<in> valsV z \\<Longrightarrow> var \\<in> varsV z\"\n  and \"\\<forall>z\\<in> set list. R l var \\<in> valsV z \\<longrightarrow> var \\<in> varsV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . R l var \\<in> vals (snd x) \\<longrightarrow> var \\<in> vars (snd x)\"\n  and \"R l var \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> var \\<in> vars (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((R l var \\<in> vals p \\<Longrightarrow> var \\<in> vars p) &&&\n     (R l var \\<in> valsC y \\<Longrightarrow> var \\<in> varsC y) &&&\n     (R l var \\<in> valsV z \\<Longrightarrow> var \\<in> varsV z)) &&&\n    \\<forall>z\\<in>set list.\n       R l var \\<in> valsV z \\<longrightarrow> var \\<in> varsV z &&&\n    \\<forall>x\\<in>set list2.\n       R l var \\<in> vals (snd x) \\<longrightarrow>\n       var \\<in> vars (snd x) &&&\n    (R l var \\<in> vals (snd t) \\<Longrightarrow> var \\<in> vars (snd t))", "apply (induct rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>R l var \\<in> valsC x3 \\<Longrightarrow> var \\<in> varsC x3;\n        R l var \\<in> vals (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> var \\<in> vars (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>R l var \\<in> valsV x2 \\<Longrightarrow> var \\<in> varsV x2;\n        \\<forall>z\\<in>set x3.\n           R l var \\<in> valsV z \\<longrightarrow> var \\<in> varsV z;\n        R l var \\<in> valsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> var \\<in> varsC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   R l var \\<in> vals (snd x) \\<longrightarrow>\n                   var \\<in> vars (snd x);\n        R l var \\<in> valsC x3 \\<Longrightarrow> var \\<in> varsC x3;\n        R l var \\<in> valsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> var \\<in> varsC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>R l var \\<in> vals x \\<Longrightarrow> var \\<in> vars x;\n        R l var \\<in> valsV (L x)\\<rbrakk>\n       \\<Longrightarrow> var \\<in> varsV (L x)\n 5. \\<And>x1 x2.\n       R l var \\<in> valsV (R x1 x2) \\<Longrightarrow>\n       var \\<in> varsV (R x1 x2)\n 6. \\<And>x1 x2.\n       R l var \\<in> valsV (C x1 x2) \\<Longrightarrow>\n       var \\<in> varsV (C x1 x2)\n 7. \\<And>x.\n       R l var \\<in> valsV (P x) \\<Longrightarrow> var \\<in> varsV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>R l var \\<in> vals x2 \\<Longrightarrow> var \\<in> vars x2;\n        R l var \\<in> vals (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> var \\<in> vars (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       R l var \\<in> vals (snd x) \\<longrightarrow> var \\<in> vars (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>R l var \\<in> vals (snd x1) \\<Longrightarrow>\n                 var \\<in> vars (snd x1);\n         \\<forall>x\\<in>set x2.\n            R l var \\<in> vals (snd x) \\<longrightarrow>\n            var \\<in> vars (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             R l var \\<in> vals (snd x) \\<longrightarrow>\n                             var \\<in> vars (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   R l var \\<in> vals (snd x) \\<longrightarrow>\n                   var \\<in> vars (snd x);\n        R l var \\<in> valsC x3 \\<Longrightarrow> False;\n        var \\<notin> varsC x3; ((a, b), ba) \\<in> set x2;\n        R l var \\<in> vals ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            var\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>R l var \\<in> valsC x3 \\<Longrightarrow> False;\n        var \\<notin> varsC x3; ((a, b), ba) \\<in> set x2;\n        R l var \\<in> vals ba;\n        R l var \\<in> vals (snd ((a, b), ba)) \\<longrightarrow>\n        var \\<in> vars (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            var\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))\n 2. \\<And>x2 x3 a b ba.\n       \\<lbrakk>R l var \\<in> valsC x3 \\<Longrightarrow> False;\n        var \\<notin> varsC x3; ((a, b), ba) \\<in> set x2;\n        R l var \\<in> vals ba; ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            var\n                            \\<in> (case x of\n                                   (v, l) \\<Rightarrow> insert v (vars l))", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\nshows vals3: \"L l \\<in> vals p \\<Longrightarrow> l \\<in> lambdas p\"\n  and \"L l \\<in> valsC y \\<Longrightarrow> l \\<in> lambdasC y\"\n  and \"L l \\<in> valsV z \\<Longrightarrow> l \\<in> lambdasV z\"\n  and \"\\<forall>z\\<in> set list. L l \\<in> valsV z \\<longrightarrow> l \\<in> lambdasV z\"\n  and \"\\<forall>x\\<in> set (list2 :: (var \\<times> lambda) list) . L l \\<in> vals (snd x) \\<longrightarrow> l \\<in> lambdas (snd x)\"\n  and \"L l \\<in> vals (snd (t:: var\\<times>lambda)) \\<Longrightarrow> l \\<in> lambdas (snd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((L l \\<in> vals p \\<Longrightarrow> l \\<in> lambdas p) &&&\n     (L l \\<in> valsC y \\<Longrightarrow> l \\<in> lambdasC y) &&&\n     (L l \\<in> valsV z \\<Longrightarrow> l \\<in> lambdasV z)) &&&\n    \\<forall>z\\<in>set list.\n       L l \\<in> valsV z \\<longrightarrow> l \\<in> lambdasV z &&&\n    \\<forall>x\\<in>set list2.\n       L l \\<in> vals (snd x) \\<longrightarrow> l \\<in> lambdas (snd x) &&&\n    (L l \\<in> vals (snd t) \\<Longrightarrow> l \\<in> lambdas (snd t))", "apply (induct rule:mutual_lambda_call_var_inducts)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>L l \\<in> valsC x3 \\<Longrightarrow> l \\<in> lambdasC x3;\n        L l \\<in> vals (Lambda x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> lambdas (Lambda x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>L l \\<in> valsV x2 \\<Longrightarrow> l \\<in> lambdasV x2;\n        \\<forall>z\\<in>set x3.\n           L l \\<in> valsV z \\<longrightarrow> l \\<in> lambdasV z;\n        L l \\<in> valsC (App x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> lambdasC (App x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   L l \\<in> vals (snd x) \\<longrightarrow>\n                   l \\<in> lambdas (snd x);\n        L l \\<in> valsC x3 \\<Longrightarrow> l \\<in> lambdasC x3;\n        L l \\<in> valsC (call.Let x1 x2 x3)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> lambdasC (call.Let x1 x2 x3)\n 4. \\<And>x.\n       \\<lbrakk>L l \\<in> vals x \\<Longrightarrow> l \\<in> lambdas x;\n        L l \\<in> valsV (L x)\\<rbrakk>\n       \\<Longrightarrow> l \\<in> lambdasV (L x)\n 5. \\<And>x1 x2.\n       L l \\<in> valsV (R x1 x2) \\<Longrightarrow>\n       l \\<in> lambdasV (R x1 x2)\n 6. \\<And>x1 x2.\n       L l \\<in> valsV (C x1 x2) \\<Longrightarrow>\n       l \\<in> lambdasV (C x1 x2)\n 7. \\<And>x. L l \\<in> valsV (P x) \\<Longrightarrow> l \\<in> lambdasV (P x)\n 8. \\<And>x1 x2.\n       \\<lbrakk>L l \\<in> vals x2 \\<Longrightarrow> l \\<in> lambdas x2;\n        L l \\<in> vals (snd (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> l \\<in> lambdas (snd (x1, x2))\n 9. \\<forall>x\\<in>set [].\n       L l \\<in> vals (snd x) \\<longrightarrow> l \\<in> lambdas (snd x)\n 10. \\<And>x1 x2.\n        \\<lbrakk>L l \\<in> vals (snd x1) \\<Longrightarrow>\n                 l \\<in> lambdas (snd x1);\n         \\<forall>x\\<in>set x2.\n            L l \\<in> vals (snd x) \\<longrightarrow>\n            l \\<in> lambdas (snd x)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (x1 # x2).\n                             L l \\<in> vals (snd x) \\<longrightarrow>\n                             l \\<in> lambdas (snd x)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>\\<forall>x\\<in>set x2.\n                   L l \\<in> vals (snd x) \\<longrightarrow>\n                   l \\<in> lambdas (snd x);\n        L l \\<in> valsC x3 \\<Longrightarrow> False; l \\<notin> lambdasC x3;\n        ((a, b), ba) \\<in> set x2; L l \\<in> vals ba\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> lambdas x)\n 2. (L l \\<in> vals l \\<Longrightarrow> l \\<in> lambdas l) \\<Longrightarrow>\n    l \\<in> lambdas l", "apply (erule_tac x=\"((a, b), ba)\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x2 x3 a b ba.\n       \\<lbrakk>L l \\<in> valsC x3 \\<Longrightarrow> False;\n        l \\<notin> lambdasC x3; ((a, b), ba) \\<in> set x2;\n        L l \\<in> vals ba;\n        L l \\<in> vals (snd ((a, b), ba)) \\<longrightarrow>\n        l \\<in> lambdas (snd ((a, b), ba))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> lambdas x)\n 2. \\<And>x2 x3 a b ba.\n       \\<lbrakk>L l \\<in> valsC x3 \\<Longrightarrow> False;\n        l \\<notin> lambdasC x3; ((a, b), ba) \\<in> set x2;\n        L l \\<in> vals ba; ((a, b), ba) \\<notin> set x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set x2.\n                            l \\<in> (case x of\n                                     (uu_, x) \\<Rightarrow> lambdas x)\n 3. (L l \\<in> vals l \\<Longrightarrow> l \\<in> lambdas l) \\<Longrightarrow>\n    l \\<in> lambdas l", "apply (rule_tac x=\"((a, b), ba)\" in bexI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (L l \\<in> vals l \\<Longrightarrow> l \\<in> lambdas l) \\<Longrightarrow>\n    l \\<in> lambdas l", "apply (case_tac l, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition nList :: \"'a set => nat => 'a list set\"\nwhere \"nList A n \\<equiv> {l. set l \\<le> A \\<and> length l = n}\""], ["", "lemma finite_nList[intro]:\n  assumes finA: \"finite A\"\n  shows \"finite (nList A n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nList A n)", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (nList A 0)\n 2. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. finite (nList A 0)\n 2. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nList A 0)", "by (simp add:nList_def)"], ["proof (state)\nthis:\n  finite (nList A 0)\n\ngoal (1 subgoal):\n 1. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  finite (nList A n)\n\ngoal (1 subgoal):\n 1. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "hence finn: \"finite (nList (A) n)\""], ["proof (prove)\nusing this:\n  finite (nList A n)\n\ngoal (1 subgoal):\n 1. finite (nList A n)", "by simp"], ["proof (state)\nthis:\n  finite (nList A n)\n\ngoal (1 subgoal):\n 1. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "have \"nList A (Suc n) = (case_prod (#)) ` (A \\<times> nList A n)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. nList A (Suc n) = (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)", "proof(rule subset_antisym[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> nList A (Suc n) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n 2. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "fix l"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> nList A (Suc n) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n 2. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "assume \"l \\<in> ?lhs\""], ["proof (state)\nthis:\n  l \\<in> nList A (Suc n)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> nList A (Suc n) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n 2. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "thus \"l \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  l \\<in> nList A (Suc n)\n\ngoal (1 subgoal):\n 1. l \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)", "by (cases l, auto simp add:nList_def)"], ["proof (state)\nthis:\n  l \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "assume \"l \\<in> ?rhs\""], ["proof (state)\nthis:\n  l \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>(x, y). x # y) `\n               (A \\<times> nList A n) \\<Longrightarrow>\n       x \\<in> nList A (Suc n)", "thus \"l \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  l \\<in> (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n\ngoal (1 subgoal):\n 1. l \\<in> nList A (Suc n)", "by (auto simp add:nList_def)"], ["proof (state)\nthis:\n  l \\<in> nList A (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nList A (Suc n) = (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n\ngoal (1 subgoal):\n 1. \\<And>n. finite (nList A n) \\<Longrightarrow> finite (nList A (Suc n))", "thus \"finite ?lhs\""], ["proof (prove)\nusing this:\n  nList A (Suc n) = (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n\ngoal (1 subgoal):\n 1. finite (nList A (Suc n))", "using finA and finn"], ["proof (prove)\nusing this:\n  nList A (Suc n) = (\\<lambda>(x, y). x # y) ` (A \\<times> nList A n)\n  finite A\n  finite (nList A n)\n\ngoal (1 subgoal):\n 1. finite (nList A (Suc n))", "by auto"], ["proof (state)\nthis:\n  finite (nList A (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition NList :: \"'a set => nat set => 'a list set\"\nwhere \"NList A N \\<equiv> \\<Union> n \\<in> N. nList A n\""], ["", "lemma finite_Nlist[intro]:\n  \"\\<lbrakk> finite A; finite N \\<rbrakk> \\<Longrightarrow> finite (NList A N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite N\\<rbrakk>\n    \\<Longrightarrow> finite (NList A N)", "unfolding NList_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite N\\<rbrakk>\n    \\<Longrightarrow> finite (\\<Union> (nList A ` N))", "by auto"], ["", "definition call_list_lengths\n  where \"call_list_lengths p = {0,1,2,3} \\<union> (\\<lambda>c. case c of (App _ _ ds) \\<Rightarrow> length ds | _ \\<Rightarrow> 0) ` calls p\""], ["", "lemma finite_call_list_lengths[simp]: \"finite (call_list_lengths p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (call_list_lengths p)", "unfolding call_list_lengths_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({0, 1, 2, 3} \\<union>\n      case_call (\\<lambda>x xa. length) (\\<lambda>nat list call. 0) `\n      calls p)", "by auto"], ["", "end"]]}