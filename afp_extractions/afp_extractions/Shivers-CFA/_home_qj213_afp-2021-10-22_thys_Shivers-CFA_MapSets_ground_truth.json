{"file_name": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA/MapSets.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA", "problem_names": ["lemma maps_over_empty[simp]:\n  \"Map.empty \\<in> maps_over A B\"", "lemma maps_over_upd:\n  assumes \"m \\<in> maps_over A B\"\n  and \"v \\<in> A\" and \"k \\<in> B\"\nshows \"m(v \\<mapsto> k) \\<in> maps_over A B\"", "lemma maps_over_finite[intro]:\n  assumes \"finite A\" and \"finite B\" shows \"finite (maps_over A B)\"", "lemma smaps_over_empty[simp]:\n  \"{}. \\<in> smaps_over A B\"", "lemma smaps_over_singleton:\n  assumes \"k \\<in> A\" and \"vs \\<subseteq> B\"\nshows \"{k := vs}. \\<in> smaps_over A B\"", "lemma smaps_over_un:\n  assumes \"m1 \\<in> smaps_over A B\" and \"m2 \\<in> smaps_over A B\"\n  shows \"m1 \\<union>. m2 \\<in> smaps_over A B\"", "lemma smaps_over_Union:\n  assumes \"set ms \\<subseteq> smaps_over A B\"\n  shows \"\\<Union>.ms \\<in> smaps_over A B\"", "lemma smaps_over_im:\n \"\\<lbrakk> f \\<in> m a ; m \\<in> smaps_over A B \\<rbrakk> \\<Longrightarrow> f \\<in> B\"", "lemma smaps_over_finite[intro]: \n  assumes \"finite A\" and \"finite B\" shows \"finite (smaps_over A B)\""], "translations": [["", "lemma maps_over_empty[simp]:\n  \"Map.empty \\<in> maps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty \\<in> maps_over A B", "unfolding maps_over_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty \\<in> {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "by simp"], ["", "lemma maps_over_upd:\n  assumes \"m \\<in> maps_over A B\"\n  and \"v \\<in> A\" and \"k \\<in> B\"\nshows \"m(v \\<mapsto> k) \\<in> maps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m(v \\<mapsto> k) \\<in> maps_over A B", "using assms"], ["proof (prove)\nusing this:\n  m \\<in> maps_over A B\n  v \\<in> A\n  k \\<in> B\n\ngoal (1 subgoal):\n 1. m(v \\<mapsto> k) \\<in> maps_over A B", "unfolding maps_over_def"], ["proof (prove)\nusing this:\n  m \\<in> {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\n  v \\<in> A\n  k \\<in> B\n\ngoal (1 subgoal):\n 1. m(v \\<mapsto> k)\n    \\<in> {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "by (auto dest: subsetD[OF ran_upd])"], ["", "lemma maps_over_finite[intro]:\n  assumes \"finite A\" and \"finite B\" shows \"finite (maps_over A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "have inj_map_graph: \"inj (\\<lambda>f. {(x, y). Some y = f x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>f. {(x, y). Some y = f x})", "proof (induct rule: inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}\\<rbrakk>\n       \\<Longrightarrow> x = y", "case (1 x y)"], ["proof (state)\nthis:\n  x \\<in> UNIV\n  y \\<in> UNIV\n  {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}\\<rbrakk>\n       \\<Longrightarrow> x = y", "from \"1.hyps\"(3)"], ["proof (chain)\npicking this:\n  {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}", "have hyp: \"\\<And> a b. (Some b = x a) \\<longleftrightarrow> (Some b = y a)\""], ["proof (prove)\nusing this:\n  {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}\n\ngoal (1 subgoal):\n 1. \\<And>a b. (Some b = x a) = (Some b = y a)", "by (simp add: set_eq_iff)"], ["proof (state)\nthis:\n  (Some ?b = x ?a) = (Some ?b = y ?a)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). Some y = x xa} = {(x, ya). Some ya = y x}\\<rbrakk>\n       \\<Longrightarrow> x = y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. x xa = y xa", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. x xa = y xa", "show \"x z = y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x z = y z", "using hyp[of _ z]"], ["proof (prove)\nusing this:\n  (Some ?b = x z) = (Some ?b = y z)\n\ngoal (1 subgoal):\n 1. x z = y z", "by (cases \"x z\", cases \"y z\", auto)"], ["proof (state)\nthis:\n  x z = y z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj (\\<lambda>f. {(x, y). Some y = f x})\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "have \"(\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B \\<subseteq> Pow( A \\<times> B )\" (is \"?graph \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B\n    \\<subseteq> Pow (A \\<times> B)", "unfolding maps_over_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. {(x, y). Some y = f x}) `\n    {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\n    \\<subseteq> Pow (A \\<times> B)", "by (auto dest!:subsetD[of _ A] subsetD[of _ B] intro:ranI)"], ["proof (state)\nthis:\n  (\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B\n  \\<subseteq> Pow (A \\<times> B)\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B\n  \\<subseteq> Pow (A \\<times> B)\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "have \"finite (Pow( A \\<times> B ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Pow (A \\<times> B))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. finite (Pow (A \\<times> B))", "by auto"], ["proof (state)\nthis:\n  finite (Pow (A \\<times> B))\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B\n  \\<subseteq> Pow (A \\<times> B)\n  finite (Pow (A \\<times> B))", "have \"finite ?graph\""], ["proof (prove)\nusing this:\n  (\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B\n  \\<subseteq> Pow (A \\<times> B)\n  finite (Pow (A \\<times> B))\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite ((\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B)\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite ((\\<lambda>f. {(x, y). Some y = f x}) ` maps_over A B)\n\ngoal (1 subgoal):\n 1. finite (maps_over A B)", "by (rule finite_imageD[OF _ subset_inj_on[OF inj_map_graph subset_UNIV]])"], ["proof (state)\nthis:\n  finite (maps_over A B)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition smaps_over :: \"'a::type set \\<Rightarrow> 'b::type set \\<Rightarrow> ('a \\<Rightarrow> 'b set) set\"\n  where \"smaps_over A B = {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}\""], ["", "lemma smaps_over_empty[simp]:\n  \"{}. \\<in> smaps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {}. \\<in> smaps_over A B", "unfolding smaps_over_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {}. \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}", "by simp"], ["", "lemma smaps_over_singleton:\n  assumes \"k \\<in> A\" and \"vs \\<subseteq> B\"\nshows \"{k := vs}. \\<in> smaps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. { k := vs}. \\<in> smaps_over A B", "using assms"], ["proof (prove)\nusing this:\n  k \\<in> A\n  vs \\<subseteq> B\n\ngoal (1 subgoal):\n 1. { k := vs}. \\<in> smaps_over A B", "unfolding smaps_over_def"], ["proof (prove)\nusing this:\n  k \\<in> A\n  vs \\<subseteq> B\n\ngoal (1 subgoal):\n 1. { k := vs}. \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}", "by(auto dest: subsetD[OF sdom_singleton])"], ["", "lemma smaps_over_un:\n  assumes \"m1 \\<in> smaps_over A B\" and \"m2 \\<in> smaps_over A B\"\n  shows \"m1 \\<union>. m2 \\<in> smaps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 \\<union>. m2 \\<in> smaps_over A B", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> smaps_over A B\n  m2 \\<in> smaps_over A B\n\ngoal (1 subgoal):\n 1. m1 \\<union>. m2 \\<in> smaps_over A B", "unfolding smaps_over_def"], ["proof (prove)\nusing this:\n  m1 \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}\n  m2 \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}\n\ngoal (1 subgoal):\n 1. m1 \\<union>. m2\n    \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}", "by (auto simp add:smap_union_def)"], ["", "lemma smaps_over_Union:\n  assumes \"set ms \\<subseteq> smaps_over A B\"\n  shows \"\\<Union>.ms \\<in> smaps_over A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>.ms \\<in> smaps_over A B", "using assms"], ["proof (prove)\nusing this:\n  set ms \\<subseteq> smaps_over A B\n\ngoal (1 subgoal):\n 1. \\<Union>.ms \\<in> smaps_over A B", "by (induct ms)(auto intro: smaps_over_un)"], ["", "lemma smaps_over_im:\n \"\\<lbrakk> f \\<in> m a ; m \\<in> smaps_over A B \\<rbrakk> \\<Longrightarrow> f \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> m a; m \\<in> smaps_over A B\\<rbrakk>\n    \\<Longrightarrow> f \\<in> B", "unfolding smaps_over_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> m a;\n     m \\<in> {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}\\<rbrakk>\n    \\<Longrightarrow> f \\<in> B", "by (auto simp add:sran_def)"], ["", "lemma smaps_over_finite[intro]: \n  assumes \"finite A\" and \"finite B\" shows \"finite (smaps_over A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "have inj_smap_graph: \"inj (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}})\" (is \"inj ?gr\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}})", "proof (induct rule: inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n        {(x, ya). ya = y x \\<and> ya \\<noteq> {}}\\<rbrakk>\n       \\<Longrightarrow> x = y", "case (1 x y)"], ["proof (state)\nthis:\n  x \\<in> UNIV\n  y \\<in> UNIV\n  {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n  {(x, ya). ya = y x \\<and> ya \\<noteq> {}}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n        {(x, ya). ya = y x \\<and> ya \\<noteq> {}}\\<rbrakk>\n       \\<Longrightarrow> x = y", "from \"1.hyps\"(3)"], ["proof (chain)\npicking this:\n  {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n  {(x, ya). ya = y x \\<and> ya \\<noteq> {}}", "have hyp: \"\\<And> a b. (b = x a \\<and> b \\<noteq> {}) = (b = y a \\<and> b \\<noteq> {})\""], ["proof (prove)\nusing this:\n  {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n  {(x, ya). ya = y x \\<and> ya \\<noteq> {}}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (b = x a \\<and> b \\<noteq> {}) = (b = y a \\<and> b \\<noteq> {})", "by -(subst (asm) (3) set_eq_iff, simp)"], ["proof (state)\nthis:\n  (?b = x ?a \\<and> ?b \\<noteq> {}) = (?b = y ?a \\<and> ?b \\<noteq> {})\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(xa, y). y = x xa \\<and> y \\<noteq> {}} =\n        {(x, ya). ya = y x \\<and> ya \\<noteq> {}}\\<rbrakk>\n       \\<Longrightarrow> x = y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. x xa = y xa", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. x xa = y xa", "show \"x z = y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x z = y z", "using hyp[of _ z]"], ["proof (prove)\nusing this:\n  (?b = x z \\<and> ?b \\<noteq> {}) = (?b = y z \\<and> ?b \\<noteq> {})\n\ngoal (1 subgoal):\n 1. x z = y z", "by (cases \"x z \\<noteq> {}\", cases \"y z \\<noteq> {}\", auto)"], ["proof (state)\nthis:\n  x z = y z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}})\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "have \"?gr ` smaps_over A B \\<subseteq> Pow( A \\<times> Pow  B )\" (is \"?graph \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B\n    \\<subseteq> Pow (A \\<times> Pow B)", "unfolding smaps_over_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) `\n    {m. sdom m \\<subseteq> A \\<and> sran m \\<subseteq> B}\n    \\<subseteq> Pow (A \\<times> Pow B)", "by (auto dest!:subsetD[of _ A] subsetD[of _ \"Pow B\"] sdom_not_mem intro:sranI)"], ["proof (state)\nthis:\n  (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B\n  \\<subseteq> Pow (A \\<times> Pow B)\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B\n  \\<subseteq> Pow (A \\<times> Pow B)\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "have \"finite (Pow( A \\<times> Pow B ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Pow (A \\<times> Pow B))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. finite (Pow (A \\<times> Pow B))", "by auto"], ["proof (state)\nthis:\n  finite (Pow (A \\<times> Pow B))\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B\n  \\<subseteq> Pow (A \\<times> Pow B)\n  finite (Pow (A \\<times> Pow B))", "have \"finite ?graph\""], ["proof (prove)\nusing this:\n  (\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B\n  \\<subseteq> Pow (A \\<times> Pow B)\n  finite (Pow (A \\<times> Pow B))\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B)\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>f. {(x, y). y = f x \\<and> y \\<noteq> {}}) ` smaps_over A B)\n\ngoal (1 subgoal):\n 1. finite (smaps_over A B)", "by (rule finite_imageD[OF _ subset_inj_on[OF inj_smap_graph subset_UNIV]])"], ["proof (state)\nthis:\n  finite (smaps_over A B)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}