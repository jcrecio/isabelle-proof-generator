{"file_name": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA/Utils.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shivers-CFA", "problem_names": ["lemma single_valued_empty[simp]:\"single_valued {}\"", "lemma single_valued_insert:\n  assumes \"single_valued rel\"\n      and \"\\<And> x y . \\<lbrakk>(x,y) \\<in> rel; x=a\\<rbrakk> \\<Longrightarrow> y = b\"\n  shows \"single_valued (insert (a,b) rel)\"", "lemma ran_upd: \"ran (m (k \\<mapsto> v)) \\<subseteq> ran m \\<union> {v}\"", "lemma ran_map_of: \"ran (map_of xs) \\<subseteq> snd ` set xs\"", "lemma ran_concat: \"ran (m1 ++ m2) \\<subseteq> ran m1 \\<union> ran m2\"", "lemma ran_upds:\n  assumes eq_length: \"length ks = length vs\"\n  shows \"ran (map_upds m ks vs) \\<subseteq> ran m \\<union> set vs\"", "lemma ran_upd_mem[simp]: \"v \\<in> ran (m (k \\<mapsto> v))\"", "lemma map_fst_zip: \"length xs = length ys \\<Longrightarrow> map fst (zip xs ys) = xs\"", "lemma map_snd_zip: \"length xs = length ys \\<Longrightarrow> map snd (zip xs ys) = ys\""], "translations": [["", "lemma single_valued_empty[simp]:\"single_valued {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued {}", "by (rule single_valuedI) auto"], ["", "lemma single_valued_insert:\n  assumes \"single_valued rel\"\n      and \"\\<And> x y . \\<lbrakk>(x,y) \\<in> rel; x=a\\<rbrakk> \\<Longrightarrow> y = b\"\n  shows \"single_valued (insert (a,b) rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (insert (a, b) rel)", "using assms"], ["proof (prove)\nusing this:\n  single_valued rel\n  \\<lbrakk>(?x, ?y) \\<in> rel; ?x = a\\<rbrakk> \\<Longrightarrow> ?y = b\n\ngoal (1 subgoal):\n 1. single_valued (insert (a, b) rel)", "by (auto intro:single_valuedI dest:single_valuedD)"], ["", "text \\<open>\nLemmas about \\<open>ran\\<close>, the range of a finite map.\n\\<close>"], ["", "lemma ran_upd: \"ran (m (k \\<mapsto> v)) \\<subseteq> ran m \\<union> {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m(k \\<mapsto> v)) \\<subseteq> ran m \\<union> {v}", "unfolding ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. \\<exists>a. (m(k \\<mapsto> v)) a = Some b}\n    \\<subseteq> {b. \\<exists>a. m a = Some b} \\<union> {v}", "by auto"], ["", "lemma ran_map_of: \"ran (map_of xs) \\<subseteq> snd ` set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (map_of xs) \\<subseteq> snd ` set xs", "by (induct xs)(auto simp del:fun_upd_apply dest: ran_upd[THEN subsetD])"], ["", "lemma ran_concat: \"ran (m1 ++ m2) \\<subseteq> ran m1 \\<union> ran m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m1 ++ m2) \\<subseteq> ran m1 \\<union> ran m2", "unfolding ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. \\<exists>a. (m1 ++ m2) a = Some b}\n    \\<subseteq> {b. \\<exists>a. m1 a = Some b} \\<union>\n                {b. \\<exists>a. m2 a = Some b}", "by auto"], ["", "lemma ran_upds:\n  assumes eq_length: \"length ks = length vs\"\n  shows \"ran (map_upds m ks vs) \\<subseteq> ran m \\<union> set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "have \"ran (map_upds m ks vs) \\<subseteq> ran (m++map_of (rev (zip ks vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs))\n    \\<subseteq> ran (m ++ map_of (rev (zip ks vs)))", "unfolding map_upds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m ++ map_of (rev (zip ks vs)))\n    \\<subseteq> ran (m ++ map_of (rev (zip ks vs)))", "by simp"], ["proof (state)\nthis:\n  ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran (m ++ map_of (rev (zip ks vs)))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "also"], ["proof (state)\nthis:\n  ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran (m ++ map_of (rev (zip ks vs)))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "have \"\\<dots> \\<subseteq> ran m \\<union> ran (map_of (rev (zip ks vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (m ++ map_of (rev (zip ks vs)))\n    \\<subseteq> ran m \\<union> ran (map_of (rev (zip ks vs)))", "by (rule ran_concat)"], ["proof (state)\nthis:\n  ran (m ++ map_of (rev (zip ks vs)))\n  \\<subseteq> ran m \\<union> ran (map_of (rev (zip ks vs)))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "also"], ["proof (state)\nthis:\n  ran (m ++ map_of (rev (zip ks vs)))\n  \\<subseteq> ran m \\<union> ran (map_of (rev (zip ks vs)))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "have \"\\<dots> \\<subseteq> ran m \\<union> snd ` set (rev (zip ks vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran m \\<union> ran (map_of (rev (zip ks vs)))\n    \\<subseteq> ran m \\<union> snd ` set (rev (zip ks vs))", "by (intro Un_mono[of \"ran m\" \"ran m\"] subset_refl ran_map_of)"], ["proof (state)\nthis:\n  ran m \\<union> ran (map_of (rev (zip ks vs)))\n  \\<subseteq> ran m \\<union> snd ` set (rev (zip ks vs))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "also"], ["proof (state)\nthis:\n  ran m \\<union> ran (map_of (rev (zip ks vs)))\n  \\<subseteq> ran m \\<union> snd ` set (rev (zip ks vs))\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "have \"\\<dots>\\<subseteq> ran m \\<union> set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran m \\<union> snd ` set (rev (zip ks vs))\n    \\<subseteq> ran m \\<union> set vs", "by (auto intro:Un_mono[of \"ran m\" \"ran m\"] subset_refl simp del:set_map simp add:set_map[THEN sym] map_snd_zip[OF eq_length])"], ["proof (state)\nthis:\n  ran m \\<union> snd ` set (rev (zip ks vs))\n  \\<subseteq> ran m \\<union> set vs\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "finally"], ["proof (chain)\npicking this:\n  ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "show ?thesis"], ["proof (prove)\nusing this:\n  ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs\n\ngoal (1 subgoal):\n 1. ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs", "."], ["proof (state)\nthis:\n  ran (m(ks [\\<mapsto>] vs)) \\<subseteq> ran m \\<union> set vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ran_upd_mem[simp]: \"v \\<in> ran (m (k \\<mapsto> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> ran (m(k \\<mapsto> v))", "unfolding ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {b. \\<exists>a. (m(k \\<mapsto> v)) a = Some b}", "by auto"], ["", "text \\<open>\nLemmas about \\<open>map\\<close>, \\<open>zip\\<close> and \\<open>fst\\<close>/\\<open>snd\\<close>\n\\<close>"], ["", "lemma map_fst_zip: \"length xs = length ys \\<Longrightarrow> map fst (zip xs ys) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow> map fst (zip xs ys) = xs", "apply (induct xs ys rule:list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map fst (zip [] []) = []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys; map fst (zip xs ys) = xs\\<rbrakk>\n       \\<Longrightarrow> map fst (zip (x # xs) (y # ys)) = x # xs", "by auto"], ["", "lemma map_snd_zip: \"length xs = length ys \\<Longrightarrow> map snd (zip xs ys) = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow> map snd (zip xs ys) = ys", "apply (induct xs ys rule:list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map snd (zip [] []) = []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys; map snd (zip xs ys) = ys\\<rbrakk>\n       \\<Longrightarrow> map snd (zip (x # xs) (y # ys)) = y # ys", "by auto"], ["", "end"]]}