{"file_name": "/home/qj213/afp-2021-10-22/thys/Gromov_Hyperbolicity/Eexp_Eln.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gromov_Hyperbolicity", "problem_names": ["lemma ennexp_0 [simp]:\n  \"ennexp 0 = 1\"", "lemma eln_simps [simp]:\n  \"eln 0 = -\\<infinity>\"\n  \"eln 1 = 0\"\n  \"eln top = \\<infinity>\"", "lemma eln_real_pos:\n  assumes \"r > 0\"\n  shows \"eln (ennreal r) = ereal (ln r)\"", "lemma eln_ennexp [simp]:\n  \"eln (ennexp x) = x\"", "lemma ennexp_eln [simp]:\n  \"ennexp (eln x) = x\"", "lemma ennexp_strict_mono:\n  \"strict_mono ennexp\"", "lemma ennexp_mono:\n  \"mono ennexp\"", "lemma ennexp_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"ennexp x < ennexp y\"", "lemma ennexp_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"ennexp x \\<le> ennexp y\"", "lemma ennexp_le1 [simp]:\n  \"ennexp x \\<le> 1 \\<longleftrightarrow> x \\<le> 0\"", "lemma ennexp_ge1 [simp]:\n  \"ennexp x \\<ge> 1 \\<longleftrightarrow> x \\<ge> 0\"", "lemma eln_strict_mono:\n  \"strict_mono eln\"", "lemma eln_mono:\n  \"mono eln\"", "lemma eln_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"eln x < eln y\"", "lemma eln_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"eln x \\<le> eln y\"", "lemma eln_le0 [simp]:\n  \"eln x \\<le> 0 \\<longleftrightarrow> x \\<le> 1\"", "lemma eln_ge0 [simp]:\n  \"eln x \\<ge> 0 \\<longleftrightarrow> x \\<ge> 1\"", "lemma bij_ennexp:\n  \"bij ennexp\"", "lemma bij_eln:\n  \"bij eln\"", "lemma ennexp_continuous:\n  \"continuous_on UNIV ennexp\"", "lemma ennexp_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. ennexp(u n)) \\<longlongrightarrow> ennexp l) F\"", "lemma eln_continuous:\n  \"continuous_on UNIV eln\"", "lemma eln_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. eln(u n)) \\<longlongrightarrow> eln l) F\"", "lemma ennexp_special_values [simp]:\n  \"ennexp x = 0 \\<longleftrightarrow> x = -\\<infinity>\"\n  \"ennexp x = 1 \\<longleftrightarrow> x = 0\"\n  \"ennexp x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\"\n  \"ennexp x = top \\<longleftrightarrow> x = \\<infinity>\"", "lemma eln_special_values [simp]:\n  \"eln x = -\\<infinity> \\<longleftrightarrow> x = 0\"\n  \"eln x = 0 \\<longleftrightarrow> x = 1\"\n  \"eln x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\"", "lemma ennexp_add_mult:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = -\\<infinity>) \\<or> (a = -\\<infinity> \\<and> b = \\<infinity>))\"\n  shows \"ennexp(a+b) = ennexp a * ennexp b\"", "lemma eln_mult_add:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = 0) \\<or> (a = 0 \\<and> b = \\<infinity>))\"\n  shows \"eln(a * b) = eln a + eln b\"", "lemma ennsqrt_square [simp]:\n  \"(ennsqrt x) * (ennsqrt x) = x\"", "lemma ennsqrt_simps [simp]:\n  \"ennsqrt 0 = 0\"\n  \"ennsqrt 1 = 1\"\n  \"ennsqrt \\<infinity> = \\<infinity>\"\n  \"ennsqrt top = top\"", "lemma ennsqrt_mult:\n  \"ennsqrt(a * b) = ennsqrt a * ennsqrt b\"", "lemma ennsqrt_square2 [simp]:\n  \"ennsqrt (x * x) = x\"", "lemma ennsqrt_eq_iff_square:\n  \"ennsqrt x = y \\<longleftrightarrow> x = y * y\"", "lemma ennsqrt_bij:\n  \"bij ennsqrt\"", "lemma ennsqrt_strict_mono:\n  \"strict_mono ennsqrt\"", "lemma ennsqrt_mono:\n  \"mono ennsqrt\"", "lemma ennsqrt_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"ennsqrt x \\<le> ennsqrt y\"", "lemma ennsqrt_continuous:\n  \"continuous_on UNIV ennsqrt\"", "lemma ennsqrt_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. ennsqrt(u n)) \\<longlongrightarrow> ennsqrt l) F\"", "lemma ennsqrt_ennreal_ennreal_sqrt [simp]:\n  assumes \"t \\<ge> (0::real)\"\n  shows \"ennsqrt (ennreal t) = ennreal (sqrt t)\"", "lemma ennreal_sqrt2:\n  \"ennreal (sqrt 2) = ennsqrt 2\"", "lemma ennsqrt_4 [simp]:\n  \"ennsqrt 4 = 2\"", "lemma ennsqrt_le [simp]:\n  \"ennsqrt x \\<le> ennsqrt y \\<longleftrightarrow> x \\<le> y\"", "lemma esqrt_square [simp]:\n  assumes \"x \\<ge> 0\"\n  shows \"(esqrt x) * (esqrt x) = x\"", "lemma esqrt_of_neg [simp]:\n  assumes \"x \\<le> 0\"\n  shows \"esqrt x = 0\"", "lemma esqrt_nonneg [simp]:\n  \"esqrt x \\<ge> 0\"", "lemma esqrt_eq_iff_square [simp]:\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"esqrt x = y \\<longleftrightarrow> x = y * y\"", "lemma esqrt_simps [simp]:\n  \"esqrt 0 = 0\"\n  \"esqrt 1 = 1\"\n  \"esqrt \\<infinity> = \\<infinity>\"\n  \"esqrt top = top\"\n  \"esqrt (-\\<infinity>) = 0\"", "lemma esqrt_mult:\n  assumes \"a \\<ge> 0\"\n  shows \"esqrt(a * b) = esqrt a * esqrt b\"", "lemma esqrt_square2 [simp]:\n  \"esqrt(x * x) = abs(x)\"", "lemma esqrt_mono:\n  \"mono esqrt\"", "lemma esqrt_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"esqrt x \\<le> esqrt y\"", "lemma esqrt_continuous:\n  \"continuous_on UNIV esqrt\"", "lemma esqrt_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. esqrt(u n)) \\<longlongrightarrow> esqrt l) F\"", "lemma esqrt_ereal_ereal_sqrt [simp]:\n  assumes \"t \\<ge> (0::real)\"\n  shows \"esqrt (ereal t) = ereal (sqrt t)\"", "lemma ereal_sqrt2:\n  \"ereal (sqrt 2) = esqrt 2\"", "lemma esqrt_4 [simp]:\n  \"esqrt 4 = 2\"", "lemma esqrt_le [simp]:\n  \"esqrt x \\<le> esqrt y \\<longleftrightarrow> (x \\<le> 0 \\<or> x \\<le> y)\"", "lemma eexp_special_values [simp]:\n  \"eexp 0 = 1\"\n  \"eexp (\\<infinity>) = \\<infinity>\"\n  \"eexp(-\\<infinity>) = 0\"", "lemma eexp_strict_mono:\n  \"strict_mono eexp\"", "lemma eexp_mono:\n  \"mono eexp\"", "lemma eexp_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"eexp x < eexp y\"", "lemma eexp_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"eexp x \\<le> eexp y\"", "lemma eexp_le_eexp_iff_le:\n  \"eexp x \\<le> eexp y \\<longleftrightarrow> x \\<le> y\"", "lemma eexp_lt_eexp_iff_lt:\n  \"eexp x < eexp y \\<longleftrightarrow> x < y\"", "lemma eexp_special_values_iff [simp]:\n  \"eexp x = 0 \\<longleftrightarrow> x = -\\<infinity>\"\n  \"eexp x = 1 \\<longleftrightarrow> x = 0\"\n  \"eexp x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\"\n  \"eexp x = top \\<longleftrightarrow> x = \\<infinity>\"", "lemma eexp_ineq_iff [simp]:\n  \"eexp x \\<le> 1 \\<longleftrightarrow> x \\<le> 0\"\n  \"eexp x \\<ge> 1 \\<longleftrightarrow> x \\<ge> 0\"\n  \"eexp x > 1 \\<longleftrightarrow> x > 0\"\n  \"eexp x < 1 \\<longleftrightarrow> x < 0\"\n  \"eexp x \\<ge> 0\"\n  \"eexp x > 0 \\<longleftrightarrow> x \\<noteq> - \\<infinity>\"\n  \"eexp x < \\<infinity> \\<longleftrightarrow> x \\<noteq> \\<infinity>\"", "lemma eexp_ineq [mono_intros]:\n  \"x \\<le> 0 \\<Longrightarrow> eexp x \\<le> 1\"\n  \"x < 0 \\<Longrightarrow> eexp x < 1\"\n  \"x \\<ge> 0 \\<Longrightarrow> eexp x \\<ge> 1\"\n  \"x > 0 \\<Longrightarrow> eexp x > 1\"\n  \"eexp x \\<ge> 0\"\n  \"x > -\\<infinity> \\<Longrightarrow> eexp x > 0\"\n  \"x < \\<infinity> \\<Longrightarrow> eexp x < \\<infinity>\"", "lemma eexp_continuous:\n  \"continuous_on UNIV eexp\"", "lemma eexp_tendsto' [simp]:\n  \"((\\<lambda>n. eexp(u n)) \\<longlongrightarrow> eexp l) F \\<longleftrightarrow> ((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"", "lemma eexp_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. eexp(u n)) \\<longlongrightarrow> eexp l) F\"", "lemma eexp_add_mult:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = -\\<infinity>) \\<or> (a = -\\<infinity> \\<and> b = \\<infinity>))\"\n  shows \"eexp(a+b) = eexp a * eexp b\"", "lemma eexp_ereal [simp]:\n  \"eexp(ereal x) = ereal(exp x)\""], "translations": [["", "lemma ennexp_0 [simp]:\n  \"ennexp 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp 0 = 1", "by (auto simp add: zero_ereal_def one_ennreal_def)"], ["", "function eln::\"ennreal \\<Rightarrow> ereal\" where\n\"eln (ennreal r) = (if r \\<le> 0 then -\\<infinity> else ereal (ln r))\"\n| \"eln (\\<infinity>) = \\<infinity>\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>r. x = ennreal r \\<Longrightarrow> P;\n        x = \\<infinity> \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>r ra.\n       ennreal r = ennreal ra \\<Longrightarrow>\n       (if r \\<le> 0 then - \\<infinity> else ereal (ln r)) =\n       (if ra \\<le> 0 then - \\<infinity> else ereal (ln ra))\n 3. \\<And>r.\n       ennreal r = \\<infinity> \\<Longrightarrow>\n       (if r \\<le> 0 then - \\<infinity> else ereal (ln r)) = \\<infinity>\n 4. \\<infinity> = \\<infinity> \\<Longrightarrow> \\<infinity> = \\<infinity>", "by (auto intro: ennreal_cases, metis ennreal_eq_0_iff, simp add: ennreal_neg)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All eln_dom", "by standard (rule wf_empty)"], ["", "lemma eln_simps [simp]:\n  \"eln 0 = -\\<infinity>\"\n  \"eln 1 = 0\"\n  \"eln top = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln 0 = - \\<infinity> &&& eln 1 = 0 &&& eln top = \\<infinity>", "apply (simp only: eln.simps ennreal_0[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. eln 1 = 0\n 2. eln top = \\<infinity>", "apply (simp only: eln.simps ennreal_1[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. eln top = \\<infinity>", "using eln.simps(2)"], ["proof (prove)\nusing this:\n  eln \\<infinity> = \\<infinity>\n\ngoal (1 subgoal):\n 1. eln top = \\<infinity>", "by auto"], ["", "lemma eln_real_pos:\n  assumes \"r > 0\"\n  shows \"eln (ennreal r) = ereal (ln r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln (ennreal r) = ereal (ln r)", "using eln.simps assms"], ["proof (prove)\nusing this:\n  eln (ennreal ?r) = (if ?r \\<le> 0 then - \\<infinity> else ereal (ln ?r))\n  eln \\<infinity> = \\<infinity>\n  0 < r\n\ngoal (1 subgoal):\n 1. eln (ennreal r) = ereal (ln r)", "by auto"], ["", "lemma eln_ennexp [simp]:\n  \"eln (ennexp x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln (ennexp x) = x", "apply (cases x)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r. x = ereal r \\<Longrightarrow> eln (ennexp x) = x\n 2. x = \\<infinity> \\<Longrightarrow> eln (ennexp x) = x\n 3. x = - \\<infinity> \\<Longrightarrow> eln (ennexp x) = x", "using eln.simps"], ["proof (prove)\nusing this:\n  eln (ennreal ?r) = (if ?r \\<le> 0 then - \\<infinity> else ereal (ln ?r))\n  eln \\<infinity> = \\<infinity>\n\ngoal (3 subgoals):\n 1. \\<And>r. x = ereal r \\<Longrightarrow> eln (ennexp x) = x\n 2. x = \\<infinity> \\<Longrightarrow> eln (ennexp x) = x\n 3. x = - \\<infinity> \\<Longrightarrow> eln (ennexp x) = x", "by auto"], ["", "lemma ennexp_eln [simp]:\n  \"ennexp (eln x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp (eln x) = x", "apply (cases x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 \\<le> r; x = ennreal r\\<rbrakk>\n       \\<Longrightarrow> ennexp (eln x) = x\n 2. x = top \\<Longrightarrow> ennexp (eln x) = x", "using eln.simps"], ["proof (prove)\nusing this:\n  eln (ennreal ?r) = (if ?r \\<le> 0 then - \\<infinity> else ereal (ln ?r))\n  eln \\<infinity> = \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 \\<le> r; x = ennreal r\\<rbrakk>\n       \\<Longrightarrow> ennexp (eln x) = x\n 2. x = top \\<Longrightarrow> ennexp (eln x) = x", "by auto"], ["", "lemma ennexp_strict_mono:\n  \"strict_mono ennexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono ennexp", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_mono ennexp", "have \"ennexp x < ennexp y\" if \"x < y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp x < ennexp y", "apply (cases x, cases y)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>x = ereal r; y = ereal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 2. \\<And>r.\n       \\<lbrakk>x = ereal r; y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 3. \\<And>r.\n       \\<lbrakk>x = ereal r; y = - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 4. x = \\<infinity> \\<Longrightarrow> ennexp x < ennexp y\n 5. x = - \\<infinity> \\<Longrightarrow> ennexp x < ennexp y", "using that"], ["proof (prove)\nusing this:\n  x < y\n\ngoal (5 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>x = ereal r; y = ereal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 2. \\<And>r.\n       \\<lbrakk>x = ereal r; y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 3. \\<And>r.\n       \\<lbrakk>x = ereal r; y = - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp x < ennexp y\n 4. x = \\<infinity> \\<Longrightarrow> ennexp x < ennexp y\n 5. x = - \\<infinity> \\<Longrightarrow> ennexp x < ennexp y", "apply (auto simp add: ennreal_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = - \\<infinity>; y \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 < ennexp y", "by (cases y, auto)"], ["proof (state)\nthis:\n  ?x < ?y \\<Longrightarrow> ennexp ?x < ennexp ?y\n\ngoal (1 subgoal):\n 1. strict_mono ennexp", "then"], ["proof (chain)\npicking this:\n  ?x < ?y \\<Longrightarrow> ennexp ?x < ennexp ?y", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> ennexp ?x < ennexp ?y\n\ngoal (1 subgoal):\n 1. strict_mono ennexp", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> ennexp ?x < ennexp ?y\n\ngoal (1 subgoal):\n 1. \\<forall>x y. x < y \\<longrightarrow> ennexp x < ennexp y", "by auto"], ["proof (state)\nthis:\n  strict_mono ennexp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ennexp_mono:\n  \"mono ennexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ennexp", "using ennexp_strict_mono"], ["proof (prove)\nusing this:\n  strict_mono ennexp\n\ngoal (1 subgoal):\n 1. mono ennexp", "by (simp add: strict_mono_mono)"], ["", "lemma ennexp_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"ennexp x < ennexp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp x < ennexp y", "using ennexp_strict_mono assms"], ["proof (prove)\nusing this:\n  strict_mono ennexp\n  x < y\n\ngoal (1 subgoal):\n 1. ennexp x < ennexp y", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x < y \\<longrightarrow> ennexp x < ennexp y\n  x < y\n\ngoal (1 subgoal):\n 1. ennexp x < ennexp y", "by auto"], ["", "lemma ennexp_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"ennexp x \\<le> ennexp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp x \\<le> ennexp y", "using ennexp_mono assms"], ["proof (prove)\nusing this:\n  mono ennexp\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. ennexp x \\<le> ennexp y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> ennexp x \\<le> ennexp y\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. ennexp x \\<le> ennexp y", "by auto"], ["", "lemma ennexp_le1 [simp]:\n  \"ennexp x \\<le> 1 \\<longleftrightarrow> x \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ennexp x \\<le> 1) = (x \\<le> 0)", "by (metis ennexp_0 ennexp_mono2 ennexp_strict_mono eq_iff le_cases strict_mono_eq)"], ["", "lemma ennexp_ge1 [simp]:\n  \"ennexp x \\<ge> 1 \\<longleftrightarrow> x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 \\<le> ennexp x) = (0 \\<le> x)", "by (metis ennexp_0 ennexp_mono2 ennexp_strict_mono eq_iff le_cases strict_mono_eq)"], ["", "lemma eln_strict_mono:\n  \"strict_mono eln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono eln", "by (metis ennexp_eln strict_monoI ennexp_strict_mono strict_mono_less)"], ["", "lemma eln_mono:\n  \"mono eln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono eln", "using eln_strict_mono"], ["proof (prove)\nusing this:\n  strict_mono eln\n\ngoal (1 subgoal):\n 1. mono eln", "by (simp add: strict_mono_mono)"], ["", "lemma eln_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"eln x < eln y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln x < eln y", "using eln_strict_mono assms"], ["proof (prove)\nusing this:\n  strict_mono eln\n  x < y\n\ngoal (1 subgoal):\n 1. eln x < eln y", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x < y \\<longrightarrow> eln x < eln y\n  x < y\n\ngoal (1 subgoal):\n 1. eln x < eln y", "by auto"], ["", "lemma eln_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"eln x \\<le> eln y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln x \\<le> eln y", "using eln_mono assms"], ["proof (prove)\nusing this:\n  mono eln\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. eln x \\<le> eln y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> eln x \\<le> eln y\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. eln x \\<le> eln y", "by auto"], ["", "lemma eln_le0 [simp]:\n  \"eln x \\<le> 0 \\<longleftrightarrow> x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eln x \\<le> 0) = (x \\<le> 1)", "by (metis ennexp_eln ennexp_le1)"], ["", "lemma eln_ge0 [simp]:\n  \"eln x \\<ge> 0 \\<longleftrightarrow> x \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> eln x) = (1 \\<le> x)", "by (metis ennexp_eln ennexp_ge1)"], ["", "lemma bij_ennexp:\n  \"bij ennexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij ennexp", "by (auto intro!: bij_betw_byWitness[of _ eln])"], ["", "lemma bij_eln:\n  \"bij eln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij eln", "by (auto intro!: bij_betw_byWitness[of _ ennexp])"], ["", "lemma ennexp_continuous:\n  \"continuous_on UNIV ennexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV ennexp", "apply (rule continuous_onI_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. open (range ennexp)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennexp x \\<le> ennexp y", "using ennexp_mono"], ["proof (prove)\nusing this:\n  mono ennexp\n\ngoal (2 subgoals):\n 1. open (range ennexp)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennexp x \\<le> ennexp y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> ennexp x \\<le> ennexp y\n\ngoal (2 subgoals):\n 1. open (range ennexp)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennexp x \\<le> ennexp y", "by (auto simp add: bij_ennexp bij_is_surj)"], ["", "lemma ennexp_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. ennexp(u n)) \\<longlongrightarrow> ennexp l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. ennexp (u n)) \\<longlongrightarrow> ennexp l) F", "using ennexp_continuous assms"], ["proof (prove)\nusing this:\n  continuous_on UNIV ennexp\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. ennexp (u n)) \\<longlongrightarrow> ennexp l) F", "by (metis UNIV_I continuous_on tendsto_compose)"], ["", "lemma eln_continuous:\n  \"continuous_on UNIV eln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV eln", "apply (rule continuous_onI_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. open (range eln)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> eln x \\<le> eln y", "using eln_mono"], ["proof (prove)\nusing this:\n  mono eln\n\ngoal (2 subgoals):\n 1. open (range eln)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> eln x \\<le> eln y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> eln x \\<le> eln y\n\ngoal (2 subgoals):\n 1. open (range eln)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> eln x \\<le> eln y", "by (auto simp add: bij_eln bij_is_surj)"], ["", "lemma eln_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. eln(u n)) \\<longlongrightarrow> eln l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eln (u n)) \\<longlongrightarrow> eln l) F", "using eln_continuous assms"], ["proof (prove)\nusing this:\n  continuous_on UNIV eln\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eln (u n)) \\<longlongrightarrow> eln l) F", "by (metis UNIV_I continuous_on tendsto_compose)"], ["", "lemma ennexp_special_values [simp]:\n  \"ennexp x = 0 \\<longleftrightarrow> x = -\\<infinity>\"\n  \"ennexp x = 1 \\<longleftrightarrow> x = 0\"\n  \"ennexp x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\"\n  \"ennexp x = top \\<longleftrightarrow> x = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ennexp x = 0) = (x = - \\<infinity>) &&& (ennexp x = 1) = (x = 0)) &&&\n    (ennexp x = \\<infinity>) = (x = \\<infinity>) &&&\n    (ennexp x = top) = (x = \\<infinity>)", "by auto (metis eln_ennexp eln_simps)+"], ["", "lemma eln_special_values [simp]:\n  \"eln x = -\\<infinity> \\<longleftrightarrow> x = 0\"\n  \"eln x = 0 \\<longleftrightarrow> x = 1\"\n  \"eln x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eln x = - \\<infinity>) = (x = 0) &&&\n    (eln x = 0) = (x = 1) &&& (eln x = \\<infinity>) = (x = \\<infinity>)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. eln x = - \\<infinity> \\<Longrightarrow> x = 0\n 2. eln x = 0 \\<Longrightarrow> x = 1\n 3. eln x = \\<infinity> \\<Longrightarrow> x = top", "apply (metis ennexp.simps ennexp_eln ennexp_0)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. eln x = \\<infinity> \\<Longrightarrow> x = top", "by (metis ennexp.simps(2) ennexp_eln infinity_ennreal_def)"], ["", "lemma ennexp_add_mult:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = -\\<infinity>) \\<or> (a = -\\<infinity> \\<and> b = \\<infinity>))\"\n  shows \"ennexp(a+b) = ennexp a * ennexp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennexp (a + b) = ennexp a * ennexp b", "apply (cases a, cases b)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>a = ereal r; b = ereal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 2. \\<And>r.\n       \\<lbrakk>a = ereal r; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 3. \\<And>r.\n       \\<lbrakk>a = ereal r; b = - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 4. a = \\<infinity> \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 5. a = - \\<infinity> \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b", "using assms"], ["proof (prove)\nusing this:\n  \\<not> (a = \\<infinity> \\<and> b = - \\<infinity> \\<or>\n          a = - \\<infinity> \\<and> b = \\<infinity>)\n\ngoal (5 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>a = ereal r; b = ereal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 2. \\<And>r.\n       \\<lbrakk>a = ereal r; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 3. \\<And>r.\n       \\<lbrakk>a = ereal r; b = - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 4. a = \\<infinity> \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b\n 5. a = - \\<infinity> \\<Longrightarrow> ennexp (a + b) = ennexp a * ennexp b", "by (auto simp add: ennreal_mult'' exp_add ennreal_top_eq_mult_iff)"], ["", "lemma eln_mult_add:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = 0) \\<or> (a = 0 \\<and> b = \\<infinity>))\"\n  shows \"eln(a * b) = eln a + eln b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eln (a * b) = eln a + eln b", "by (smt assms ennexp.simps(2) ennexp.simps(3) ennexp_add_mult ennexp_eln eln_ennexp)"], ["", "text \\<open>We can also define the square root on ennreal using the above exponential.\\<close>"], ["", "definition ennsqrt::\"ennreal \\<Rightarrow> ennreal\"\n  where \"ennsqrt x = ennexp(eln x/2)\""], ["", "lemma ennsqrt_square [simp]:\n  \"(ennsqrt x) * (ennsqrt x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x = x", "have \"y/2 + y/2 = y\" for y::ereal"], ["proof (prove)\ngoal (1 subgoal):\n 1. y / 2 + y / 2 = y", "by (cases y, auto)"], ["proof (state)\nthis:\n  ?y / 2 + ?y / 2 = ?y\n\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x = x", "then"], ["proof (chain)\npicking this:\n  ?y / 2 + ?y / 2 = ?y", "show ?thesis"], ["proof (prove)\nusing this:\n  ?y / 2 + ?y / 2 = ?y\n\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x = x", "unfolding ennsqrt_def"], ["proof (prove)\nusing this:\n  ?y / 2 + ?y / 2 = ?y\n\ngoal (1 subgoal):\n 1. ennexp (eln x / 2) * ennexp (eln x / 2) = x", "by (subst ennexp_add_mult[symmetric], auto)"], ["proof (state)\nthis:\n  ennsqrt x * ennsqrt x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ennsqrt_simps [simp]:\n  \"ennsqrt 0 = 0\"\n  \"ennsqrt 1 = 1\"\n  \"ennsqrt \\<infinity> = \\<infinity>\"\n  \"ennsqrt top = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ennsqrt 0 = 0 &&& ennsqrt 1 = 1) &&&\n    ennsqrt \\<infinity> = \\<infinity> &&& ennsqrt top = top", "unfolding ennsqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ennexp (eln 0 / 2) = 0 &&& ennexp (eln 1 / 2) = 1) &&&\n    ennexp (eln \\<infinity> / 2) = \\<infinity> &&&\n    ennexp (eln top / 2) = top", "by auto"], ["", "lemma ennsqrt_mult:\n  \"ennsqrt(a * b) = ennsqrt a * ennsqrt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt (a * b) = ennsqrt a * ennsqrt b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ennsqrt (a * b) = ennsqrt a * ennsqrt b", "have [simp]: \"z/ereal 2 = -\\<infinity> \\<longleftrightarrow> z = -\\<infinity>\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. (z / ereal 2 = - \\<infinity>) = (z = - \\<infinity>)", "by (auto simp add: ereal_divide_eq)"], ["proof (state)\nthis:\n  (?z / ereal 2 = - \\<infinity>) = (?z = - \\<infinity>)\n\ngoal (1 subgoal):\n 1. ennsqrt (a * b) = ennsqrt a * ennsqrt b", "consider \"a = 0\" | \"b = 0\" | \"a > 0 \\<and> b > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = 0 \\<Longrightarrow> thesis; b = 0 \\<Longrightarrow> thesis;\n     0 < a \\<and> 0 < b \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using zero_less_iff_neq_zero"], ["proof (prove)\nusing this:\n  ((0::?'a) < ?n) = (?n \\<noteq> (0::?'a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = 0 \\<Longrightarrow> thesis; b = 0 \\<Longrightarrow> thesis;\n     0 < a \\<and> 0 < b \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis; b = 0 \\<Longrightarrow> ?thesis;\n   0 < a \\<and> 0 < b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. ennsqrt (a * b) = ennsqrt a * ennsqrt b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis; b = 0 \\<Longrightarrow> ?thesis;\n   0 < a \\<and> 0 < b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis; b = 0 \\<Longrightarrow> ?thesis;\n   0 < a \\<and> 0 < b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. ennsqrt (a * b) = ennsqrt a * ennsqrt b", "apply (cases, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b\\<rbrakk>\n    \\<Longrightarrow> ennsqrt (a * b) = ennsqrt a * ennsqrt b", "apply (cases a, cases b, auto simp add: ennreal_mult_top ennreal_top_mult)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>0 < r; 0 < ra; a = ennreal r; b = ennreal ra\\<rbrakk>\n       \\<Longrightarrow> ennsqrt (ennreal r * ennreal ra) =\n                         ennsqrt (ennreal r) * ennsqrt (ennreal ra)\n 2. \\<And>r.\n       \\<lbrakk>0 < r; a = ennreal r; b = top;\n        ennsqrt (ennreal r) = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>0 < b; a = top; b \\<noteq> 0; ennsqrt b = 0\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding ennsqrt_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>0 < r; 0 < ra; a = ennreal r; b = ennreal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp (eln (ennreal r * ennreal ra) / 2) =\n                         ennexp (eln (ennreal r) / 2) *\n                         ennexp (eln (ennreal ra) / 2)\n 2. \\<And>r.\n       \\<lbrakk>0 < r; a = ennreal r; b = top;\n        ennexp (eln (ennreal r) / 2) = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>0 < b; a = top; b \\<noteq> 0; ennexp (eln b / 2) = 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply (subst ennexp_add_mult[symmetric], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r ra.\n       \\<lbrakk>0 < r; 0 < ra; a = ennreal r; b = ennreal ra\\<rbrakk>\n       \\<Longrightarrow> ennexp (eln (ennreal r * ennreal ra) / ereal 2) =\n                         ennreal (exp (ln r / 2 + ln ra / 2))", "apply (subst eln_mult_add, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ennsqrt (a * b) = ennsqrt a * ennsqrt b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ennsqrt_square2 [simp]:\n  \"ennsqrt (x * x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt (x * x) = x", "unfolding ennsqrt_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x = x", "by auto"], ["", "lemma ennsqrt_eq_iff_square:\n  \"ennsqrt x = y \\<longleftrightarrow> x = y * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ennsqrt x = y) = (x = y * y)", "by auto"], ["", "lemma ennsqrt_bij:\n  \"bij ennsqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij ennsqrt", "by (rule bij_betw_byWitness[of _ \"\\<lambda>x. x * x\"], auto)"], ["", "lemma ennsqrt_strict_mono:\n  \"strict_mono ennsqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono ennsqrt", "unfolding ennsqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono (\\<lambda>x. ennexp (eln x / 2))", "apply (rule strict_mono_compose[OF ennexp_strict_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono (\\<lambda>x. eln x / 2)", "apply (rule strict_mono_compose[OF _ eln_strict_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono (\\<lambda>a. a / 2)", "by (auto simp add: ereal_less_divide_pos ereal_mult_divide strict_mono_def)"], ["", "lemma ennsqrt_mono:\n  \"mono ennsqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ennsqrt", "using ennsqrt_strict_mono"], ["proof (prove)\nusing this:\n  strict_mono ennsqrt\n\ngoal (1 subgoal):\n 1. mono ennsqrt", "by (simp add: strict_mono_mono)"], ["", "lemma ennsqrt_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"ennsqrt x \\<le> ennsqrt y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt x \\<le> ennsqrt y", "using ennsqrt_mono assms"], ["proof (prove)\nusing this:\n  mono ennsqrt\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. ennsqrt x \\<le> ennsqrt y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> ennsqrt x \\<le> ennsqrt y\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. ennsqrt x \\<le> ennsqrt y", "by auto"], ["", "lemma ennsqrt_continuous:\n  \"continuous_on UNIV ennsqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV ennsqrt", "apply (rule continuous_onI_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. open (range ennsqrt)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "using ennsqrt_mono"], ["proof (prove)\nusing this:\n  mono ennsqrt\n\ngoal (2 subgoals):\n 1. open (range ennsqrt)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> ennsqrt x \\<le> ennsqrt y\n\ngoal (2 subgoals):\n 1. open (range ennsqrt)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "by (auto simp add: ennsqrt_bij bij_is_surj)"], ["", "lemma ennsqrt_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. ennsqrt(u n)) \\<longlongrightarrow> ennsqrt l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. ennsqrt (u n)) \\<longlongrightarrow> ennsqrt l) F", "using ennsqrt_continuous assms"], ["proof (prove)\nusing this:\n  continuous_on UNIV ennsqrt\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. ennsqrt (u n)) \\<longlongrightarrow> ennsqrt l) F", "by (metis UNIV_I continuous_on tendsto_compose)"], ["", "lemma ennsqrt_ennreal_ennreal_sqrt [simp]:\n  assumes \"t \\<ge> (0::real)\"\n  shows \"ennsqrt (ennreal t) = ennreal (sqrt t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt (ennreal t) = ennreal (sqrt t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ennsqrt (ennreal t) = ennreal (sqrt t)", "have \"ennreal t = ennreal (sqrt t) * ennreal(sqrt t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal t = ennreal (sqrt t) * ennreal (sqrt t)", "apply (subst ennreal_mult[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> sqrt t\n 2. ennreal t = ennreal (sqrt t * sqrt t)", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> t\n\ngoal (2 subgoals):\n 1. 0 \\<le> sqrt t\n 2. ennreal t = ennreal (sqrt t * sqrt t)", "by auto"], ["proof (state)\nthis:\n  ennreal t = ennreal (sqrt t) * ennreal (sqrt t)\n\ngoal (1 subgoal):\n 1. ennsqrt (ennreal t) = ennreal (sqrt t)", "then"], ["proof (chain)\npicking this:\n  ennreal t = ennreal (sqrt t) * ennreal (sqrt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  ennreal t = ennreal (sqrt t) * ennreal (sqrt t)\n\ngoal (1 subgoal):\n 1. ennsqrt (ennreal t) = ennreal (sqrt t)", "by auto"], ["proof (state)\nthis:\n  ennsqrt (ennreal t) = ennreal (sqrt t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ennreal_sqrt2:\n  \"ennreal (sqrt 2) = ennsqrt 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (sqrt 2) = ennsqrt 2", "using ennsqrt_ennreal_ennreal_sqrt[of 2]"], ["proof (prove)\nusing this:\n  0 \\<le> 2 \\<Longrightarrow> ennsqrt (ennreal 2) = ennreal (sqrt 2)\n\ngoal (1 subgoal):\n 1. ennreal (sqrt 2) = ennsqrt 2", "by auto"], ["", "lemma ennsqrt_4 [simp]:\n  \"ennsqrt 4 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennsqrt 4 = 2", "by (metis ennreal_numeral ennsqrt_ennreal_ennreal_sqrt real_sqrt_four zero_le_numeral)"], ["", "lemma ennsqrt_le [simp]:\n  \"ennsqrt x \\<le> ennsqrt y \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ennsqrt x \\<le> ennsqrt y) = (x \\<le> y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ennsqrt x \\<le> ennsqrt y \\<Longrightarrow> x \\<le> y\n 2. x \\<le> y \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "assume \"ennsqrt x \\<le> ennsqrt y\""], ["proof (state)\nthis:\n  ennsqrt x \\<le> ennsqrt y\n\ngoal (2 subgoals):\n 1. ennsqrt x \\<le> ennsqrt y \\<Longrightarrow> x \\<le> y\n 2. x \\<le> y \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "then"], ["proof (chain)\npicking this:\n  ennsqrt x \\<le> ennsqrt y", "have \"ennsqrt x * ennsqrt x \\<le> ennsqrt y * ennsqrt y\""], ["proof (prove)\nusing this:\n  ennsqrt x \\<le> ennsqrt y\n\ngoal (1 subgoal):\n 1. ennsqrt x * ennsqrt x \\<le> ennsqrt y * ennsqrt y", "by (intro mult_mono, auto)"], ["proof (state)\nthis:\n  ennsqrt x * ennsqrt x \\<le> ennsqrt y * ennsqrt y\n\ngoal (2 subgoals):\n 1. ennsqrt x \\<le> ennsqrt y \\<Longrightarrow> x \\<le> y\n 2. x \\<le> y \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "then"], ["proof (chain)\npicking this:\n  ennsqrt x * ennsqrt x \\<le> ennsqrt y * ennsqrt y", "show \"x \\<le> y\""], ["proof (prove)\nusing this:\n  ennsqrt x * ennsqrt x \\<le> ennsqrt y * ennsqrt y\n\ngoal (1 subgoal):\n 1. x \\<le> y", "by auto"], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ennsqrt x \\<le> ennsqrt y", "qed (auto intro: mono_intros)"], ["", "text \\<open>We can also define the square root on ereal using the square root on ennreal, and $0$\nfor negative numbers.\\<close>"], ["", "definition esqrt::\"ereal \\<Rightarrow> ereal\"\n  where \"esqrt x = enn2ereal(ennsqrt (e2ennreal x))\""], ["", "lemma esqrt_square [simp]:\n  assumes \"x \\<ge> 0\"\n  shows \"(esqrt x) * (esqrt x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt x * esqrt x = x", "unfolding esqrt_def times_ennreal.rep_eq[symmetric] ennsqrt_square[of \"e2ennreal x\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (e2ennreal x) = x", "using assms enn2ereal_e2ennreal"], ["proof (prove)\nusing this:\n  0 \\<le> x\n  0 \\<le> ?x \\<Longrightarrow> enn2ereal (e2ennreal ?x) = ?x\n\ngoal (1 subgoal):\n 1. enn2ereal (e2ennreal x) = x", "by auto"], ["", "lemma esqrt_of_neg [simp]:\n  assumes \"x \\<le> 0\"\n  shows \"esqrt x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt x = 0", "unfolding esqrt_def e2ennreal_neg[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennsqrt 0) = 0", "by (auto simp add: zero_ennreal.rep_eq)"], ["", "lemma esqrt_nonneg [simp]:\n  \"esqrt x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> esqrt x", "unfolding esqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> enn2ereal (ennsqrt (e2ennreal x))", "by auto"], ["", "lemma esqrt_eq_iff_square [simp]:\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"esqrt x = y \\<longleftrightarrow> x = y * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esqrt x = y) = (x = y * y)", "using esqrt_def esqrt_square assms"], ["proof (prove)\nusing this:\n  esqrt ?x = enn2ereal (ennsqrt (e2ennreal ?x))\n  0 \\<le> ?x \\<Longrightarrow> esqrt ?x * esqrt ?x = ?x\n  0 \\<le> x\n  0 \\<le> y\n\ngoal (1 subgoal):\n 1. (esqrt x = y) = (x = y * y)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. esqrt x = enn2ereal (ennsqrt (e2ennreal x));\n     \\<And>x.\n        0 \\<le> x \\<Longrightarrow>\n        enn2ereal (ennsqrt (e2ennreal x)) *\n        enn2ereal (ennsqrt (e2ennreal x)) =\n        x;\n     0 \\<le> y; x = y * y\\<rbrakk>\n    \\<Longrightarrow> enn2ereal (ennsqrt (e2ennreal (y * y))) = y", "by (metis e2ennreal_enn2ereal ennsqrt_square2 eq_onp_same_args ereal_ennreal_cases leD times_ennreal.abs_eq)"], ["", "lemma esqrt_simps [simp]:\n  \"esqrt 0 = 0\"\n  \"esqrt 1 = 1\"\n  \"esqrt \\<infinity> = \\<infinity>\"\n  \"esqrt top = top\"\n  \"esqrt (-\\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esqrt 0 = 0 &&& esqrt 1 = 1) &&&\n    esqrt \\<infinity> = \\<infinity> &&&\n    esqrt top = top &&& esqrt (- \\<infinity>) = 0", "by (auto simp: top_ereal_def)"], ["", "lemma esqrt_mult:\n  assumes \"a \\<ge> 0\"\n  shows \"esqrt(a * b) = esqrt a * esqrt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (a * b) = esqrt a * esqrt b", "proof (cases \"b \\<ge> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b\n 2. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "case True"], ["proof (state)\nthis:\n  0 \\<le> b\n\ngoal (2 subgoals):\n 1. 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b\n 2. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (a * b) = esqrt a * esqrt b", "unfolding esqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennsqrt (e2ennreal (a * b))) =\n    enn2ereal (ennsqrt (e2ennreal a)) * enn2ereal (ennsqrt (e2ennreal b))", "apply (subst times_ennreal.rep_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennsqrt (e2ennreal (a * b))) =\n    enn2ereal (ennsqrt (e2ennreal a) * ennsqrt (e2ennreal b))", "apply (subst ennsqrt_mult[of \"e2ennreal a\" \"e2ennreal b\", symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennsqrt (e2ennreal (a * b))) =\n    enn2ereal (ennsqrt (e2ennreal a * e2ennreal b))", "apply (subst times_ennreal.abs_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. eq_onp ((\\<le>) 0) a a\n 2. eq_onp ((\\<le>) 0) b b\n 3. enn2ereal (ennsqrt (e2ennreal (a * b))) =\n    enn2ereal (ennsqrt (e2ennreal (a * b)))", "using assms True"], ["proof (prove)\nusing this:\n  0 \\<le> a\n  0 \\<le> b\n\ngoal (3 subgoals):\n 1. eq_onp ((\\<le>) 0) a a\n 2. eq_onp ((\\<le>) 0) b b\n 3. enn2ereal (ennsqrt (e2ennreal (a * b))) =\n    enn2ereal (ennsqrt (e2ennreal (a * b)))", "by (auto simp add: eq_onp_same_args)"], ["proof (state)\nthis:\n  esqrt (a * b) = esqrt a * esqrt b\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "case False"], ["proof (state)\nthis:\n  \\<not> 0 \\<le> b\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "then"], ["proof (chain)\npicking this:\n  \\<not> 0 \\<le> b", "have \"a * b \\<le> 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> b\n\ngoal (1 subgoal):\n 1. a * b \\<le> 0", "using assms ereal_mult_le_0_iff"], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> b\n  0 \\<le> a\n  (?a * ?b \\<le> 0) =\n  (0 \\<le> ?a \\<and> ?b \\<le> 0 \\<or> ?a \\<le> 0 \\<and> 0 \\<le> ?b)\n\ngoal (1 subgoal):\n 1. a * b \\<le> 0", "by auto"], ["proof (state)\nthis:\n  a * b \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "then"], ["proof (chain)\npicking this:\n  a * b \\<le> 0", "have \"esqrt(a * b) = 0\""], ["proof (prove)\nusing this:\n  a * b \\<le> 0\n\ngoal (1 subgoal):\n 1. esqrt (a * b) = 0", "by auto"], ["proof (state)\nthis:\n  esqrt (a * b) = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "moreover"], ["proof (state)\nthis:\n  esqrt (a * b) = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "have \"esqrt b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt b = 0", "using False"], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> b\n\ngoal (1 subgoal):\n 1. esqrt b = 0", "by auto"], ["proof (state)\nthis:\n  esqrt b = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> b \\<Longrightarrow> esqrt (a * b) = esqrt a * esqrt b", "ultimately"], ["proof (chain)\npicking this:\n  esqrt (a * b) = 0\n  esqrt b = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  esqrt (a * b) = 0\n  esqrt b = 0\n\ngoal (1 subgoal):\n 1. esqrt (a * b) = esqrt a * esqrt b", "by auto"], ["proof (state)\nthis:\n  esqrt (a * b) = esqrt a * esqrt b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma esqrt_square2 [simp]:\n  \"esqrt(x * x) = abs(x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "have \"esqrt(x * x) = esqrt(abs x * abs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (x * x) = esqrt (\\<bar>x\\<bar> * \\<bar>x\\<bar>)", "by (metis (no_types, hide_lams) abs_ereal_ge0 ereal_abs_mult ereal_zero_le_0_iff linear)"], ["proof (state)\nthis:\n  esqrt (x * x) = esqrt (\\<bar>x\\<bar> * \\<bar>x\\<bar>)\n\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "also"], ["proof (state)\nthis:\n  esqrt (x * x) = esqrt (\\<bar>x\\<bar> * \\<bar>x\\<bar>)\n\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "have \"... = abs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (\\<bar>x\\<bar> * \\<bar>x\\<bar>) = \\<bar>x\\<bar>", "by (auto simp add: esqrt_mult)"], ["proof (state)\nthis:\n  esqrt (\\<bar>x\\<bar> * \\<bar>x\\<bar>) = \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "finally"], ["proof (chain)\npicking this:\n  esqrt (x * x) = \\<bar>x\\<bar>", "show ?thesis"], ["proof (prove)\nusing this:\n  esqrt (x * x) = \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. esqrt (x * x) = \\<bar>x\\<bar>", "by auto"], ["proof (state)\nthis:\n  esqrt (x * x) = \\<bar>x\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma esqrt_mono:\n  \"mono esqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono esqrt", "unfolding esqrt_def mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<le> y \\<longrightarrow>\n       enn2ereal (ennsqrt (e2ennreal x))\n       \\<le> enn2ereal (ennsqrt (e2ennreal y))", "by (auto intro: mono_intros)"], ["", "lemma esqrt_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"esqrt x \\<le> esqrt y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt x \\<le> esqrt y", "using esqrt_mono assms"], ["proof (prove)\nusing this:\n  mono esqrt\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. esqrt x \\<le> esqrt y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> esqrt x \\<le> esqrt y\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. esqrt x \\<le> esqrt y", "by auto"], ["", "lemma esqrt_continuous:\n  \"continuous_on UNIV esqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV esqrt", "unfolding esqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. enn2ereal (ennsqrt (e2ennreal x)))", "apply (rule continuous_on_compose2[of UNIV enn2ereal], intro continuous_on_enn2ereal)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV (\\<lambda>x. ennsqrt (e2ennreal x))\n 2. range (\\<lambda>x. ennsqrt (e2ennreal x)) \\<subseteq> UNIV", "by (rule continuous_on_compose2[of UNIV ennsqrt], auto intro!: ennsqrt_continuous continuous_on_e2ennreal)"], ["", "lemma esqrt_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. esqrt(u n)) \\<longlongrightarrow> esqrt l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. esqrt (u n)) \\<longlongrightarrow> esqrt l) F", "using esqrt_continuous assms"], ["proof (prove)\nusing this:\n  continuous_on UNIV esqrt\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. esqrt (u n)) \\<longlongrightarrow> esqrt l) F", "by (metis UNIV_I continuous_on tendsto_compose)"], ["", "lemma esqrt_ereal_ereal_sqrt [simp]:\n  assumes \"t \\<ge> (0::real)\"\n  shows \"esqrt (ereal t) = ereal (sqrt t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt (ereal t) = ereal (sqrt t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. esqrt (ereal t) = ereal (sqrt t)", "have \"ereal t = ereal (sqrt t) * ereal(sqrt t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ereal t = ereal (sqrt t) * ereal (sqrt t)", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. ereal t = ereal (sqrt t) * ereal (sqrt t)", "by auto"], ["proof (state)\nthis:\n  ereal t = ereal (sqrt t) * ereal (sqrt t)\n\ngoal (1 subgoal):\n 1. esqrt (ereal t) = ereal (sqrt t)", "then"], ["proof (chain)\npicking this:\n  ereal t = ereal (sqrt t) * ereal (sqrt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  ereal t = ereal (sqrt t) * ereal (sqrt t)\n\ngoal (1 subgoal):\n 1. esqrt (ereal t) = ereal (sqrt t)", "using assms ereal_less_eq(5) esqrt_mult esqrt_square real_sqrt_ge_zero"], ["proof (prove)\nusing this:\n  ereal t = ereal (sqrt t) * ereal (sqrt t)\n  0 \\<le> t\n  (0 \\<le> ereal ?r) = (0 \\<le> ?r)\n  0 \\<le> ?a \\<Longrightarrow> esqrt (?a * ?b) = esqrt ?a * esqrt ?b\n  0 \\<le> ?x \\<Longrightarrow> esqrt ?x * esqrt ?x = ?x\n  0 \\<le> ?x \\<Longrightarrow> 0 \\<le> sqrt ?x\n\ngoal (1 subgoal):\n 1. esqrt (ereal t) = ereal (sqrt t)", "by presburger"], ["proof (state)\nthis:\n  esqrt (ereal t) = ereal (sqrt t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ereal_sqrt2:\n  \"ereal (sqrt 2) = esqrt 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ereal (sqrt 2) = esqrt 2", "using esqrt_ereal_ereal_sqrt[of 2]"], ["proof (prove)\nusing this:\n  0 \\<le> 2 \\<Longrightarrow> esqrt (ereal 2) = ereal (sqrt 2)\n\ngoal (1 subgoal):\n 1. ereal (sqrt 2) = esqrt 2", "by auto"], ["", "lemma esqrt_4 [simp]:\n  \"esqrt 4 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esqrt 4 = 2", "by auto"], ["", "lemma esqrt_le [simp]:\n  \"esqrt x \\<le> esqrt y \\<longleftrightarrow> (x \\<le> 0 \\<or> x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esqrt x \\<le> esqrt y) = (x \\<le> 0 \\<or> x \\<le> y)", "apply (auto simp add: esqrt_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>esqrt x \\<le> esqrt y; \\<not> x \\<le> y\\<rbrakk>\n    \\<Longrightarrow> x \\<le> 0", "by (metis eq_iff ereal_zero_times esqrt_mono2 esqrt_square le_cases)"], ["", "text \\<open>Finally, we define eexp, as the composition of ennexp and the injection of ennreal in ereal.\\<close>"], ["", "definition eexp::\"ereal \\<Rightarrow> ereal\" where\n  \"eexp x = enn2ereal (ennexp x)\""], ["", "lemma eexp_special_values [simp]:\n  \"eexp 0 = 1\"\n  \"eexp (\\<infinity>) = \\<infinity>\"\n  \"eexp(-\\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eexp 0 = 1 &&&\n    eexp \\<infinity> = \\<infinity> &&& eexp (- \\<infinity>) = 0", "unfolding eexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennexp 0) = 1 &&&\n    enn2ereal (ennexp \\<infinity>) = \\<infinity> &&&\n    enn2ereal (ennexp (- \\<infinity>)) = 0", "by (auto simp add: zero_ennreal.rep_eq one_ennreal.rep_eq)"], ["", "lemma eexp_strict_mono:\n  \"strict_mono eexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono eexp", "unfolding eexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono (\\<lambda>x. enn2ereal (ennexp x))", "using ennexp_strict_mono"], ["proof (prove)\nusing this:\n  strict_mono ennexp\n\ngoal (1 subgoal):\n 1. strict_mono (\\<lambda>x. enn2ereal (ennexp x))", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x < y \\<longrightarrow> ennexp x < ennexp y\n\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x < y \\<longrightarrow> enn2ereal (ennexp x) < enn2ereal (ennexp y)", "by (auto intro: mono_intros)"], ["", "lemma eexp_mono:\n  \"mono eexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono eexp", "using eexp_strict_mono"], ["proof (prove)\nusing this:\n  strict_mono eexp\n\ngoal (1 subgoal):\n 1. mono eexp", "by (simp add: strict_mono_mono)"], ["", "lemma eexp_strict_mono2 [mono_intros]:\n  assumes \"x < y\"\n  shows \"eexp x < eexp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eexp x < eexp y", "using eexp_strict_mono assms"], ["proof (prove)\nusing this:\n  strict_mono eexp\n  x < y\n\ngoal (1 subgoal):\n 1. eexp x < eexp y", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x < y \\<longrightarrow> eexp x < eexp y\n  x < y\n\ngoal (1 subgoal):\n 1. eexp x < eexp y", "by auto"], ["", "lemma eexp_mono2 [mono_intros]:\n  assumes \"x \\<le> y\"\n  shows \"eexp x \\<le> eexp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eexp x \\<le> eexp y", "using eexp_mono assms"], ["proof (prove)\nusing this:\n  mono eexp\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. eexp x \\<le> eexp y", "unfolding mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> eexp x \\<le> eexp y\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. eexp x \\<le> eexp y", "by auto"], ["", "lemma eexp_le_eexp_iff_le:\n  \"eexp x \\<le> eexp y \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eexp x \\<le> eexp y) = (x \\<le> y)", "using eexp_strict_mono2 not_le"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> eexp ?x < eexp ?y\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. (eexp x \\<le> eexp y) = (x \\<le> y)", "by (auto intro: mono_intros)"], ["", "lemma eexp_lt_eexp_iff_lt:\n  \"eexp x < eexp y \\<longleftrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eexp x < eexp y) = (x < y)", "using eexp_mono2 not_le"], ["proof (prove)\nusing this:\n  ?x \\<le> ?y \\<Longrightarrow> eexp ?x \\<le> eexp ?y\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. (eexp x < eexp y) = (x < y)", "by (auto intro: mono_intros)"], ["", "lemma eexp_special_values_iff [simp]:\n  \"eexp x = 0 \\<longleftrightarrow> x = -\\<infinity>\"\n  \"eexp x = 1 \\<longleftrightarrow> x = 0\"\n  \"eexp x = \\<infinity> \\<longleftrightarrow> x = \\<infinity>\"\n  \"eexp x = top \\<longleftrightarrow> x = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((eexp x = 0) = (x = - \\<infinity>) &&& (eexp x = 1) = (x = 0)) &&&\n    (eexp x = \\<infinity>) = (x = \\<infinity>) &&&\n    (eexp x = top) = (x = \\<infinity>)", "unfolding eexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((enn2ereal (ennexp x) = 0) = (x = - \\<infinity>) &&&\n     (enn2ereal (ennexp x) = 1) = (x = 0)) &&&\n    (enn2ereal (ennexp x) = \\<infinity>) = (x = \\<infinity>) &&&\n    (enn2ereal (ennexp x) = top) = (x = \\<infinity>)", "apply (auto simp add: zero_ennreal.rep_eq one_ennreal.rep_eq top_ereal_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. enn2ereal (ennexp x) = 0 \\<Longrightarrow> x = - \\<infinity>\n 2. enn2ereal (ennexp x) = 1 \\<Longrightarrow> x = 0", "apply (metis e2ennreal_enn2ereal ennexp.simps(3) ennexp_strict_mono strict_mono_eq zero_ennreal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal (ennexp x) = 1 \\<Longrightarrow> x = 0", "by (metis e2ennreal_enn2ereal eln_ennexp eln_simps(2) one_ennreal_def)"], ["", "lemma eexp_ineq_iff [simp]:\n  \"eexp x \\<le> 1 \\<longleftrightarrow> x \\<le> 0\"\n  \"eexp x \\<ge> 1 \\<longleftrightarrow> x \\<ge> 0\"\n  \"eexp x > 1 \\<longleftrightarrow> x > 0\"\n  \"eexp x < 1 \\<longleftrightarrow> x < 0\"\n  \"eexp x \\<ge> 0\"\n  \"eexp x > 0 \\<longleftrightarrow> x \\<noteq> - \\<infinity>\"\n  \"eexp x < \\<infinity> \\<longleftrightarrow> x \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((eexp x \\<le> 1) = (x \\<le> 0) &&&\n     (1 \\<le> eexp x) = (0 \\<le> x) &&& (1 < eexp x) = (0 < x)) &&&\n    ((eexp x < 1) = (x < 0) &&& 0 \\<le> eexp x) &&&\n    (0 < eexp x) = (x \\<noteq> - \\<infinity>) &&&\n    (eexp x < \\<infinity>) = (x \\<noteq> \\<infinity>)", "apply (metis eexp_le_eexp_iff_le eexp_lt_eexp_iff_lt eexp_special_values)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. 0 \\<le> eexp x\n 2. (0 < eexp x) = (x \\<noteq> - \\<infinity>)\n 3. (eexp x < \\<infinity>) = (x \\<noteq> \\<infinity>)", "apply (simp add: eexp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (0 < eexp x) = (x \\<noteq> - \\<infinity>)\n 2. (eexp x < \\<infinity>) = (x \\<noteq> \\<infinity>)", "using eexp_strict_mono2"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> eexp ?x < eexp ?y\n\ngoal (2 subgoals):\n 1. (0 < eexp x) = (x \\<noteq> - \\<infinity>)\n 2. (eexp x < \\<infinity>) = (x \\<noteq> \\<infinity>)", "apply (force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eexp x < \\<infinity>) = (x \\<noteq> \\<infinity>)", "by simp"], ["", "lemma eexp_ineq [mono_intros]:\n  \"x \\<le> 0 \\<Longrightarrow> eexp x \\<le> 1\"\n  \"x < 0 \\<Longrightarrow> eexp x < 1\"\n  \"x \\<ge> 0 \\<Longrightarrow> eexp x \\<ge> 1\"\n  \"x > 0 \\<Longrightarrow> eexp x > 1\"\n  \"eexp x \\<ge> 0\"\n  \"x > -\\<infinity> \\<Longrightarrow> eexp x > 0\"\n  \"x < \\<infinity> \\<Longrightarrow> eexp x < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<le> 0 \\<Longrightarrow> eexp x \\<le> 1) &&&\n     (x < 0 \\<Longrightarrow> eexp x < 1) &&&\n     (0 \\<le> x \\<Longrightarrow> 1 \\<le> eexp x)) &&&\n    ((0 < x \\<Longrightarrow> 1 < eexp x) &&& 0 \\<le> eexp x) &&&\n    (- \\<infinity> < x \\<Longrightarrow> 0 < eexp x) &&&\n    (x < \\<infinity> \\<Longrightarrow> eexp x < \\<infinity>)", "by auto"], ["", "lemma eexp_continuous:\n  \"continuous_on UNIV eexp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV eexp", "unfolding eexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. enn2ereal (ennexp x))", "by (rule continuous_on_compose2[of UNIV enn2ereal], auto simp: continuous_on_enn2ereal ennexp_continuous)"], ["", "lemma eexp_tendsto' [simp]:\n  \"((\\<lambda>n. eexp(u n)) \\<longlongrightarrow> eexp l) F \\<longleftrightarrow> ((\\<lambda>n. u n) \\<longlongrightarrow> l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F =\n    (u \\<longlongrightarrow> l) F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l)\n     F \\<Longrightarrow>\n    (u \\<longlongrightarrow> l) F\n 2. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "assume H: \"((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F\""], ["proof (state)\nthis:\n  ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F\n\ngoal (2 subgoals):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l)\n     F \\<Longrightarrow>\n    (u \\<longlongrightarrow> l) F\n 2. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "have \"((\\<lambda>n. eln (e2ennreal (eexp (u n)))) \\<longlongrightarrow> eln (e2ennreal (eexp l))) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eln (e2ennreal (eexp (u n)))) \\<longlongrightarrow>\n     eln (e2ennreal (eexp l)))\n     F", "by (intro tendsto_intros H)"], ["proof (state)\nthis:\n  ((\\<lambda>n. eln (e2ennreal (eexp (u n)))) \\<longlongrightarrow>\n   eln (e2ennreal (eexp l)))\n   F\n\ngoal (2 subgoals):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l)\n     F \\<Longrightarrow>\n    (u \\<longlongrightarrow> l) F\n 2. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>n. eln (e2ennreal (eexp (u n)))) \\<longlongrightarrow>\n   eln (e2ennreal (eexp l)))\n   F", "show \"(u \\<longlongrightarrow> l) F\""], ["proof (prove)\nusing this:\n  ((\\<lambda>n. eln (e2ennreal (eexp (u n)))) \\<longlongrightarrow>\n   eln (e2ennreal (eexp l)))\n   F\n\ngoal (1 subgoal):\n 1. (u \\<longlongrightarrow> l) F", "unfolding eexp_def"], ["proof (prove)\nusing this:\n  ((\\<lambda>n.\n       eln (e2ennreal (enn2ereal (ennexp (u n))))) \\<longlongrightarrow>\n   eln (e2ennreal (enn2ereal (ennexp l))))\n   F\n\ngoal (1 subgoal):\n 1. (u \\<longlongrightarrow> l) F", "by auto"], ["proof (state)\nthis:\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "assume \"(u \\<longlongrightarrow> l) F\""], ["proof (state)\nthis:\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. (u \\<longlongrightarrow> l) F \\<Longrightarrow>\n    ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "then"], ["proof (chain)\npicking this:\n  (u \\<longlongrightarrow> l) F", "show \"((\\<lambda>n. eexp(u n)) \\<longlongrightarrow> eexp l) F\""], ["proof (prove)\nusing this:\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "using eexp_continuous"], ["proof (prove)\nusing this:\n  (u \\<longlongrightarrow> l) F\n  continuous_on UNIV eexp\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "by (metis UNIV_I continuous_on tendsto_compose)"], ["proof (state)\nthis:\n  ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eexp_tendsto [tendsto_intros]:\n  assumes \"((\\<lambda>n. u n) \\<longlongrightarrow> l) F\"\n  shows \"((\\<lambda>n. eexp(u n)) \\<longlongrightarrow> eexp l) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "using assms"], ["proof (prove)\nusing this:\n  (u \\<longlongrightarrow> l) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. eexp (u n)) \\<longlongrightarrow> eexp l) F", "by auto"], ["", "lemma eexp_add_mult:\n  assumes \"\\<not>((a = \\<infinity> \\<and> b = -\\<infinity>) \\<or> (a = -\\<infinity> \\<and> b = \\<infinity>))\"\n  shows \"eexp(a+b) = eexp a * eexp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eexp (a + b) = eexp a * eexp b", "using ennexp_add_mult[OF assms]"], ["proof (prove)\nusing this:\n  ennexp (a + b) = ennexp a * ennexp b\n\ngoal (1 subgoal):\n 1. eexp (a + b) = eexp a * eexp b", "unfolding eexp_def"], ["proof (prove)\nusing this:\n  ennexp (a + b) = ennexp a * ennexp b\n\ngoal (1 subgoal):\n 1. enn2ereal (ennexp (a + b)) = enn2ereal (ennexp a) * enn2ereal (ennexp b)", "by (simp add: times_ennreal.rep_eq)"], ["", "lemma eexp_ereal [simp]:\n  \"eexp(ereal x) = ereal(exp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eexp (ereal x) = ereal (exp x)", "by (simp add: eexp_def)"], ["", "end"], ["", "(*of theory Eexp_Eln*)"]]}