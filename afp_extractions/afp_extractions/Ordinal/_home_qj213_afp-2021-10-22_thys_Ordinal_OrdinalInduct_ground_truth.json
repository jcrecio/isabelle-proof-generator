{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalInduct.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemma less_oSuc[iff]: \"x < oSuc x\"", "lemma oSuc_leI: \"x < y \\<Longrightarrow> oSuc x \\<le> y\"", "lemma less_oSuc_eq_le: \"(x < oSuc y) = (x \\<le> y)\"", "lemma ordinal_0_le [iff]: \"0 \\<le> (x::ordinal)\"", "lemma ordinal_not_less_0 [iff]: \"\\<not> (x::ordinal) < 0\"", "lemma ordinal_le_0 [iff]: \"(x \\<le> 0) = (x = (0::ordinal))\"", "lemma ordinal_neq_0 [iff]: \"(x \\<noteq> 0) = (0 < (x::ordinal))\"", "lemma ordinal_not_0_less [iff]: \"(\\<not> 0 < x) = (x = (0::ordinal))\"", "lemma oSuc_le_eq_less: \"(oSuc x \\<le> y) = (x < y)\"", "lemma zero_less_oSuc [iff]: \"0 < oSuc x\"", "lemma oSuc_not_0 [iff]: \"oSuc x \\<noteq> 0\"", "lemma less_oSuc0 [iff]: \"(x < oSuc 0) = (x = 0)\"", "lemma oSuc_less_oSuc [iff]: \"(oSuc x < oSuc y) = (x < y)\"", "lemma oSuc_eq_oSuc [iff]: \"(oSuc x = oSuc y) = (x = y)\"", "lemma oSuc_le_oSuc [iff]: \"(oSuc x \\<le> oSuc y) = (x \\<le> y)\"", "lemma le_oSucE: \n\"\\<lbrakk>x \\<le> oSuc y; x \\<le> y \\<Longrightarrow> R; x = oSuc y \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\"", "lemma less_oSucE:\n\"\\<lbrakk>x < oSuc y; x < y \\<Longrightarrow> P; x = y \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"", "lemmas strict_monoI = strict_mono.intro\n   and strict_monoD = strict_mono.strict_mono", "lemma strict_mono_natI:\nfixes f :: \"nat \\<Rightarrow> 'a::order\"\nshows \"(\\<And>n. f n < f (Suc n)) \\<Longrightarrow> strict_mono f\"", "lemma mono_natI:\nfixes f :: \"nat \\<Rightarrow> 'a::order\"\nshows \"(\\<And>n. f n \\<le> f (Suc n)) \\<Longrightarrow> mono f\"", "lemma strict_mono_mono:\nfixes f :: \"'a::order \\<Rightarrow> 'b::order\"\nshows \"strict_mono f \\<Longrightarrow> mono f\"", "lemma strict_mono_monoD:\nfixes f :: \"'a::order \\<Rightarrow> 'b::order\"\nshows \"\\<lbrakk>strict_mono f; A \\<le> B\\<rbrakk> \\<Longrightarrow> f A \\<le> f B\"", "lemma strict_mono_cancel_eq:\nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x = f y) = (x = y)\"", "lemma strict_mono_cancel_less: \nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x < f y) = (x < y)\"", "lemma strict_mono_cancel_le:\nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x \\<le> f y) = (x \\<le> y)\"", "lemma oLimit_leI: \"\\<forall>n. f n \\<le> x \\<Longrightarrow> oLimit f \\<le> x\"", "lemma le_oLimit [iff]: \"f n \\<le> oLimit f\"", "lemma le_oLimitI: \"x \\<le> f n \\<Longrightarrow> x \\<le> oLimit f\"", "lemma less_oLimitI: \"x < f n \\<Longrightarrow> x < oLimit f\"", "lemma less_oLimitD: \"x < oLimit f \\<Longrightarrow> \\<exists>n. x < f n\"", "lemma less_oLimitE:\n\"\\<lbrakk>x < oLimit f; \\<And>n. x < f n \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"", "lemma le_oLimitE:\n\"\\<lbrakk>x \\<le> oLimit f; \\<And>n. x \\<le> f n \\<Longrightarrow> R; x = oLimit f \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\"", "lemma oLimit_const [simp]: \"oLimit (\\<lambda>n. x) = x\"", "lemma strict_mono_less_oLimit:\n\"strict_mono f \\<Longrightarrow> f n < oLimit f\"", "lemma oLimit_eqI:\n\"\\<lbrakk>\\<And>n. \\<exists>m. f n \\<le> g m; \\<And>n. \\<exists>m. g n \\<le> f m\\<rbrakk> \\<Longrightarrow> oLimit f = oLimit g\"", "lemma oLimit_Suc:\n\"f 0 < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (Suc n)) = oLimit f\"", "lemma oLimit_shift:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) = oLimit f\"", "lemma oLimit_shift_mono:\n\"mono f \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) = oLimit f\"", "lemma limit_ordinal_not_0 [simp]: \"\\<not> limit_ordinal 0\"", "lemma zero_less_limit_ordinal [simp]: \"limit_ordinal x \\<Longrightarrow> 0 < x\"", "lemma limit_ordinal_not_oSuc [simp]: \"\\<not> limit_ordinal (oSuc p)\"", "lemma oSuc_less_limit_ordinal:\n\"limit_ordinal x \\<Longrightarrow> (oSuc w < x) = (w < x)\"", "lemma limit_ordinal_oLimitI:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> limit_ordinal (oLimit f)\"", "lemma strict_mono_limit_ordinal:\n\"strict_mono f \\<Longrightarrow> limit_ordinal (oLimit f)\"", "lemma limit_ordinalI:\n\"\\<lbrakk>0 < z; \\<forall>x<z. oSuc x < z\\<rbrakk> \\<Longrightarrow> limit_ordinal z\"", "lemma f_make_mono_less:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> f (make_mono f n) < f (make_mono f (Suc n))\"", "lemma strict_mono_f_make_mono:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> strict_mono (\\<lambda>n. f (make_mono f n))\"", "lemma le_f_make_mono:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; m \\<le> make_mono f n\\<rbrakk> \\<Longrightarrow> f m \\<le> f (make_mono f n)\"", "lemma make_mono_less:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> make_mono f n < make_mono f (Suc n)\"", "lemma oLimit_make_mono_eq:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\"", "lemma oLimit_le_oStrictLimit: \"oLimit f \\<le> oStrictLimit f\"", "lemma oLimit_induct:\nassumes zero: \"P 0\"\n    and suc:  \"\\<And>x. P x \\<Longrightarrow> P (oSuc x)\"\n    and lim:  \"\\<And>f. \\<lbrakk>strict_mono f; \\<forall>n. P (f n)\\<rbrakk> \\<Longrightarrow> P (oLimit f)\"\nshows \"P a\"", "lemma ordinal_cases:\nassumes zero: \"a = 0 \\<Longrightarrow> P\"\n    and suc:  \"\\<And>x. a = oSuc x \\<Longrightarrow> P\"\n    and lim:  \"\\<And>f. \\<lbrakk>strict_mono f; a = oLimit f\\<rbrakk> \\<Longrightarrow> P\"\nshows \"P\""], "translations": [["", "lemma less_oSuc[iff]: \"x < oSuc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < oSuc x", "by (unfold oSuc_def, rule oStrictLimit_ub)"], ["", "lemma oSuc_leI: \"x < y \\<Longrightarrow> oSuc x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> oSuc x \\<le> y", "by (unfold oSuc_def, rule oStrictLimit_lub, simp)"], ["", "instantiation ordinal :: \"{zero, one}\"\nbegin"], ["", "definition\n  ordinal_zero_def:       \"(0::ordinal) = oZero\""], ["", "definition\n  ordinal_one_def [simp]: \"(1::ordinal) = oSuc 0\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ordinal, one_class) &&& OFCLASS(ordinal, zero_class)", ".."], ["", "end"], ["", "subsubsection \\<open>Derived properties of 0 and oSuc\\<close>"], ["", "lemma less_oSuc_eq_le: \"(x < oSuc y) = (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < oSuc y) = (x \\<le> y)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x < oSuc y \\<Longrightarrow> x \\<le> y\n 2. x \\<le> y \\<Longrightarrow> x < oSuc y", "apply (erule contrapos_pp, simp add: linorder_not_less linorder_not_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow> oSuc y \\<le> x\n 2. x \\<le> y \\<Longrightarrow> x < oSuc y", "apply (erule oSuc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x < oSuc y", "apply (erule order_le_less_trans[OF _ less_oSuc])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_0_le [iff]: \"0 \\<le> (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x", "by (unfold ordinal_zero_def, rule oZero_least)"], ["", "lemma ordinal_not_less_0 [iff]: \"\\<not> (x::ordinal) < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x < 0", "by (simp add: linorder_not_less)"], ["", "lemma ordinal_le_0 [iff]: \"(x \\<le> 0) = (x = (0::ordinal))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<le> 0) = (x = 0)", "by (simp add: order_le_less)"], ["", "lemma ordinal_neq_0 [iff]: \"(x \\<noteq> 0) = (0 < (x::ordinal))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> 0) = (0 < x)", "by (simp add: order_less_le)"], ["", "lemma ordinal_not_0_less [iff]: \"(\\<not> 0 < x) = (x = (0::ordinal))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> 0 < x) = (x = 0)", "by (simp add: linorder_not_less)"], ["", "lemma oSuc_le_eq_less: \"(oSuc x \\<le> y) = (x < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oSuc x \\<le> y) = (x < y)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. oSuc x \\<le> y \\<Longrightarrow> x < y\n 2. x < y \\<Longrightarrow> oSuc x \\<le> y", "apply (erule order_less_le_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> oSuc x \\<le> y", "apply (erule oSuc_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_less_oSuc [iff]: \"0 < oSuc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < oSuc x", "by (rule order_le_less_trans, rule ordinal_0_le, rule less_oSuc)"], ["", "lemma oSuc_not_0 [iff]: \"oSuc x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc x \\<noteq> 0", "by simp"], ["", "lemma less_oSuc0 [iff]: \"(x < oSuc 0) = (x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < oSuc 0) = (x = 0)", "by (simp add: less_oSuc_eq_le)"], ["", "lemma oSuc_less_oSuc [iff]: \"(oSuc x < oSuc y) = (x < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oSuc x < oSuc y) = (x < y)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. oSuc x < oSuc y \\<Longrightarrow> x < y\n 2. x < y \\<Longrightarrow> oSuc x < oSuc y", "apply (simp add: less_oSuc_eq_le order_less_le_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> oSuc x < oSuc y", "apply (erule order_le_less_trans[OF oSuc_leI less_oSuc])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oSuc_eq_oSuc [iff]: \"(oSuc x = oSuc y) = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oSuc x = oSuc y) = (x = y)", "by (safe, erule contrapos_pp, simp add: linorder_neq_iff)"], ["", "lemma oSuc_le_oSuc [iff]: \"(oSuc x \\<le> oSuc y) = (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oSuc x \\<le> oSuc y) = (x \\<le> y)", "by (simp add: order_le_less)"], ["", "lemma le_oSucE: \n\"\\<lbrakk>x \\<le> oSuc y; x \\<le> y \\<Longrightarrow> R; x = oSuc y \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> oSuc y; x \\<le> y \\<Longrightarrow> R;\n     x = oSuc y \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by (auto simp add: order_le_less less_oSuc_eq_le)"], ["", "lemma less_oSucE:\n\"\\<lbrakk>x < oSuc y; x < y \\<Longrightarrow> P; x = y \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < oSuc y; x < y \\<Longrightarrow> P;\n     x = y \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto simp add: less_oSuc_eq_le order_le_less)"], ["", "subsection \\<open>Strict monotonicity\\<close>"], ["", "locale strict_mono =\n  fixes f\n  assumes strict_mono: \"A < B \\<Longrightarrow> f A < f B\""], ["", "lemmas strict_monoI = strict_mono.intro\n   and strict_monoD = strict_mono.strict_mono"], ["", "lemma strict_mono_natI:\nfixes f :: \"nat \\<Rightarrow> 'a::order\"\nshows \"(\\<And>n. f n < f (Suc n)) \\<Longrightarrow> strict_mono f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. f n < f (Suc n)) \\<Longrightarrow> OrdinalInduct.strict_mono f", "apply (rule strict_monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); A < B\\<rbrakk>\n       \\<Longrightarrow> f A < f B", "apply (drule Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A \\<le> B\\<rbrakk>\n       \\<Longrightarrow> f A < f B", "apply (drule le_add_diff_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A + (B - Suc A) = B\\<rbrakk>\n       \\<Longrightarrow> f A < f B", "apply (subgoal_tac \"\\<forall>k. f A < f (Suc A + k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A + (B - Suc A) = B;\n        \\<forall>k. f A < f (Suc A + k)\\<rbrakk>\n       \\<Longrightarrow> f A < f B\n 2. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A + (B - Suc A) = B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>k. f A < f (Suc A + k)", "apply (erule subst, erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A + (B - Suc A) = B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>k. f A < f (Suc A + k)", "apply (rule allI, induct_tac k, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B k n.\n       \\<lbrakk>\\<And>n. f n < f (Suc n); Suc A + (B - Suc A) = B;\n        f A < f (Suc A + n)\\<rbrakk>\n       \\<Longrightarrow> f A < f (Suc A + Suc n)", "apply (erule order_less_trans, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_natI:\nfixes f :: \"nat \\<Rightarrow> 'a::order\"\nshows \"(\\<And>n. f n \\<le> f (Suc n)) \\<Longrightarrow> mono f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<le> f (Suc n)) \\<Longrightarrow> mono f", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> f y", "apply (drule le_add_diff_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x + (y - x) = y\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> f y", "apply (subgoal_tac \"\\<forall>k. f x \\<le> f (x + k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x + (y - x) = y;\n        \\<forall>k. f x \\<le> f (x + k)\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> f y\n 2. \\<And>x y.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x + (y - x) = y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>k. f x \\<le> f (x + k)", "apply (erule subst, erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x + (y - x) = y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>k. f x \\<le> f (x + k)", "apply (rule allI, induct_tac k, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y k n.\n       \\<lbrakk>\\<And>n. f n \\<le> f (Suc n); x + (y - x) = y;\n        f x \\<le> f (x + n)\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> f (x + Suc n)", "apply (erule order_trans, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_mono:\nfixes f :: \"'a::order \\<Rightarrow> 'b::order\"\nshows \"strict_mono f \\<Longrightarrow> mono f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> mono f", "by (auto intro!: monoI simp add: order_le_less strict_monoD)"], ["", "lemma strict_mono_monoD:\nfixes f :: \"'a::order \\<Rightarrow> 'b::order\"\nshows \"\\<lbrakk>strict_mono f; A \\<le> B\\<rbrakk> \\<Longrightarrow> f A \\<le> f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; A \\<le> B\\<rbrakk>\n    \\<Longrightarrow> f A \\<le> f B", "by (rule monoD[OF strict_mono_mono])"], ["", "lemma strict_mono_cancel_eq:\nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x = f y) = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> (f x = f y) = (x = y)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (rule_tac x=x and y=y in linorder_cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; x < y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (drule strict_monoD, assumption, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x = f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (drule strict_monoD, assumption, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_cancel_less: \nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x < f y) = (x < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> (f x < f y) = (x < y)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (rule_tac x=x and y=y in linorder_cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; x < y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; x = y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 3. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x < y\n 4. \\<lbrakk>OrdinalInduct.strict_mono f; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; x = y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x < y\n 3. \\<lbrakk>OrdinalInduct.strict_mono f; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x < f y; y < x\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (drule strict_monoD, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (simp add: strict_monoD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_cancel_le:\nfixes f :: \"'a::linorder \\<Rightarrow> 'b::linorder\"\nshows \"strict_mono f \\<Longrightarrow> (f x \\<le> f y) = (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow>\n    (f x \\<le> f y) = (x \\<le> y)", "apply (auto simp add: order_le_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; x \\<noteq> y; f x < f y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; x \\<noteq> y; f x = f y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 3. \\<lbrakk>OrdinalInduct.strict_mono f; f x \\<noteq> f y; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (simp add: strict_mono_cancel_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; x \\<noteq> y; f x = f y\\<rbrakk>\n    \\<Longrightarrow> x < y\n 2. \\<lbrakk>OrdinalInduct.strict_mono f; f x \\<noteq> f y; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (simp add: strict_mono_cancel_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdinalInduct.strict_mono f; f x \\<noteq> f y; x < y\\<rbrakk>\n    \\<Longrightarrow> f x < f y", "apply (simp add: strict_monoD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Limit ordinals\\<close>"], ["", "definition\n  oLimit :: \"(nat \\<Rightarrow> ordinal) \\<Rightarrow> ordinal\" where\n  \"oLimit f = (LEAST k. \\<forall>n. f n \\<le> k)\""], ["", "lemma oLimit_leI: \"\\<forall>n. f n \\<le> x \\<Longrightarrow> oLimit f \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n \\<le> x \\<Longrightarrow> oLimit f \\<le> x", "apply (unfold oLimit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n \\<le> x \\<Longrightarrow>\n    (LEAST k. \\<forall>n. f n \\<le> k) \\<le> x", "apply (erule Least_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_oLimit [iff]: \"f n \\<le> oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<le> oLimit f", "apply (unfold oLimit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<le> (LEAST k. \\<forall>n. f n \\<le> k)", "apply (rule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. f x \\<le> (LEAST k. \\<forall>n. f n \\<le> k)", "apply (rule_tac k=\"oStrictLimit f\" in LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. f x \\<le> oStrictLimit f", "apply (clarify, rule order_less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. f x < oStrictLimit f", "apply (rule oStrictLimit_ub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_oLimitI: \"x \\<le> f n \\<Longrightarrow> x \\<le> oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> f n \\<Longrightarrow> x \\<le> oLimit f", "by (erule order_trans, rule le_oLimit)"], ["", "lemma less_oLimitI: \"x < f n \\<Longrightarrow> x < oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < f n \\<Longrightarrow> x < oLimit f", "by (erule order_less_le_trans, rule le_oLimit)"], ["", "lemma less_oLimitD: \"x < oLimit f \\<Longrightarrow> \\<exists>n. x < f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < oLimit f \\<Longrightarrow> \\<exists>n. x < f n", "apply (unfold oLimit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < (LEAST k. \\<forall>n. f n \\<le> k) \\<Longrightarrow>\n    \\<exists>n. x < f n", "apply (drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n \\<le> x) \\<Longrightarrow> \\<exists>n. x < f n", "apply (simp add: linorder_not_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_oLimitE:\n\"\\<lbrakk>x < oLimit f; \\<And>n. x < f n \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < oLimit f; \\<And>n. x < f n \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto dest: less_oLimitD)"], ["", "lemma le_oLimitE:\n\"\\<lbrakk>x \\<le> oLimit f; \\<And>n. x \\<le> f n \\<Longrightarrow> R; x = oLimit f \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> oLimit f; \\<And>n. x \\<le> f n \\<Longrightarrow> R;\n     x = oLimit f \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by (auto simp add: order_le_less dest: less_oLimitD)"], ["", "lemma oLimit_const [simp]: \"oLimit (\\<lambda>n. x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLimit (\\<lambda>n. x) = x", "apply (rule order_antisym[OF _ le_oLimit])"], ["proof (prove)\ngoal (1 subgoal):\n 1. oLimit (\\<lambda>n. x) \\<le> x", "apply (rule oLimit_leI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_less_oLimit:\n\"strict_mono f \\<Longrightarrow> f n < oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> f n < oLimit f", "apply (rule order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> f n < ?y\n 2. OrdinalInduct.strict_mono f \\<Longrightarrow> ?y \\<le> oLimit f", "apply (erule strict_monoD, rule lessI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> f (Suc n) \\<le> oLimit f", "apply (rule le_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_eqI:\n\"\\<lbrakk>\\<And>n. \\<exists>m. f n \\<le> g m; \\<And>n. \\<exists>m. g n \\<le> f m\\<rbrakk> \\<Longrightarrow> oLimit f = oLimit g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n. \\<exists>m. f n \\<le> g m;\n     \\<And>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit f = oLimit g", "apply atomize"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n     \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit f = oLimit g", "apply (rule order_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n     \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit f \\<le> oLimit g\n 2. \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n     \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit g \\<le> oLimit f", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n        \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n       \\<Longrightarrow> f n \\<le> oLimit g\n 2. \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n     \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit g \\<le> oLimit f", "apply (drule spec, erule exE, erule le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n     \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n    \\<Longrightarrow> oLimit g \\<le> oLimit f", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. \\<exists>m. f n \\<le> g m;\n        \\<forall>n. \\<exists>m. g n \\<le> f m\\<rbrakk>\n       \\<Longrightarrow> g n \\<le> oLimit f", "apply (drule spec, erule exE, erule le_oLimitI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_Suc:\n\"f 0 < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (Suc n)) = oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 < oLimit f \\<Longrightarrow>\n    oLimit (\\<lambda>n. f (Suc n)) = oLimit f", "apply (rule oLimit_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       f 0 < oLimit f \\<Longrightarrow> \\<exists>m. f (Suc n) \\<le> f m\n 2. \\<And>n.\n       f 0 < oLimit f \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (rule exI, rule order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f 0 < oLimit f \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>f 0 < oLimit f; n = 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)\n 2. \\<And>n nat.\n       \\<lbrakk>f 0 < oLimit f; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (drule less_oLimitD, clarify, rename_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m. f 0 < f m \\<Longrightarrow> \\<exists>m. f 0 \\<le> f (Suc m)\n 2. \\<And>n nat.\n       \\<lbrakk>f 0 < oLimit f; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (case_tac m, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m nat.\n       \\<lbrakk>f 0 < f m; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f 0 \\<le> f (Suc m)\n 2. \\<And>n nat.\n       \\<lbrakk>f 0 < oLimit f; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (rule_tac x=nat in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m nat.\n       \\<lbrakk>f 0 < f m; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f 0 \\<le> f (Suc nat)\n 2. \\<And>n nat.\n       \\<lbrakk>f 0 < oLimit f; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (simp add: order_less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n nat.\n       \\<lbrakk>f 0 < oLimit f; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f n \\<le> f (Suc m)", "apply (rule_tac x=nat in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_shift:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) = oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    oLimit (\\<lambda>n. f (n + k)) = oLimit f", "apply (induct_tac k, simp, rename_tac k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        oLimit (\\<lambda>n. f (n + k)) = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (n + Suc k)) = oLimit f", "apply (simp only: add_Suc_right add_Suc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        oLimit (\\<lambda>n. f (n + k)) = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (Suc n + k)) = oLimit f", "apply (rule trans[OF oLimit_Suc], simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_shift_mono:\n\"mono f \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) = oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) = oLimit f", "apply (rule oLimit_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n. mono f \\<Longrightarrow> \\<exists>m. f (n + k) \\<le> f m\n 2. \\<And>n. mono f \\<Longrightarrow> \\<exists>m. f n \\<le> f (m + k)", "apply (rule exI, rule order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. mono f \\<Longrightarrow> \\<exists>m. f n \\<le> f (m + k)", "apply (rule_tac x=n in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. mono f \\<Longrightarrow> f n \\<le> f (n + k)", "apply (erule monoD, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \"limit ordinal predicate\""], ["", "definition\n  limit_ordinal :: \"ordinal \\<Rightarrow> bool\" where\n  \"limit_ordinal x \\<longleftrightarrow> (x \\<noteq> 0) \\<and> (\\<forall>y. x \\<noteq> oSuc y)\""], ["", "lemma limit_ordinal_not_0 [simp]: \"\\<not> limit_ordinal 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> limit_ordinal 0", "by (simp add: limit_ordinal_def)"], ["", "lemma zero_less_limit_ordinal [simp]: \"limit_ordinal x \\<Longrightarrow> 0 < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow> 0 < x", "by (simp add: limit_ordinal_def)"], ["", "lemma limit_ordinal_not_oSuc [simp]: \"\\<not> limit_ordinal (oSuc p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> limit_ordinal (oSuc p)", "by (simp add: limit_ordinal_def)"], ["", "lemma oSuc_less_limit_ordinal:\n\"limit_ordinal x \\<Longrightarrow> (oSuc w < x) = (w < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow> (oSuc w < x) = (w < x)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>limit_ordinal x; oSuc w < x\\<rbrakk> \\<Longrightarrow> w < x\n 2. \\<lbrakk>limit_ordinal x; w < x\\<rbrakk> \\<Longrightarrow> oSuc w < x", "apply (erule order_less_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>limit_ordinal x; w < x\\<rbrakk> \\<Longrightarrow> oSuc w < x", "apply (simp add: linorder_not_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>limit_ordinal x; \\<not> x \\<le> w\\<rbrakk>\n    \\<Longrightarrow> \\<not> x \\<le> oSuc w", "apply (erule contrapos_nn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>limit_ordinal x; x \\<le> oSuc w\\<rbrakk>\n    \\<Longrightarrow> x \\<le> w", "apply (auto simp add: order_le_less less_oSuc_eq_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma limit_ordinal_oLimitI:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> limit_ordinal (oLimit f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow> limit_ordinal (oLimit f)", "apply (unfold limit_ordinal_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    0 < oLimit f \\<and> (\\<forall>y. oLimit f \\<noteq> oSuc y)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow> 0 < oLimit f\n 2. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    \\<forall>y. oLimit f \\<noteq> oSuc y", "apply (rule order_le_less_trans[OF ordinal_0_le])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow> ?y3 < oLimit f\n 2. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    \\<forall>y. oLimit f \\<noteq> oSuc y", "apply (erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    \\<forall>y. oLimit f \\<noteq> oSuc y", "apply (clarsimp simp add: less_oSuc_eq_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n. f n \\<le> y; oLimit f = oSuc y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule oLimit_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>oLimit f = oSuc y; oLimit f \\<le> y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: linorder_not_less[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_limit_ordinal:\n\"strict_mono f \\<Longrightarrow> limit_ordinal (oLimit f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> limit_ordinal (oLimit f)", "apply (rule limit_ordinal_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono f \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (simp add: strict_mono_less_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma limit_ordinalI:\n\"\\<lbrakk>0 < z; \\<forall>x<z. oSuc x < z\\<rbrakk> \\<Longrightarrow> limit_ordinal z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < z; \\<forall>x<z. oSuc x < z\\<rbrakk>\n    \\<Longrightarrow> limit_ordinal z", "apply (erule contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x<z. oSuc x < z; \\<not> limit_ordinal z\\<rbrakk>\n    \\<Longrightarrow> \\<not> 0 < z", "apply (unfold limit_ordinal_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>x<oSuc y. x < y; z = oSuc y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac x=y in spec, clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Making strict monotonic sequences\\<close>"], ["", "primrec make_mono :: \"(nat \\<Rightarrow> ordinal) \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere\n  \"make_mono f 0       = 0\"\n| \"make_mono f (Suc n) = (LEAST x. f (make_mono f n) < f x)\""], ["", "lemma f_make_mono_less:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> f (make_mono f n) < f (make_mono f (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    f (make_mono f n) < f (make_mono f (Suc n))", "apply (drule_tac x=\"make_mono f n\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (make_mono f n) < oLimit f \\<Longrightarrow>\n    f (make_mono f n) < f (make_mono f (Suc n))", "apply (drule less_oLimitD, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       f (make_mono f n) < f na \\<Longrightarrow>\n       f (make_mono f n) < f (LEAST x. f (make_mono f n) < f x)", "apply (erule LeastI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_mono_f_make_mono:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> strict_mono (\\<lambda>n. f (make_mono f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    OrdinalInduct.strict_mono (\\<lambda>n. f (make_mono f n))", "by (rule strict_mono_natI, erule f_make_mono_less)"], ["", "lemma le_f_make_mono:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; m \\<le> make_mono f n\\<rbrakk> \\<Longrightarrow> f m \\<le> f (make_mono f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; m \\<le> make_mono f n\\<rbrakk>\n    \\<Longrightarrow> f m \\<le> f (make_mono f n)", "apply (auto simp add: order_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; f m \\<noteq> f (make_mono f n);\n     m < make_mono f n\\<rbrakk>\n    \\<Longrightarrow> f m < f (make_mono f n)", "apply (case_tac n, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        f m \\<noteq> f (LEAST x. f (make_mono f nat) < f x);\n        m < (LEAST x. f (make_mono f nat) < f x); n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f m < f (LEAST x. f (make_mono f nat) < f x)", "apply (drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        f m \\<noteq> f (LEAST x. f (make_mono f nat) < f x); n = Suc nat;\n        \\<not> f (make_mono f nat) < f m\\<rbrakk>\n       \\<Longrightarrow> f m < f (LEAST x. f (make_mono f nat) < f x)", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        f m \\<noteq> f (LEAST x. f (make_mono f nat) < f x); n = Suc nat;\n        f m \\<le> f (make_mono f nat)\\<rbrakk>\n       \\<Longrightarrow> f m < f (LEAST x. f (make_mono f nat) < f x)", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        f m \\<noteq> f (LEAST x. f (make_mono f nat) < f x);\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f (make_mono f nat)\n                         < f (LEAST x. f (make_mono f nat) < f x)", "apply (rule LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        f m \\<noteq> f (LEAST x. f (make_mono f nat) < f x);\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f (make_mono f nat) < f (?k11 nat)", "apply (erule f_make_mono_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma make_mono_less:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> make_mono f n < make_mono f (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    make_mono f n < make_mono f (Suc n)", "apply (frule_tac n=n in f_make_mono_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f;\n     f (make_mono f n) < f (make_mono f (Suc n))\\<rbrakk>\n    \\<Longrightarrow> make_mono f n < make_mono f (Suc n)", "apply (rule ccontr, simp only: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f;\n     f (make_mono f n) < f (make_mono f (Suc n));\n     make_mono f (Suc n) \\<le> make_mono f n\\<rbrakk>\n    \\<Longrightarrow> False", "apply (drule le_f_make_mono, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f (make_mono f n) < f (make_mono f (Suc n));\n     make_mono f (Suc n) \\<le> make_mono f n;\n     f (make_mono f (Suc n)) \\<le> f (make_mono f n)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: linorder_not_less[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare make_mono.simps [simp del]"], ["", "lemma oLimit_make_mono_eq:\n\"\\<forall>n. f n < oLimit f \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f", "apply (rule oLimit_eqI, force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow>\n       \\<exists>m. f n \\<le> f (make_mono f m)", "apply (rule_tac x=n in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow>\n       f n \\<le> f (make_mono f n)", "apply (rule le_f_make_mono, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow> n \\<le> make_mono f n", "apply (induct_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; na \\<le> make_mono f na\\<rbrakk>\n       \\<Longrightarrow> Suc na \\<le> make_mono f (Suc na)", "apply (rule Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; na \\<le> make_mono f na\\<rbrakk>\n       \\<Longrightarrow> na < make_mono f (Suc na)", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow>\n       make_mono f na < make_mono f (Suc na)", "apply (erule make_mono_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Induction principle for ordinals\\<close>"], ["", "lemma oLimit_le_oStrictLimit: \"oLimit f \\<le> oStrictLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLimit f \\<le> oStrictLimit f", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<le> oStrictLimit f", "apply (rule order_less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. f n < oStrictLimit f", "apply (rule oStrictLimit_ub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_induct:\nassumes zero: \"P 0\"\n    and suc:  \"\\<And>x. P x \\<Longrightarrow> P (oSuc x)\"\n    and lim:  \"\\<And>f. \\<lbrakk>strict_mono f; \\<forall>n. P (f n)\\<rbrakk> \\<Longrightarrow> P (oLimit f)\"\nshows \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "apply (rule oStrictLimit_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P oZero\n 2. \\<And>f. \\<forall>n. P (f n) \\<Longrightarrow> P (oStrictLimit f)", "apply (rule zero[unfolded ordinal_zero_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>n. P (f n) \\<Longrightarrow> P (oStrictLimit f)", "apply (cut_tac f=f in oLimit_le_oStrictLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (simp add: order_le_less, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f < oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (drule less_oStrictLimitD, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (subgoal_tac \"oStrictLimit f = oSuc (f n)\", simp add: suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oStrictLimit f = oSuc (f n)\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (rule order_antisym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oStrictLimit f \\<le> oSuc (f n)\n 2. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oSuc (f n) \\<le> oStrictLimit f\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (rule oStrictLimit_lub, clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n na.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> f na < oSuc (f n)\n 2. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oSuc (f n) \\<le> oStrictLimit f\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (simp add: less_oSuc_eq_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n na.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> f na \\<le> f n\n 2. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oSuc (f n) \\<le> oStrictLimit f\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (erule order_trans[OF le_oLimit])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> oSuc (f n) \\<le> oStrictLimit f\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (rule oSuc_leI, rule oStrictLimit_ub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)", "apply (subgoal_tac \"\\<forall>n. f n < oLimit f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (subgoal_tac \"P (oLimit (\\<lambda>n. f (make_mono f n)))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f;\n        P (oLimit (\\<lambda>n. f (make_mono f n)))\\<rbrakk>\n       \\<Longrightarrow> P (oStrictLimit f)\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oLimit (\\<lambda>n. f (make_mono f n)))\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (simp add: oLimit_make_mono_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> P (oLimit (\\<lambda>n. f (make_mono f n)))\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (rule lim)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> OrdinalInduct.strict_mono\n                          (\\<lambda>n. f (make_mono f n))\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. P (f (make_mono f n))\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (erule strict_mono_f_make_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f;\n        \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. P (f (make_mono f n))\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n. P (f n); oLimit f = oStrictLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. f n < oLimit f", "apply (simp add: oStrictLimit_ub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_cases:\nassumes zero: \"a = 0 \\<Longrightarrow> P\"\n    and suc:  \"\\<And>x. a = oSuc x \\<Longrightarrow> P\"\n    and lim:  \"\\<And>f. \\<lbrakk>strict_mono f; a = oLimit f\\<rbrakk> \\<Longrightarrow> P\"\nshows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "apply (subgoal_tac \"\\<forall>x. a = x \\<longrightarrow> P\", force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. a = x \\<longrightarrow> P", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. a = x \\<longrightarrow> P", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. a = 0 \\<longrightarrow> P\n 2. \\<And>x xa.\n       a = xa \\<longrightarrow> P \\<Longrightarrow>\n       a = oSuc xa \\<longrightarrow> P\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. a = f n \\<longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> a = oLimit f \\<longrightarrow> P", "apply (rule impI, erule zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       a = xa \\<longrightarrow> P \\<Longrightarrow>\n       a = oSuc xa \\<longrightarrow> P\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. a = f n \\<longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> a = oLimit f \\<longrightarrow> P", "apply (rule impI, erule suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. a = f n \\<longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> a = oLimit f \\<longrightarrow> P", "apply (rule impI, erule lim, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}