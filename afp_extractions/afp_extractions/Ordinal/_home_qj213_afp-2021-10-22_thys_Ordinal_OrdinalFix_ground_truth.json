{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalFix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemma oFix_fixed:\n\"\\<lbrakk>continuous F; a \\<le> F a\\<rbrakk> \\<Longrightarrow> F (oFix F a) = oFix F a\"", "lemma oFix_least:\n\"\\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk> \\<Longrightarrow> oFix F a \\<le> x\"", "lemma mono_oFix: \"mono F \\<Longrightarrow> mono (oFix F)\"", "lemma less_oFixD:\n\"\\<lbrakk>x < oFix F a; mono F; F x = x\\<rbrakk> \\<Longrightarrow> x < a\"", "lemma less_oFixI: \"a < F a \\<Longrightarrow> a < oFix F a\"", "lemma le_oFix: \"a \\<le> oFix F a\"", "lemma le_oFix1: \"F a \\<le> oFix F a\"", "lemma less_oFix_0D:\n\"\\<lbrakk>x < oFix F 0; mono F\\<rbrakk> \\<Longrightarrow> x < F x\"", "lemma zero_less_oFix_eq: \"(0 < oFix F 0) = (0 < F 0)\"", "lemma oFix_eq_self: \"F a = a \\<Longrightarrow> oFix F a = a\"", "lemma oDeriv_0 [simp]:\n\"oDeriv F 0 = oFix F 0\"", "lemma oDeriv_oSuc [simp]:\n\"oDeriv F (oSuc x) = oFix F (oSuc (oDeriv F x))\"", "lemma oDeriv_oLimit [simp]:\n\"oDeriv F (oLimit f) = oLimit (\\<lambda>n. oDeriv F (f n))\"", "lemma oDeriv_fixed:\n\"normal F \\<Longrightarrow> F (oDeriv F n) = oDeriv F n\"", "lemma oDeriv_fixedD:\n\"\\<lbrakk>oDeriv F x = x; normal F\\<rbrakk> \\<Longrightarrow> F x = x\"", "lemma normal_oDeriv:\n\"normal (oDeriv F)\"", "lemma oDeriv_increasing:\n\"continuous F \\<Longrightarrow> F x \\<le> oDeriv F x\"", "lemma oDeriv_total:\n\"\\<lbrakk>normal F; F x = x\\<rbrakk> \\<Longrightarrow> \\<exists>n. x = oDeriv F n\"", "lemma range_oDeriv:\n\"normal F \\<Longrightarrow> range (oDeriv F) = {x. F x = x}\""], "translations": [["", "lemma oFix_fixed:\n\"\\<lbrakk>continuous F; a \\<le> F a\\<rbrakk> \\<Longrightarrow> F (oFix F a) = oFix F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> F (oFix F a) = oFix F a", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> F (oLimit (\\<lambda>n. iter n F a)) =\n                      oLimit (\\<lambda>n. iter n F a)", "apply (simp only: continuousD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. F (iter n F a)) =\n                      oLimit (\\<lambda>n. iter n F a)", "apply (rule order_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. F (iter n F a))\n                      \\<le> oLimit (\\<lambda>n. iter n F a)\n 2. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. iter n F a)\n                      \\<le> oLimit (\\<lambda>n. F (iter n F a))", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n       \\<Longrightarrow> F (iter n F a)\n                         \\<le> oLimit (\\<lambda>n. iter n F a)\n 2. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. iter n F a)\n                      \\<le> oLimit (\\<lambda>n. F (iter n F a))", "apply (rule_tac n=\"Suc n\" in le_oLimitI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. iter n F a)\n                      \\<le> oLimit (\\<lambda>n. F (iter n F a))", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n       \\<Longrightarrow> iter n F a\n                         \\<le> oLimit (\\<lambda>n. F (iter n F a))", "apply (rule_tac n=n in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>continuous F; a \\<le> F a\\<rbrakk>\n       \\<Longrightarrow> iter n F a \\<le> F (iter n F a)", "apply (induct_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>continuous F; a \\<le> F a;\n        iter na F a \\<le> F (iter na F a)\\<rbrakk>\n       \\<Longrightarrow> iter (Suc na) F a \\<le> F (iter (Suc na) F a)", "apply (simp add: continuous.monoD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oFix_least:\n\"\\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk> \\<Longrightarrow> oFix F a \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk>\n    \\<Longrightarrow> oFix F a \\<le> x", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. iter n F a) \\<le> x", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk>\n       \\<Longrightarrow> iter n F a \\<le> x", "apply (induct_tac n, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>mono F; F x = x; a \\<le> x; iter na F a \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F (iter na F a) \\<le> x", "apply (erule subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>mono F; a \\<le> x; iter na F a \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F (iter na F a) \\<le> F x", "apply (erule monoD, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_oFix: \"mono F \\<Longrightarrow> mono (oFix F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F \\<Longrightarrow> mono (oFix F)", "apply (rule monoI, unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>mono F; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. iter n F x)\n                         \\<le> oLimit (\\<lambda>n. iter n F y)", "apply (subgoal_tac \"\\<forall>n. iter n F x \\<le> iter n F y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>mono F; x \\<le> y;\n        \\<forall>n. iter n F x \\<le> iter n F y\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. iter n F x)\n                         \\<le> oLimit (\\<lambda>n. iter n F y)\n 2. \\<And>x y.\n       \\<lbrakk>mono F; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. iter n F x \\<le> iter n F y", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y n.\n       \\<lbrakk>mono F; x \\<le> y;\n        \\<forall>n. iter n F x \\<le> iter n F y\\<rbrakk>\n       \\<Longrightarrow> iter n F x \\<le> oLimit (\\<lambda>n. iter n F y)\n 2. \\<And>x y.\n       \\<lbrakk>mono F; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. iter n F x \\<le> iter n F y", "apply (rule_tac n=n in le_oLimitI, erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>mono F; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. iter n F x \\<le> iter n F y", "apply (rule allI, induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y n.\n       \\<lbrakk>mono F; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> iter 0 F x \\<le> iter 0 F y\n 2. \\<And>x y n na.\n       \\<lbrakk>mono F; x \\<le> y; iter na F x \\<le> iter na F y\\<rbrakk>\n       \\<Longrightarrow> iter (Suc na) F x \\<le> iter (Suc na) F y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y n na.\n       \\<lbrakk>mono F; x \\<le> y; iter na F x \\<le> iter na F y\\<rbrakk>\n       \\<Longrightarrow> iter (Suc na) F x \\<le> iter (Suc na) F y", "apply (simp add: monoD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_oFixD:\n\"\\<lbrakk>x < oFix F a; mono F; F x = x\\<rbrakk> \\<Longrightarrow> x < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < oFix F a; mono F; F x = x\\<rbrakk> \\<Longrightarrow> x < a", "apply (simp add: linorder_not_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> oFix F a \\<le> x; mono F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<not> a \\<le> x", "apply (erule contrapos_nn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x = x; a \\<le> x\\<rbrakk>\n    \\<Longrightarrow> oFix F a \\<le> x", "by (rule oFix_least)"], ["", "lemma less_oFixI: \"a < F a \\<Longrightarrow> a < oFix F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F a \\<Longrightarrow> a < oFix F a", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F a \\<Longrightarrow> a < oLimit (\\<lambda>n. iter n F a)", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a \\<le> oLimit (\\<lambda>n. iter n F a)", "apply (rule_tac n=1 in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a \\<le> iter 1 F a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_oFix: \"a \\<le> oFix F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> oFix F a", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> oLimit (\\<lambda>n. iter n F a)", "apply (rule_tac n=0 in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> iter 0 F a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_oFix1: \"F a \\<le> oFix F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F a \\<le> oFix F a", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a \\<le> oLimit (\\<lambda>n. iter n F a)", "apply (rule_tac n=1 in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a \\<le> iter 1 F a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_oFix_0D:\n\"\\<lbrakk>x < oFix F 0; mono F\\<rbrakk> \\<Longrightarrow> x < F x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < oFix F 0; mono F\\<rbrakk> \\<Longrightarrow> x < F x", "apply (unfold oFix_def, drule less_oLimitD, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>mono F; x < iter n F 0\\<rbrakk> \\<Longrightarrow> x < F x", "apply (erule_tac P=\"x < iter n F 0\" in rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       mono F \\<Longrightarrow> x < iter n F 0 \\<longrightarrow> x < F x", "apply (induct_tac n, auto simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>mono F; x < F (iter na F 0); iter na F 0 \\<le> x\\<rbrakk>\n       \\<Longrightarrow> x < F x", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>mono F; iter na F 0 \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F (iter na F 0) \\<le> F x", "apply (erule monoD, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_less_oFix_eq: \"(0 < oFix F 0) = (0 < F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < oFix F 0) = (0 < F 0)", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < oFix F 0 \\<Longrightarrow> 0 < F 0\n 2. 0 < F 0 \\<Longrightarrow> 0 < oFix F 0", "apply (erule contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> 0 < F 0 \\<Longrightarrow> \\<not> 0 < oFix F 0\n 2. 0 < F 0 \\<Longrightarrow> 0 < oFix F 0", "apply (simp only: linorder_not_less oFix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. F 0 \\<le> 0 \\<Longrightarrow> oLimit (\\<lambda>n. iter n F 0) \\<le> 0\n 2. 0 < F 0 \\<Longrightarrow> 0 < oFix F 0", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n. F 0 \\<le> 0 \\<Longrightarrow> iter n F 0 \\<le> 0\n 2. 0 < F 0 \\<Longrightarrow> 0 < oFix F 0", "apply (induct_tac n, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < F 0 \\<Longrightarrow> 0 < oFix F 0", "apply (erule less_oFixI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oFix_eq_self: \"F a = a \\<Longrightarrow> oFix F a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F a = a \\<Longrightarrow> oFix F a = a", "apply (unfold oFix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a = a \\<Longrightarrow> oLimit (\\<lambda>n. iter n F a) = a", "apply (subgoal_tac \"\\<forall>n. iter n F a = a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a = a \\<Longrightarrow> \\<forall>n. iter n F a = a", "apply (rule allI, induct_tac n, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Derivatives of ordinal functions\\<close>"], ["", "text \"The derivative of F enumerates all the fixed-points of F\""], ["", "definition\n  oDeriv :: \"(ordinal \\<Rightarrow> ordinal) \\<Rightarrow> ordinal \\<Rightarrow> ordinal\" where\n  \"oDeriv F = ordinal_rec (oFix F 0) (\\<lambda>p x. oFix F (oSuc x))\""], ["", "lemma oDeriv_0 [simp]:\n\"oDeriv F 0 = oFix F 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oDeriv F 0 = oFix F 0", "by (simp add: oDeriv_def)"], ["", "lemma oDeriv_oSuc [simp]:\n\"oDeriv F (oSuc x) = oFix F (oSuc (oDeriv F x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oDeriv F (oSuc x) = oFix F (oSuc (oDeriv F x))", "by (simp add: oDeriv_def)"], ["", "lemma oDeriv_oLimit [simp]:\n\"oDeriv F (oLimit f) = oLimit (\\<lambda>n. oDeriv F (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oDeriv F (oLimit f) = oLimit (\\<lambda>n. oDeriv F (f n))", "apply (unfold oDeriv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec (oFix F 0) (\\<lambda>p x. oFix F (oSuc x)) (oLimit f) =\n    oLimit\n     (\\<lambda>n.\n         ordinal_rec (oFix F 0) (\\<lambda>p x. oFix F (oSuc x)) (f n))", "apply (rule ordinal_rec_oLimit, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x. x \\<le> oFix F (oSuc x)", "apply (rule order_trans[OF order_less_imp_le[OF less_oSuc]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x. oSuc x \\<le> oFix F (oSuc x)", "apply (rule le_oFix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oDeriv_fixed:\n\"normal F \\<Longrightarrow> F (oDeriv F n) = oDeriv F n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal F \\<Longrightarrow> F (oDeriv F n) = oDeriv F n", "apply (rule_tac a=n in oLimit_induct, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. normal F \\<Longrightarrow> F (oFix F 0) = oFix F 0\n 2. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oFix F (oSuc (oDeriv F x))) =\n                         oFix F (oSuc (oDeriv F x))\n 3. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (rule oFix_fixed)"], ["proof (prove)\ngoal (4 subgoals):\n 1. normal F \\<Longrightarrow> continuous F\n 2. normal F \\<Longrightarrow> 0 \\<le> F 0\n 3. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oFix F (oSuc (oDeriv F x))) =\n                         oFix F (oSuc (oDeriv F x))\n 4. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (erule normal.continuous)"], ["proof (prove)\ngoal (3 subgoals):\n 1. normal F \\<Longrightarrow> 0 \\<le> F 0\n 2. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oFix F (oSuc (oDeriv F x))) =\n                         oFix F (oSuc (oDeriv F x))\n 3. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oFix F (oSuc (oDeriv F x))) =\n                         oFix F (oSuc (oDeriv F x))\n 2. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (rule oFix_fixed)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> continuous F\n 2. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> oSuc (oDeriv F x) \\<le> F (oSuc (oDeriv F x))\n 3. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (erule normal.continuous)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; F (oDeriv F x) = oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> oSuc (oDeriv F x) \\<le> F (oSuc (oDeriv F x))\n 2. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (erule normal.increasing)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (oDeriv F (f n)) = oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. oDeriv F (f n))) =\n                         oLimit (\\<lambda>n. oDeriv F (f n))", "apply (simp add: normal.oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oDeriv_fixedD:\n\"\\<lbrakk>oDeriv F x = x; normal F\\<rbrakk> \\<Longrightarrow> F x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oDeriv F x = x; normal F\\<rbrakk> \\<Longrightarrow> F x = x", "by (erule subst, erule oDeriv_fixed)"], ["", "lemma normal_oDeriv:\n\"normal (oDeriv F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (oDeriv F)", "apply (rule normalI, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oDeriv F x < oFix F (oSuc (oDeriv F x))", "apply (rule order_less_le_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oSuc (oDeriv F x) \\<le> oFix F (oSuc (oDeriv F x))", "apply (rule le_oFix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oDeriv_increasing:\n\"continuous F \\<Longrightarrow> F x \\<le> oDeriv F x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous F \\<Longrightarrow> F x \\<le> oDeriv F x", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous F \\<Longrightarrow> F 0 \\<le> oDeriv F 0\n 2. \\<And>x.\n       \\<lbrakk>continuous F; F x \\<le> oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> oDeriv F (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (simp add: le_oFix1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>continuous F; F x \\<le> oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> oDeriv F (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>continuous F; F x \\<le> oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> oFix F (oSuc (oDeriv F x))\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (rule order_trans[OF _ le_oFix1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>continuous F; F x \\<le> oDeriv F x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> F (oSuc (oDeriv F x))\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (erule continuous.monoD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       F x \\<le> oDeriv F x \\<Longrightarrow> oSuc x \\<le> oSuc (oDeriv F x)\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. F x \\<le> oDeriv F x \\<Longrightarrow> x \\<le> oDeriv F x\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (rule normal.increasing)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. F x \\<le> oDeriv F x \\<Longrightarrow> normal (oDeriv F)\n 2. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (rule normal_oDeriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> oDeriv F (oLimit f)", "apply (simp add: continuousD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. F (f n))\n                         \\<le> oLimit (\\<lambda>n. oDeriv F (f n))", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oLimit (\\<lambda>n. oDeriv F (f n))", "apply (rule_tac n=n in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>continuous F; OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> oDeriv F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oDeriv F (f n)", "apply (erule spec)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oDeriv_total:\n\"\\<lbrakk>normal F; F x = x\\<rbrakk> \\<Longrightarrow> \\<exists>n. x = oDeriv F n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n. x = oDeriv F n", "apply (subgoal_tac \"\\<exists>n. oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>normal F; F x = x;\n     \\<exists>n. oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n. x = oDeriv F n\n 2. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x;\n        x < oFix F (oSuc (oDeriv F n))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. x = oDeriv F n\n 2. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply (drule less_oFixD)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x\\<rbrakk>\n       \\<Longrightarrow> mono F\n 2. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F x = x\n 3. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x;\n        x < oSuc (oDeriv F n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. x = oDeriv F n\n 4. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply (erule normal.mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F x = x\n 2. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x;\n        x < oSuc (oDeriv F n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. x = oDeriv F n\n 3. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>normal F; F x = x; oDeriv F n \\<le> x;\n        x < oSuc (oDeriv F n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. x = oDeriv F n\n 2. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply (rule_tac x=n in exI, simp add: less_oSuc_eq_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normal F; F x = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         oDeriv F n \\<le> x \\<and> x < oDeriv F (oSuc n)", "apply (rule normal.oInv_ex[OF normal_oDeriv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normal F; F x = x\\<rbrakk> \\<Longrightarrow> oDeriv F 0 \\<le> x", "apply (simp add: oFix_least normal.mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma range_oDeriv:\n\"normal F \\<Longrightarrow> range (oDeriv F) = {x. F x = x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal F \\<Longrightarrow> range (oDeriv F) = {x. F x = x}", "by (auto intro: oDeriv_fixed dest: oDeriv_total)"], ["", "end"]]}