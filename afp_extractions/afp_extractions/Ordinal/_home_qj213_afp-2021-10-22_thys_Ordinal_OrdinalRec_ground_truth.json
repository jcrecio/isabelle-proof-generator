{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalRec.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemma oPrec_oSuc [simp]: \"oPrec (oSuc x) = x\"", "lemma oPrec_less: \"\\<exists>p. x = oSuc p \\<Longrightarrow> oPrec x < x\"", "lemma ordinal_rec0_0:\n\"ordinal_rec0 z s l 0 = z\"", "lemma ordinal_rec0_oSuc:\n\"ordinal_rec0 z s l (oSuc x) = s x (ordinal_rec0 z s l x)\"", "lemma limit_ordinal_not_0: \"limit_ordinal x \\<Longrightarrow> x \\<noteq> 0\"", "lemma limit_ordinal_not_oSuc: \"limit_ordinal x \\<Longrightarrow> x \\<noteq> oSuc p\"", "lemma ordinal_rec0_limit_ordinal:\n\"limit_ordinal x \\<Longrightarrow> ordinal_rec0 z s l x =\n (THE y. \\<forall>f. (\\<forall>n. f n < oLimit f) \\<and> oLimit f = x \\<longrightarrow> \n   l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)\"", "lemma porder_order: \"porder ((\\<le>) :: 'a::order \\<Rightarrow> 'a \\<Rightarrow> bool)\"", "lemma (in porder) flip: \"porder (\\<lambda>x y. y << x)\"", "lemma (in omega_complete) lub_cong_lemma:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g; oLimit f \\<le> oLimit g;\n \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n \\<Longrightarrow> lub (\\<lambda>n. F (f n)) << lub (\\<lambda>n. F (g n))\"", "lemma (in omega_complete) lub_cong:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g; oLimit f = oLimit g;\n \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n \\<Longrightarrow> lub (\\<lambda>n. F (f n)) = lub (\\<lambda>n. F (g n))\"", "lemma (in omega_complete) ordinal_rec0_mono_lemma:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"\\<forall>y\\<le>w. \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\"", "lemma (in omega_complete) ordinal_rec0_mono:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"x \\<le> y \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\"", "lemma (in omega_complete) ordinal_rec0_oLimit:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"ordinal_rec0 z s lub (oLimit f) =\n         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\"", "lemma omega_complete_oLimit: \"omega_complete (\\<le>) oLimit\"", "lemma ordinal_rec_0 [simp]: \"ordinal_rec z s 0 = z\"", "lemma ordinal_rec_oSuc [simp]:\n\"ordinal_rec z s (oSuc x) = s x (ordinal_rec z s x)\"", "lemma ordinal_rec_oLimit:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"ordinal_rec z s (oLimit f) = oLimit (\\<lambda>n. ordinal_rec z s (f n))\"", "lemma continuous_ordinal_rec:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"continuous (ordinal_rec z s)\"", "lemma mono_ordinal_rec:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"mono (ordinal_rec z s)\"", "lemma normal_ordinal_rec:\nassumes s: \"\\<forall>p x. x < s p x\"\nshows \"normal (ordinal_rec z s)\""], "translations": [["", "lemma oPrec_oSuc [simp]: \"oPrec (oSuc x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oPrec (oSuc x) = x", "by (unfold oPrec_def, rule the_equality, simp_all)"], ["", "lemma oPrec_less: \"\\<exists>p. x = oSuc p \\<Longrightarrow> oPrec x < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. x = oSuc p \\<Longrightarrow> oPrec x < x", "by clarsimp"], ["", "definition\n  ordinal_rec0 ::\n    \"['a, ordinal \\<Rightarrow> 'a \\<Rightarrow> 'a, (nat \\<Rightarrow> 'a) \\<Rightarrow> 'a, ordinal] \\<Rightarrow> 'a\" where\n  \"ordinal_rec0 z s l \\<equiv> wfrec {(x,y). x < y} (\\<lambda>F x.\n    if x = 0 then z else\n    if (\\<exists>p. x = oSuc p) then s (oPrec x) (F (oPrec x)) else\n    (THE y. \\<forall>f. (\\<forall>n. f n < oLimit f) \\<and> oLimit f = x\n            \\<longrightarrow> l (\\<lambda>n. F (f n)) = y))\""], ["", "lemma ordinal_rec0_0:\n\"ordinal_rec0 z s l 0 = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec0 z s l 0 = z", "apply (rule trans[OF def_wfrec[OF ordinal_rec0_def wf]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 = 0 then z\n     else if \\<exists>p. 0 = oSuc p\n          then s (oPrec 0)\n                (cut (ordinal_rec0 z s l) {(x, y). x < y} 0 (oPrec 0))\n          else THE y.\n                  \\<forall>f.\n                     (\\<forall>n. f n < oLimit f) \\<and>\n                     oLimit f = 0 \\<longrightarrow>\n                     l (\\<lambda>n.\n                           cut (ordinal_rec0 z s l) {(x, y). x < y} 0\n                            (f n)) =\n                     y) =\n    z", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_rec0_oSuc:\n\"ordinal_rec0 z s l (oSuc x) = s x (ordinal_rec0 z s l x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec0 z s l (oSuc x) = s x (ordinal_rec0 z s l x)", "apply (rule trans[OF def_wfrec[OF ordinal_rec0_def wf]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if oSuc x = 0 then z\n     else if \\<exists>p. oSuc x = oSuc p\n          then s (oPrec (oSuc x))\n                (cut (ordinal_rec0 z s l) {(x, y). x < y} (oSuc x)\n                  (oPrec (oSuc x)))\n          else THE y.\n                  \\<forall>f.\n                     (\\<forall>n. f n < oLimit f) \\<and>\n                     oLimit f = oSuc x \\<longrightarrow>\n                     l (\\<lambda>n.\n                           cut (ordinal_rec0 z s l) {(x, y). x < y} (oSuc x)\n                            (f n)) =\n                     y) =\n    s x (ordinal_rec0 z s l x)", "apply (simp add: cut_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma limit_ordinal_not_0: \"limit_ordinal x \\<Longrightarrow> x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow> x \\<noteq> 0", "by (clarsimp)"], ["", "lemma limit_ordinal_not_oSuc: \"limit_ordinal x \\<Longrightarrow> x \\<noteq> oSuc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow> x \\<noteq> oSuc p", "by (clarsimp)"], ["", "lemma ordinal_rec0_limit_ordinal:\n\"limit_ordinal x \\<Longrightarrow> ordinal_rec0 z s l x =\n (THE y. \\<forall>f. (\\<forall>n. f n < oLimit f) \\<and> oLimit f = x \\<longrightarrow> \n   l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow>\n    ordinal_rec0 z s l x =\n    (THE y.\n        \\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)", "apply (rule trans[OF def_wfrec[OF ordinal_rec0_def wf]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow>\n    (if x = 0 then z\n     else if \\<exists>p. x = oSuc p\n          then s (oPrec x)\n                (cut (ordinal_rec0 z s l) {(x, y). x < y} x (oPrec x))\n          else THE y.\n                  \\<forall>f.\n                     (\\<forall>n. f n < oLimit f) \\<and>\n                     oLimit f = x \\<longrightarrow>\n                     l (\\<lambda>n.\n                           cut (ordinal_rec0 z s l) {(x, y). x < y} x\n                            (f n)) =\n                     y) =\n    (THE y.\n        \\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)", "apply (simp add: limit_ordinal_not_oSuc limit_ordinal_not_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit_ordinal x \\<Longrightarrow>\n    (THE y.\n        \\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n.\n                 cut (ordinal_rec0 z s l) {(x, y). x < y} x (f n)) =\n           y) =\n    (THE y.\n        \\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)", "apply (rule_tac f=The in arg_cong, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       limit_ordinal x \\<Longrightarrow>\n       (\\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n.\n                 cut (ordinal_rec0 z s l) {(x, y). x < y} x (f n)) =\n           y) =\n       (\\<forall>f.\n           (\\<forall>n. f n < oLimit f) \\<and>\n           oLimit f = x \\<longrightarrow>\n           l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)", "apply (rule_tac f=All in arg_cong, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f.\n       limit_ordinal x \\<Longrightarrow>\n       ((\\<forall>n. f n < oLimit f) \\<and> oLimit f = x \\<longrightarrow>\n        l (\\<lambda>n. cut (ordinal_rec0 z s l) {(x, y). x < y} x (f n)) =\n        y) =\n       ((\\<forall>n. f n < oLimit f) \\<and> oLimit f = x \\<longrightarrow>\n        l (\\<lambda>n. ordinal_rec0 z s l (f n)) = y)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y f.\n       \\<lbrakk>limit_ordinal (oLimit f); \\<forall>n. f n < oLimit f;\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> l (\\<lambda>n. ordinal_rec0 z s l (f n)) =\n                         l (\\<lambda>n.\n                               cut (ordinal_rec0 z s l) {(x, y). x < y}\n                                (oLimit f) (f n))\n 2. \\<And>y f.\n       \\<lbrakk>limit_ordinal (oLimit f); \\<forall>n. f n < oLimit f;\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> l (\\<lambda>n.\n                               cut (ordinal_rec0 z s l) {(x, y). x < y}\n                                (oLimit f) (f n)) =\n                         l (\\<lambda>n. ordinal_rec0 z s l (f n))", "apply (simp add: cut_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f.\n       \\<lbrakk>limit_ordinal (oLimit f); \\<forall>n. f n < oLimit f;\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> l (\\<lambda>n.\n                               cut (ordinal_rec0 z s l) {(x, y). x < y}\n                                (oLimit f) (f n)) =\n                         l (\\<lambda>n. ordinal_rec0 z s l (f n))", "apply (simp add: cut_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Partial orders\\<close>"], ["", "locale porder =\n  fixes le  :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infixl \"<<\" 55)\nassumes po_refl:    \"\\<And>x. x << x\"\n    and po_trans:   \"\\<And>x y z. \\<lbrakk>x << y; y << z\\<rbrakk> \\<Longrightarrow> x << z\"\n    and po_antisym: \"\\<And>x y. \\<lbrakk>x << y; y << x\\<rbrakk> \\<Longrightarrow> x = y\""], ["", "lemma porder_order: \"porder ((\\<le>) :: 'a::order \\<Rightarrow> 'a \\<Rightarrow> bool)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder (\\<le>)", "apply (rule porder.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule order_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule order_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule order_antisym, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in porder) flip: \"porder (\\<lambda>x y. y << x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder (\\<lambda>x y. y << x)", "apply (rule porder.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x << x\n 2. \\<And>x y z. \\<lbrakk>y << x; z << y\\<rbrakk> \\<Longrightarrow> z << x\n 3. \\<And>x y. \\<lbrakk>y << x; x << y\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule po_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z. \\<lbrakk>y << x; z << y\\<rbrakk> \\<Longrightarrow> z << x\n 2. \\<And>x y. \\<lbrakk>y << x; x << y\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule po_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. \\<lbrakk>y << x; x << y\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule po_antisym, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "locale omega_complete = porder +\nfixes lub :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> 'a\"\nassumes is_ub_lub: \"\\<And>f n. f n << lub f\"\nassumes is_lub_lub: \"\\<And>f x. \\<forall>n. f n << x \\<Longrightarrow> lub f << x\""], ["", "lemma (in omega_complete) lub_cong_lemma:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g; oLimit f \\<le> oLimit g;\n \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n \\<Longrightarrow> lub (\\<lambda>n. F (f n)) << lub (\\<lambda>n. F (g n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f \\<le> oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (f n)) << lub (\\<lambda>n. F (g n))", "apply (rule is_lub_lub[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))", "apply (subgoal_tac \"f n < oLimit g\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y;\n        f n < oLimit g\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (drule less_oLimitD, clarify, rename_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y;\n        f n < g m\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (drule_tac x=\"g m\" in spec, drule mp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m\\<rbrakk>\n       \\<Longrightarrow> g m < oLimit g\n 2. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m;\n        \\<forall>x\\<le>g m. F x << F (g m)\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (erule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m;\n        \\<forall>x\\<le>g m. F x << F (g m)\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (drule_tac x=\"f n\" in spec, drule mp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m\\<rbrakk>\n       \\<Longrightarrow> f n \\<le> g m\n 2. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m; F (f n) << F (g m)\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (erule order_less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m; F (f n) << F (g m)\\<rbrakk>\n       \\<Longrightarrow> F (f n) << lub (\\<lambda>n. F (g n))\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (erule po_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g; f n < g m\\<rbrakk>\n       \\<Longrightarrow> F (g m) << lub (\\<lambda>n. F (g n))\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (rule is_ub_lub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < oLimit g", "apply (rule order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> f n < ?y23 n\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> ?y23 n \\<le> oLimit g", "apply (erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n        oLimit f \\<le> oLimit g;\n        \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> oLimit g", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in omega_complete) lub_cong:\n\"\\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g; oLimit f = oLimit g;\n \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n \\<Longrightarrow> lub (\\<lambda>n. F (f n)) = lub (\\<lambda>n. F (g n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (f n)) = lub (\\<lambda>n. F (g n))", "apply (rule po_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (f n)) << lub (\\<lambda>n. F (g n))\n 2. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (g n)) << lub (\\<lambda>n. F (f n))", "apply (rule lub_cong_lemma, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> oLimit f \\<le> oLimit g\n 2. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\n 3. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (g n)) << lub (\\<lambda>n. F (f n))", "apply (simp add: po_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\n 2. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (g n)) << lub (\\<lambda>n. F (f n))", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> lub (\\<lambda>n. F (g n)) << lub (\\<lambda>n. F (f n))", "apply (rule lub_cong_lemma, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> oLimit g \\<le> oLimit f\n 2. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<oLimit f. \\<forall>x\\<le>y. F x << F y", "apply (simp add: po_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>m. g m < oLimit g;\n     oLimit f = oLimit g;\n     \\<forall>y<oLimit g. \\<forall>x\\<le>y. F x << F y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<oLimit f. \\<forall>x\\<le>y. F x << F y", "apply (drule sym, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in omega_complete) ordinal_rec0_mono_lemma:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"\\<forall>y\\<le>w. \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<le>w.\n       \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y", "apply (rule_tac a=w in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>y\\<le>0.\n       \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\n 2. \\<And>x.\n       \\<forall>y\\<le>x.\n          \\<forall>x\\<le>y.\n             ordinal_rec0 z s lub x <<\n             ordinal_rec0 z s lub y \\<Longrightarrow>\n       \\<forall>y\\<le>oSuc x.\n          \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (simp add: po_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>y\\<le>x.\n          \\<forall>x\\<le>y.\n             ordinal_rec0 z s lub x <<\n             ordinal_rec0 z s lub y \\<Longrightarrow>\n       \\<forall>y\\<le>oSuc x.\n          \\<forall>x\\<le>y. ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        y \\<le> oSuc x; xa \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa << ordinal_rec0 z s lub y\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (erule le_oSucE, simp, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa \\<le> oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (erule le_oSucE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa \\<le> x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (drule spec, drule mp, rule order_refl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> x;\n        \\<forall>xa\\<le>x.\n           ordinal_rec0 z s lub xa << ordinal_rec0 z s lub x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> x;\n        ordinal_rec0 z s lub xa << ordinal_rec0 z s lub x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (erule po_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       xa \\<le> x \\<Longrightarrow>\n       ordinal_rec0 z s lub x << ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (simp add: ordinal_rec0_oSuc s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>y\\<le>x.\n                   \\<forall>x\\<le>y.\n                      ordinal_rec0 z s lub x << ordinal_rec0 z s lub y;\n        xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa <<\n                         ordinal_rec0 z s lub (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply (simp add: po_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<le>oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f y x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        y \\<le> oLimit f; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y", "apply (erule le_oLimitE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f y x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> y; y \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\n 2. \\<And>f y x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> y; y = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f y x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> y; y = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)", "apply (subgoal_tac \"ordinal_rec0 z s lub (oLimit f) =\n                     lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (erule le_oLimitE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 3. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x \\<le> f n;\n        \\<forall>y\\<le>f n.\n           \\<forall>x\\<le>y.\n              ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 3. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule spec, drule mp, rule order_refl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x \\<le> f n;\n        \\<forall>x\\<le>f n.\n           ordinal_rec0 z s lub x << ordinal_rec0 z s lub (f n)\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 3. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x \\<le> f n;\n        ordinal_rec0 z s lub x << ordinal_rec0 z s lub (f n)\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 3. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (erule po_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (f n) <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 3. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp, rule is_ub_lub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        ordinal_rec0 z s lub (oLimit f) =\n        lub (\\<lambda>n. ordinal_rec0 z s lub (f n));\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x <<\n                         ordinal_rec0 z s lub (oLimit f)\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp add: po_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub (oLimit f) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp only: ordinal_rec0_limit_ordinal strict_mono_limit_ordinal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f\\<rbrakk>\n       \\<Longrightarrow> (THE y.\n                             \\<forall>fa.\n                                (\\<forall>n. fa n < oLimit fa) \\<and>\n                                oLimit fa = oLimit f \\<longrightarrow>\n                                lub (\\<lambda>n.\n  ordinal_rec0 z s lub (fa n)) =\n                                y) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (rule the_equality, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (rule lub_cong, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m. f m < oLimit f\n 2. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit fa = oLimit f\n 3. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y<oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y\n 4. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp add: strict_mono_less_oLimit)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit fa = oLimit f\n 2. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y<oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y\n 3. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x fa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y<oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y\n 2. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x fa y xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f; y < oLimit f; xa \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa << ordinal_rec0 z s lub y\n 2. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule less_oLimitD, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x fa y xa n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f; xa \\<le> y; y < f n\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa << ordinal_rec0 z s lub y\n 2. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule order_less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x fa y xa n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f; xa \\<le> y; y \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub xa << ordinal_rec0 z s lub y\n 2. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<le> f n \\<longrightarrow>\n           (\\<forall>x\\<le>y.\n               ordinal_rec0 z s lub x << ordinal_rec0 z s lub y);\n        x \\<le> oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule_tac x=f in spec, simp add: strict_mono_less_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in omega_complete) ordinal_rec0_mono:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"x \\<le> y \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    ordinal_rec0 z s lub x << ordinal_rec0 z s lub y", "apply (rule ordinal_rec0_mono_lemma[OF s, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<le> y \\<Longrightarrow> y \\<le> ?w\n 2. x \\<le> y \\<Longrightarrow> x \\<le> y", "apply (rule order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<le> y", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in omega_complete) ordinal_rec0_oLimit:\nassumes s: \"\\<forall>p x. x << s p x\"\nshows \"ordinal_rec0 z s lub (oLimit f) =\n         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (case_tac \"\\<forall>n. f n < oLimit f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp add: ordinal_rec0_limit_ordinal limit_ordinal_oLimitI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. f n < oLimit f \\<Longrightarrow>\n    (THE y.\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (rule the_equality, clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) =\n                         lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 3. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (rule lub_cong, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y<oLimit f.\n                            \\<forall>x\\<le>y.\n                               ordinal_rec0 z s lub x <<\n                               ordinal_rec0 z s lub y\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 3. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa y x.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; \\<forall>n. fa n < oLimit fa;\n        oLimit fa = oLimit f; y < oLimit f; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> ordinal_rec0 z s lub x << ordinal_rec0 z s lub y\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 3. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (erule ordinal_rec0_mono[OF s])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n. f n < oLimit f;\n        \\<forall>fa.\n           (\\<forall>n. fa n < oLimit fa) \\<and>\n           oLimit fa = oLimit f \\<longrightarrow>\n           lub (\\<lambda>n. ordinal_rec0 z s lub (fa n)) = y\\<rbrakk>\n       \\<Longrightarrow> y = lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (drule_tac x=f in spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n < oLimit f) \\<Longrightarrow>\n    ordinal_rec0 z s lub (oLimit f) =\n    lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (simp add: linorder_not_less, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       ordinal_rec0 z s lub (oLimit f) =\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n))", "apply (rule po_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       ordinal_rec0 z s lub (oLimit f) <<\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<And>n.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n)) <<\n       ordinal_rec0 z s lub (oLimit f)", "apply (erule po_trans[OF ordinal_rec0_mono[OF s]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ordinal_rec0 z s lub (f n) <<\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n))\n 2. \\<And>n.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n)) <<\n       ordinal_rec0 z s lub (oLimit f)", "apply (rule is_ub_lub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       lub (\\<lambda>n. ordinal_rec0 z s lub (f n)) <<\n       ordinal_rec0 z s lub (oLimit f)", "apply (rule is_lub_lub[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       oLimit f \\<le> f n \\<Longrightarrow>\n       ordinal_rec0 z s lub (f na) << ordinal_rec0 z s lub (oLimit f)", "apply (rule ordinal_rec0_mono[OF s le_oLimit])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Recursive definitions for @{typ \"ordinal => ordinal\"}\\<close>"], ["", "definition\n  ordinal_rec ::\n    \"[ordinal, ordinal \\<Rightarrow> ordinal \\<Rightarrow> ordinal, ordinal] \\<Rightarrow> ordinal\" where\n  \"ordinal_rec z s = ordinal_rec0 z s oLimit\""], ["", "lemma omega_complete_oLimit: \"omega_complete (\\<le>) oLimit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omega_complete (\\<le>) oLimit", "apply (rule omega_complete.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. porder (\\<le>)\n 2. omega_complete_axioms (\\<le>) oLimit", "apply (rule porder_order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. omega_complete_axioms (\\<le>) oLimit", "apply (rule omega_complete_axioms.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n. f n \\<le> oLimit f\n 2. \\<And>f x. \\<forall>n. f n \\<le> x \\<Longrightarrow> oLimit f \\<le> x", "apply (rule le_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x. \\<forall>n. f n \\<le> x \\<Longrightarrow> oLimit f \\<le> x", "apply (erule oLimit_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_rec_0 [simp]: \"ordinal_rec z s 0 = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec z s 0 = z", "by (unfold ordinal_rec_def, rule ordinal_rec0_0)"], ["", "lemma ordinal_rec_oSuc [simp]:\n\"ordinal_rec z s (oSuc x) = s x (ordinal_rec z s x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec z s (oSuc x) = s x (ordinal_rec z s x)", "by (unfold ordinal_rec_def, rule ordinal_rec0_oSuc)"], ["", "lemma ordinal_rec_oLimit:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"ordinal_rec z s (oLimit f) = oLimit (\\<lambda>n. ordinal_rec z s (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec z s (oLimit f) = oLimit (\\<lambda>n. ordinal_rec z s (f n))", "apply (unfold ordinal_rec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec0 z s oLimit (oLimit f) =\n    oLimit (\\<lambda>n. ordinal_rec0 z s oLimit (f n))", "apply (rule omega_complete.ordinal_rec0_oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. omega_complete ?le oLimit\n 2. \\<forall>p x. ?le x (s p x)", "apply (rule omega_complete_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p x. x \\<le> s p x", "apply (rule s)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma continuous_ordinal_rec:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"continuous (ordinal_rec z s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (ordinal_rec z s)", "apply (rule continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       ordinal_rec z s (oLimit f) =\n       oLimit (\\<lambda>n. ordinal_rec z s (f n))\n 2. \\<And>x. ordinal_rec z s x \\<le> ordinal_rec z s (oSuc x)", "apply (rule ordinal_rec_oLimit[OF s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ordinal_rec z s x \\<le> ordinal_rec z s (oSuc x)", "apply (simp add: s)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_ordinal_rec:\nassumes s: \"\\<forall>p x. x \\<le> s p x\"\nshows \"mono (ordinal_rec z s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (ordinal_rec z s)", "apply (rule continuous.mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (ordinal_rec z s)", "apply (rule continuous_ordinal_rec[OF s])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_ordinal_rec:\nassumes s: \"\\<forall>p x. x < s p x\"\nshows \"normal (ordinal_rec z s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (ordinal_rec z s)", "apply (rule normalI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       ordinal_rec z s (oLimit f) =\n       oLimit (\\<lambda>n. ordinal_rec z s (f n))\n 2. \\<And>x. ordinal_rec z s x < ordinal_rec z s (oSuc x)", "apply (rule ordinal_rec_oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       \\<forall>p x. x \\<le> s p x\n 2. \\<And>x. ordinal_rec z s x < ordinal_rec z s (oSuc x)", "apply (simp add: s order_less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ordinal_rec z s x < ordinal_rec z s (oSuc x)", "apply (simp add: s)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}