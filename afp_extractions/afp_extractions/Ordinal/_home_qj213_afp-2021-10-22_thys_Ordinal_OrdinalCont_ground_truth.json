{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalCont.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemmas continuousD = continuous.cont", "lemma (in continuous) mono: \"mono F\"", "lemma (in continuous) monoD: \"x \\<le> y \\<Longrightarrow> F x \\<le> F y\"", "lemma continuousI:\nassumes lim: \"\\<And>f. strict_mono f \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\"\nassumes suc: \"\\<And>x. F x \\<le> F (oSuc x)\"\nshows \"continuous F\"", "lemma (in normal) mono: \"mono F\"", "lemma (in normal) continuous: \"continuous F\"", "lemma (in normal) monoD: \"x \\<le> y \\<Longrightarrow> F x \\<le> F y\"", "lemma (in normal) strict_monoD: \"x < y \\<Longrightarrow> F x < F y\"", "lemma (in normal) cancel_eq: \"(F x = F y) = (x = y)\"", "lemma (in normal) cancel_less: \"(F x < F y) = (x < y)\"", "lemma (in normal) cancel_le: \"(F x \\<le> F y) = (x \\<le> y)\"", "lemma (in normal) oLimit: \"F (oLimit f) = oLimit (\\<lambda>n. F (f n))\"", "lemma (in normal) increasing: \"x \\<le> F x\"", "lemma normalI:\nassumes lim: \"\\<And>f. strict_mono f \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\"\nassumes suc: \"\\<And>x. F x < F (oSuc x)\"\nshows \"normal F\"", "lemma normal_range_le:\n\"\\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk> \\<Longrightarrow> F x \\<le> G x\"", "lemma normal_range_eq:\n\"\\<lbrakk>normal F; normal G; range F = range G\\<rbrakk> \\<Longrightarrow> F = G\""], "translations": [["", "lemmas continuousD = continuous.cont"], ["", "lemma (in continuous) mono: \"mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> F x \\<le> F y", "apply (cut_tac f=\"case_nat x (\\<lambda>n. y)\" in cont)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (subgoal_tac \"\\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y));\n        \\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y.\n                            oLimit (case_nat x (\\<lambda>n. y)) = max x y", "apply (subgoal_tac \"\\<forall>x y n. F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y)\n                          = (case n of 0 \\<Rightarrow> F x | Suc n \\<Rightarrow> F y)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y));\n        \\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y;\n        \\<forall>x y n.\n           F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y) =\n           (case n of 0 \\<Rightarrow> F x\n            | Suc n \\<Rightarrow> F y)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y));\n        \\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y n.\n                            F (case n of 0 \\<Rightarrow> x\n                               | Suc n \\<Rightarrow> y) =\n                            (case n of 0 \\<Rightarrow> F x\n                             | Suc n \\<Rightarrow> F y)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y.\n                            oLimit (case_nat x (\\<lambda>n. y)) = max x y", "apply (simp add: max_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F y = (if F x \\<le> F y then F y else F x);\n        \\<forall>x y.\n           oLimit (case_nat x (\\<lambda>n. y)) =\n           (if x \\<le> y then y else x);\n        \\<forall>x y n.\n           F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y) =\n           (case n of 0 \\<Rightarrow> F x\n            | Suc n \\<Rightarrow> F y)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y));\n        \\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y n.\n                            F (case n of 0 \\<Rightarrow> x\n                               | Suc n \\<Rightarrow> y) =\n                            (case n of 0 \\<Rightarrow> F x\n                             | Suc n \\<Rightarrow> F y)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y.\n                            oLimit (case_nat x (\\<lambda>n. y)) = max x y", "apply (erule ssubst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x | Suc n \\<Rightarrow> y));\n        \\<forall>x y. oLimit (case_nat x (\\<lambda>n. y)) = max x y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y n.\n                            F (case n of 0 \\<Rightarrow> x\n                               | Suc n \\<Rightarrow> y) =\n                            (case n of 0 \\<Rightarrow> F x\n                             | Suc n \\<Rightarrow> F y)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y.\n                            oLimit (case_nat x (\\<lambda>n. y)) = max x y", "apply (simp split: nat.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x y.\n                            oLimit (case_nat x (\\<lambda>n. y)) = max x y", "apply (clarify, rule order_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> oLimit (case_nat xa (\\<lambda>n. ya))\n                         \\<le> max xa ya\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> max xa ya\n                         \\<le> oLimit (case_nat xa (\\<lambda>n. ya))", "apply (rule oLimit_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            (case n of 0 \\<Rightarrow> xa\n                             | Suc n \\<Rightarrow> ya)\n                            \\<le> max xa ya\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> max xa ya\n                         \\<le> oLimit (case_nat xa (\\<lambda>n. ya))", "apply (simp split: nat.split add: max.cobounded1 max.cobounded2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> max xa ya\n                         \\<le> oLimit (case_nat xa (\\<lambda>n. ya))", "apply (simp, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> oLimit (case_nat xa (\\<lambda>n. ya))\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> ya \\<le> oLimit (case_nat xa (\\<lambda>n. ya))", "apply (rule_tac n=0 in le_oLimitI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<le> y;\n        F (oLimit (case_nat x (\\<lambda>n. y))) =\n        oLimit\n         (\\<lambda>n.\n             F (case n of 0 \\<Rightarrow> x\n                | Suc n \\<Rightarrow> y))\\<rbrakk>\n       \\<Longrightarrow> ya \\<le> oLimit (case_nat xa (\\<lambda>n. ya))", "apply (rule_tac n=1 in le_oLimitI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in continuous) monoD: \"x \\<le> y \\<Longrightarrow> F x \\<le> F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> F x \\<le> F y", "by (erule monoD[OF mono])"], ["", "lemma continuousI:\nassumes lim: \"\\<And>f. strict_mono f \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\"\nassumes suc: \"\\<And>x. F x \\<le> F (oSuc x)\"\nshows \"continuous F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous F", "apply (subgoal_tac \"mono F\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. mono F \\<Longrightarrow> continuous F\n 2. mono F", "apply (rule continuous.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       mono F \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 2. mono F", "apply (case_tac \"\\<forall>n. f n < oLimit f\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 3. mono F", "apply (subgoal_tac \"oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f;\n        oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (erule subst)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> F (oLimit (\\<lambda>n. f (make_mono f n))) =\n                         oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (rule trans[OF lim])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> OrdinalInduct.strict_mono\n                          (\\<lambda>n. f (make_mono f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. F (f (make_mono f n))) =\n                         oLimit (\\<lambda>n. F (f n))\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 4. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 5. mono F", "apply (erule strict_mono_f_make_mono)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. F (f (make_mono f n))) =\n                         oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (rule oLimit_eqI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. F (f (make_mono f n)) \\<le> F (f m)\n 2. \\<And>f n.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. F (f n) \\<le> F (f (make_mono f m))\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 4. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 5. mono F", "apply (rule exI, rule order_refl)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. F (f n) \\<le> F (f (make_mono f m))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (rule_tac x=n in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> F (f (make_mono f n))\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (erule monoD)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f n.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow>\n       f n \\<le> f (make_mono f n)\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (rule le_f_make_mono, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f n.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow> n \\<le> make_mono f n\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (induct_tac n, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f n na.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; na \\<le> make_mono f na\\<rbrakk>\n       \\<Longrightarrow> Suc na \\<le> make_mono f (Suc na)\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (simp add: Suc_le_eq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f na.\n       \\<lbrakk>\\<forall>n. f n < oLimit f; na \\<le> make_mono f na\\<rbrakk>\n       \\<Longrightarrow> na < make_mono f (Suc na)\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f na.\n       \\<forall>n. f n < oLimit f \\<Longrightarrow>\n       make_mono f na < make_mono f (Suc na)\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 3. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 4. mono F", "apply (erule make_mono_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<forall>n. f n < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (make_mono f n)) = oLimit f\n 2. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 3. mono F", "apply (erule oLimit_make_mono_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>mono F; \\<not> (\\<forall>n. f n < oLimit f)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 2. mono F", "apply (clarsimp simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; oLimit f \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\n 2. mono F", "apply (drule order_antisym[OF _ le_oLimit], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; oLimit f = f n\\<rbrakk>\n       \\<Longrightarrow> F (f n) = oLimit (\\<lambda>n. F (f n))\n 2. mono F", "apply (rule order_antisym[OF le_oLimit])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>mono F; oLimit f = f n\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. F (f n)) \\<le> F (f n)\n 2. mono F", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n na.\n       \\<lbrakk>mono F; oLimit f = f n\\<rbrakk>\n       \\<Longrightarrow> F (f na) \\<le> F (f n)\n 2. mono F", "apply (erule monoD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n na. oLimit f = f n \\<Longrightarrow> f na \\<le> f n\n 2. mono F", "apply (erule subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n na. f na \\<le> oLimit f\n 2. mono F", "apply (rule le_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F", "apply (subgoal_tac \"\\<forall>y x. x \\<le> y \\<longrightarrow> F x \\<le> F y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>y x.\n       x \\<le> y \\<longrightarrow> F x \\<le> F y \\<Longrightarrow>\n    mono F\n 2. \\<forall>y x. x \\<le> y \\<longrightarrow> F x \\<le> F y", "apply (rule monoI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y x. x \\<le> y \\<longrightarrow> F x \\<le> F y", "apply (rule allI, rule_tac a=y in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y. \\<forall>x\\<le>0. F x \\<le> F 0\n 2. \\<And>y x.\n       \\<forall>xa\\<le>x. F xa \\<le> F x \\<Longrightarrow>\n       \\<forall>xa\\<le>oSuc x. F xa \\<le> F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<forall>xa\\<le>x. F xa \\<le> F x \\<Longrightarrow>\n       \\<forall>xa\\<le>oSuc x. F xa \\<le> F (oSuc x)\n 2. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply (clarsimp, erule le_oSucE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa\\<le>x. F xa \\<le> F x; xa \\<le> x\\<rbrakk>\n       \\<Longrightarrow> F xa \\<le> F (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa\\<le>x. F xa \\<le> F x; xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> F xa \\<le> F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> x; F xa \\<le> F x\\<rbrakk>\n       \\<Longrightarrow> F xa \\<le> F (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa\\<le>x. F xa \\<le> F x; xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> F xa \\<le> F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply (erule order_trans, rule suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa\\<le>x. F xa \\<le> F x; xa = oSuc x\\<rbrakk>\n       \\<Longrightarrow> F xa \\<le> F (oSuc x)\n 2. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x \\<le> f n \\<longrightarrow> F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<le>oLimit f. F x \\<le> F (oLimit f)", "apply (clarsimp simp add: lim, erule le_oLimitE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x \\<le> f n;\n        \\<forall>x\\<le>f n. F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))", "apply (drule_tac x=x in  spec, drule mp, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x \\<le> f n;\n        F x \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))", "apply (erule order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x \\<le> f n\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oLimit (\\<lambda>n. F (f n))\n 2. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))", "apply (rule le_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x \\<le> f n \\<longrightarrow> F x \\<le> F (f n);\n        x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> oLimit (\\<lambda>n. F (f n))", "apply (simp add: lim)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Normal functions\\<close>"], ["", "locale normal = continuous +\n  assumes strict: \"strict_mono F\""], ["", "lemma (in normal) mono: \"mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F", "by (rule mono)"], ["", "lemma (in normal) continuous: \"continuous F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous F", "by (rule continuous.intro, rule cont)"], ["", "lemma (in normal) monoD: \"x \\<le> y \\<Longrightarrow> F x \\<le> F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> F x \\<le> F y", "by (rule monoD)"], ["", "lemma (in normal) strict_monoD: \"x < y \\<Longrightarrow> F x < F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> F x < F y", "by (erule strict_monoD[OF strict])"], ["", "lemma (in normal) cancel_eq: \"(F x = F y) = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F x = F y) = (x = y)", "by (rule strict_mono_cancel_eq[OF strict])"], ["", "lemma (in normal) cancel_less: \"(F x < F y) = (x < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F x < F y) = (x < y)", "by (rule strict_mono_cancel_less[OF strict])"], ["", "lemma (in normal) cancel_le: \"(F x \\<le> F y) = (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F x \\<le> F y) = (x \\<le> y)", "by (rule strict_mono_cancel_le[OF strict])"], ["", "lemma (in normal) oLimit: \"F (oLimit f) = oLimit (\\<lambda>n. F (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (oLimit f) = oLimit (\\<lambda>n. F (f n))", "by (rule cont)"], ["", "lemma (in normal) increasing: \"x \\<le> F x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> F x", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. 0 \\<le> F 0\n 2. \\<And>x. x \\<le> F x \\<Longrightarrow> oSuc x \\<le> F (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> F x \\<Longrightarrow> oSuc x \\<le> F (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> F (oLimit f)", "apply (rule oSuc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> F x \\<Longrightarrow> x < F (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> F (oLimit f)", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. F x < F (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> F (oLimit f)", "apply (rule strict_monoD[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> F (oLimit f)", "apply (simp add: oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<le> oLimit (\\<lambda>n. F (f n))", "apply (rule oLimit_leI, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> f n \\<le> oLimit (\\<lambda>n. F (f n))", "apply (rule order_trans, erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. f n \\<le> F (f n)\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oLimit (\\<lambda>n. F (f n))", "apply (rule le_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normalI:\nassumes lim: \"\\<And>f. strict_mono f \\<Longrightarrow> F (oLimit f) = oLimit (\\<lambda>n. F (f n))\"\nassumes suc: \"\\<And>x. F x < F (oSuc x)\"\nshows \"normal F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal F", "apply (rule normal.intro[OF _ normal_axioms.intro])"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous F\n 2. OrdinalInduct.strict_mono F", "apply (simp add: continuousI order_less_imp_le suc lim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalInduct.strict_mono F", "apply (subgoal_tac \"\\<forall>y x. x < y \\<longrightarrow> F x < F y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>y x. x < y \\<longrightarrow> F x < F y \\<Longrightarrow>\n    OrdinalInduct.strict_mono F\n 2. \\<forall>y x. x < y \\<longrightarrow> F x < F y", "apply (rule strict_monoI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y x. x < y \\<longrightarrow> F x < F y", "apply (rule allI, rule_tac a=y in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y. \\<forall>x<0. F x < F 0\n 2. \\<And>y x.\n       \\<forall>xa<x. F xa < F x \\<Longrightarrow>\n       \\<forall>xa<oSuc x. F xa < F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<forall>xa<x. F xa < F x \\<Longrightarrow>\n       \\<forall>xa<oSuc x. F xa < F (oSuc x)\n 2. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply (clarsimp, erule less_oSucE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa<x. F xa < F x; xa < x\\<rbrakk>\n       \\<Longrightarrow> F xa < F (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa<x. F xa < F x; xa = x\\<rbrakk>\n       \\<Longrightarrow> F xa < F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>xa < x; F xa < F x\\<rbrakk>\n       \\<Longrightarrow> F xa < F (oSuc x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa<x. F xa < F x; xa = x\\<rbrakk>\n       \\<Longrightarrow> F xa < F (oSuc x)\n 3. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply (erule order_less_trans, rule suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>xa<x. F xa < F x; xa = x\\<rbrakk>\n       \\<Longrightarrow> F xa < F (oSuc x)\n 2. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply (simp add: suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f. F x < F (oLimit f)", "apply (clarsimp simp add: lim, erule less_oLimitE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x. x < f n \\<longrightarrow> F x < F (f n);\n        x < f n\\<rbrakk>\n       \\<Longrightarrow> F x < oLimit (\\<lambda>n. F (f n))", "apply (drule spec, drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n; F x < F (f n)\\<rbrakk>\n       \\<Longrightarrow> F x < oLimit (\\<lambda>n. F (f n))", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oLimit (\\<lambda>n. F (f n))", "apply (rule le_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_range_le:\n\"\\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk> \\<Longrightarrow> F x \\<le> G x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> G x", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> G 0\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> G (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (subgoal_tac \"G 0 \\<in> range F\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n     G 0 \\<in> range F\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> G 0\n 2. \\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk>\n    \\<Longrightarrow> G 0 \\<in> range F\n 3. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> G (oSuc x)\n 4. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (clarsimp simp add: normal.cancel_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk>\n    \\<Longrightarrow> G 0 \\<in> range F\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> G (oSuc x)\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (erule subsetD, rule rangeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> G (oSuc x)\n 2. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (subgoal_tac \"G (oSuc x) \\<in> range F\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x; G (oSuc x) \\<in> range F\\<rbrakk>\n       \\<Longrightarrow> F (oSuc x) \\<le> G (oSuc x)\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (clarsimp simp add: normal.cancel_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x; G (oSuc x) = F xa\\<rbrakk>\n       \\<Longrightarrow> oSuc x \\<le> xa\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (rename_tac y)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x; G (oSuc x) = F y\\<rbrakk>\n       \\<Longrightarrow> oSuc x \\<le> y\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (rule oSuc_leI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x; G (oSuc x) = F y\\<rbrakk>\n       \\<Longrightarrow> x < y\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (subgoal_tac \"F x < F y\", simp add: normal.cancel_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x; G (oSuc x) = F y\\<rbrakk>\n       \\<Longrightarrow> F x < F y\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        G (oSuc x) = F y\\<rbrakk>\n       \\<Longrightarrow> G x < F y\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (erule subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F\\<rbrakk>\n       \\<Longrightarrow> G x < G (oSuc x)\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 3. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (simp add: normal.cancel_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        F x \\<le> G x\\<rbrakk>\n       \\<Longrightarrow> G (oSuc x) \\<in> range F\n 2. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (erule subsetD, rule rangeI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (oLimit f) \\<le> G (oLimit f)", "apply (simp only: normal.oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. F (f n))\n                         \\<le> oLimit (\\<lambda>n. G (f n))", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> oLimit (\\<lambda>n. G (f n))", "apply (rule_tac n=n in le_oLimitI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>normal F; normal G; range G \\<subseteq> range F;\n        OrdinalInduct.strict_mono f;\n        \\<forall>n. F (f n) \\<le> G (f n)\\<rbrakk>\n       \\<Longrightarrow> F (f n) \\<le> G (f n)", "apply (erule spec)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_range_eq:\n\"\\<lbrakk>normal F; normal G; range F = range G\\<rbrakk> \\<Longrightarrow> F = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normal F; normal G; range F = range G\\<rbrakk>\n    \\<Longrightarrow> F = G", "apply (rule ext, rule order_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal F; normal G; range F = range G\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> G x\n 2. \\<And>x.\n       \\<lbrakk>normal F; normal G; range F = range G\\<rbrakk>\n       \\<Longrightarrow> G x \\<le> F x", "apply (simp add: normal_range_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>normal F; normal G; range F = range G\\<rbrakk>\n       \\<Longrightarrow> G x \\<le> F x", "apply (simp add: normal_range_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}