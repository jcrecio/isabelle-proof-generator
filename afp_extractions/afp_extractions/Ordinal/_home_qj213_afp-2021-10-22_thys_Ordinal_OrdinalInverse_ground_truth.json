{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalInverse.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemma (in normal) oInv_ex:\n\"F 0 \\<le> a \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\"", "lemma oInv_uniq:\n\"\\<lbrakk>mono (F::ordinal \\<Rightarrow> ordinal);\n  F x \\<le> a \\<and> a < F (oSuc x); F y \\<le> a \\<and> a < F (oSuc y)\\<rbrakk>\n \\<Longrightarrow> x = y\"", "lemma (in normal) oInv_bounds:\n\"F 0 \\<le> a \\<Longrightarrow> F (oInv F a) \\<le> a \\<and> a < F (oSuc (oInv F a))\"", "lemma (in normal) oInv_bound1:\n\"F 0 \\<le> a \\<Longrightarrow> F (oInv F a) \\<le> a\"", "lemma (in normal) oInv_bound2:\n\"a < F (oSuc (oInv F a))\"", "lemma (in normal) oInv_equality:\n\"\\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk> \\<Longrightarrow> oInv F a = x\"", "lemma (in normal) oInv_inverse: \"oInv F (F x) = x\"", "lemma (in normal) oInv_equality': \"a = F x \\<Longrightarrow> oInv F a = x\"", "lemma (in normal) oInv_eq_0: \"a \\<le> F 0 \\<Longrightarrow> oInv F a = 0\"", "lemma (in normal) oInv_less:\n\"\\<lbrakk>F 0 \\<le> a; a < F z\\<rbrakk> \\<Longrightarrow> oInv F a < z\"", "lemma (in normal) le_oInv:\n\"F z \\<le> a \\<Longrightarrow> z \\<le> oInv F a\"", "lemma (in normal) less_oInvD:\n\"x < oInv F a \\<Longrightarrow> F (oSuc x) \\<le> a\"", "lemma (in normal) oInv_le:\n\"a < F (oSuc x) \\<Longrightarrow> oInv F a \\<le> x\"", "lemma (in normal) mono_oInv: \"mono (oInv F)\"", "lemma (in normal) oInv_decreasing:\n\"F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> x\"", "lemma ordinal_divI: \"\\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x div y = (q::ordinal)\"", "lemma ordinal_times_div_le: \"y * (x div y) \\<le> (x::ordinal)\"", "lemma ordinal_less_times_div_plus:\n\"0 < y \\<Longrightarrow> x < y * (x div y) + (y::ordinal)\"", "lemma ordinal_modI: \"\\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x mod y = (r::ordinal)\"", "lemma ordinal_mod_less: \"0 < y \\<Longrightarrow> x mod y < (y::ordinal)\"", "lemma ordinal_div_plus_mod: \"y * (x div y) + (x mod y) = (x::ordinal)\"", "lemma ordinal_div_less: \"x < y * z \\<Longrightarrow> x div y < (z::ordinal)\"", "lemma ordinal_le_div: \"\\<lbrakk>0 < y; y * z \\<le> x\\<rbrakk> \\<Longrightarrow> (z::ordinal) \\<le> x div y\"", "lemma ordinal_mono_div: \"mono (\\<lambda>x. x div y::ordinal)\"", "lemma ordinal_div_monoL: \"x \\<le> x' \\<Longrightarrow> x div y \\<le> x' div (y::ordinal)\"", "lemma ordinal_div_decreasing: \"(x::ordinal) div y \\<le> x\"", "lemma ordinal_div_0: \"x div 0 = (0::ordinal)\"", "lemma ordinal_mod_0: \"x mod 0 = (x::ordinal)\"", "lemma ordinal_div_1 [simp]: \"x div oSuc 0 = x\"", "lemma ordinal_mod_1 [simp]: \"x mod oSuc 0 = 0\"", "lemma ordinal_div_self [simp]: \"0 < x \\<Longrightarrow> x div x = (1::ordinal)\"", "lemma ordinal_mod_self [simp]: \"x mod x = (0::ordinal)\"", "lemma ordinal_div_greater [simp]: \"x < y \\<Longrightarrow> x div y = (0::ordinal)\"", "lemma ordinal_mod_greater [simp]: \"x < y \\<Longrightarrow> x mod y = (x::ordinal)\"", "lemma ordinal_0_div [simp]: \"0 div x = (0::ordinal)\"", "lemma ordinal_0_mod [simp]: \"0 mod x = (0::ordinal)\"", "lemma ordinal_1_dvd [simp]: \"oSuc 0 dvd x\"", "lemma ordinal_dvd_mod: \"y dvd x = (x mod y = (0::ordinal))\"", "lemma ordinal_dvd_times_div:\n\"y dvd x \\<Longrightarrow> y * (x div y) = (x::ordinal)\"", "lemma ordinal_dvd_oLimit: \"\\<forall>n. x dvd f n \\<Longrightarrow> x dvd oLimit f\"", "lemma ordinal_oLogI:\n\"\\<lbrakk>b ** y \\<le> x; x < b ** y * b\\<rbrakk> \\<Longrightarrow> oLog b x = y\"", "lemma ordinal_exp_oLog_le:\n\"\\<lbrakk>0 < x; oSuc 0 < b\\<rbrakk> \\<Longrightarrow> b ** (oLog b x) \\<le> x\"", "lemma ordinal_less_exp_oLog:\n\"oSuc 0 < b \\<Longrightarrow> x < b ** (oLog b x) * b\"", "lemma ordinal_oLog_less:\n\"\\<lbrakk>0 < x; oSuc 0 < b; x < b ** y\\<rbrakk> \\<Longrightarrow> oLog b x < y\"", "lemma ordinal_le_oLog:\n\"\\<lbrakk>oSuc 0 < b; b ** y \\<le> x\\<rbrakk> \\<Longrightarrow> y \\<le> oLog b x\"", "lemma ordinal_oLogI2:\n\"\\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b; r < b ** y\\<rbrakk> \\<Longrightarrow> oLog b x = y\"", "lemma ordinal_div_exp_oLog_less:\n\"oSuc 0 < b \\<Longrightarrow> x div (b ** oLog b x) < b\"", "lemma ordinal_oLog_base_0: \"oLog 0 x = 0\"", "lemma ordinal_oLog_base_1: \"oLog (oSuc 0) x = 0\"", "lemma ordinal_oLog_0: \"oLog b 0 = 0\"", "lemma ordinal_oLog_exp: \"oSuc 0 < b \\<Longrightarrow> oLog b (b ** x) = x\"", "lemma ordinal_oLog_self: \"oSuc 0 < b \\<Longrightarrow> oLog b b = oSuc 0\"", "lemma ordinal_mono_oLog: \"mono (oLog b)\"", "lemma ordinal_oLog_monoR: \"x \\<le> y \\<Longrightarrow> oLog b x \\<le> oLog b y\"", "lemma ordinal_oLog_decreasing: \"oLog b x \\<le> x\""], "translations": [["", "lemma (in normal) oInv_ex:\n\"F 0 \\<le> a \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)", "apply (subgoal_tac \"\\<forall>z. a < F z \\<longrightarrow> (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F 0 \\<le> a;\n     \\<forall>z.\n        a < F z \\<longrightarrow>\n        (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\n 2. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply (drule_tac x=\"oSuc a\" in spec, drule mp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. F 0 \\<le> a \\<Longrightarrow> a < F (oSuc a)\n 2. \\<lbrakk>F 0 \\<le> a;\n     \\<exists>q<oSuc a. F q \\<le> a \\<and> a < F (oSuc q)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\n 3. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule_tac y=\"F a\" in order_le_less_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. F 0 \\<le> a \\<Longrightarrow> a \\<le> F a\n 2. F 0 \\<le> a \\<Longrightarrow> F a < F (oSuc a)\n 3. \\<lbrakk>F 0 \\<le> a;\n     \\<exists>q<oSuc a. F q \\<le> a \\<and> a < F (oSuc q)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\n 4. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule increasing)"], ["proof (prove)\ngoal (3 subgoals):\n 1. F 0 \\<le> a \\<Longrightarrow> F a < F (oSuc a)\n 2. \\<lbrakk>F 0 \\<le> a;\n     \\<exists>q<oSuc a. F q \\<le> a \\<and> a < F (oSuc q)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\n 3. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule strict_monoD[OF less_oSuc])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F 0 \\<le> a;\n     \\<exists>q<oSuc a. F q \\<le> a \\<and> a < F (oSuc q)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q. F q \\<le> a \\<and> a < F (oSuc q)\n 2. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    \\<forall>z.\n       a < F z \\<longrightarrow>\n       (\\<exists>q<z. F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule allI, rule_tac a=z in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       F 0 \\<le> a \\<Longrightarrow>\n       a < F 0 \\<longrightarrow>\n       (\\<exists>q<0. F q \\<le> a \\<and> a < F (oSuc q))\n 2. \\<And>z x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oSuc x) \\<longrightarrow>\n                         (\\<exists>q<oSuc x.\n                             F q \\<le> a \\<and> a < F (oSuc q))\n 3. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oSuc x) \\<longrightarrow>\n                         (\\<exists>q<oSuc x.\n                             F q \\<le> a \\<and> a < F (oSuc q))\n 2. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 2. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply (case_tac \"a < F x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x); a < F x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 2. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x); \\<not> a < F x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 3. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x q.\n       \\<lbrakk>F 0 \\<le> a; a < F (oSuc x); a < F x; q < x; F q \\<le> a;\n        a < F (oSuc q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 2. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x); \\<not> a < F x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 3. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule_tac x=q in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x q.\n       \\<lbrakk>F 0 \\<le> a; a < F (oSuc x); a < F x; q < x; F q \\<le> a;\n        a < F (oSuc q)\\<rbrakk>\n       \\<Longrightarrow> q < oSuc x \\<and> F q \\<le> a \\<and> a < F (oSuc q)\n 2. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x); \\<not> a < F x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 3. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply (simp add: order_less_trans[OF _ less_oSuc])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>F 0 \\<le> a;\n        a < F x \\<longrightarrow>\n        (\\<exists>q<x. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (oSuc x); \\<not> a < F x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oSuc x.\n                            F q \\<le> a \\<and> a < F (oSuc q)\n 2. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply (rule_tac x=x in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q))\\<rbrakk>\n       \\<Longrightarrow> a < F (oLimit f) \\<longrightarrow>\n                         (\\<exists>q<oLimit f.\n                             F q \\<le> a \\<and> a < F (oSuc q))", "apply (clarsimp simp add: oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q));\n        a < oLimit (\\<lambda>n. F (f n))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oLimit f.\n                            F q \\<le> a \\<and> a < F (oSuc q)", "apply (drule less_oLimitD, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           a < F (f n) \\<longrightarrow>\n           (\\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q));\n        a < F (f n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oLimit f.\n                            F q \\<le> a \\<and> a < F (oSuc q)", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f; a < F (f n);\n        \\<exists>q<f n. F q \\<le> a \\<and> a < F (oSuc q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q<oLimit f.\n                            F q \\<le> a \\<and> a < F (oSuc q)", "apply (clarify, rule_tac x=q in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n q.\n       \\<lbrakk>F 0 \\<le> a; OrdinalInduct.strict_mono f; a < F (f n);\n        q < f n; F q \\<le> a; a < F (oSuc q)\\<rbrakk>\n       \\<Longrightarrow> q < oLimit f \\<and>\n                         F q \\<le> a \\<and> a < F (oSuc q)", "apply (simp add: order_less_le_trans[OF _ le_oLimit])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oInv_uniq:\n\"\\<lbrakk>mono (F::ordinal \\<Rightarrow> ordinal);\n  F x \\<le> a \\<and> a < F (oSuc x); F y \\<le> a \\<and> a < F (oSuc y)\\<rbrakk>\n \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a \\<and> a < F (oSuc x);\n     F y \\<le> a \\<and> a < F (oSuc y)\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y)\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (rule_tac x=x and y=y in linorder_cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x < y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (subgoal_tac \"a < a\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x < y\\<rbrakk>\n    \\<Longrightarrow> a < a\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (erule_tac y=\"F (oSuc x)\" in order_less_le_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; F y \\<le> a; a < F (oSuc y);\n     x < y\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (rule_tac y=\"F y\" in order_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; F y \\<le> a; a < F (oSuc y);\n     x < y\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> F y\n 2. \\<lbrakk>mono F; F x \\<le> a; F y \\<le> a; a < F (oSuc y);\n     x < y\\<rbrakk>\n    \\<Longrightarrow> F y \\<le> a\n 3. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 4. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (erule monoD, erule oSuc_leI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; F y \\<le> a; a < F (oSuc y);\n     x < y\\<rbrakk>\n    \\<Longrightarrow> F y \\<le> a\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); x = y\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (subgoal_tac \"a < a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     a < F (oSuc y); y < x\\<rbrakk>\n    \\<Longrightarrow> a < a", "apply (erule_tac y=\"F (oSuc y)\" in order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     y < x\\<rbrakk>\n    \\<Longrightarrow> F (oSuc y) \\<le> a", "apply (rule_tac y=\"F x\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     y < x\\<rbrakk>\n    \\<Longrightarrow> F (oSuc y) \\<le> F x\n 2. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     y < x\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> a", "apply (erule monoD, erule oSuc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono F; F x \\<le> a; a < F (oSuc x); F y \\<le> a;\n     y < x\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> a", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  oInv :: \"(ordinal \\<Rightarrow> ordinal) \\<Rightarrow> ordinal \\<Rightarrow> ordinal\" where\n  \"oInv F a = (if F 0 \\<le> a then (THE x. F x \\<le> a \\<and> a < F (oSuc x)) else 0)\""], ["", "lemma (in normal) oInv_bounds:\n\"F 0 \\<le> a \\<Longrightarrow> F (oInv F a) \\<le> a \\<and> a < F (oSuc (oInv F a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    F (oInv F a) \\<le> a \\<and> a < F (oSuc (oInv F a))", "apply (simp add: oInv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    F (THE x. F x \\<le> a \\<and> a < F (oSuc x)) \\<le> a \\<and>\n    a < F (oSuc (THE x. F x \\<le> a \\<and> a < F (oSuc x)))", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    \\<exists>!x. F x \\<le> a \\<and> a < F (oSuc x)", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. F 0 \\<le> a \\<Longrightarrow>\n    \\<exists>x. F x \\<le> a \\<and> a < F (oSuc x)\n 2. \\<And>x y.\n       \\<lbrakk>F 0 \\<le> a; F x \\<le> a \\<and> a < F (oSuc x);\n        F y \\<le> a \\<and> a < F (oSuc y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add: oInv_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>F 0 \\<le> a; F x \\<le> a \\<and> a < F (oSuc x);\n        F y \\<le> a \\<and> a < F (oSuc y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add: oInv_uniq[OF mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oInv_bound1:\n\"F 0 \\<le> a \\<Longrightarrow> F (oInv F a) \\<le> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> a \\<Longrightarrow> F (oInv F a) \\<le> a", "by (rule oInv_bounds[THEN conjunct1])"], ["", "lemma (in normal) oInv_bound2:\n\"a < F (oSuc (oInv F a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F (oSuc (oInv F a))", "apply (case_tac \"F 0 \\<le> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. F 0 \\<le> a \\<Longrightarrow> a < F (oSuc (oInv F a))\n 2. \\<not> F 0 \\<le> a \\<Longrightarrow> a < F (oSuc (oInv F a))", "apply (simp only: oInv_bounds[THEN conjunct2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> F 0 \\<le> a \\<Longrightarrow> a < F (oSuc (oInv F a))", "apply (simp add: oInv_def, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F 0 \\<Longrightarrow> a < F (oSuc 0)", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> F (oSuc 0)", "apply (simp add: cancel_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oInv_equality:\n\"\\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk> \\<Longrightarrow> oInv F a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> oInv F a = x", "apply (subgoal_tac \"F 0 \\<le> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x); F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> oInv F a = x\n 2. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a", "apply (simp add: oInv_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x); F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> (THE x. F x \\<le> a \\<and> a < F (oSuc x)) = x\n 2. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a", "apply (rule the_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x); F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> a \\<and> a < F (oSuc x)\n 2. \\<And>xa.\n       \\<lbrakk>F x \\<le> a; a < F (oSuc x); F 0 \\<le> a;\n        F xa \\<le> a \\<and> a < F (oSuc xa)\\<rbrakk>\n       \\<Longrightarrow> xa = x\n 3. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>F x \\<le> a; a < F (oSuc x); F 0 \\<le> a;\n        F xa \\<le> a \\<and> a < F (oSuc xa)\\<rbrakk>\n       \\<Longrightarrow> xa = x\n 2. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a", "apply (simp add: oInv_uniq[OF mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a", "apply (rule_tac y=\"F x\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> F x\n 2. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> a", "apply (simp add: cancel_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F x \\<le> a; a < F (oSuc x)\\<rbrakk>\n    \\<Longrightarrow> F x \\<le> a", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oInv_inverse: \"oInv F (F x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oInv F (F x) = x", "by (rule oInv_equality, simp_all add: cancel_less)"], ["", "lemma (in normal) oInv_equality': \"a = F x \\<Longrightarrow> oInv F a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = F x \\<Longrightarrow> oInv F a = x", "by (simp add: oInv_inverse)"], ["", "lemma (in normal) oInv_eq_0: \"a \\<le> F 0 \\<Longrightarrow> oInv F a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> F 0 \\<Longrightarrow> oInv F a = 0", "apply (case_tac \"F 0 \\<le> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> F 0; F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> oInv F a = 0\n 2. \\<lbrakk>a \\<le> F 0; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> oInv F a = 0", "apply (rule oInv_equality')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> F 0; F 0 \\<le> a\\<rbrakk> \\<Longrightarrow> a = F 0\n 2. \\<lbrakk>a \\<le> F 0; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> oInv F a = 0", "apply (simp only: order_antisym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> F 0; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> oInv F a = 0", "apply (simp add: oInv_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oInv_less:\n\"\\<lbrakk>F 0 \\<le> a; a < F z\\<rbrakk> \\<Longrightarrow> oInv F a < z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F 0 \\<le> a; a < F z\\<rbrakk> \\<Longrightarrow> oInv F a < z", "apply (subst cancel_less[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F 0 \\<le> a; a < F z\\<rbrakk>\n    \\<Longrightarrow> F (oInv F a) < F z", "apply (simp only: order_le_less_trans[OF oInv_bound1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) le_oInv:\n\"F z \\<le> a \\<Longrightarrow> z \\<le> oInv F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F z \\<le> a \\<Longrightarrow> z \\<le> oInv F a", "apply (subst less_oSuc_eq_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. F z \\<le> a \\<Longrightarrow> z < oSuc (oInv F a)", "apply (subst cancel_less[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. F z \\<le> a \\<Longrightarrow> F z < F (oSuc (oInv F a))", "apply (erule order_le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F (oSuc (oInv F a))", "apply (rule oInv_bound2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) less_oInvD:\n\"x < oInv F a \\<Longrightarrow> F (oSuc x) \\<le> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < oInv F a \\<Longrightarrow> F (oSuc x) \\<le> a", "apply (case_tac \"F 0 \\<le> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < oInv F a; F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a\n 2. \\<lbrakk>x < oInv F a; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a", "apply (rule order_trans[OF _ oInv_bound1])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x < oInv F a; F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> F (oInv F a)\n 2. \\<lbrakk>x < oInv F a; F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a\n 3. \\<lbrakk>x < oInv F a; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a", "apply (simp add: cancel_le oSuc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < oInv F a; F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F 0 \\<le> a\n 2. \\<lbrakk>x < oInv F a; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < oInv F a; \\<not> F 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> F (oSuc x) \\<le> a", "apply (simp add: oInv_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oInv_le:\n\"a < F (oSuc x) \\<Longrightarrow> oInv F a \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < F (oSuc x) \\<Longrightarrow> oInv F a \\<le> x", "apply (erule contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> oInv F a \\<le> x \\<Longrightarrow> \\<not> a < F (oSuc x)", "apply (simp add: linorder_not_less linorder_not_le less_oInvD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) mono_oInv: \"mono (oInv F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (oInv F)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> oInv F x \\<le> oInv F y", "fix x y :: ordinal"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> oInv F x \\<le> oInv F y", "assume \"x \\<le> y\""], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> oInv F x \\<le> oInv F y", "show \"oInv F x \\<le> oInv F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oInv F x \\<le> oInv F y", "proof (rule linorder_le_cases [of x \"F 0\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> F 0 \\<Longrightarrow> oInv F x \\<le> oInv F y\n 2. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> oInv F y", "assume \"x \\<le> F 0\""], ["proof (state)\nthis:\n  x \\<le> F 0\n\ngoal (2 subgoals):\n 1. x \\<le> F 0 \\<Longrightarrow> oInv F x \\<le> oInv F y\n 2. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> oInv F y", "then"], ["proof (chain)\npicking this:\n  x \\<le> F 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<le> F 0\n\ngoal (1 subgoal):\n 1. oInv F x \\<le> oInv F y", "by (simp add: oInv_eq_0)"], ["proof (state)\nthis:\n  oInv F x \\<le> oInv F y\n\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> oInv F y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> oInv F y", "assume \"F 0 \\<le> x\""], ["proof (state)\nthis:\n  F 0 \\<le> x\n\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> oInv F y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. oInv F x \\<le> oInv F y", "by (rule le_oInv, simp only: \\<open>x \\<le> y\\<close> \\<open>F 0 \\<le> x\\<close> order_trans [OF oInv_bound1])"], ["proof (state)\nthis:\n  oInv F x \\<le> oInv F y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  oInv F x \\<le> oInv F y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in normal) oInv_decreasing:\n\"F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> oInv F x \\<le> x", "apply (subst cancel_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> F (oInv F x) \\<le> F x", "apply (rule_tac y=x in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. F 0 \\<le> x \\<Longrightarrow> F (oInv F x) \\<le> x\n 2. F 0 \\<le> x \\<Longrightarrow> x \\<le> F x", "apply (erule oInv_bound1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F 0 \\<le> x \\<Longrightarrow> x \\<le> F x", "apply (rule increasing)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Division\\<close>"], ["", "instantiation ordinal :: modulo\nbegin"], ["", "definition\n  div_ordinal_def:\n   \"x div y = (if 0 < y then oInv ((*) y) x else 0)\""], ["", "definition\n  mod_ordinal_def: \n   \"x mod y = ((x::ordinal) - y * (x div y))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ordinal, modulo_class)", ".."], ["", "end"], ["", "lemma ordinal_divI: \"\\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x div y = (q::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x div y = q", "apply (simp add: div_ordinal_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y * q + r; r < y; 0 < y\\<rbrakk>\n    \\<Longrightarrow> oInv ((*) y) (y * q + r) = q", "apply (simp add: normal.oInv_equality[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_times_div_le: \"y * (x div y) \\<le> (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y * (x div y) \\<le> x", "apply (simp add: div_ordinal_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> y * oInv ((*) y) x \\<le> x", "apply (erule normal.oInv_bound1[OF normal_times])"], ["proof (prove)\ngoal (1 subgoal):\n 1. y * 0 \\<le> x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_less_times_div_plus:\n\"0 < y \\<Longrightarrow> x < y * (x div y) + (y::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * (x div y) + y", "apply (simp add: div_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * oInv ((*) y) x + y", "apply (subst ordinal_times_oSuc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * oSuc (oInv ((*) y) x)", "apply (erule normal.oInv_bound2[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_modI: \"\\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x mod y = (r::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y * q + r; r < y\\<rbrakk> \\<Longrightarrow> x mod y = r", "apply (unfold mod_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y * q + r; r < y\\<rbrakk>\n    \\<Longrightarrow> x - y * (x div y) = r", "apply (rule ordinal_minusI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y * q + r; r < y\\<rbrakk>\n    \\<Longrightarrow> x = y * (x div y) + r", "apply (simp add: ordinal_divI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_mod_less: \"0 < y \\<Longrightarrow> x mod y < (y::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x mod y < y", "apply (unfold mod_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x - y * (x div y) < y", "apply (simp add: ordinal_times_div_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * (x div y) + y", "apply (simp add: div_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * oInv ((*) y) x + y", "apply (subst ordinal_times_oSuc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> x < y * oSuc (oInv ((*) y) x)", "apply (erule normal.oInv_bound2[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_plus_mod: \"y * (x div y) + (x mod y) = (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y * (x div y) + x mod y = x", "apply (simp add: mod_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y * (x div y) + (x - y * (x div y)) = x", "apply (rule ordinal_plus_minus2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y * (x div y) \\<le> x", "apply (rule ordinal_times_div_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_less: \"x < y * z \\<Longrightarrow> x div y < (z::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y * z \\<Longrightarrow> x div y < z", "apply (auto simp add: div_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y * z; 0 < y\\<rbrakk> \\<Longrightarrow> oInv ((*) y) x < z", "apply (simp add: normal.oInv_less[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_le_div: \"\\<lbrakk>0 < y; y * z \\<le> x\\<rbrakk> \\<Longrightarrow> (z::ordinal) \\<le> x div y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < y; y * z \\<le> x\\<rbrakk> \\<Longrightarrow> z \\<le> x div y", "apply (auto simp add: div_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < y; y * z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> z \\<le> oInv ((*) y) x", "apply (simp add: normal.le_oInv[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_mono_div: \"mono (\\<lambda>x. x div y::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>x. x div y)", "apply (case_tac \"y = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. y = 0 \\<Longrightarrow> mono (\\<lambda>x. x div y)\n 2. y \\<noteq> 0 \\<Longrightarrow> mono (\\<lambda>x. x div y)", "apply (simp add: div_ordinal_def monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow> mono (\\<lambda>x. x div y)", "apply (simp add: div_ordinal_def normal.mono_oInv[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_monoL: \"x \\<le> x' \\<Longrightarrow> x div y \\<le> x' div (y::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x' \\<Longrightarrow> x div y \\<le> x' div y", "by (erule monoD[OF ordinal_mono_div])"], ["", "lemma ordinal_div_decreasing: \"(x::ordinal) div y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div y \\<le> x", "apply (auto simp add: div_ordinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> oInv ((*) y) x \\<le> x", "apply (simp add: normal.oInv_decreasing[OF normal_times])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_0: \"x div 0 = (0::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div 0 = 0", "by (simp add: div_ordinal_def)"], ["", "lemma ordinal_mod_0: \"x mod 0 = (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod 0 = x", "by (simp add: mod_ordinal_def)"], ["", "subsection \\<open>Derived properties of division\\<close>"], ["", "lemma ordinal_div_1 [simp]: \"x div oSuc 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div oSuc 0 = x", "by (rule_tac r=0 in ordinal_divI, simp_all)"], ["", "lemma ordinal_mod_1 [simp]: \"x mod oSuc 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod oSuc 0 = 0", "by (rule_tac q=x in ordinal_modI, simp_all)"], ["", "lemma ordinal_div_self [simp]: \"0 < x \\<Longrightarrow> x div x = (1::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> x div x = 1", "by (rule_tac r=0 in ordinal_divI, simp_all)"], ["", "lemma ordinal_mod_self [simp]: \"x mod x = (0::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod x = 0", "apply (case_tac \"x=0\", simp add: ordinal_mod_0, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> x mod x = 0", "apply (rule_tac q=1 in ordinal_modI, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_greater [simp]: \"x < y \\<Longrightarrow> x div y = (0::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> x div y = 0", "by (rule_tac r=x in ordinal_divI, simp_all)"], ["", "lemma ordinal_mod_greater [simp]: \"x < y \\<Longrightarrow> x mod y = (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> x mod y = x", "by (rule_tac q=0 in ordinal_modI, simp_all)"], ["", "lemma ordinal_0_div [simp]: \"0 div x = (0::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 div x = 0", "by (case_tac \"x=0\", simp add: ordinal_div_0, simp)"], ["", "lemma ordinal_0_mod [simp]: \"0 mod x = (0::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 mod x = 0", "by (case_tac \"x=0\", simp add: ordinal_mod_0, simp)"], ["", "lemma ordinal_1_dvd [simp]: \"oSuc 0 dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 dvd x", "by (rule_tac k=x in dvdI, simp)"], ["", "lemma ordinal_dvd_mod: \"y dvd x = (x mod y = (0::ordinal))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y dvd x) = (x mod y = 0)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. y dvd x \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> y dvd x", "apply (erule dvdE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k. x = y * k \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> y dvd x", "apply (case_tac \"y=0\", simp add: ordinal_mod_0, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>x = y * k; 0 < y\\<rbrakk> \\<Longrightarrow> y * k mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> y dvd x", "apply (rule ordinal_modI, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod y = 0 \\<Longrightarrow> y dvd x", "apply (cut_tac x=x and y=y in ordinal_div_plus_mod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x mod y = 0; y * (x div y) + x mod y = x\\<rbrakk>\n    \\<Longrightarrow> y dvd x", "apply (rule_tac k=\"x div y\" in dvdI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_dvd_times_div:\n\"y dvd x \\<Longrightarrow> y * (x div y) = (x::ordinal)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y dvd x \\<Longrightarrow> y * (x div y) = x", "apply (cut_tac x=x and y=y in ordinal_div_plus_mod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y dvd x; y * (x div y) + x mod y = x\\<rbrakk>\n    \\<Longrightarrow> y * (x div y) = x", "apply (simp add: ordinal_dvd_mod)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_dvd_oLimit: \"\\<forall>n. x dvd f n \\<Longrightarrow> x dvd oLimit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. x dvd f n \\<Longrightarrow> x dvd oLimit f", "apply (rule_tac k=\"oLimit (\\<lambda>n. f n div x)\" in dvdI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. x dvd f n \\<Longrightarrow>\n    oLimit f = x * oLimit (\\<lambda>n. f n div x)", "apply (simp add: ordinal_dvd_times_div)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Logarithms\\<close>"], ["", "definition\n  oLog :: \"ordinal \\<Rightarrow> ordinal \\<Rightarrow> ordinal\" where\n  \"oLog b = (\\<lambda>x. if 1 < b then oInv ((**) b) x else 0)\""], ["", "lemma ordinal_oLogI:\n\"\\<lbrakk>b ** y \\<le> x; x < b ** y * b\\<rbrakk> \\<Longrightarrow> oLog b x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b ** y \\<le> x; x < b ** y * b\\<rbrakk>\n    \\<Longrightarrow> oLog b x = y", "apply (rule_tac x=1 and y=b in linorder_cases, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b ** y \\<le> x; x < b ** y * b; oSuc 0 < b\\<rbrakk>\n    \\<Longrightarrow> oLog b x = y", "apply (simp add: oLog_def normal.oInv_equality[OF normal_exp])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_exp_oLog_le:\n\"\\<lbrakk>0 < x; oSuc 0 < b\\<rbrakk> \\<Longrightarrow> b ** (oLog b x) \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b\\<rbrakk>\n    \\<Longrightarrow> b ** oLog b x \\<le> x", "apply (simp add: oLog_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b\\<rbrakk>\n    \\<Longrightarrow> b ** oInv ((**) b) x \\<le> x", "apply (frule_tac order_less_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b; 0 < b\\<rbrakk>\n    \\<Longrightarrow> b ** oInv ((**) b) x \\<le> x", "apply (simp add: normal.oInv_bound1[OF normal_exp] oSuc_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_less_exp_oLog:\n\"oSuc 0 < b \\<Longrightarrow> x < b ** (oLog b x) * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> x < b ** oLog b x * b", "apply (simp add: oLog_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> x < b ** oInv ((**) b) x * b", "apply (subst ordinal_exp_oSuc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> x < b ** oSuc (oInv ((**) b) x)", "apply (erule normal.oInv_bound2[OF normal_exp])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_oLog_less:\n\"\\<lbrakk>0 < x; oSuc 0 < b; x < b ** y\\<rbrakk> \\<Longrightarrow> oLog b x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b; x < b ** y\\<rbrakk>\n    \\<Longrightarrow> oLog b x < y", "apply (simp add: oLog_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b; x < b ** y\\<rbrakk>\n    \\<Longrightarrow> oInv ((**) b) x < y", "apply (frule_tac order_less_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; oSuc 0 < b; x < b ** y; 0 < b\\<rbrakk>\n    \\<Longrightarrow> oInv ((**) b) x < y", "apply (simp add: normal.oInv_less[OF normal_exp] oSuc_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_le_oLog:\n\"\\<lbrakk>oSuc 0 < b; b ** y \\<le> x\\<rbrakk> \\<Longrightarrow> y \\<le> oLog b x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; b ** y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<le> oLog b x", "by (simp add: oLog_def normal.le_oInv[OF normal_exp])"], ["", "lemma ordinal_oLogI2:\n\"\\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b; r < b ** y\\<rbrakk> \\<Longrightarrow> oLog b x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> oLog b x = y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> oLog b (b ** y * q + r) = y", "apply (rule ordinal_oLogI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y \\<le> b ** y * q + r\n 2. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y * q + r < b ** y * b", "apply (rule_tac y=\"b ** y * q\" in order_trans, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y * q + r < b ** y * b", "apply (rule order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y * q + r < ?y5\n 2. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> ?y5 \\<le> b ** y * b", "apply (erule ordinal_plus_strict_monoR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y * q + b ** y \\<le> b ** y * b", "apply (subst ordinal_times_oSuc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> b ** y * oSuc q \\<le> b ** y * b", "apply (rule ordinal_times_monoR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; x = b ** y * q + r; 0 < q; q < b;\n     r < b ** y\\<rbrakk>\n    \\<Longrightarrow> oSuc q \\<le> b", "apply (erule oSuc_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_div_exp_oLog_less:\n\"oSuc 0 < b \\<Longrightarrow> x div (b ** oLog b x) < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> x div b ** oLog b x < b", "apply (frule_tac order_less_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; 0 < b\\<rbrakk>\n    \\<Longrightarrow> x div b ** oLog b x < b", "apply (case_tac \"x=0\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; 0 < b; 0 < x\\<rbrakk>\n    \\<Longrightarrow> x div b ** oLog b x < b", "apply (rule ordinal_div_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; 0 < b; 0 < x\\<rbrakk>\n    \\<Longrightarrow> x < b ** oLog b x * b", "by (rule ordinal_less_exp_oLog)"], ["", "lemma ordinal_oLog_base_0: \"oLog 0 x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLog 0 x = 0", "by (simp add: oLog_def)"], ["", "lemma ordinal_oLog_base_1: \"oLog (oSuc 0) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLog (oSuc 0) x = 0", "by (simp add: oLog_def)"], ["", "lemma ordinal_oLog_0: \"oLog b 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLog b 0 = 0", "by (simp add: oLog_def normal.oInv_eq_0[OF normal_exp])"], ["", "lemma ordinal_oLog_exp: \"oSuc 0 < b \\<Longrightarrow> oLog b (b ** x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> oLog b (b ** x) = x", "by (simp add: oLog_def normal.oInv_inverse[OF normal_exp])"], ["", "lemma ordinal_oLog_self: \"oSuc 0 < b \\<Longrightarrow> oLog b b = oSuc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> oLog b b = oSuc 0", "apply (subgoal_tac \"oLog b (b ** oSuc 0) = oSuc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>oSuc 0 < b; oLog b (b ** oSuc 0) = oSuc 0\\<rbrakk>\n    \\<Longrightarrow> oLog b b = oSuc 0\n 2. oSuc 0 < b \\<Longrightarrow> oLog b (b ** oSuc 0) = oSuc 0", "apply (simp only: ordinal_exp_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. oSuc 0 < b \\<Longrightarrow> oLog b (b ** oSuc 0) = oSuc 0", "apply (simp only: ordinal_oLog_exp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_mono_oLog: \"mono (oLog b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (oLog b)", "apply (case_tac \"oSuc 0 < b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. oSuc 0 < b \\<Longrightarrow> mono (oLog b)\n 2. \\<not> oSuc 0 < b \\<Longrightarrow> mono (oLog b)", "apply (simp add: oLog_def normal.mono_oInv[OF normal_exp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> oSuc 0 < b \\<Longrightarrow> mono (oLog b)", "apply (simp add: oLog_def monoI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_oLog_monoR: \"x \\<le> y \\<Longrightarrow> oLog b x \\<le> oLog b y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> oLog b x \\<le> oLog b y", "by (erule monoD[OF ordinal_mono_oLog])"], ["", "lemma ordinal_oLog_decreasing: \"oLog b x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oLog b x \\<le> x", "apply (rule_tac x=b and y=1 in linorder_cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. b < 1 \\<Longrightarrow> oLog b x \\<le> x\n 2. b = 1 \\<Longrightarrow> oLog b x \\<le> x\n 3. 1 < b \\<Longrightarrow> oLog b x \\<le> x", "apply (simp add: ordinal_oLog_base_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. b = 1 \\<Longrightarrow> oLog b x \\<le> x\n 2. 1 < b \\<Longrightarrow> oLog b x \\<le> x", "apply (simp add: ordinal_oLog_base_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < b \\<Longrightarrow> oLog b x \\<le> x", "apply (case_tac \"x = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>1 < b; x = 0\\<rbrakk> \\<Longrightarrow> oLog b x \\<le> x\n 2. \\<lbrakk>1 < b; x \\<noteq> 0\\<rbrakk> \\<Longrightarrow> oLog b x \\<le> x", "apply (simp add: ordinal_oLog_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; x \\<noteq> 0\\<rbrakk> \\<Longrightarrow> oLog b x \\<le> x", "apply (simp add: oLog_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oSuc 0 < b; 0 < x\\<rbrakk>\n    \\<Longrightarrow> oInv ((**) b) x \\<le> x", "apply (simp add: normal.oInv_decreasing[OF normal_exp] oSuc_leI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}