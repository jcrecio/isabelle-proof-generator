{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal/OrdinalVeblen.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal", "problem_names": ["lemma (in normal_set) less_next: \"x < (LEAST z. z \\<in> A \\<and> x < z)\"", "lemma (in normal_set) mem_next: \"(LEAST z. z \\<in> A \\<and> x < z) \\<in> A\"", "lemma (in normal) normal_set_range: \"normal_set (range F)\"", "lemma oLimit_mem_INTER:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n;\n  \\<forall>n. f n \\<in> A n; mono f\\<rbrakk>\n  \\<Longrightarrow> oLimit f \\<in> (\\<Inter>n. A n)\"", "lemma normal_set_INTER:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk> \\<Longrightarrow> normal_set (\\<Inter>n. A n)\"", "lemma ordering_0:\n\"ordering A 0 = (LEAST z. z \\<in> A)\"", "lemma ordering_oSuc:\n\"ordering A (oSuc x) = (LEAST z. z \\<in> A \\<and> ordering A x < z)\"", "lemma (in normal_set) normal_ordering: \"normal (ordering A)\"", "lemma (in normal_set) ordering_oLimit:\n\"ordering A (oLimit f) = oLimit (\\<lambda>n. ordering A (f n))\"", "lemma (in normal) ordering_range: \"ordering (range F) = F\"", "lemma (in normal_set) ordering_mem: \"ordering A x \\<in> A\"", "lemma (in normal_set) range_ordering_lemma:\n\"\\<forall>y. y \\<in> A \\<longrightarrow> y < ordering A x \\<longrightarrow> y \\<in> range (ordering A)\"", "lemma (in normal_set) range_ordering: \"range (ordering A) = A\"", "lemma ordering_INTER_0:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n \\<Longrightarrow> ordering (\\<Inter>n. A n) 0 = oLimit (\\<lambda>n. ordering (A n) 0)\"", "lemma critical_set_0:\n\"critical_set A 0 = A\"", "lemma critical_set_oSuc_lemma:\n\"critical_set A (oSuc n) =\n  critical_set A n \\<inter> range (oDeriv (ordering (critical_set A n)))\"", "lemma omega_complete_INTER:\n\"omega_complete (\\<lambda>x y. y \\<subseteq> x) (\\<lambda>f. \\<Inter> (range f))\"", "lemma critical_set_oLimit:\n\"critical_set A (oLimit f) = (\\<Inter>n. critical_set A (f n))\"", "lemma critical_set_mono:\n\"x \\<le> y \\<Longrightarrow> critical_set A y \\<subseteq> critical_set A x\"", "lemma (in normal_set) range_oDeriv_subset:\n\"range (oDeriv (ordering A)) \\<subseteq> A\"", "lemma normal_set_critical_set:\n\"normal_set A \\<Longrightarrow> normal_set (critical_set A x)\"", "lemma critical_set_oSuc: \n\"normal_set A\n \\<Longrightarrow> critical_set A (oSuc x) = range (oDeriv (ordering (critical_set A x)))\"", "lemma (in normal) oVeblen_0: \"oVeblen F 0 = F\"", "lemma (in normal) oVeblen_oSuc:\n\"oVeblen F (oSuc x) = oDeriv (oVeblen F x)\"", "lemma (in normal) oVeblen_oLimit:\n\"oVeblen F (oLimit f) = ordering (\\<Inter>n. range (oVeblen F (f n)))\"", "lemma (in normal) normal_oVeblen:\n\"normal (oVeblen F x)\"", "lemma (in normal) continuous_oVeblen_0:\n\"continuous (\\<lambda>x. oVeblen F x 0)\"", "lemma (in normal) oVeblen_oLimit_0:\n\"oVeblen F (oLimit f) 0 = oLimit (\\<lambda>n. oVeblen F (f n) 0)\"", "lemma (in normal) normal_oVeblen_0:\n\"0 < F 0 \\<Longrightarrow> normal (\\<lambda>x. oVeblen F x 0)\"", "lemma (in normal) range_oVeblen:\n\"range (oVeblen F x) = critical_set (range F) x\"", "lemma (in normal) range_oVeblen_subset:\n\"x \\<le> y \\<Longrightarrow> range (oVeblen F y) \\<subseteq> range (oVeblen F x)\"", "lemma (in normal) oVeblen_fixed:\n\"\\<forall>x<y. \\<forall>a. oVeblen F x (oVeblen F y a) = oVeblen F y a\"", "lemma (in normal) critical_set_fixed:\n\"0 < z \\<Longrightarrow> range (oVeblen F z) = {x. \\<forall>y<z. oVeblen F y x = x}\"", "lemma oDeriv_id: \"oDeriv id = id\"", "lemma oFix_plus: \"oFix (\\<lambda>x. a + x) 0 = a * \\<omega>\"", "lemma oDeriv_plus: \"oDeriv ((+) a) = ((+) (a * \\<omega>))\"", "lemma oVeblen_1_plus: \"oVeblen ((+) 1) x = ((+) (\\<omega> ** x))\""], "translations": [["", "lemma (in normal_set) less_next: \"x < (LEAST z. z \\<in> A \\<and> x < z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < (LEAST z. z \\<in> A \\<and> x < z)", "apply (rule LeastI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a. a \\<in> A \\<and> x < a\n 2. \\<And>xa. xa \\<in> A \\<and> x < xa \\<Longrightarrow> x < xa", "apply (fold Bex_def, rule unbounded)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> A \\<and> x < xa \\<Longrightarrow> x < xa", "apply (erule conjunct2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) mem_next: \"(LEAST z. z \\<in> A \\<and> x < z) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST z. z \\<in> A \\<and> x < z) \\<in> A", "apply (rule LeastI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a. a \\<in> A \\<and> x < a\n 2. \\<And>xa. xa \\<in> A \\<and> x < xa \\<Longrightarrow> xa \\<in> A", "apply (fold Bex_def, rule unbounded)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> A \\<and> x < xa \\<Longrightarrow> xa \\<in> A", "apply (erule conjunct1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) normal_set_range: \"normal_set (range F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (range F)", "apply (rule normal_set.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<forall>n. g n \\<in> range F \\<Longrightarrow>\n       oLimit g \\<in> range F\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (simp add: image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       \\<exists>x. oLimit g = F x\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (rule_tac x=\"oLimit (\\<lambda>n. LEAST x. g n = F x)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       oLimit g = F (oLimit (\\<lambda>n. LEAST x. g n = F x))\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (simp only: oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       oLimit g = oLimit (\\<lambda>n. F (LEAST x. g n = F x))\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (rule_tac f=oLimit in arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       g = (\\<lambda>n. F (LEAST x. g n = F x))\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g n.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       g n = F (LEAST x. g n = F x)\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (rule LeastI_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g n.\n       \\<forall>n. \\<exists>x. g n = F x \\<Longrightarrow>\n       \\<exists>x. g n = F x\n 2. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>y\\<in>range F. x < y", "apply (rule_tac x=\"F (oSuc x)\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x < F (oSuc x)\n 2. \\<And>x. F (oSuc x) \\<in> range F", "apply (rule order_le_less_trans [OF increasing])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. F x < F (oSuc x)\n 2. \\<And>x. F (oSuc x) \\<in> range F", "apply (simp add: cancel_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. F (oSuc x) \\<in> range F", "apply (rule rangeI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oLimit_mem_INTER:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n;\n  \\<forall>n. f n \\<in> A n; mono f\\<rbrakk>\n  \\<Longrightarrow> oLimit f \\<in> (\\<Inter>n. A n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n     mono f\\<rbrakk>\n    \\<Longrightarrow> oLimit f \\<in> \\<Inter> (range A)", "apply (clarsimp, rename_tac k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<in> A k", "apply (subgoal_tac \"oLimit (\\<lambda>n. f (n + k)) \\<in> A k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f; oLimit (\\<lambda>n. f (n + k)) \\<in> A k\\<rbrakk>\n       \\<Longrightarrow> oLimit f \\<in> A k\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) \\<in> A k", "apply (simp add: oLimit_shift_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. f (n + k)) \\<in> A k", "apply (rule normal_set.closed [rule_format], erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> f (n + k) \\<in> A k", "apply (rule_tac A=\"A (n + k)\" in subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> A (n + k) \\<subseteq> A k\n 2. \\<And>k n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> f (n + k) \\<in> A (n + k)", "apply (induct_tac n, simp, rename_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k n m.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f; A (m + k) \\<subseteq> A k\\<rbrakk>\n       \\<Longrightarrow> A (Suc m + k) \\<subseteq> A k\n 2. \\<And>k n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> f (n + k) \\<in> A (n + k)", "apply (rule_tac B=\"A (m + k)\" in subset_trans, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n; \\<forall>n. f n \\<in> A n;\n        mono f\\<rbrakk>\n       \\<Longrightarrow> f (n + k) \\<in> A (n + k)", "apply (erule spec)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_set_INTER:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk> \\<Longrightarrow> normal_set (\\<Inter>n. A n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> normal_set (\\<Inter> (range A))", "apply (rule normal_set.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        \\<forall>n. g n \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit g \\<in> \\<Inter> (range A)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<Inter> (range A). x < y", "apply (clarsimp simp add: normal_set.closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<Inter> (range A). x < y", "apply (rule_tac x=\"oLimit (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> x < oLimit\n                              (\\<lambda>n.\n                                  LEAST y. y \\<in> A n \\<and> x < y)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<in> \\<Inter> (range A)", "apply (rule_tac y=\"LEAST y. y \\<in> A n \\<and> x < y\" in order_less_le_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> x < (LEAST y. y \\<in> A n \\<and> x < y)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<le> oLimit\n                                (\\<lambda>n.\n                                    LEAST y. y \\<in> A n \\<and> x < y)\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<in> \\<Inter> (range A)", "apply (simp only: normal_set.less_next)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<le> oLimit\n                                (\\<lambda>n.\n                                    LEAST y. y \\<in> A n \\<and> x < y)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<in> \\<Inter> (range A)", "apply (rule le_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<in> \\<Inter> (range A)", "apply (rule oLimit_mem_INTER, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            (LEAST y. y \\<in> A n \\<and> x < y) \\<in> A n\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> mono\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)", "apply (simp add: normal_set.mem_next)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> mono\n                          (\\<lambda>n. LEAST y. y \\<in> A n \\<and> x < y)", "apply (rule mono_natI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A n \\<and> x < y)\n                         \\<le> (LEAST y. y \\<in> A (Suc n) \\<and> x < y)", "apply (rule Least_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A (Suc n) \\<and> x < y)\n                         \\<in> A n \\<and>\n                         x < (LEAST y. y \\<in> A (Suc n) \\<and> x < y)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A (Suc n) \\<and> x < y) \\<in> A n\n 2. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> x < (LEAST y. y \\<in> A (Suc n) \\<and> x < y)", "apply (rule subsetD, erule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST y. y \\<in> A (Suc n) \\<and> x < y)\n                         \\<in> A (Suc n)\n 2. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> x < (LEAST y. y \\<in> A (Suc n) \\<and> x < y)", "apply (simp only: normal_set.mem_next)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> x < (LEAST y. y \\<in> A (Suc n) \\<and> x < y)", "apply (simp only: normal_set.less_next)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Ordering functions\\<close>"], ["", "text \"There is a one-to-one correspondence between closed,\nunbounded sets of ordinals and normal functions on ordinals.\""], ["", "definition\n  ordering  :: \"(ordinal set) \\<Rightarrow> (ordinal \\<Rightarrow> ordinal)\" where\n  \"ordering A = ordinal_rec (LEAST z. z \\<in> A) (\\<lambda>p x. LEAST z. z \\<in> A \\<and> x < z)\""], ["", "lemma ordering_0:\n\"ordering A 0 = (LEAST z. z \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering A 0 = (LEAST z. z \\<in> A)", "by (simp add: ordering_def)"], ["", "lemma ordering_oSuc:\n\"ordering A (oSuc x) = (LEAST z. z \\<in> A \\<and> ordering A x < z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering A (oSuc x) =\n    (LEAST z. z \\<in> A \\<and> OrdinalVeblen.ordering A x < z)", "by (simp add: ordering_def)"], ["", "lemma (in normal_set) normal_ordering: \"normal (ordering A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (OrdinalVeblen.ordering A)", "apply (unfold ordering_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal\n     (ordinal_rec (LEAST z. z \\<in> A)\n       (\\<lambda>p x. LEAST z. z \\<in> A \\<and> x < z))", "apply (rule normal_ordinal_rec [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x. x < (LEAST z. z \\<in> A \\<and> x < z)", "apply (rule less_next)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) ordering_oLimit:\n\"ordering A (oLimit f) = oLimit (\\<lambda>n. ordering A (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering A (oLimit f) =\n    oLimit (\\<lambda>n. OrdinalVeblen.ordering A (f n))", "apply (rule normal.oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (OrdinalVeblen.ordering A)", "apply (rule normal_ordering)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) ordering_range: \"ordering (range F) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (range F) = F", "apply (rule ext, rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. OrdinalVeblen.ordering (range F) 0 = F 0\n 2. \\<And>x xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       OrdinalVeblen.ordering (range F) (oSuc xa) = F (oSuc xa)\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (simp add: ordering_0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (LEAST z. z \\<in> range F) = F 0\n 2. \\<And>x xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       OrdinalVeblen.ordering (range F) (oSuc xa) = F (oSuc xa)\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (rule Least_equality)"], ["proof (prove)\ngoal (4 subgoals):\n 1. F 0 \\<in> range F\n 2. \\<And>y. y \\<in> range F \\<Longrightarrow> F 0 \\<le> y\n 3. \\<And>x xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       OrdinalVeblen.ordering (range F) (oSuc xa) = F (oSuc xa)\n 4. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (rule rangeI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y. y \\<in> range F \\<Longrightarrow> F 0 \\<le> y\n 2. \\<And>x xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       OrdinalVeblen.ordering (range F) (oSuc xa) = F (oSuc xa)\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (clarsimp simp add: cancel_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       OrdinalVeblen.ordering (range F) (oSuc xa) = F (oSuc xa)\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (simp add: ordering_oSuc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       (LEAST z. z \\<in> range F \\<and> F xa < z) = F (oSuc xa)\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (rule Least_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       OrdinalVeblen.ordering (range F) xa = F xa \\<Longrightarrow>\n       F (oSuc xa) \\<in> range F \\<and> F xa < F (oSuc xa)\n 2. \\<And>xa y.\n       \\<lbrakk>OrdinalVeblen.ordering (range F) xa = F xa;\n        y \\<in> range F \\<and> F xa < y\\<rbrakk>\n       \\<Longrightarrow> F (oSuc xa) \\<le> y\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (simp add: cancel_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>OrdinalVeblen.ordering (range F) xa = F xa;\n        y \\<in> range F \\<and> F xa < y\\<rbrakk>\n       \\<Longrightarrow> F (oSuc xa) \\<le> y\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (clarsimp simp add: cancel_le cancel_less oSuc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (range F) (oLimit f) =\n                         F (oLimit f)", "apply (subst normal_set.ordering_oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> normal_set (range F)\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n.\n                              OrdinalVeblen.ordering (range F) (f n)) =\n                         F (oLimit f)", "apply (rule normal_set_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           OrdinalVeblen.ordering (range F) (f n) = F (f n)\\<rbrakk>\n       \\<Longrightarrow> oLimit\n                          (\\<lambda>n.\n                              OrdinalVeblen.ordering (range F) (f n)) =\n                         F (oLimit f)", "apply (simp add: oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) ordering_mem: \"ordering A x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering A x \\<in> A", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. OrdinalVeblen.ordering A 0 \\<in> A\n 2. \\<And>x.\n       OrdinalVeblen.ordering A x \\<in> A \\<Longrightarrow>\n       OrdinalVeblen.ordering A (oSuc x) \\<in> A\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (subst ordering_0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (LEAST z. z \\<in> A) \\<in> A\n 2. \\<And>x.\n       OrdinalVeblen.ordering A x \\<in> A \\<Longrightarrow>\n       OrdinalVeblen.ordering A (oSuc x) \\<in> A\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (rule LeastI_ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>x. x \\<in> A\n 2. \\<And>x.\n       OrdinalVeblen.ordering A x \\<in> A \\<Longrightarrow>\n       OrdinalVeblen.ordering A (oSuc x) \\<in> A\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (cut_tac unbounded, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       OrdinalVeblen.ordering A x \\<in> A \\<Longrightarrow>\n       OrdinalVeblen.ordering A (oSuc x) \\<in> A\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (subst ordering_oSuc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       OrdinalVeblen.ordering A x \\<in> A \\<Longrightarrow>\n       (LEAST z. z \\<in> A \\<and> OrdinalVeblen.ordering A x < z) \\<in> A\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (rule mem_next)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering A (oLimit f) \\<in> A", "apply (subst ordering_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. OrdinalVeblen.ordering A (f n) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering A (f n))\n                         \\<in> A", "apply (erule closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) range_ordering_lemma:\n\"\\<forall>y. y \\<in> A \\<longrightarrow> y < ordering A x \\<longrightarrow> y \\<in> range (ordering A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in> A \\<longrightarrow>\n       y < OrdinalVeblen.ordering A x \\<longrightarrow>\n       y \\<in> range (OrdinalVeblen.ordering A)", "apply (simp add: image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in> A \\<longrightarrow>\n       y < OrdinalVeblen.ordering A x \\<longrightarrow>\n       (\\<exists>x. y = OrdinalVeblen.ordering A x)", "apply (rule_tac a=x in oLimit_induct, safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> A; y < OrdinalVeblen.ordering A 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> A \\<longrightarrow>\n                   y < OrdinalVeblen.ordering A x \\<longrightarrow>\n                   (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oSuc x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 3. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (simp add: ordering_0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> A; y < (LEAST z. z \\<in> A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> A \\<longrightarrow>\n                   y < OrdinalVeblen.ordering A x \\<longrightarrow>\n                   (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oSuc x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 3. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (drule not_less_Least, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> A \\<longrightarrow>\n                   y < OrdinalVeblen.ordering A x \\<longrightarrow>\n                   (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oSuc x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 2. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (simp add: ordering_oSuc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> A \\<longrightarrow>\n                   y < OrdinalVeblen.ordering A x \\<longrightarrow>\n                   (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A;\n        y < (LEAST z.\n                z \\<in> A \\<and> OrdinalVeblen.ordering A x < z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 2. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (drule not_less_Least, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> A \\<longrightarrow>\n                   y < OrdinalVeblen.ordering A x \\<longrightarrow>\n                   (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; \\<not> OrdinalVeblen.ordering A x < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x\n 2. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (force simp add: linorder_not_less order_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A; y < OrdinalVeblen.ordering A (oLimit f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (simp add: ordering_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n y.\n           y \\<in> A \\<longrightarrow>\n           y < OrdinalVeblen.ordering A (f n) \\<longrightarrow>\n           (\\<exists>x. y = OrdinalVeblen.ordering A x);\n        y \\<in> A;\n        y < oLimit (\\<lambda>n. OrdinalVeblen.ordering A (f n))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. y = OrdinalVeblen.ordering A x", "apply (drule less_oLimitD, clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) range_ordering: \"range (ordering A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (OrdinalVeblen.ordering A) = A", "apply (safe intro!: ordering_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow> x \\<in> range (OrdinalVeblen.ordering A)", "apply (erule_tac x=\"oSuc x\" in range_ordering_lemma[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x < OrdinalVeblen.ordering A (oSuc x)", "apply (rule order_less_le_trans[OF less_oSuc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oSuc x \\<le> OrdinalVeblen.ordering A (oSuc x)", "apply (rule normal.increasing[OF normal_ordering])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordering_INTER_0:\n\"\\<lbrakk>\\<forall>n. normal_set (A n); \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n \\<Longrightarrow> ordering (\\<Inter>n. A n) 0 = oLimit (\\<lambda>n. ordering (A n) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> OrdinalVeblen.ordering (\\<Inter> (range A)) 0 =\n                      oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)", "apply (subst ordering_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> (LEAST z. z \\<in> \\<Inter> (range A)) =\n                      oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)", "apply (rule Least_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                      \\<in> \\<Inter> (range A)\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (rule oLimit_mem_INTER, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n. OrdinalVeblen.ordering (A n) 0 \\<in> A n\n 2. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> mono (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (simp add: normal_set.ordering_mem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. normal_set (A n);\n     \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n    \\<Longrightarrow> mono (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (rule mono_natI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (A n) 0\n                         \\<le> OrdinalVeblen.ordering (A (Suc n)) 0\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (simp add: ordering_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A n)\n                         \\<le> (LEAST z. z \\<in> A (Suc n))\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (rule Least_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A (Suc n)) \\<in> A n\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (rule subsetD, erule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A (Suc n)) \\<in> A (Suc n)\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (drule_tac x=\"Suc n\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. A (Suc n) \\<subseteq> A n;\n        normal_set (A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A (Suc n)) \\<in> A (Suc n)\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (drule normal_set.unbounded, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>n. A (Suc n) \\<subseteq> A n; y \\<in> A (Suc n);\n        ?x18 n < y\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A (Suc n)) \\<in> A (Suc n)\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (erule LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. OrdinalVeblen.ordering (A n) 0)\n                         \\<le> y", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        y \\<in> \\<Inter> (range A)\\<rbrakk>\n       \\<Longrightarrow> OrdinalVeblen.ordering (A n) 0 \\<le> y", "apply (simp add: ordering_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        \\<forall>x. y \\<in> A x\\<rbrakk>\n       \\<Longrightarrow> (LEAST z. z \\<in> A n) \\<le> y", "apply (rule Least_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y n.\n       \\<lbrakk>\\<forall>n. normal_set (A n);\n        \\<forall>n. A (Suc n) \\<subseteq> A n;\n        \\<forall>x. y \\<in> A x\\<rbrakk>\n       \\<Longrightarrow> y \\<in> A n", "apply (erule spec)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Critical ordinals\\<close>"], ["", "definition\n  critical_set :: \"ordinal set \\<Rightarrow> ordinal \\<Rightarrow> ordinal set\" where\n  \"critical_set A =\n     ordinal_rec0 A (\\<lambda>p x. x \\<inter> range (oDeriv (ordering x))) (\\<lambda>f. \\<Inter>n. f n)\""], ["", "lemma critical_set_0:\n\"critical_set A 0 = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. critical_set A 0 = A", "by (unfold critical_set_def, rule ordinal_rec0_0)"], ["", "lemma critical_set_oSuc_lemma:\n\"critical_set A (oSuc n) =\n  critical_set A n \\<inter> range (oDeriv (ordering (critical_set A n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. critical_set A (oSuc n) =\n    critical_set A n \\<inter>\n    range (oDeriv (OrdinalVeblen.ordering (critical_set A n)))", "by (unfold critical_set_def, rule ordinal_rec0_oSuc)"], ["", "lemma omega_complete_INTER:\n\"omega_complete (\\<lambda>x y. y \\<subseteq> x) (\\<lambda>f. \\<Inter> (range f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omega_complete (\\<lambda>x y. y \\<subseteq> x)\n     (\\<lambda>f. \\<Inter> (range f))", "apply (rule omega_complete.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. porder (\\<lambda>x y. y \\<subseteq> x)\n 2. omega_complete_axioms (\\<lambda>x y. y \\<subseteq> x)\n     (\\<lambda>f. \\<Inter> (range f))", "apply (rule porder.flip)"], ["proof (prove)\ngoal (2 subgoals):\n 1. porder (\\<subseteq>)\n 2. omega_complete_axioms (\\<lambda>x y. y \\<subseteq> x)\n     (\\<lambda>f. \\<Inter> (range f))", "apply (rule porder_order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. omega_complete_axioms (\\<lambda>x y. y \\<subseteq> x)\n     (\\<lambda>f. \\<Inter> (range f))", "apply (rule omega_complete_axioms.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n. \\<Inter> (range f) \\<subseteq> f n\n 2. \\<And>f x.\n       \\<forall>n. x \\<subseteq> f n \\<Longrightarrow>\n       x \\<subseteq> \\<Inter> (range f)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<forall>n. x \\<subseteq> f n \\<Longrightarrow>\n       x \\<subseteq> \\<Inter> (range f)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma critical_set_oLimit:\n\"critical_set A (oLimit f) = (\\<Inter>n. critical_set A (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. critical_set A (oLimit f) = (\\<Inter>n. critical_set A (f n))", "apply (unfold critical_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordinal_rec0 A\n     (\\<lambda>p x. x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)))\n     (\\<lambda>f. \\<Inter> (range f)) (oLimit f) =\n    (\\<Inter>n.\n        ordinal_rec0 A\n         (\\<lambda>p x.\n             x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)))\n         (\\<lambda>f. \\<Inter> (range f)) (f n))", "apply (rule omega_complete.ordinal_rec0_oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. omega_complete ?le (\\<lambda>f. \\<Inter> (range f))\n 2. \\<forall>p x.\n       ?le x (x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)))", "apply (rule omega_complete_INTER)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p x.\n       x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)) \\<subseteq> x", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma critical_set_mono:\n\"x \\<le> y \\<Longrightarrow> critical_set A y \\<subseteq> critical_set A x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    critical_set A y \\<subseteq> critical_set A x", "apply (unfold critical_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    ordinal_rec0 A\n     (\\<lambda>p x. x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)))\n     (\\<lambda>f. \\<Inter> (range f)) y\n    \\<subseteq> ordinal_rec0 A\n                 (\\<lambda>p x.\n                     x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)))\n                 (\\<lambda>f. \\<Inter> (range f)) x", "apply (rule omega_complete.ordinal_rec0_mono\n          [OF omega_complete_INTER])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<le> y \\<Longrightarrow>\n    \\<forall>p x.\n       x \\<inter> range (oDeriv (OrdinalVeblen.ordering x)) \\<subseteq> x\n 2. x \\<le> y \\<Longrightarrow> x \\<le> y", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<le> y", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal_set) range_oDeriv_subset:\n\"range (oDeriv (ordering A)) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (oDeriv (OrdinalVeblen.ordering A)) \\<subseteq> A", "apply (clarsimp, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oDeriv (OrdinalVeblen.ordering A) x \\<in> A", "apply (cut_tac n=x in oDeriv_fixed[OF normal_ordering])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OrdinalVeblen.ordering A (oDeriv (OrdinalVeblen.ordering A) x) =\n       oDeriv (OrdinalVeblen.ordering A) x \\<Longrightarrow>\n       oDeriv (OrdinalVeblen.ordering A) x \\<in> A", "apply (erule subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OrdinalVeblen.ordering A (oDeriv (OrdinalVeblen.ordering A) x)\n       \\<in> A", "apply (rule ordering_mem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_set_critical_set:\n\"normal_set A \\<Longrightarrow> normal_set (critical_set A x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set A \\<Longrightarrow> normal_set (critical_set A x)", "apply (rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. normal_set A \\<Longrightarrow> normal_set (critical_set A 0)\n 2. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oSuc x))\n 3. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (simp only: critical_set_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oSuc x))\n 2. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (simp only: critical_set_oSuc_lemma)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal_set\n                          (critical_set A x \\<inter>\n                           range\n                            (oDeriv\n                              (OrdinalVeblen.ordering (critical_set A x))))\n 2. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (subst Int_absorb1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> range\n                          (oDeriv\n                            (OrdinalVeblen.ordering (critical_set A x)))\n                         \\<subseteq> critical_set A x\n 2. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal_set\n                          (range\n                            (oDeriv\n                              (OrdinalVeblen.ordering (critical_set A x))))\n 3. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (erule normal_set.range_oDeriv_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal_set\n                          (range\n                            (oDeriv\n                              (OrdinalVeblen.ordering (critical_set A x))))\n 2. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (rule normal.normal_set_range)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normal_set A; normal_set (critical_set A x)\\<rbrakk>\n       \\<Longrightarrow> normal\n                          (oDeriv\n                            (OrdinalVeblen.ordering (critical_set A x)))\n 2. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (rule normal_oDeriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (critical_set A (oLimit f))", "apply (simp only: critical_set_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f;\n        \\<forall>n. normal_set (critical_set A (f n))\\<rbrakk>\n       \\<Longrightarrow> normal_set (\\<Inter>n. critical_set A (f n))", "apply (erule normal_set_INTER)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            critical_set A (f (Suc n))\n                            \\<subseteq> critical_set A (f n)", "apply (rule allI, rule critical_set_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n.\n       \\<lbrakk>normal_set A; OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> f n \\<le> f (Suc n)", "apply (simp add: strict_mono_monoD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma critical_set_oSuc: \n\"normal_set A\n \\<Longrightarrow> critical_set A (oSuc x) = range (oDeriv (ordering (critical_set A x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set A \\<Longrightarrow>\n    critical_set A (oSuc x) =\n    range (oDeriv (OrdinalVeblen.ordering (critical_set A x)))", "apply (simp only: critical_set_oSuc_lemma)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set A \\<Longrightarrow>\n    critical_set A x \\<inter>\n    range (oDeriv (OrdinalVeblen.ordering (critical_set A x))) =\n    range (oDeriv (OrdinalVeblen.ordering (critical_set A x)))", "apply (rule Int_absorb1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set A \\<Longrightarrow>\n    range (oDeriv (OrdinalVeblen.ordering (critical_set A x)))\n    \\<subseteq> critical_set A x", "apply (rule normal_set.range_oDeriv_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set A \\<Longrightarrow> normal_set (critical_set A x)", "apply (erule normal_set_critical_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Veblen hierarchy over a normal function\\<close>"], ["", "definition\n  oVeblen :: \"(ordinal \\<Rightarrow> ordinal) \\<Rightarrow> ordinal \\<Rightarrow> ordinal \\<Rightarrow> ordinal\" where\n  \"oVeblen F = (\\<lambda>x. ordering (critical_set (range F) x))\""], ["", "lemma (in normal) oVeblen_0: \"oVeblen F 0 = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oVeblen F 0 = F", "apply (unfold oVeblen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (critical_set (range F) 0) = F", "apply (subst critical_set_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (range F) = F", "apply (rule ordering_range)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oVeblen_oSuc:\n\"oVeblen F (oSuc x) = oDeriv (oVeblen F x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oVeblen F (oSuc x) = oDeriv (oVeblen F x)", "apply (unfold oVeblen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (critical_set (range F) (oSuc x)) =\n    oDeriv (OrdinalVeblen.ordering (critical_set (range F) x))", "apply (subst critical_set_oSuc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. normal_set (range F)\n 2. OrdinalVeblen.ordering\n     (range (oDeriv (OrdinalVeblen.ordering (critical_set (range F) x)))) =\n    oDeriv (OrdinalVeblen.ordering (critical_set (range F) x))", "apply (rule normal_set_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering\n     (range (oDeriv (OrdinalVeblen.ordering (critical_set (range F) x)))) =\n    oDeriv (OrdinalVeblen.ordering (critical_set (range F) x))", "apply (rule normal.ordering_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (oDeriv (OrdinalVeblen.ordering (critical_set (range F) x)))", "apply (rule normal_oDeriv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oVeblen_oLimit:\n\"oVeblen F (oLimit f) = ordering (\\<Inter>n. range (oVeblen F (f n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oVeblen F (oLimit f) =\n    OrdinalVeblen.ordering (\\<Inter>n. range (oVeblen F (f n)))", "apply (unfold oVeblen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (critical_set (range F) (oLimit f)) =\n    OrdinalVeblen.ordering\n     (\\<Inter>n.\n         range (OrdinalVeblen.ordering (critical_set (range F) (f n))))", "apply (subst critical_set_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdinalVeblen.ordering (\\<Inter>n. critical_set (range F) (f n)) =\n    OrdinalVeblen.ordering\n     (\\<Inter>n.\n         range (OrdinalVeblen.ordering (critical_set (range F) (f n))))", "apply (cut_tac normal_set_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (range F) \\<Longrightarrow>\n    OrdinalVeblen.ordering (\\<Inter>n. critical_set (range F) (f n)) =\n    OrdinalVeblen.ordering\n     (\\<Inter>n.\n         range (OrdinalVeblen.ordering (critical_set (range F) (f n))))", "apply (simp add: normal_set.range_ordering[OF normal_set_critical_set])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) normal_oVeblen:\n\"normal (oVeblen F x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (oVeblen F x)", "apply (unfold oVeblen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal (OrdinalVeblen.ordering (critical_set (range F) x))", "apply (rule normal_set.normal_ordering)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (critical_set (range F) x)", "apply (rule normal_set_critical_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (range F)", "apply (rule normal_set_range)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) continuous_oVeblen_0:\n\"continuous (\\<lambda>x. oVeblen F x 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (\\<lambda>x. oVeblen F x 0)", "apply (rule continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       oVeblen F (oLimit f) 0 = oLimit (\\<lambda>n. oVeblen F (f n) 0)\n 2. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (simp add: oVeblen_def critical_set_oLimit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       OrdinalVeblen.ordering (\\<Inter>n. critical_set (range F) (f n)) 0 =\n       oLimit\n        (\\<lambda>n.\n            OrdinalVeblen.ordering (critical_set (range F) (f n)) 0)\n 2. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (rule ordering_INTER_0[rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       normal_set (critical_set (range F) (f n))\n 2. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       critical_set (range F) (f (Suc n))\n       \\<subseteq> critical_set (range F) (f n)\n 3. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (rule normal_set_critical_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow> normal_set (range F)\n 2. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       critical_set (range F) (f (Suc n))\n       \\<subseteq> critical_set (range F) (f n)\n 3. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (rule normal_set_range)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow>\n       critical_set (range F) (f (Suc n))\n       \\<subseteq> critical_set (range F) (f n)\n 2. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (rule critical_set_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n.\n       OrdinalInduct.strict_mono f \\<Longrightarrow> f n \\<le> f (Suc n)\n 2. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (simp add: strict_mono_monoD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oVeblen F x 0 \\<le> oVeblen F (oSuc x) 0", "apply (simp only: oVeblen_oSuc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oVeblen F x 0 \\<le> oDeriv (oVeblen F x) 0", "apply (rule oDeriv_increasing)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. continuous (oVeblen F x)", "apply (rule normal.continuous)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. normal (oVeblen F x)", "apply (rule normal_oVeblen)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oVeblen_oLimit_0:\n\"oVeblen F (oLimit f) 0 = oLimit (\\<lambda>n. oVeblen F (f n) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oVeblen F (oLimit f) 0 = oLimit (\\<lambda>n. oVeblen F (f n) 0)", "by (rule continuousD[OF continuous_oVeblen_0])"], ["", "lemma (in normal) normal_oVeblen_0:\n\"0 < F 0 \\<Longrightarrow> normal (\\<lambda>x. oVeblen F x 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < F 0 \\<Longrightarrow> normal (\\<lambda>x. oVeblen F x 0)", "apply (rule normalI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>0 < F 0; OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) 0 =\n                         oLimit (\\<lambda>n. oVeblen F (f n) 0)\n 2. \\<And>x. 0 < F 0 \\<Longrightarrow> oVeblen F x 0 < oVeblen F (oSuc x) 0", "apply (rule oVeblen_oLimit_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < F 0 \\<Longrightarrow> oVeblen F x 0 < oVeblen F (oSuc x) 0", "apply (simp only: oVeblen_oSuc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < F 0 \\<Longrightarrow> oVeblen F x 0 < oDeriv (oVeblen F x) 0", "apply (subst oDeriv_fixed[OF normal_oVeblen, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < F 0 \\<Longrightarrow>\n       oVeblen F x 0 < oVeblen F x (oDeriv (oVeblen F x) 0)", "apply (rule normal.strict_monoD[OF normal_oVeblen])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < F 0 \\<Longrightarrow> 0 < oDeriv (oVeblen F x) 0", "apply (simp add: zero_less_oFix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < F 0 \\<Longrightarrow> 0 < oVeblen F x 0", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. F 0 \\<le> oVeblen F x 0", "apply (subgoal_tac \"oVeblen F 0 0 \\<le> oVeblen F x 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       oVeblen F 0 0 \\<le> oVeblen F x 0 \\<Longrightarrow>\n       F 0 \\<le> oVeblen F x 0\n 2. \\<And>x. oVeblen F 0 0 \\<le> oVeblen F x 0", "apply (simp add: oVeblen_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. oVeblen F 0 0 \\<le> oVeblen F x 0", "apply (rule continuous.monoD[OF _ ordinal_0_le])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. continuous (\\<lambda>a. oVeblen F a 0)", "apply (rule continuous_oVeblen_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) range_oVeblen:\n\"range (oVeblen F x) = critical_set (range F) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (oVeblen F x) = critical_set (range F) x", "apply (unfold oVeblen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. range (OrdinalVeblen.ordering (critical_set (range F) x)) =\n    critical_set (range F) x", "apply (rule normal_set.range_ordering)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (critical_set (range F) x)", "apply (rule normal_set_critical_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_set (range F)", "apply (rule normal_set_range)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) range_oVeblen_subset:\n\"x \\<le> y \\<Longrightarrow> range (oVeblen F y) \\<subseteq> range (oVeblen F x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    range (oVeblen F y) \\<subseteq> range (oVeblen F x)", "apply (simp only: range_oVeblen)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    critical_set (range F) y \\<subseteq> critical_set (range F) x", "apply (erule critical_set_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) oVeblen_fixed:\n\"\\<forall>x<y. \\<forall>a. oVeblen F x (oVeblen F y a) = oVeblen F y a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<y. \\<forall>a. oVeblen F x (oVeblen F y a) = oVeblen F y a", "apply (rule_tac a=y in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x<0. \\<forall>a. oVeblen F x (oVeblen F 0 a) = oVeblen F 0 a\n 2. \\<And>x.\n       \\<forall>xa<x.\n          \\<forall>a.\n             oVeblen F xa (oVeblen F x a) = oVeblen F x a \\<Longrightarrow>\n       \\<forall>xa<oSuc x.\n          \\<forall>a.\n             oVeblen F xa (oVeblen F (oSuc x) a) = oVeblen F (oSuc x) a\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>xa<x.\n          \\<forall>a.\n             oVeblen F xa (oVeblen F x a) = oVeblen F x a \\<Longrightarrow>\n       \\<forall>xa<oSuc x.\n          \\<forall>a.\n             oVeblen F xa (oVeblen F (oSuc x) a) = oVeblen F (oSuc x) a\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (clarsimp simp only: oVeblen_oSuc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa < oSuc x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (erule less_oSucE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa < x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>xa < x;\n        \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (drule_tac x=\"oDeriv (oVeblen F x) a\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>xa < x;\n        oVeblen F xa (oVeblen F x (oDeriv (oVeblen F x) a)) =\n        oVeblen F x (oDeriv (oVeblen F x) a)\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (simp add: oDeriv_fixed normal_oVeblen)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F xa (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> oVeblen F x (oDeriv (oVeblen F x) a) =\n                         oDeriv (oVeblen F x) a\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (rule oDeriv_fixed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa a.\n       \\<lbrakk>\\<forall>xa<x.\n                   \\<forall>a. oVeblen F xa (oVeblen F x a) = oVeblen F x a;\n        xa = x\\<rbrakk>\n       \\<Longrightarrow> normal (oVeblen F x)\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply (rule normal_oVeblen)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<oLimit f.\n                            \\<forall>a.\n                               oVeblen F x (oVeblen F (oLimit f) a) =\n                               oVeblen F (oLimit f) a", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x a.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a);\n        x < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen F x (oVeblen F (oLimit f) a) =\n                         oVeblen F (oLimit f) a", "apply (erule less_oLimitE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n x.\n           x < f n \\<longrightarrow>\n           (\\<forall>a.\n               oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a);\n        x < f n\\<rbrakk>\n       \\<Longrightarrow> oVeblen F x (oVeblen F (oLimit f) a) =\n                         oVeblen F (oLimit f) a", "apply (drule spec, drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F x (oVeblen F (oLimit f) a) =\n                         oVeblen F (oLimit f) a", "apply (subgoal_tac \"oVeblen F (oLimit f) a \\<in> range (oVeblen F (f n))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a. oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a;\n        oVeblen F (oLimit f) a \\<in> range (oVeblen F (f n))\\<rbrakk>\n       \\<Longrightarrow> oVeblen F x (oVeblen F (oLimit f) a) =\n                         oVeblen F (oLimit f) a\n 2. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) a\n                         \\<in> range (oVeblen F (f n))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) a\n                         \\<in> range (oVeblen F (f n))", "apply (rule_tac A=\"range (oVeblen F (oLimit f))\" in subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> range (oVeblen F (oLimit f))\n                         \\<subseteq> range (oVeblen F (f n))\n 2. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) a\n                         \\<in> range (oVeblen F (oLimit f))", "apply (rule range_oVeblen_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> f n \\<le> oLimit f\n 2. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) a\n                         \\<in> range (oVeblen F (oLimit f))", "apply (rule le_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x a n.\n       \\<lbrakk>OrdinalInduct.strict_mono f; x < f n;\n        \\<forall>a.\n           oVeblen F x (oVeblen F (f n) a) = oVeblen F (f n) a\\<rbrakk>\n       \\<Longrightarrow> oVeblen F (oLimit f) a\n                         \\<in> range (oVeblen F (oLimit f))", "apply (rule rangeI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in normal) critical_set_fixed:\n\"0 < z \\<Longrightarrow> range (oVeblen F z) = {x. \\<forall>y<z. oVeblen F y x = x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow>\n    range (oVeblen F z) = {x. \\<forall>y<z. oVeblen F y x = x}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < z \\<Longrightarrow>\n    range (oVeblen F z) \\<subseteq> {x. \\<forall>y<z. oVeblen F y x = x}\n 2. 0 < z \\<Longrightarrow>\n    {x. \\<forall>y<z. oVeblen F y x = x} \\<subseteq> range (oVeblen F z)", "apply (clarsimp simp add: oVeblen_fixed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow>\n    {x. \\<forall>y<z. oVeblen F y x = x} \\<subseteq> range (oVeblen F z)", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<longrightarrow>\n    {x. \\<forall>y<z. oVeblen F y x = x} \\<subseteq> range (oVeblen F z)", "apply (rule_tac a=z in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. 0 < 0 \\<longrightarrow>\n    {x. \\<forall>y<0. oVeblen F y x = x} \\<subseteq> range (oVeblen F 0)\n 2. \\<And>x.\n       0 < x \\<longrightarrow>\n       {xa. \\<forall>y<x. oVeblen F y xa = xa}\n       \\<subseteq> range (oVeblen F x) \\<Longrightarrow>\n       0 < oSuc x \\<longrightarrow>\n       {xa. \\<forall>y<oSuc x. oVeblen F y xa = xa}\n       \\<subseteq> range (oVeblen F (oSuc x))\n 3. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> range (oVeblen F (f n))\\<rbrakk>\n       \\<Longrightarrow> 0 < oLimit f \\<longrightarrow>\n                         {x. \\<forall>y<oLimit f. oVeblen F y x = x}\n                         \\<subseteq> range (oVeblen F (oLimit f))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 < x \\<longrightarrow>\n       {xa. \\<forall>y<x. oVeblen F y xa = xa}\n       \\<subseteq> range (oVeblen F x) \\<Longrightarrow>\n       0 < oSuc x \\<longrightarrow>\n       {xa. \\<forall>y<oSuc x. oVeblen F y xa = xa}\n       \\<subseteq> range (oVeblen F (oSuc x))\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> range (oVeblen F (f n))\\<rbrakk>\n       \\<Longrightarrow> 0 < oLimit f \\<longrightarrow>\n                         {x. \\<forall>y<oLimit f. oVeblen F y x = x}\n                         \\<subseteq> range (oVeblen F (oLimit f))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>0 < x \\<longrightarrow>\n                {xa. \\<forall>y<x. oVeblen F y xa = xa}\n                \\<subseteq> range (oVeblen F x);\n        \\<forall>y<oSuc x. oVeblen F y xa = xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> range (oVeblen F (oSuc x))\n 2. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> range (oVeblen F (f n))\\<rbrakk>\n       \\<Longrightarrow> 0 < oLimit f \\<longrightarrow>\n                         {x. \\<forall>y<oLimit f. oVeblen F y x = x}\n                         \\<subseteq> range (oVeblen F (oLimit f))", "apply (simp add: oVeblen_oSuc range_oDeriv normal_oVeblen)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> range (oVeblen F (f n))\\<rbrakk>\n       \\<Longrightarrow> 0 < oLimit f \\<longrightarrow>\n                         {x. \\<forall>y<oLimit f. oVeblen F y x = x}\n                         \\<subseteq> range (oVeblen F (oLimit f))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> range (oVeblen F (f n));\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> range (oVeblen F (oLimit f))", "apply (simp add: range_oVeblen)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (oLimit f)", "apply (clarsimp simp add: critical_set_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f xa)", "apply (rule_tac A=\"critical_set (range F) (f (Suc xa))\" in subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> critical_set (range F) (f (Suc xa))\n                         \\<subseteq> critical_set (range F) (f xa)\n 2. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (rule critical_set_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> f xa \\<le> f (Suc xa)\n 2. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (simp add: strict_mono_monoD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n.\n           0 < f n \\<longrightarrow>\n           {x. \\<forall>y<f n. oVeblen F y x = x}\n           \\<subseteq> critical_set (range F) (f n);\n        0 < oLimit f; \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (drule_tac x=\"Suc xa\" in spec, drule mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> 0 < f (Suc xa)\n 2. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x;\n        {x. \\<forall>y<f (Suc xa). oVeblen F y x = x}\n        \\<subseteq> critical_set (range F) (f (Suc xa))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (rule_tac y=\"f xa\" in order_le_less_trans, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x\\<rbrakk>\n       \\<Longrightarrow> f xa < f (Suc xa)\n 2. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x;\n        {x. \\<forall>y<f (Suc xa). oVeblen F y x = x}\n        \\<subseteq> critical_set (range F) (f (Suc xa))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (erule OrdinalInduct.strict_monoD, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x;\n        {x. \\<forall>y<f (Suc xa). oVeblen F y x = x}\n        \\<subseteq> critical_set (range F) (f (Suc xa))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> critical_set (range F) (f (Suc xa))", "apply (erule subsetD, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa y.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        \\<forall>y<oLimit f. oVeblen F y x = x; y < f (Suc xa)\\<rbrakk>\n       \\<Longrightarrow> oVeblen F y x = x", "apply (drule spec, erule mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa y.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f;\n        y < f (Suc xa)\\<rbrakk>\n       \\<Longrightarrow> y < oLimit f", "apply (erule order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa y.\n       \\<lbrakk>OrdinalInduct.strict_mono f; 0 < oLimit f\\<rbrakk>\n       \\<Longrightarrow> f (Suc xa) \\<le> oLimit f", "apply (rule le_oLimit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Veblen hierarchy over $\\lambda x.\\ 1 + x$\\<close>"], ["", "lemma oDeriv_id: \"oDeriv id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oDeriv id = id", "apply (rule ext, rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. oDeriv id 0 = id 0\n 2. \\<And>x xa.\n       oDeriv id xa = id xa \\<Longrightarrow>\n       oDeriv id (oSuc xa) = id (oSuc xa)\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv id (f n) = id (f n)\\<rbrakk>\n       \\<Longrightarrow> oDeriv id (oLimit f) = id (oLimit f)", "apply (simp add: oFix_eq_self)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       oDeriv id xa = id xa \\<Longrightarrow>\n       oDeriv id (oSuc xa) = id (oSuc xa)\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv id (f n) = id (f n)\\<rbrakk>\n       \\<Longrightarrow> oDeriv id (oLimit f) = id (oLimit f)", "apply (simp add: oFix_eq_self)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv id (f n) = id (f n)\\<rbrakk>\n       \\<Longrightarrow> oDeriv id (oLimit f) = id (oLimit f)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oFix_plus: \"oFix (\\<lambda>x. a + x) 0 = a * \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oFix ((+) a) 0 = a * \\<omega>", "apply (simp add: oFix_def omega_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. oLimit (\\<lambda>n. iter n ((+) a) 0) =\n    oLimit (\\<lambda>n. a * ordinal_of_nat n)", "apply (rule_tac f=oLimit in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. iter n ((+) a) 0) = (\\<lambda>n. a * ordinal_of_nat n)", "apply (rule ext, induct_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       iter na ((+) a) 0 = a * ordinal_of_nat na \\<Longrightarrow>\n       iter (Suc na) ((+) a) 0 = a * ordinal_of_nat (Suc na)", "apply (simp, rename_tac n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       iter n ((+) a) 0 = a * ordinal_of_nat n \\<Longrightarrow>\n       a + a * ordinal_of_nat n = a * ordinal_of_nat n + a", "apply (induct_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>iter n ((+) a) 0 = a * ordinal_of_nat n;\n        a + a * ordinal_of_nat na = a * ordinal_of_nat na + a\\<rbrakk>\n       \\<Longrightarrow> a + a * ordinal_of_nat (Suc na) =\n                         a * ordinal_of_nat (Suc na) + a", "apply (simp add: ordinal_plus_assoc[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oDeriv_plus: \"oDeriv ((+) a) = ((+) (a * \\<omega>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oDeriv ((+) a) = (+) (a * \\<omega>)", "apply (rule ext, rule_tac a=x in oLimit_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. oDeriv ((+) a) 0 = a * \\<omega> + 0\n 2. \\<And>x xa.\n       oDeriv ((+) a) xa = a * \\<omega> + xa \\<Longrightarrow>\n       oDeriv ((+) a) (oSuc xa) = a * \\<omega> + oSuc xa\n 3. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv ((+) a) (f n) = a * \\<omega> + f n\\<rbrakk>\n       \\<Longrightarrow> oDeriv ((+) a) (oLimit f) = a * \\<omega> + oLimit f", "apply (simp add: oFix_plus)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       oDeriv ((+) a) xa = a * \\<omega> + xa \\<Longrightarrow>\n       oDeriv ((+) a) (oSuc xa) = a * \\<omega> + oSuc xa\n 2. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv ((+) a) (f n) = a * \\<omega> + f n\\<rbrakk>\n       \\<Longrightarrow> oDeriv ((+) a) (oLimit f) = a * \\<omega> + oLimit f", "apply (simp add: oFix_eq_self\n                   ordinal_plus_assoc[symmetric]\n                   ordinal_plus_times_omega)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>n. oDeriv ((+) a) (f n) = a * \\<omega> + f n\\<rbrakk>\n       \\<Longrightarrow> oDeriv ((+) a) (oLimit f) = a * \\<omega> + oLimit f", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma oVeblen_1_plus: \"oVeblen ((+) 1) x = ((+) (\\<omega> ** x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oVeblen ((+) 1) x = (+) (\\<omega> ** x)", "apply (rule_tac a=x in wf_induct[OF wf], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y<x.\n          oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y) \\<Longrightarrow>\n       oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)", "apply (rule_tac a=x in ordinal_cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        x = oSuc xa\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)\n 3. \\<And>x f.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)", "apply (simp add: normal.oVeblen_0[OF normal_plus])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        x = oSuc xa\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)\n 2. \\<And>x f.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)", "apply (simp add: normal.oVeblen_oSuc[OF normal_plus])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>y<oSuc xa.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        x = oSuc xa\\<rbrakk>\n       \\<Longrightarrow> oDeriv ((+) (\\<omega> ** xa)) =\n                         (+) (\\<omega> ** xa * \\<omega>)\n 2. \\<And>x f.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)", "apply (simp add: oDeriv_plus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>\\<forall>y<x.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; x = oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) x = (+) (\\<omega> ** x)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) (oLimit f) =\n                         (+) (oLimit (\\<lambda>n. \\<omega> ** f n))", "apply (rule normal_range_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> normal (oVeblen ((+) (oSuc 0)) (oLimit f))\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> normal ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))\n 3. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> range (oVeblen ((+) (oSuc 0)) (oLimit f)) =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply (rule normal.normal_oVeblen[OF normal_plus])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> normal ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> range (oVeblen ((+) (oSuc 0)) (oLimit f)) =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply (rule normal_plus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> range (oVeblen ((+) (oSuc 0)) (oLimit f)) =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply (subst normal.critical_set_fixed[OF normal_plus])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> 0 < oLimit f\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> {x. \\<forall>y<oLimit f.\n                                oVeblen ((+) (oSuc 0)) y x = x} =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply (rule_tac y=\"f 0\" in order_le_less_trans, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> f 0 < oLimit f\n 2. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> {x. \\<forall>y<oLimit f.\n                                oVeblen ((+) (oSuc 0)) y x = x} =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply (simp add: strict_mono_less_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f\\<rbrakk>\n       \\<Longrightarrow> {x. \\<forall>y<oLimit f.\n                                oVeblen ((+) (oSuc 0)) y x = x} =\n                         range ((+) (oLimit (\\<lambda>n. \\<omega> ** f n)))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. oVeblen ((+) (oSuc 0)) y x = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> range\n                                  ((+) (oLimit\n   (\\<lambda>n. \\<omega> ** f n)))\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (simp add: image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. \\<omega> ** y + x = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = oLimit (\\<lambda>n. \\<omega> ** f n) + xa\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (rule exI, rule ordinal_plus_minus2[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. \\<omega> ** y + x = x\\<rbrakk>\n       \\<Longrightarrow> oLimit (\\<lambda>n. \\<omega> ** f n) \\<le> x\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (rule oLimit_leI[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. \\<omega> ** y + x = x\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** f n \\<le> x\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (subgoal_tac \"\\<omega> ** f n + x = x\", erule subst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. \\<omega> ** y + x = x\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** f n + x = x\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (drule_tac x=\"f n\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x n.\n       \\<lbrakk>OrdinalInduct.strict_mono f;\n        \\<forall>y<oLimit f. \\<omega> ** y + x = x;\n        f n < oLimit f \\<longrightarrow>\n        oVeblen ((+) (oSuc 0)) (f n) = (+) (\\<omega> ** f n)\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** f n + x = x\n 2. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (simp add: strict_mono_less_oLimit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; xa \\<in> UNIV; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> oVeblen ((+) (oSuc 0)) y\n                          (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** y +\n                         (oLimit (\\<lambda>n. \\<omega> ** f n) + xa) =\n                         oLimit (\\<lambda>n. \\<omega> ** f n) + xa", "apply (simp only: ordinal_exp_oLimit[symmetric] zero_less_omega)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** y + (\\<omega> ** oLimit f + xa) =\n                         \\<omega> ** oLimit f + xa", "apply (simp only: ordinal_plus_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f xa y.\n       \\<lbrakk>\\<forall>y<oLimit f.\n                   oVeblen ((+) (oSuc 0)) y = (+) (\\<omega> ** y);\n        OrdinalInduct.strict_mono f; y < oLimit f\\<rbrakk>\n       \\<Longrightarrow> \\<omega> ** y + \\<omega> ** oLimit f + xa =\n                         \\<omega> ** oLimit f + xa", "apply (simp only: absorb_omega_exp2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}