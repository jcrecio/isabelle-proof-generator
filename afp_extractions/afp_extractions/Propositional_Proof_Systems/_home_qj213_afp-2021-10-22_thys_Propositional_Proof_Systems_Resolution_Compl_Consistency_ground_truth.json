{"file_name": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems/Resolution_Compl_Consistency.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems", "problem_names": ["lemma OrI2': \"(\\<not>P \\<Longrightarrow> Q) \\<Longrightarrow> P \\<or> Q\"", "lemma atomD: \"Atom k \\<in> S \\<Longrightarrow> {Pos k} \\<in> \\<Union>(cnf ` S)\" \"Not (Atom k) \\<in> S \\<Longrightarrow> {Neg k} \\<in> \\<Union>(cnf ` S)\"", "lemma pcp_disj: (* this is the same as for LSC \\<Rightarrow> Res. but I don't want to make the proof of that too, so I'm keeping my code duplication *)\n \"\\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>; (\\<forall>xa. (xa = F \\<or> xa \\<in> \\<Gamma>) \\<longrightarrow> is_cnf xa) \\<longrightarrow> (cnf F \\<union> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>); (\\<forall>xa. (xa = G \\<or> xa \\<in> \\<Gamma>) \\<longrightarrow> is_cnf xa) \\<longrightarrow> (cnf G \\<union> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>); \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>\"", "lemma R_consistent: \"pcp {\\<Gamma>|\\<Gamma>. \\<not>((\\<forall>\\<gamma> \\<in> \\<Gamma>. is_cnf \\<gamma>) \\<longrightarrow> ((\\<Union>(cnf ` \\<Gamma>)) \\<turnstile> \\<box>))}\"", "theorem Resolution_complete:\n  fixes F :: \"'a :: countable formula\"\n  shows \"\\<Turnstile> F \\<Longrightarrow> cnf (nnf (\\<^bold>\\<not>F)) \\<turnstile> \\<box>\""], "translations": [["", "lemma OrI2': \"(\\<not>P \\<Longrightarrow> Q) \\<Longrightarrow> P \\<or> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> P \\<Longrightarrow> Q) \\<Longrightarrow> P \\<or> Q", "by auto"], ["", "lemma atomD: \"Atom k \\<in> S \\<Longrightarrow> {Pos k} \\<in> \\<Union>(cnf ` S)\" \"Not (Atom k) \\<in> S \\<Longrightarrow> {Neg k} \\<in> \\<Union>(cnf ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Atom k \\<in> S \\<Longrightarrow>\n     {k\\<^sup>+} \\<in> \\<Union> (cnf ` S)) &&&\n    (\\<^bold>\\<not> (Atom k) \\<in> S \\<Longrightarrow>\n     {k\\<inverse>} \\<in> \\<Union> (cnf ` S))", "by force+"], ["", "lemma pcp_disj: (* this is the same as for LSC \\<Rightarrow> Res. but I don't want to make the proof of that too, so I'm keeping my code duplication *)\n \"\\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>; (\\<forall>xa. (xa = F \\<or> xa \\<in> \\<Gamma>) \\<longrightarrow> is_cnf xa) \\<longrightarrow> (cnf F \\<union> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>); (\\<forall>xa. (xa = G \\<or> xa \\<in> \\<Gamma>) \\<longrightarrow> is_cnf xa) \\<longrightarrow> (cnf G \\<union> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>); \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>x\\<in>\\<Gamma>. cnf x) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "case 1"], ["proof (state)\nthis:\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n  (\\<forall>xa.\n      xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  (\\<forall>xa.\n      xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  \\<forall>x\\<in>\\<Gamma>. is_cnf x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "from 1(1,4)"], ["proof (chain)\npicking this:\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n  \\<forall>x\\<in>\\<Gamma>. is_cnf x", "have \"is_cnf (F \\<^bold>\\<or> G)\""], ["proof (prove)\nusing this:\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n  \\<forall>x\\<in>\\<Gamma>. is_cnf x\n\ngoal (1 subgoal):\n 1. is_cnf (F \\<^bold>\\<or> G)", "by blast"], ["proof (state)\nthis:\n  is_cnf (F \\<^bold>\\<or> G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "hence db: \"is_disj F\" \"is_lit_plus F\" \"is_disj G\""], ["proof (prove)\nusing this:\n  is_cnf (F \\<^bold>\\<or> G)\n\ngoal (1 subgoal):\n 1. is_disj F &&& is_lit_plus F &&& is_disj G", "by(cases F; simp)+"], ["proof (state)\nthis:\n  is_disj F\n  is_lit_plus F\n  is_disj G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "hence \"is_cnf F \\<and> is_cnf G\""], ["proof (prove)\nusing this:\n  is_disj F\n  is_lit_plus F\n  is_disj G\n\ngoal (1 subgoal):\n 1. is_cnf F \\<and> is_cnf G", "by(cases F; cases G; simp)"], ["proof (state)\nthis:\n  is_cnf F \\<and> is_cnf G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "with 1"], ["proof (chain)\npicking this:\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n  (\\<forall>xa.\n      xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  (\\<forall>xa.\n      xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  \\<forall>x\\<in>\\<Gamma>. is_cnf x\n  is_cnf F \\<and> is_cnf G", "have IH: \"(\\<Union>(cnf ` (F \\<triangleright> \\<Gamma>))) \\<turnstile> \\<box>\" \"(\\<Union>(cnf ` (G \\<triangleright> \\<Gamma>))) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n  (\\<forall>xa.\n      xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  (\\<forall>xa.\n      xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n      is_cnf xa) \\<longrightarrow>\n  cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  \\<forall>x\\<in>\\<Gamma>. is_cnf x\n  is_cnf F \\<and> is_cnf G\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box> &&&\n    \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>", "by simp_all"], ["proof (state)\nthis:\n  \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "let ?\\<Gamma> = \"(\\<Union>(cnf ` \\<Gamma>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "from IH"], ["proof (chain)\npicking this:\n  \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>", "have IH_readable: \"cnf F \\<union> ?\\<Gamma> \\<turnstile> \\<box>\" \"cnf G \\<union> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box> &&&\n    cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> \\<Gamma>;\n     (\\<forall>xa.\n         xa = F \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf F \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     (\\<forall>xa.\n         xa = G \\<or> xa \\<in> \\<Gamma> \\<longrightarrow>\n         is_cnf xa) \\<longrightarrow>\n     cnf G \\<union> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     \\<forall>x\\<in>\\<Gamma>. is_cnf x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "proof(cases \"cnf F = {} \\<or> cnf G = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "case True"], ["proof (state)\nthis:\n  cnf F = {} \\<or> cnf G = {}\n\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "hence \"cnf (F \\<^bold>\\<or> G) = {}\""], ["proof (prove)\nusing this:\n  cnf F = {} \\<or> cnf G = {}\n\ngoal (1 subgoal):\n 1. cnf (F \\<^bold>\\<or> G) = {}", "by auto"], ["proof (state)\nthis:\n  cnf (F \\<^bold>\\<or> G) = {}\n\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  cnf (F \\<^bold>\\<or> G) = {}\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using True IH"], ["proof (prove)\nusing this:\n  cnf (F \\<^bold>\\<or> G) = {}\n  cnf F = {} \\<or> cnf G = {}\n  \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "case False"], ["proof (state)\nthis:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "then"], ["proof (chain)\npicking this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})", "obtain S T where ST: \"cnf F = {S}\" \"cnf G = {T}\""], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cnf_disj_ex db(1,3)"], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n  is_disj ?F \\<Longrightarrow> \\<exists>R. cnf ?F = {R} \\<or> cnf ?F = {}\n  is_disj F\n  is_disj G\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(* try applying meson here. It's weird. and sledgehammer even suggests it. *)"], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n  is_disj ?F \\<Longrightarrow> \\<exists>R. cnf ?F = {R} \\<or> cnf ?F = {}\n  is_disj F\n  is_disj G\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "(* hint: card S \\<le> 1 *)"], ["proof (state)\nthis:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "hence R: \"cnf (F \\<^bold>\\<or> G) = { S \\<union> T }\""], ["proof (prove)\nusing this:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. cnf (F \\<^bold>\\<or> G) = {S \\<union> T}", "by simp"], ["proof (state)\nthis:\n  cnf (F \\<^bold>\\<or> G) = {S \\<union> T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "have \"\\<lbrakk>S\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>; T\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\\<rbrakk> \\<Longrightarrow> S \\<union> T\\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "assume s: \"S\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\" and t: \"T\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (state)\nthis:\n  S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "hence s_w: \"S \\<triangleright> S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. S \\<triangleright> S \\<union>\n                       T \\<triangleright> \\<Union>\n     (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using Resolution_weaken"], ["proof (prove)\nusing this:\n  S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  ?S \\<turnstile> ?D \\<Longrightarrow> ?T \\<union> ?S \\<turnstile> ?D\n\ngoal (1 subgoal):\n 1. S \\<triangleright> S \\<union>\n                       T \\<triangleright> \\<Union>\n     (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by (metis insert_commute insert_is_Un)"], ["proof (state)\nthis:\n  S \\<triangleright> S \\<union>\n                     T \\<triangleright> \\<Union>\n   (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "note Resolution_taint_assumptions[of \"{T}\" ?\\<Gamma> \"\\<box>\" S] t"], ["proof (state)\nthis:\n  {T} \\<union>\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "then"], ["proof (chain)\npicking this:\n  {T} \\<union>\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "obtain R where R: \"S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> R\" \"R\\<subseteq>S\""], ["proof (prove)\nusing this:\n  {T} \\<union>\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        \\<lbrakk>S \\<union>\n                 T \\<triangleright> \\<Union>\n                                     (cnf ` \\<Gamma>) \\<turnstile> R;\n         R \\<subseteq> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Un_commute)"], ["proof (state)\nthis:\n  S \\<union> T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R\n  R \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "have literal_subset_sandwich: \"R = \\<box> \\<or> R = S\" if \"is_lit_plus F\" \"cnf F = {S}\" \"R \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = \\<box> \\<or> R = S", "using that"], ["proof (prove)\nusing this:\n  is_lit_plus F\n  cnf F = {S}\n  R \\<subseteq> S\n\ngoal (1 subgoal):\n 1. R = \\<box> \\<or> R = S", "by(cases F rule: is_lit_plus.cases; simp) blast+"], ["proof (state)\nthis:\n  \\<lbrakk>is_lit_plus F; cnf F = {S}; R \\<subseteq> S\\<rbrakk>\n  \\<Longrightarrow> R = \\<box> \\<or> R = S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using literal_subset_sandwich[OF db(2) ST(1) R(2)]"], ["proof (prove)\nusing this:\n  R = \\<box> \\<or> R = S\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. R = \\<box> \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n 2. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "assume \"R = \\<box>\""], ["proof (state)\nthis:\n  R = \\<box>\n\ngoal (2 subgoals):\n 1. R = \\<box> \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n 2. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  R = \\<box>\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using R(1)"], ["proof (prove)\nusing this:\n  R = \\<box>\n  S \\<union> T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by blast"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "from Resolution_unnecessary[where T=\"{_}\", simplified] R(1)"], ["proof (chain)\npicking this:\n  ?S \\<turnstile> ?uu5 \\<Longrightarrow>\n  (?uu5 \\<triangleright> ?S \\<turnstile> ?D) = (?S \\<turnstile> ?D)\n  S \\<union> T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R", "have \"(R \\<triangleright> S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>) = (S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>)\""], ["proof (prove)\nusing this:\n  ?S \\<turnstile> ?uu5 \\<Longrightarrow>\n  (?uu5 \\<triangleright> ?S \\<turnstile> ?D) = (?S \\<turnstile> ?D)\n  S \\<union> T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> R\n\ngoal (1 subgoal):\n 1. (R \\<triangleright> S \\<union>\n                        T \\<triangleright> \\<Union>\n      (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n    (S \\<union>\n     T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)", "."], ["proof (state)\nthis:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "moreover"], ["proof (state)\nthis:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "assume \"R = S\""], ["proof (state)\nthis:\n  R = S\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "ultimately"], ["proof (chain)\npicking this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)\n  R = S", "show ?thesis"], ["proof (prove)\nusing this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)\n  R = S\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using s_w"], ["proof (prove)\nusing this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)\n  R = S\n  S \\<triangleright> S \\<union>\n                     T \\<triangleright> \\<Union>\n   (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "using IH ST R 1(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>S \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (F \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` (G \\<triangleright> \\<Gamma>)) \\<turnstile> \\<box>\n  cnf F = {S}\n  cnf G = {T}\n  cnf (F \\<^bold>\\<or> G) = {S \\<union> T}\n  F \\<^bold>\\<or> G \\<in> \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>", "by (metis UN_insert insert_absorb insert_is_Un)"], ["proof (state)\nthis:\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R_consistent: \"pcp {\\<Gamma>|\\<Gamma>. \\<not>((\\<forall>\\<gamma> \\<in> \\<Gamma>. is_cnf \\<gamma>) \\<longrightarrow> ((\\<Union>(cnf ` \\<Gamma>)) \\<turnstile> \\<box>))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcp {\\<Gamma> |\\<Gamma>.\n         \\<not> ((\\<forall>\\<gamma>\\<in>\\<Gamma>.\n                     is_cnf \\<gamma>) \\<longrightarrow>\n                 \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}", "unfolding pcp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S\\<in>{\\<Gamma> |\\<Gamma>.\n                    \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                            \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}.\n       \\<bottom> \\<notin> S \\<and>\n       (\\<forall>k.\n           Atom k \\<in> S \\<longrightarrow>\n           \\<^bold>\\<not> (Atom k) \\<in> S \\<longrightarrow> False) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<and> G \\<in> S \\<longrightarrow>\n           F \\<triangleright> G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<or> G \\<in> S \\<longrightarrow>\n           F \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<rightarrow> G \\<in> S \\<longrightarrow>\n           \\<^bold>\\<not> F \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F.\n           \\<^bold>\\<not> (\\<^bold>\\<not> F) \\<in> S \\<longrightarrow>\n           F \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<and> G) \\<in> S \\<longrightarrow>\n           \\<^bold>\\<not> F \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           \\<^bold>\\<not> G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<or> G) \\<in> S \\<longrightarrow>\n           \\<^bold>\\<not>\n            F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)\n           \\<in> S \\<longrightarrow>\n           F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> S\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> (Ball \\<Gamma> is_cnf \\<longrightarrow>\n                          \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)})", "unfolding Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> {\\<Gamma> |\\<Gamma>.\n                \\<not> ((\\<forall>x.\n                            x \\<in> \\<Gamma> \\<longrightarrow>\n                            is_cnf x) \\<longrightarrow>\n                        \\<Union>\n                         (cnf `\n                          \\<Gamma>) \\<turnstile> \\<box>)} \\<longrightarrow>\n       \\<bottom> \\<notin> x \\<and>\n       (\\<forall>k.\n           Atom k \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not> (Atom k) \\<in> x \\<longrightarrow> False) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<and> G \\<in> x \\<longrightarrow>\n           F \\<triangleright> G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<or> G \\<in> x \\<longrightarrow>\n           F \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<rightarrow> G \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not> F \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F.\n           \\<^bold>\\<not> (\\<^bold>\\<not> F) \\<in> x \\<longrightarrow>\n           F \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<and> G) \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not> F \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)} \\<or>\n           \\<^bold>\\<not> G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<or> G) \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not>\n            F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union>\n                           (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)\n           \\<in> x \\<longrightarrow>\n           F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x\n           \\<in> {\\<Gamma> |\\<Gamma>.\n                  \\<not> ((\\<forall>x.\n                              x \\<in> \\<Gamma> \\<longrightarrow>\n                              is_cnf x) \\<longrightarrow>\n                          \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)})", "unfolding mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>\\<Gamma>.\n           x = \\<Gamma> \\<and>\n           \\<not> ((\\<forall>x.\n                       x \\<in> \\<Gamma> \\<longrightarrow>\n                       is_cnf x) \\<longrightarrow>\n                   \\<Union>\n                    (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<longrightarrow>\n       \\<bottom> \\<notin> x \\<and>\n       (\\<forall>k.\n           Atom k \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not> (Atom k) \\<in> x \\<longrightarrow> False) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<and> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<or> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<rightarrow> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F.\n           \\<^bold>\\<not> (\\<^bold>\\<not> F) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<and> G) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<or> G) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not>\n                F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x =\n               \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)\n           \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x =\n               \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>\\<Gamma>.\n          x = \\<Gamma> \\<and>\n          \\<not> ((\\<forall>x.\n                      x \\<in> \\<Gamma> \\<longrightarrow>\n                      is_cnf x) \\<longrightarrow>\n                  \\<Union>\n                   (cnf ` \\<Gamma>) \\<turnstile> \\<box>) \\<Longrightarrow>\n       \\<bottom> \\<notin> x \\<and>\n       (\\<forall>k.\n           Atom k \\<in> x \\<longrightarrow>\n           \\<^bold>\\<not> (Atom k) \\<in> x \\<longrightarrow> False) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<and> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<or> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           F \\<^bold>\\<rightarrow> G \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F.\n           \\<^bold>\\<not> (\\<^bold>\\<not> F) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<and> G) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not> G \\<triangleright> x = \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<or> G) \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               \\<^bold>\\<not>\n                F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x =\n               \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union>\n                        (cnf ` \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n       (\\<forall>F G.\n           \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)\n           \\<in> x \\<longrightarrow>\n           (\\<exists>\\<Gamma>.\n               F \\<triangleright> \\<^bold>\\<not> G \\<triangleright> x =\n               \\<Gamma> \\<and>\n               \\<not> ((\\<forall>x.\n                           x \\<in> \\<Gamma> \\<longrightarrow>\n                           is_cnf x) \\<longrightarrow>\n                       \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)))", "apply(erule contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<not> (\\<bottom> \\<notin> x \\<and>\n               (\\<forall>k.\n                   Atom k \\<in> x \\<longrightarrow>\n                   \\<^bold>\\<not> (Atom k) \\<in> x \\<longrightarrow>\n                   False) \\<and>\n               (\\<forall>F G.\n                   F \\<^bold>\\<and> G \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       F \\<triangleright> G \\<triangleright> x =\n                       \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F G.\n                   F \\<^bold>\\<or> G \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       F \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n                   (\\<exists>\\<Gamma>.\n                       G \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F G.\n                   F \\<^bold>\\<rightarrow> G \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n                   (\\<exists>\\<Gamma>.\n                       G \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F.\n                   \\<^bold>\\<not> (\\<^bold>\\<not> F)\n                   \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       F \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F G.\n                   \\<^bold>\\<not> (F \\<^bold>\\<and> G)\n                   \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       \\<^bold>\\<not> F \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf ` \\<Gamma>) \\<turnstile> \\<box>)) \\<or>\n                   (\\<exists>\\<Gamma>.\n                       \\<^bold>\\<not> G \\<triangleright> x = \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F G.\n                   \\<^bold>\\<not> (F \\<^bold>\\<or> G)\n                   \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       \\<^bold>\\<not>\n                        F \\<triangleright> \\<^bold>\\<not>\n      G \\<triangleright> x =\n                       \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>))) \\<and>\n               (\\<forall>F G.\n                   \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)\n                   \\<in> x \\<longrightarrow>\n                   (\\<exists>\\<Gamma>.\n                       F \\<triangleright> \\<^bold>\\<not>\n     G \\<triangleright> x =\n                       \\<Gamma> \\<and>\n                       \\<not> ((\\<forall>x.\n                                   x \\<in> \\<Gamma> \\<longrightarrow>\n                                   is_cnf x) \\<longrightarrow>\n                               \\<Union>\n                                (cnf `\n                                 \\<Gamma>) \\<turnstile> \\<box>)))) \\<Longrightarrow>\n       \\<nexists>\\<Gamma>.\n          x = \\<Gamma> \\<and>\n          \\<not> ((\\<forall>x.\n                      x \\<in> \\<Gamma> \\<longrightarrow>\n                      is_cnf x) \\<longrightarrow>\n                  \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)", "apply(unfold not_ex de_Morgan_conj de_Morgan_disj not_not not_all not_imp disj_not1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<bottom> \\<in> x \\<or>\n       (\\<exists>xa.\n           Atom xa \\<in> x \\<and>\n           \\<^bold>\\<not> (Atom xa) \\<in> x \\<and> \\<not> False) \\<or>\n       (\\<exists>xa xb.\n           xa \\<^bold>\\<and> xb \\<in> x \\<and>\n           (\\<forall>xc.\n               xa \\<triangleright> xb \\<triangleright> x =\n               xc \\<longrightarrow>\n               (\\<exists>x. x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xc) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa xb.\n           xa \\<^bold>\\<or> xb \\<in> x \\<and>\n           (\\<forall>xb.\n               xa \\<triangleright> x = xb \\<longrightarrow>\n               (\\<exists>x. x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n           (\\<forall>xa.\n               xb \\<triangleright> x = xa \\<longrightarrow>\n               (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa xb.\n           xa \\<^bold>\\<rightarrow> xb \\<in> x \\<and>\n           (\\<forall>xb.\n               \\<^bold>\\<not> xa \\<triangleright> x = xb \\<longrightarrow>\n               (\\<exists>x. x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n           (\\<forall>xa.\n               xb \\<triangleright> x = xa \\<longrightarrow>\n               (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa.\n           \\<^bold>\\<not> (\\<^bold>\\<not> xa) \\<in> x \\<and>\n           (\\<forall>xb.\n               xa \\<triangleright> x = xb \\<longrightarrow>\n               (\\<exists>x. x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xb) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa xb.\n           \\<^bold>\\<not> (xa \\<^bold>\\<and> xb) \\<in> x \\<and>\n           (\\<forall>xb.\n               \\<^bold>\\<not> xa \\<triangleright> x = xb \\<longrightarrow>\n               (\\<exists>x. x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n           (\\<forall>xa.\n               \\<^bold>\\<not> xb \\<triangleright> x = xa \\<longrightarrow>\n               (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa xb.\n           \\<^bold>\\<not> (xa \\<^bold>\\<or> xb) \\<in> x \\<and>\n           (\\<forall>xc.\n               \\<^bold>\\<not>\n                xa \\<triangleright> \\<^bold>\\<not> xb \\<triangleright> x =\n               xc \\<longrightarrow>\n               (\\<exists>x. x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xc) \\<turnstile> \\<box>))) \\<or>\n       (\\<exists>xa xb.\n           \\<^bold>\\<not> (xa \\<^bold>\\<rightarrow> xb) \\<in> x \\<and>\n           (\\<forall>xc.\n               xa \\<triangleright> \\<^bold>\\<not> xb \\<triangleright> x =\n               xc \\<longrightarrow>\n               (\\<exists>x. x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n               (\\<Union> (cnf ` xc) \\<turnstile> \\<box>))) \\<Longrightarrow>\n       \\<forall>xa.\n          x = xa \\<longrightarrow>\n          (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n          (\\<Union> (cnf ` xa) \\<turnstile> \\<box>)", "apply(intro impI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<bottom> \\<in> x \\<or>\n                (\\<exists>xa.\n                    Atom xa \\<in> x \\<and>\n                    \\<^bold>\\<not> (Atom xa) \\<in> x \\<and>\n                    \\<not> False) \\<or>\n                (\\<exists>xa xb.\n                    xa \\<^bold>\\<and> xb \\<in> x \\<and>\n                    (\\<forall>xc.\n                        xa \\<triangleright> xb \\<triangleright> x =\n                        xc \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xc) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa xb.\n                    xa \\<^bold>\\<or> xb \\<in> x \\<and>\n                    (\\<forall>xb.\n                        xa \\<triangleright> x = xb \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n                    (\\<forall>xa.\n                        xb \\<triangleright> x = xa \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa xb.\n                    xa \\<^bold>\\<rightarrow> xb \\<in> x \\<and>\n                    (\\<forall>xb.\n                        \\<^bold>\\<not> xa \\<triangleright> x =\n                        xb \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n                    (\\<forall>xa.\n                        xb \\<triangleright> x = xa \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa.\n                    \\<^bold>\\<not> (\\<^bold>\\<not> xa) \\<in> x \\<and>\n                    (\\<forall>xb.\n                        xa \\<triangleright> x = xb \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xb) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa xb.\n                    \\<^bold>\\<not> (xa \\<^bold>\\<and> xb) \\<in> x \\<and>\n                    (\\<forall>xb.\n                        \\<^bold>\\<not> xa \\<triangleright> x =\n                        xb \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xb \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xb) \\<turnstile> \\<box>)) \\<and>\n                    (\\<forall>xa.\n                        \\<^bold>\\<not> xb \\<triangleright> x =\n                        xa \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xa) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa xb.\n                    \\<^bold>\\<not> (xa \\<^bold>\\<or> xb) \\<in> x \\<and>\n                    (\\<forall>xc.\n                        \\<^bold>\\<not>\n                         xa \\<triangleright> \\<^bold>\\<not>\n        xb \\<triangleright> x =\n                        xc \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xc) \\<turnstile> \\<box>))) \\<or>\n                (\\<exists>xa xb.\n                    \\<^bold>\\<not> (xa \\<^bold>\\<rightarrow> xb)\n                    \\<in> x \\<and>\n                    (\\<forall>xc.\n                        xa \\<triangleright> \\<^bold>\\<not>\n       xb \\<triangleright> x =\n                        xc \\<longrightarrow>\n                        (\\<exists>x.\n                            x \\<in> xc \\<and> \\<not> is_cnf x) \\<or>\n                        (\\<Union> (cnf ` xc) \\<turnstile> \\<box>)));\n        x = xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n                         (\\<Union> (cnf ` xa) \\<turnstile> \\<box>)", "apply(elim disjE exE conjE; intro OrI2')"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = xa; \\<bottom> \\<in> x;\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb.\n       \\<lbrakk>x = xa; Atom xb \\<in> x; \\<^bold>\\<not> (Atom xb) \\<in> x;\n        \\<not> False;\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<and> xc \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<or> xc \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<rightarrow> xc \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not> xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 7. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not> xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           \\<^bold>\\<not> xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 8. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> x =\n           xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 9. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa;\n        \\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> x =\n           xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<nexists>x. x \\<in> xa \\<and> \\<not> is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply(unfold not_ex de_Morgan_conj de_Morgan_disj not_not not_all not_imp disj_not1 Ball_def[symmetric])"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = xa; \\<bottom> \\<in> x;\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb.\n       \\<lbrakk>x = xa; Atom xb \\<in> x; \\<^bold>\\<not> (Atom xb) \\<in> x;\n        \\<not> False; \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<and> xc \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<or> xc \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; xb \\<^bold>\\<rightarrow> xc \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not> xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 7. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not> xb \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>xa.\n           \\<^bold>\\<not> xc \\<triangleright> x = xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 8. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa; \\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> x;\n        \\<forall>xa.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> x =\n           xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 9. \\<And>x xa xb xc.\n       \\<lbrakk>x = xa;\n        \\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> x;\n        \\<forall>xa.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> x =\n           xa \\<longrightarrow>\n           (\\<exists>x. x \\<in> xa \\<and> \\<not> is_cnf x) \\<or>\n           (\\<Union> (cnf ` xa) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply safe"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<bottom> \\<in> xa; \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb.\n       \\<lbrakk>Atom xb \\<in> xa; \\<^bold>\\<not> (Atom xb) \\<in> xa;\n        \\<not> False; \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<and> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<or> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<rightarrow> xc \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb.\n       \\<lbrakk>\\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 7. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           \\<^bold>\\<not> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 8. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 9. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply (metis Ass Pow_bottom Pow_empty UN_I cnf.simps(3))"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x xa xb.\n       \\<lbrakk>Atom xb \\<in> xa; \\<^bold>\\<not> (Atom xb) \\<in> xa;\n        \\<not> False; \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<and> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<or> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<rightarrow> xc \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb.\n       \\<lbrakk>\\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           \\<^bold>\\<not> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 7. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 8. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply (metis Diff_insert_absorb Resolution.simps insert_absorb singletonI sup_bot.right_neutral atomD)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<and> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<or> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<rightarrow> xc \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb.\n       \\<lbrakk>\\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           \\<^bold>\\<not> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 7. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply (simp; metis (no_types, hide_lams) UN_insert cnf.simps(5) insert_absorb is_cnf.simps(1) sup_assoc)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<or> xc \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<^bold>\\<rightarrow> xc \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 3. \\<And>x xa xb.\n       \\<lbrakk>\\<^bold>\\<not> (\\<^bold>\\<not> xb) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<and> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not> xb \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x.\n           \\<^bold>\\<not> xc \\<triangleright> xa = x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 5. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<or> xc) \\<in> xa;\n        \\<forall>x.\n           \\<^bold>\\<not>\n            xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>\n 6. \\<And>x xa xb xc.\n       \\<lbrakk>\\<^bold>\\<not> (xb \\<^bold>\\<rightarrow> xc) \\<in> xa;\n        \\<forall>x.\n           xb \\<triangleright> \\<^bold>\\<not> xc \\<triangleright> xa =\n           x \\<longrightarrow>\n           (\\<exists>xa. xa \\<in> x \\<and> \\<not> is_cnf xa) \\<or>\n           (\\<Union> (cnf ` x) \\<turnstile> \\<box>);\n        \\<forall>x\\<in>xa. is_cnf x\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (cnf ` xa) \\<turnstile> \\<box>", "apply (auto intro: pcp_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem Resolution_complete:\n  fixes F :: \"'a :: countable formula\"\n  shows \"\\<Turnstile> F \\<Longrightarrow> cnf (nnf (\\<^bold>\\<not>F)) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile> F \\<Longrightarrow>\n    cnf (nnf (\\<^bold>\\<not> F)) \\<turnstile> \\<box>", "proof(erule contrapos_pp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (cnf (nnf (\\<^bold>\\<not>\n                       F)) \\<turnstile> \\<box>) \\<Longrightarrow>\n    \\<not> \\<Turnstile> F", "assume c: \"\\<not> (cnf (nnf (\\<^bold>\\<not> F)) \\<turnstile> \\<box>)\""], ["proof (state)\nthis:\n  \\<not> (cnf (nnf (\\<^bold>\\<not> F)) \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. \\<not> (cnf (nnf (\\<^bold>\\<not>\n                       F)) \\<turnstile> \\<box>) \\<Longrightarrow>\n    \\<not> \\<Turnstile> F", "have \"{cnf_form_of (nnf (\\<^bold>\\<not>F))} \\<in> {\\<Gamma> |\\<Gamma>. \\<not> ((\\<forall>\\<gamma>\\<in>\\<Gamma>. is_cnf \\<gamma>) \\<longrightarrow> \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {cnf_form_of (nnf (\\<^bold>\\<not> F))}\n    \\<in> {\\<Gamma> |\\<Gamma>.\n           \\<not> ((\\<forall>\\<gamma>\\<in>\\<Gamma>.\n                       is_cnf \\<gamma>) \\<longrightarrow>\n                   \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}", "by(simp add: cnf_cnf[OF is_nnf_nnf] c cnf_form_of_is[OF is_nnf_nnf])"], ["proof (state)\nthis:\n  {cnf_form_of (nnf (\\<^bold>\\<not> F))}\n  \\<in> {\\<Gamma> |\\<Gamma>.\n         \\<not> ((\\<forall>\\<gamma>\\<in>\\<Gamma>.\n                     is_cnf \\<gamma>) \\<longrightarrow>\n                 \\<Union> (cnf ` \\<Gamma>) \\<turnstile> \\<box>)}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf (nnf (\\<^bold>\\<not>\n                       F)) \\<turnstile> \\<box>) \\<Longrightarrow>\n    \\<not> \\<Turnstile> F", "from pcp_sat[OF R_consistent this]"], ["proof (chain)\npicking this:\n  sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}", "have \"sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}\""], ["proof (prove)\nusing this:\n  sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}\n\ngoal (1 subgoal):\n 1. sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}", "."], ["proof (state)\nthis:\n  sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf (nnf (\\<^bold>\\<not>\n                       F)) \\<turnstile> \\<box>) \\<Longrightarrow>\n    \\<not> \\<Turnstile> F", "thus \"\\<not> \\<Turnstile> F\""], ["proof (prove)\nusing this:\n  sat {cnf_form_of (nnf (\\<^bold>\\<not> F))}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> F", "by(simp add: sat_def cnf_form_semantics[OF is_nnf_nnf] nnf_semantics)"], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> F\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}