{"file_name": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems/Compactness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems", "problem_names": ["lemma fin_sat_extend: \"fin_sat S \\<Longrightarrow> fin_sat (insert F S) \\<or> fin_sat (insert (\\<^bold>\\<not>F) S)\"", "lemma fin_sat_antimono: \"fin_sat F \\<Longrightarrow> G \\<subseteq> F \\<Longrightarrow> fin_sat G\"", "lemmas fin_sat_insert = fin_sat_antimono[OF _ subset_insertI]", "lemma extender_fin_sat: \"fin_sat S \\<Longrightarrow> fin_sat (extender n S)\"", "lemma extended_max: \"F \\<in> extended S \\<or> Not F \\<in> extended S\"", "lemma extender_Sucset: \"extender k S \\<subseteq> extender (Suc k) S\"", "lemma extender_deeper: \"F \\<in> extender k S \\<Longrightarrow> k \\<le> l \\<Longrightarrow> F \\<in> extender l S\"", "lemma extender_subset: \"S \\<subseteq> extender k S\"", "lemma extended_fin_sat: \n  assumes \"fin_sat S\"\n  shows  \"fin_sat (extended S)\"", "lemma extended_superset: \"S \\<subseteq> extended S\"", "lemma extended_complem:\n  assumes fs: \"fin_sat S\"\n  shows \"(F \\<in> extended S) \\<noteq> (Not F \\<in> extended S)\"", "lemma not_fin_sat_extended_UNIV: fixes S :: \"'a :: countable formula set\" assumes \"\\<not>fin_sat S\" shows \"extended S = UNIV\"", "lemma extended_tran: \"S \\<subseteq> T \\<Longrightarrow> extended S \\<subseteq> extended T\"", "lemma extended_not_increasing: \"\\<exists>S T. fin_sat S \\<and> fin_sat T \\<and> \\<not> (S \\<subseteq> T \\<longrightarrow> extended S \\<subseteq> extended (T :: 'a :: countable formula set))\"", "lemma not_in_extended_FE: \"fin_sat S \\<Longrightarrow> (\\<not>sat (insert (Not F) G)) \\<Longrightarrow> F \\<notin> extended S \\<Longrightarrow> G \\<subseteq> extended S \\<Longrightarrow> finite G \\<Longrightarrow> False\"", "lemma extended_id: \"extended (extended S) = extended S\"", "lemma ext_model:\n  assumes r: \"fin_sat S\"\n  shows \"(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<longleftrightarrow> F \\<in> extended S\"", "theorem compactness:\n  fixes S :: \"'a :: countable formula set\"\n  shows \"sat S \\<longleftrightarrow> fin_sat S\" (is \"?l = ?r\")"], "translations": [["", "lemma fin_sat_extend: \"fin_sat S \\<Longrightarrow> fin_sat (insert F S) \\<or> fin_sat (insert (\\<^bold>\\<not>F) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow>\n    fin_sat (F \\<triangleright> S) \\<or>\n    fin_sat (\\<^bold>\\<not> F \\<triangleright> S)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "assume fs: \"fin_sat S\""], ["proof (state)\nthis:\n  fin_sat S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "assume nfs: \"\\<not> (fin_sat (insert F S) \\<or> fin_sat (insert (\\<^bold>\\<not> F) S))\""], ["proof (state)\nthis:\n  \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n          fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "from nfs"], ["proof (chain)\npicking this:\n  \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n          fin_sat (\\<^bold>\\<not> F \\<triangleright> S))", "obtain s1 where s1: \"s1 \\<subseteq> insert F S\"       \"finite s1\" \"\\<not>sat s1\""], ["proof (prove)\nusing this:\n  \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n          fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\n\ngoal (1 subgoal):\n 1. (\\<And>s1.\n        \\<lbrakk>s1 \\<subseteq> F \\<triangleright> S; finite s1;\n         \\<not> sat s1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding fin_sat_def"], ["proof (prove)\nusing this:\n  \\<not> ((\\<forall>s\\<subseteq>F \\<triangleright> S.\n              finite s \\<longrightarrow> sat s) \\<or>\n          (\\<forall>s\\<subseteq>\\<^bold>\\<not> F \\<triangleright> S.\n              finite s \\<longrightarrow> sat s))\n\ngoal (1 subgoal):\n 1. (\\<And>s1.\n        \\<lbrakk>s1 \\<subseteq> F \\<triangleright> S; finite s1;\n         \\<not> sat s1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s1 \\<subseteq> F \\<triangleright> S\n  finite s1\n  \\<not> sat s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "from nfs"], ["proof (chain)\npicking this:\n  \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n          fin_sat (\\<^bold>\\<not> F \\<triangleright> S))", "obtain s2 where s2: \"s2 \\<subseteq> insert (Not F) S\" \"finite s2\" \"\\<not>sat s2\""], ["proof (prove)\nusing this:\n  \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n          fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\n\ngoal (1 subgoal):\n 1. (\\<And>s2.\n        \\<lbrakk>s2 \\<subseteq> \\<^bold>\\<not> F \\<triangleright> S;\n         finite s2; \\<not> sat s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding fin_sat_def"], ["proof (prove)\nusing this:\n  \\<not> ((\\<forall>s\\<subseteq>F \\<triangleright> S.\n              finite s \\<longrightarrow> sat s) \\<or>\n          (\\<forall>s\\<subseteq>\\<^bold>\\<not> F \\<triangleright> S.\n              finite s \\<longrightarrow> sat s))\n\ngoal (1 subgoal):\n 1. (\\<And>s2.\n        \\<lbrakk>s2 \\<subseteq> \\<^bold>\\<not> F \\<triangleright> S;\n         finite s2; \\<not> sat s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s2 \\<subseteq> \\<^bold>\\<not> F \\<triangleright> S\n  finite s2\n  \\<not> sat s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "let ?u = \"(s1 - {F}) \\<union> (s2 - {Not F})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "have \"?u \\<subseteq> S\" \"finite ?u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S &&&\n    finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "using s1 s2"], ["proof (prove)\nusing this:\n  s1 \\<subseteq> F \\<triangleright> S\n  finite s1\n  \\<not> sat s1\n  s2 \\<subseteq> \\<^bold>\\<not> F \\<triangleright> S\n  finite s2\n  \\<not> sat s2\n\ngoal (1 subgoal):\n 1. s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S &&&\n    finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "by auto"], ["proof (state)\nthis:\n  s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S\n  finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"sat ?u\""], ["proof (prove)\nusing this:\n  s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S\n  finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n\ngoal (1 subgoal):\n 1. sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "using fs"], ["proof (prove)\nusing this:\n  s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S\n  finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n  fin_sat S\n\ngoal (1 subgoal):\n 1. sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "unfolding fin_sat_def"], ["proof (prove)\nusing this:\n  s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}) \\<subseteq> S\n  finite (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n  \\<forall>s\\<subseteq>S. finite s \\<longrightarrow> sat s\n\ngoal (1 subgoal):\n 1. sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "by blast"], ["proof (state)\nthis:\n  sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))", "obtain A where A: \"\\<forall>F \\<in> ?u. A \\<Turnstile> F\""], ["proof (prove)\nusing this:\n  sat (s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}))\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n           A \\<Turnstile> F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding sat_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<A>.\n     \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n        \\<A> \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n           A \\<Turnstile> F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n     A \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "have \"A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not>F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not> F", "by simp"], ["proof (state)\nthis:\n  A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not> F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"sat s1 \\<or> sat s2\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not> F\n\ngoal (1 subgoal):\n 1. sat s1 \\<or> sat s2", "using A"], ["proof (prove)\nusing this:\n  A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not> F\n  \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n     A \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. sat s1 \\<or> sat s2", "unfolding sat_def"], ["proof (prove)\nusing this:\n  A \\<Turnstile> F \\<or> A \\<Turnstile> \\<^bold>\\<not> F\n  \\<forall>F\\<in>s1 - {F} \\<union> (s2 - {\\<^bold>\\<not> F}).\n     A \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<A>. \\<forall>F\\<in>s1. \\<A> \\<Turnstile> F) \\<or>\n    (\\<exists>\\<A>. \\<forall>F\\<in>s2. \\<A> \\<Turnstile> F)", "by(fastforce intro!: exI[where x=A])"], ["proof (state)\nthis:\n  sat s1 \\<or> sat s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S;\n     \\<not> (fin_sat (F \\<triangleright> S) \\<or>\n             fin_sat (\\<^bold>\\<not> F \\<triangleright> S))\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  sat s1 \\<or> sat s2\n\ngoal (1 subgoal):\n 1. False", "using s1(3) s2(3)"], ["proof (prove)\nusing this:\n  sat s1 \\<or> sat s2\n  \\<not> sat s1\n  \\<not> sat s2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "context\nbegin"], ["", "lemma fin_sat_antimono: \"fin_sat F \\<Longrightarrow> G \\<subseteq> F \\<Longrightarrow> fin_sat G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat F; G \\<subseteq> F\\<rbrakk> \\<Longrightarrow> fin_sat G", "unfolding fin_sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s\\<subseteq>F. finite s \\<longrightarrow> sat s;\n     G \\<subseteq> F\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<subseteq>G.\n                         finite s \\<longrightarrow> sat s", "by simp"], ["", "lemmas fin_sat_insert = fin_sat_antimono[OF _ subset_insertI]"], ["", "primrec extender :: \"nat \\<Rightarrow> ('a :: countable) formula set \\<Rightarrow> 'a formula set\" where\n\"extender 0 S = S\" |\n\"extender (Suc n) S = (\n  let r = extender n S; \n  rt = insert (from_nat n) r;\n  rf = insert (\\<^bold>\\<not>(from_nat n)) r\n  in if fin_sat rf then rf else rt\n)\""], ["", "private"], ["", "lemma extender_fin_sat: \"fin_sat S \\<Longrightarrow> fin_sat (extender n S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> fin_sat (extender n S)", "proof(induction n arbitrary: S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender 0 S)\n 2. \\<And>n S.\n       \\<lbrakk>\\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender n S);\n        fin_sat S\\<rbrakk>\n       \\<Longrightarrow> fin_sat (extender (Suc n) S)", "case (Suc n)"], ["proof (state)\nthis:\n  fin_sat ?S \\<Longrightarrow> fin_sat (extender n ?S)\n  fin_sat S\n\ngoal (2 subgoals):\n 1. \\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender 0 S)\n 2. \\<And>n S.\n       \\<lbrakk>\\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender n S);\n        fin_sat S\\<rbrakk>\n       \\<Longrightarrow> fin_sat (extender (Suc n) S)", "note mIH = Suc.IH[OF Suc.prems]"], ["proof (state)\nthis:\n  fin_sat (extender n S)\n\ngoal (2 subgoals):\n 1. \\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender 0 S)\n 2. \\<And>n S.\n       \\<lbrakk>\\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender n S);\n        fin_sat S\\<rbrakk>\n       \\<Longrightarrow> fin_sat (extender (Suc n) S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat (extender (Suc n) S)", "proof(cases \"fin_sat (insert (Not (from_nat n)) (extender n S))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fin_sat\n     (\\<^bold>\\<not>\n       (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)\n 2. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "case True"], ["proof (state)\nthis:\n  fin_sat (\\<^bold>\\<not> (from_nat n) \\<triangleright> extender n S)\n\ngoal (2 subgoals):\n 1. fin_sat\n     (\\<^bold>\\<not>\n       (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)\n 2. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fin_sat (\\<^bold>\\<not> (from_nat n) \\<triangleright> extender n S)\n\ngoal (1 subgoal):\n 1. fin_sat (extender (Suc n) S)", "by simp"], ["proof (state)\nthis:\n  fin_sat (extender (Suc n) S)\n\ngoal (1 subgoal):\n 1. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "case False"], ["proof (state)\nthis:\n  \\<not> fin_sat (\\<^bold>\\<not> (from_nat n) \\<triangleright> extender n S)\n\ngoal (1 subgoal):\n 1. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "hence \"fin_sat (insert ((from_nat n)) (extender n S))\""], ["proof (prove)\nusing this:\n  \\<not> fin_sat (\\<^bold>\\<not> (from_nat n) \\<triangleright> extender n S)\n\ngoal (1 subgoal):\n 1. fin_sat (from_nat n \\<triangleright> extender n S)", "using mIH fin_sat_extend"], ["proof (prove)\nusing this:\n  \\<not> fin_sat (\\<^bold>\\<not> (from_nat n) \\<triangleright> extender n S)\n  fin_sat (extender n S)\n  fin_sat ?S \\<Longrightarrow>\n  fin_sat (?F \\<triangleright> ?S) \\<or>\n  fin_sat (\\<^bold>\\<not> ?F \\<triangleright> ?S)\n\ngoal (1 subgoal):\n 1. fin_sat (from_nat n \\<triangleright> extender n S)", "by auto"], ["proof (state)\nthis:\n  fin_sat (from_nat n \\<triangleright> extender n S)\n\ngoal (1 subgoal):\n 1. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat n) \\<triangleright> extender n S) \\<Longrightarrow>\n    fin_sat (extender (Suc n) S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fin_sat (from_nat n \\<triangleright> extender n S)\n\ngoal (1 subgoal):\n 1. fin_sat (extender (Suc n) S)", "by(simp add: Let_def)"], ["proof (state)\nthis:\n  fin_sat (extender (Suc n) S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fin_sat (extender (Suc n) S)\n\ngoal (1 subgoal):\n 1. \\<And>S. fin_sat S \\<Longrightarrow> fin_sat (extender 0 S)", "qed simp"], ["", "definition \"extended S = \\<Union>{extender n S|n. True}\""], ["", "lemma extended_max: \"F \\<in> extended S \\<or> Not F \\<in> extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S", "obtain n where [simp]: \"F = from_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. F = from_nat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis from_nat_to_nat)"], ["proof (state)\nthis:\n  F = from_nat n\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S", "have \"F \\<in> extender (Suc n) S \\<or> Not F \\<in> extender (Suc n) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> extender (Suc n) S \\<or>\n    \\<^bold>\\<not> F \\<in> extender (Suc n) S", "by(simp add: Let_def)"], ["proof (state)\nthis:\n  F \\<in> extender (Suc n) S \\<or> \\<^bold>\\<not> F \\<in> extender (Suc n) S\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S", "thus ?thesis"], ["proof (prove)\nusing this:\n  F \\<in> extender (Suc n) S \\<or> \\<^bold>\\<not> F \\<in> extender (Suc n) S\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S", "unfolding extended_def"], ["proof (prove)\nusing this:\n  F \\<in> extender (Suc n) S \\<or> \\<^bold>\\<not> F \\<in> extender (Suc n) S\n\ngoal (1 subgoal):\n 1. F \\<in> \\<Union> {extender n S |n. True} \\<or>\n    \\<^bold>\\<not> F \\<in> \\<Union> {extender n S |n. True}", "by blast"], ["proof (state)\nthis:\n  F \\<in> extended S \\<or> \\<^bold>\\<not> F \\<in> extended S\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma extender_Sucset: \"extender k S \\<subseteq> extender (Suc k) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extender k S \\<subseteq> extender (Suc k) S", "by(force simp add: Let_def)"], ["", "private"], ["", "lemma extender_deeper: \"F \\<in> extender k S \\<Longrightarrow> k \\<le> l \\<Longrightarrow> F \\<in> extender l S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<in> extender k S; k \\<le> l\\<rbrakk>\n    \\<Longrightarrow> F \\<in> extender l S", "using extender_Sucset le_Suc_eq"], ["proof (prove)\nusing this:\n  extender ?k ?S \\<subseteq> extender (Suc ?k) ?S\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<in> extender k S; k \\<le> l\\<rbrakk>\n    \\<Longrightarrow> F \\<in> extender l S", "by(induction l) (auto simp del: extender.simps)"], ["", "private"], ["", "lemma extender_subset: \"S \\<subseteq> extender k S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> extender k S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<subseteq> extender k S", "from extender_deeper[OF _ le0]"], ["proof (chain)\npicking this:\n  ?F \\<in> extender 0 ?S \\<Longrightarrow> ?F \\<in> extender ?l ?S", "have \"F \\<in> extender 0 Sa \\<Longrightarrow> F \\<in> extender l Sa\" for Sa l F"], ["proof (prove)\nusing this:\n  ?F \\<in> extender 0 ?S \\<Longrightarrow> ?F \\<in> extender ?l ?S\n\ngoal (1 subgoal):\n 1. F \\<in> extender 0 Sa \\<Longrightarrow> F \\<in> extender l Sa", "."], ["proof (state)\nthis:\n  ?F1 \\<in> extender 0 ?Sa1 \\<Longrightarrow> ?F1 \\<in> extender ?l1 ?Sa1\n\ngoal (1 subgoal):\n 1. S \\<subseteq> extender k S", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?F1 \\<in> extender 0 ?Sa1 \\<Longrightarrow> ?F1 \\<in> extender ?l1 ?Sa1\n\ngoal (1 subgoal):\n 1. S \\<subseteq> extender k S", "by auto"], ["proof (state)\nthis:\n  S \\<subseteq> extender k S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extended_fin_sat: \n  assumes \"fin_sat S\"\n  shows  \"fin_sat (extended S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat (extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fin_sat (extended S)", "have assm: \"\\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk> \\<Longrightarrow> sat s\" for s n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n    \\<Longrightarrow> sat s", "using extender_fin_sat[OF assms]"], ["proof (prove)\nusing this:\n  fin_sat (extender ?n S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n    \\<Longrightarrow> sat s", "unfolding fin_sat_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<subseteq>extender ?n S. finite s \\<longrightarrow> sat s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n    \\<Longrightarrow> sat s", "by presburger"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<subseteq> extender ?n S; finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n\ngoal (1 subgoal):\n 1. fin_sat (extended S)", "hence \"sat s\" if su: \"s \\<subseteq> \\<Union>{extender n S |n. True}\" and fin: \"finite s\" for s"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<subseteq> extender ?n S; finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n\ngoal (1 subgoal):\n 1. sat s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "assume e: \"x \\<in> s\""], ["proof (state)\nthis:\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "with su"], ["proof (chain)\npicking this:\n  s \\<subseteq> \\<Union> {extender n S |n. True}\n  x \\<in> s", "have \"x \\<in> \\<Union>{extender n S |n. True}\""], ["proof (prove)\nusing this:\n  s \\<subseteq> \\<Union> {extender n S |n. True}\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {extender n S |n. True}", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "hence \"\\<exists>n. x \\<in> extender n S\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. \\<exists>n. x \\<in> extender n S", "unfolding Union_eq"], ["proof (prove)\nusing this:\n  x \\<in> {x. Bex {extender n S |n. True} ((\\<in>) x)}\n\ngoal (1 subgoal):\n 1. \\<exists>n. x \\<in> extender n S", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. x \\<in> extender n S\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> s \\<Longrightarrow> \\<exists>n. ?x2 \\<in> extender n S\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "hence \"\\<forall>x \\<in> s. \\<exists>n. x \\<in> extender n S\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> s \\<Longrightarrow> \\<exists>n. ?x2 \\<in> extender n S\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>s. \\<exists>n. x \\<in> extender n S", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>s. \\<exists>n. x \\<in> extender n S\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "from finite_set_choice[OF fin this]"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x\\<in>s. x \\<in> extender (f x) S", "obtain f where cf: \"\\<forall>x\\<in>s. x \\<in> extender (f x) S\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x\\<in>s. x \\<in> extender (f x) S\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>x\\<in>s. x \\<in> extender (f x) S \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>x\\<in>s. x \\<in> extender (f x) S\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "have \"\\<exists>k. s \\<subseteq> \\<Union>{extender n S |n. n \\<le> k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}", "proof(intro exI subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       x \\<in> \\<Union> {extender n S |n. n \\<le> ?k}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       x \\<in> \\<Union> {extender n S |n. n \\<le> ?k}", "assume e: \"x \\<in> s\""], ["proof (state)\nthis:\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       x \\<in> \\<Union> {extender n S |n. n \\<le> ?k}", "with cf"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>s. x \\<in> extender (f x) S\n  x \\<in> s", "have \"x \\<in> extender (f x) S\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. x \\<in> extender (f x) S\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. x \\<in> extender (f x) S", ".."], ["proof (state)\nthis:\n  x \\<in> extender (f x) S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       x \\<in> \\<Union> {extender n S |n. n \\<le> ?k}", "hence \"x \\<in> extender (Max (f ` s)) S\""], ["proof (prove)\nusing this:\n  x \\<in> extender (f x) S\n\ngoal (1 subgoal):\n 1. x \\<in> extender (Max (f ` s)) S", "by(elim extender_deeper; simp add: e fin)"], ["proof (state)\nthis:\n  x \\<in> extender (Max (f ` s)) S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       x \\<in> \\<Union> {extender n S |n. n \\<le> ?k}", "thus \"x \\<in> \\<Union>{extender n S |n. n \\<le> Max (f ` s)}\""], ["proof (prove)\nusing this:\n  x \\<in> extender (Max (f ` s)) S\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {extender n S |n. n \\<le> Max (f ` s)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<Union> {extender n S |n. n \\<le> Max (f ` s)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "moreover"], ["proof (state)\nthis:\n  \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "have \"\\<Union>{extender n S |n. n \\<le> k} = extender k S\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. n \\<le> k} = extender k S", "proof(induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Union> {extender n S |n. n \\<le> 0} = extender 0 S\n 2. \\<And>k.\n       \\<Union> {extender n S |n. n \\<le> k} =\n       extender k S \\<Longrightarrow>\n       \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "case (Suc k)"], ["proof (state)\nthis:\n  \\<Union> {extender n S |n. n \\<le> k} = extender k S\n\ngoal (2 subgoals):\n 1. \\<Union> {extender n S |n. n \\<le> 0} = extender 0 S\n 2. \\<And>k.\n       \\<Union> {extender n S |n. n \\<le> k} =\n       extender k S \\<Longrightarrow>\n       \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "moreover"], ["proof (state)\nthis:\n  \\<Union> {extender n S |n. n \\<le> k} = extender k S\n\ngoal (2 subgoals):\n 1. \\<Union> {extender n S |n. n \\<le> 0} = extender 0 S\n 2. \\<And>k.\n       \\<Union> {extender n S |n. n \\<le> k} =\n       extender k S \\<Longrightarrow>\n       \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "have \"\\<Union>{extender n S |n. n \\<le> Suc k} = \\<Union>{extender n S |n. n \\<le> k} \\<union> extender (Suc k) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. n \\<le> Suc k} =\n    \\<Union> {extender n S |n. n \\<le> k} \\<union> extender (Suc k) S", "unfolding Union_eq le_Suc_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. Bex {extender n S |n. n \\<le> k \\<or> n = Suc k} ((\\<in>) x)} =\n    {x. Bex {extender n S |n. n \\<le> k} ((\\<in>) x)} \\<union>\n    extender (Suc k) S", "using le_Suc_eq"], ["proof (prove)\nusing this:\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. {x. Bex {extender n S |n. n \\<le> k \\<or> n = Suc k} ((\\<in>) x)} =\n    {x. Bex {extender n S |n. n \\<le> k} ((\\<in>) x)} \\<union>\n    extender (Suc k) S", "by(auto simp del: extender.simps)"], ["proof (state)\nthis:\n  \\<Union> {extender n S |n. n \\<le> Suc k} =\n  \\<Union> {extender n S |n. n \\<le> k} \\<union> extender (Suc k) S\n\ngoal (2 subgoals):\n 1. \\<Union> {extender n S |n. n \\<le> 0} = extender 0 S\n 2. \\<And>k.\n       \\<Union> {extender n S |n. n \\<le> k} =\n       extender k S \\<Longrightarrow>\n       \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union> {extender n S |n. n \\<le> k} = extender k S\n  \\<Union> {extender n S |n. n \\<le> Suc k} =\n  \\<Union> {extender n S |n. n \\<le> k} \\<union> extender (Suc k) S", "show ?case"], ["proof (prove)\nusing this:\n  \\<Union> {extender n S |n. n \\<le> k} = extender k S\n  \\<Union> {extender n S |n. n \\<le> Suc k} =\n  \\<Union> {extender n S |n. n \\<le> k} \\<union> extender (Suc k) S\n\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "using extender_Sucset"], ["proof (prove)\nusing this:\n  \\<Union> {extender n S |n. n \\<le> k} = extender k S\n  \\<Union> {extender n S |n. n \\<le> Suc k} =\n  \\<Union> {extender n S |n. n \\<le> k} \\<union> extender (Suc k) S\n  extender ?k ?S \\<subseteq> extender (Suc ?k) ?S\n\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S", "by(force simp del: extender.simps)"], ["proof (state)\nthis:\n  \\<Union> {extender n S |n. n \\<le> Suc k} = extender (Suc k) S\n\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. n \\<le> 0} = extender 0 S", "qed simp"], ["proof (state)\nthis:\n  \\<Union> {extender n S |n. n \\<le> ?k} = extender ?k S\n\ngoal (1 subgoal):\n 1. (\\<And>s n.\n        \\<lbrakk>s \\<subseteq> extender n S; finite s\\<rbrakk>\n        \\<Longrightarrow> sat s) \\<Longrightarrow>\n    sat s", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}\n  \\<Union> {extender n S |n. n \\<le> ?k} = extender ?k S", "show \"sat s\""], ["proof (prove)\nusing this:\n  \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}\n  \\<Union> {extender n S |n. n \\<le> ?k} = extender ?k S\n\ngoal (1 subgoal):\n 1. sat s", "using assm fin"], ["proof (prove)\nusing this:\n  \\<exists>k. s \\<subseteq> \\<Union> {extender n S |n. n \\<le> k}\n  \\<Union> {extender n S |n. n \\<le> ?k} = extender ?k S\n  \\<lbrakk>?s \\<subseteq> extender ?n S; finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n  finite s\n\ngoal (1 subgoal):\n 1. sat s", "by auto"], ["proof (state)\nthis:\n  sat s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<subseteq> \\<Union> {extender n S |n. True};\n   finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n\ngoal (1 subgoal):\n 1. fin_sat (extended S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<subseteq> \\<Union> {extender n S |n. True};\n   finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n\ngoal (1 subgoal):\n 1. fin_sat (extended S)", "unfolding extended_def fin_sat_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<subseteq> \\<Union> {extender n S |n. True};\n   finite ?s\\<rbrakk>\n  \\<Longrightarrow> sat ?s\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<subseteq>\\<Union> {extender n S |n. True}.\n       finite s \\<longrightarrow> sat s", "by presburger"], ["proof (state)\nthis:\n  fin_sat (extended S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extended_superset: \"S \\<subseteq> extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> extended S", "unfolding extended_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> \\<Union> {extender n S |n. True}", "using extender.simps(1)"], ["proof (prove)\nusing this:\n  extender 0 ?S = ?S\n\ngoal (1 subgoal):\n 1. S \\<subseteq> \\<Union> {extender n S |n. True}", "by blast"], ["", "lemma extended_complem:\n  assumes fs: \"fin_sat S\"\n  shows \"(F \\<in> extended S) \\<noteq> (Not F \\<in> extended S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "note fs = fs[THEN extended_fin_sat]"], ["proof (state)\nthis:\n  fin_sat (extended S)\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "proof(cases \"F \\<in> extended S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)\n 2. F \\<notin> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "case False"], ["proof (state)\nthis:\n  F \\<notin> extended S\n\ngoal (2 subgoals):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)\n 2. F \\<notin> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "with extended_max"], ["proof (chain)\npicking this:\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  F \\<notin> extended S", "show ?thesis"], ["proof (prove)\nusing this:\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  F \\<notin> extended S\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "by blast"], ["proof (state)\nthis:\n  (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "case True"], ["proof (state)\nthis:\n  F \\<in> extended S\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "have \"Not F \\<notin> extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<notin> extended S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "assume False: \"Not F \\<in> extended S\""], ["proof (state)\nthis:\n  \\<^bold>\\<not> F \\<in> extended S\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "with True"], ["proof (chain)\npicking this:\n  F \\<in> extended S\n  \\<^bold>\\<not> F \\<in> extended S", "have \"{F, Not F} \\<subseteq> extended S\""], ["proof (prove)\nusing this:\n  F \\<in> extended S\n  \\<^bold>\\<not> F \\<in> extended S\n\ngoal (1 subgoal):\n 1. {F, \\<^bold>\\<not> F} \\<subseteq> extended S", "by blast"], ["proof (state)\nthis:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "have \"finite {F, Not F}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {F, \\<^bold>\\<not> F}", "by simp"], ["proof (state)\nthis:\n  finite {F, \\<^bold>\\<not> F}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n  finite {F, \\<^bold>\\<not> F}", "have \"sat {F, Not F}\""], ["proof (prove)\nusing this:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n  finite {F, \\<^bold>\\<not> F}\n\ngoal (1 subgoal):\n 1. sat {F, \\<^bold>\\<not> F}", "using fs"], ["proof (prove)\nusing this:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n  finite {F, \\<^bold>\\<not> F}\n  fin_sat (extended S)\n\ngoal (1 subgoal):\n 1. sat {F, \\<^bold>\\<not> F}", "unfolding fin_sat_def"], ["proof (prove)\nusing this:\n  {F, \\<^bold>\\<not> F} \\<subseteq> extended S\n  finite {F, \\<^bold>\\<not> F}\n  \\<forall>s\\<subseteq>extended S. finite s \\<longrightarrow> sat s\n\ngoal (1 subgoal):\n 1. sat {F, \\<^bold>\\<not> F}", "by blast"], ["proof (state)\nthis:\n  sat {F, \\<^bold>\\<not> F}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  sat {F, \\<^bold>\\<not> F}\n\ngoal (1 subgoal):\n 1. False", "unfolding sat_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<A>. \\<forall>F\\<in>{F, \\<^bold>\\<not> F}. \\<A> \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<^bold>\\<not> F \\<notin> extended S\n\ngoal (1 subgoal):\n 1. F \\<in> extended S \\<Longrightarrow>\n    (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "with True"], ["proof (chain)\npicking this:\n  F \\<in> extended S\n  \\<^bold>\\<not> F \\<notin> extended S", "show ?thesis"], ["proof (prove)\nusing this:\n  F \\<in> extended S\n  \\<^bold>\\<not> F \\<notin> extended S\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)", "by blast"], ["proof (state)\nthis:\n  (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> F \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_fin_sat_extended_UNIV: fixes S :: \"'a :: countable formula set\" assumes \"\\<not>fin_sat S\" shows \"extended S = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended S = UNIV", "text\\<open>Note that this crucially depends on the fact that we check \\emph{first} whether adding @{term \"\\<^bold>\\<not>F\"} makes the set not satisfiable, \n  and add @{term F} otherwise \\emph{without any further checks}.\n  The proof of compactness does (to the best of my knowledge) depend on neither of these two facts.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. extended S = UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. extended S = UNIV", "from assms[unfolded fin_sat_def, simplified]"], ["proof (chain)\npicking this:\n  \\<exists>s\\<subseteq>S. finite s \\<and> \\<not> sat s", "obtain s :: \"'a :: countable formula set\"\n    where \"finite s\" \"\\<not> sat s\""], ["proof (prove)\nusing this:\n  \\<exists>s\\<subseteq>S. finite s \\<and> \\<not> sat s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>finite s; \\<not> sat s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarify"], ["proof (state)\nthis:\n  finite s\n  \\<not> sat s\n\ngoal (1 subgoal):\n 1. extended S = UNIV", "from this(2)[unfolded sat_def, simplified]"], ["proof (chain)\npicking this:\n  \\<forall>\\<A>. \\<exists>x\\<in>s. \\<not> \\<A> \\<Turnstile> x", "have \"\\<exists>x\\<in>s. \\<not> A \\<Turnstile> x\" for A"], ["proof (prove)\nusing this:\n  \\<forall>\\<A>. \\<exists>x\\<in>s. \\<not> \\<A> \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>s. \\<not> A \\<Turnstile> x", ".."], ["proof (state)\nthis:\n  \\<exists>x\\<in>s. \\<not> ?A \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. extended S = UNIV", "have nfs: \"\\<not>fin_sat (insert x (extender n S))\" for n x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fin_sat (x \\<triangleright> extender n S)", "apply(rule notI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat (x \\<triangleright> extender n S) \\<Longrightarrow> False", "apply(drule fin_sat_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat (extender n S) \\<Longrightarrow> False", "apply(drule fin_sat_antimono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ?G4 \\<subseteq> extender n S\n 2. fin_sat ?G4 \\<Longrightarrow> False", "apply(rule extender_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> False", "apply(erule notE[rotated])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fin_sat S", "apply(fact assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<not> fin_sat (?x \\<triangleright> extender ?n S)\n\ngoal (1 subgoal):\n 1. extended S = UNIV", "have \"x \\<in> \\<Union>{extender n S |n. True}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {extender n S |n. True}", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "assume \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {extender n S |n. True}", "by (metis extended_def extended_superset insert_absorb insert_subset)"], ["proof (state)\nthis:\n  x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "assume \"x \\<notin> S\""], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "have \"x \\<in> extender (Suc (to_nat x)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> extender (Suc (to_nat x)) S", "unfolding extender.simps Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (if fin_sat\n                 (\\<^bold>\\<not>\n                   (from_nat\n                     (to_nat x)) \\<triangleright> extender (to_nat x) S)\n             then \\<^bold>\\<not>\n                   (from_nat\n                     (to_nat x)) \\<triangleright> extender (to_nat x) S\n             else from_nat\n                   (to_nat x) \\<triangleright> extender (to_nat x) S)", "unfolding if_not_P[OF nfs]"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> from_nat (to_nat x) \\<triangleright> extender (to_nat x) S", "by simp"], ["proof (state)\nthis:\n  x \\<in> extender (Suc (to_nat x)) S\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x \\<in> \\<Union> {extender n S |n. True}", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> extender (Suc (to_nat x)) S\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {extender n S |n. True}", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<Union> {extender n S |n. True}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. extended S = UNIV", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. extended S = UNIV", "unfolding extended_def"], ["proof (prove)\nusing this:\n  ?x \\<in> \\<Union> {extender n S |n. True}\n\ngoal (1 subgoal):\n 1. \\<Union> {extender n S |n. True} = UNIV", "by auto"], ["proof (state)\nthis:\n  extended S = UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extended_tran: \"S \\<subseteq> T \\<Longrightarrow> extended S \\<subseteq> extended T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> T \\<Longrightarrow> extended S \\<subseteq> extended T", "text\\<open>This lemma doesn't hold: think of making S empty and inserting a formula into T s.t. it can never be satisfied simultaneously with the first \nnon-tautological formula in the extension S. Showing that this is possible is not worth the effort, since we can't influence the ordering of formulae.\nBut we showed it anyway.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> T \\<Longrightarrow> extended S \\<subseteq> extended T", "oops"], ["", "lemma extended_not_increasing: \"\\<exists>S T. fin_sat S \\<and> fin_sat T \\<and> \\<not> (S \\<subseteq> T \\<longrightarrow> extended S \\<subseteq> extended (T :: 'a :: countable formula set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have ex_then_min: \"\\<exists>x :: nat. P x \\<Longrightarrow> P (LEAST x. P x)\" for P"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. P x \\<Longrightarrow> P (LEAST x. P x)", "using LeastI2_wellorder"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?a;\n   \\<And>a.\n      \\<lbrakk>?P a; \\<forall>b. ?P b \\<longrightarrow> a \\<le> b\\<rbrakk>\n      \\<Longrightarrow> ?Q a\\<rbrakk>\n  \\<Longrightarrow> ?Q (Least ?P)\n\ngoal (1 subgoal):\n 1. \\<exists>x. P x \\<Longrightarrow> P (LEAST x. P x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (LEAST x. ?P x)\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "define P where \"P x = (let F = (from_nat x :: 'a formula) in (\\<exists>A. \\<not> A \\<Turnstile> F) \\<and> (\\<exists> A. A \\<Turnstile> F))\" for x"], ["proof (state)\nthis:\n  P ?x =\n  (let F = from_nat ?x\n   in (\\<exists>A. \\<not> A \\<Turnstile> F) \\<and>\n      (\\<exists>A. A \\<Turnstile> F))\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "define x where \"x = (LEAST n. P n)\""], ["proof (state)\nthis:\n  x = (LEAST n. P n)\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "hence \"\\<exists>n. P n\""], ["proof (prove)\nusing this:\n  x = (LEAST n. P n)\n\ngoal (1 subgoal):\n 1. \\<exists>n. P n", "unfolding P_def Let_def"], ["proof (prove)\nusing this:\n  x =\n  (LEAST n.\n      (\\<exists>A. \\<not> A \\<Turnstile> from_nat n) \\<and>\n      (\\<exists>A. A \\<Turnstile> from_nat n))\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       (\\<exists>A. \\<not> A \\<Turnstile> from_nat n) \\<and>\n       (\\<exists>A. A \\<Turnstile> from_nat n)", "by(auto intro!: exI[where x=\"to_nat (Atom undefined :: 'a formula)\"])"], ["proof (state)\nthis:\n  \\<exists>n. P n\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "from ex_then_min[OF this]"], ["proof (chain)\npicking this:\n  P (LEAST x. P x)", "have Px: \"P x\""], ["proof (prove)\nusing this:\n  P (LEAST x. P x)\n\ngoal (1 subgoal):\n 1. P x", "unfolding x_def"], ["proof (prove)\nusing this:\n  P (LEAST x. P x)\n\ngoal (1 subgoal):\n 1. P (Least P)", "."], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have lessx: \"n < x \\<Longrightarrow> \\<not> P n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < x \\<Longrightarrow> \\<not> P n", "unfolding x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Least P \\<Longrightarrow> \\<not> P n", "using not_less_Least"], ["proof (prove)\nusing this:\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n\ngoal (1 subgoal):\n 1. n < Least P \\<Longrightarrow> \\<not> P n", "by blast"], ["proof (state)\nthis:\n  ?n < x \\<Longrightarrow> \\<not> P ?n\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "let ?S = \"{} :: 'a formula set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "let ?T = \"{from_nat x :: 'a formula}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have s: \"fin_sat ?S\" \"fin_sat ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_sat {} &&& fin_sat {from_nat x}", "using Px"], ["proof (prove)\nusing this:\n  P x\n\ngoal (1 subgoal):\n 1. fin_sat {} &&& fin_sat {from_nat x}", "unfolding P_def fin_sat_def sat_def Let_def"], ["proof (prove)\nusing this:\n  (\\<exists>A. \\<not> A \\<Turnstile> from_nat x) \\<and>\n  (\\<exists>A. A \\<Turnstile> from_nat x)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<subseteq>{}.\n       finite s \\<longrightarrow>\n       (\\<exists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F) &&&\n    \\<forall>s\\<subseteq>{from_nat x}.\n       finite s \\<longrightarrow>\n       (\\<exists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F)", "by fastforce+"], ["proof (state)\nthis:\n  fin_sat {}\n  fin_sat {from_nat x}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have reject: \"Q A \\<Longrightarrow> \\<forall>A. \\<not> Q A \\<Longrightarrow> False\" for A Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Q A; \\<forall>A. \\<not> Q A\\<rbrakk> \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?Q ?A; \\<forall>A. \\<not> ?Q A\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have \"y \\<le> x \\<Longrightarrow> F \\<in> extender y ?S \\<Longrightarrow> \\<Turnstile> F\" for F y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n    \\<Longrightarrow> \\<Turnstile> F", "proof(induction y arbitrary: F)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "case (Suc y)"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; ?F1 \\<in> extender y {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n  Suc y \\<le> x\n  F \\<in> extender (Suc y) {}\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "have *: \"F \\<in> extender y {} \\<Longrightarrow> \\<Turnstile> F\" for F :: \"'a formula\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> extender y {} \\<Longrightarrow> \\<Turnstile> F", "using Suc.IH Suc.prems(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<le> x; ?F1 \\<in> extender y {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n  Suc y \\<le> x\n\ngoal (1 subgoal):\n 1. F \\<in> extender y {} \\<Longrightarrow> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  ?F1 \\<in> extender y {} \\<Longrightarrow> \\<Turnstile> ?F1\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "let ?Y = \"from_nat y :: 'a formula\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "have ex: \"(\\<forall>A. \\<not> A \\<Turnstile> ?Y) \\<or> \\<Turnstile> ?Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A. \\<not> A \\<Turnstile> from_nat y) \\<or>\n    \\<Turnstile> from_nat y", "unfolding formula_semantics.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A. \\<not> A \\<Turnstile> from_nat y) \\<or>\n    \\<Turnstile> from_nat y", "by (meson P_def Suc.prems(1) Suc_le_lessD lessx)"], ["proof (state)\nthis:\n  (\\<forall>A. \\<not> A \\<Turnstile> from_nat y) \\<or>\n  \\<Turnstile> from_nat y\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "have 1: \"\\<forall>A. \\<not> A \\<Turnstile> ?Y\" if \"fin_sat (Not ?Y \\<triangleright> extender y ?S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. \\<not> A \\<Turnstile> from_nat y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. \\<not> A \\<Turnstile> from_nat y", "note[[show_types]]"], ["proof (state)\nthis:\n  TERM _\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "from that"], ["proof (chain)\npicking this:\n  fin_sat\n   (\\<^bold>\\<not> (from_nat (y::nat)) \\<triangleright> extender y {})", "have \"\\<exists>A. A \\<Turnstile> Not ?Y\""], ["proof (prove)\nusing this:\n  fin_sat\n   (\\<^bold>\\<not> (from_nat (y::nat)) \\<triangleright> extender y {})\n\ngoal (1 subgoal):\n 1. \\<exists>A::'a \\<Rightarrow> bool.\n       A \\<Turnstile> \\<^bold>\\<not> (from_nat y)\nvariables:\n  y :: nat", "unfolding fin_sat_def sat_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<subseteq>\\<^bold>\\<not>\n                        (from_nat (y::nat)) \\<triangleright> extender y {}.\n     finite s \\<longrightarrow>\n     (\\<exists>\\<A>::'a \\<Rightarrow> bool.\n         \\<forall>F::'a formula\\<in>s. \\<A> \\<Turnstile> F)\n\ngoal (1 subgoal):\n 1. \\<exists>A::'a \\<Rightarrow> bool.\n       A \\<Turnstile> \\<^bold>\\<not> (from_nat y)\nvariables:\n  y :: nat", "by(elim allE[where x=\"{Not ?Y}\"]) simp"], ["proof (state)\nthis:\n  \\<exists>A::'a \\<Rightarrow> bool.\n     A \\<Turnstile> \\<^bold>\\<not> (from_nat (y::nat))\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "hence \"\\<not>\\<Turnstile> ?Y\""], ["proof (prove)\nusing this:\n  \\<exists>A::'a \\<Rightarrow> bool.\n     A \\<Turnstile> \\<^bold>\\<not> (from_nat (y::nat))\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> from_nat (y::nat)\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "hence \"\\<forall>A. \\<not> A \\<Turnstile> ?Y\""], ["proof (prove)\nusing this:\n  \\<not> \\<Turnstile> from_nat (y::nat)\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "using ex"], ["proof (prove)\nusing this:\n  \\<not> \\<Turnstile> from_nat (y::nat)\n  (\\<forall>A::'a \\<Rightarrow> bool.\n      \\<not> A \\<Turnstile> from_nat (y::nat)) \\<or>\n  \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "by argo"], ["proof (state)\nthis:\n  \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat (y::nat)\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat (y::nat)\n\ngoal (1 subgoal):\n 1. \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat y\nvariables:\n  y :: nat", "by simp"], ["proof (state)\nthis:\n  \\<forall>A::'a \\<Rightarrow> bool. \\<not> A \\<Turnstile> from_nat (y::nat)\n\ngoal:\nNo subgoals!\nvariables:\n  y :: nat", "qed"], ["proof (state)\nthis:\n  fin_sat\n   (\\<^bold>\\<not>\n     (from_nat y) \\<triangleright> extender y {}) \\<Longrightarrow>\n  \\<forall>A. \\<not> A \\<Turnstile> from_nat y\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "have 2: \"\\<not> fin_sat (Not ?Y \\<triangleright> extender y ?S) \\<Longrightarrow> \\<Turnstile> ?Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fin_sat\n            (\\<^bold>\\<not>\n              (from_nat y) \\<triangleright> extender y {}) \\<Longrightarrow>\n    \\<Turnstile> from_nat y", "proof(erule contrapos_np)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> from_nat y \\<Longrightarrow>\n    fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})", "assume \"\\<not> \\<Turnstile> ?Y\""], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> from_nat y \\<Longrightarrow>\n    fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})", "hence \"\\<forall>A. \\<not> A \\<Turnstile> ?Y\""], ["proof (prove)\nusing this:\n  \\<not> \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<forall>A. \\<not> A \\<Turnstile> from_nat y", "using ex"], ["proof (prove)\nusing this:\n  \\<not> \\<Turnstile> from_nat y\n  (\\<forall>A. \\<not> A \\<Turnstile> from_nat y) \\<or>\n  \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<forall>A. \\<not> A \\<Turnstile> from_nat y", "by argo"], ["proof (state)\nthis:\n  \\<forall>A. \\<not> A \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> from_nat y \\<Longrightarrow>\n    fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})", "hence \"\\<Turnstile> \\<^bold>\\<not> ?Y\""], ["proof (prove)\nusing this:\n  \\<forall>A. \\<not> A \\<Turnstile> from_nat y\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<^bold>\\<not> (from_nat y)", "by simp"], ["proof (state)\nthis:\n  \\<Turnstile> \\<^bold>\\<not> (from_nat y)\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> from_nat y \\<Longrightarrow>\n    fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})", "thus \"fin_sat (\\<^bold>\\<not> ?Y \\<triangleright> extender y ?S)\""], ["proof (prove)\nusing this:\n  \\<Turnstile> \\<^bold>\\<not> (from_nat y)\n\ngoal (1 subgoal):\n 1. fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})", "unfolding fin_sat_def sat_def"], ["proof (prove)\nusing this:\n  \\<Turnstile> \\<^bold>\\<not> (from_nat y)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<subseteq>\\<^bold>\\<not>\n                          (from_nat y) \\<triangleright> extender y {}.\n       finite s \\<longrightarrow>\n       (\\<exists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F)", "by(auto intro!: exI[where x=\"\\<lambda>_ :: 'a. False\"] dest!: rev_subsetD[rotated] *)"], ["proof (state)\nthis:\n  fin_sat (\\<^bold>\\<not> (from_nat y) \\<triangleright> extender y {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> fin_sat\n          (\\<^bold>\\<not>\n            (from_nat y) \\<triangleright> extender y {}) \\<Longrightarrow>\n  \\<Turnstile> from_nat y\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F\n 2. \\<And>y F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>y \\<le> x; F \\<in> extender y {}\\<rbrakk>\n                   \\<Longrightarrow> \\<Turnstile> F;\n        Suc y \\<le> x; F \\<in> extender (Suc y) {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile> F", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  F \\<in> extender (Suc y) {}\n\ngoal (1 subgoal):\n 1. \\<Turnstile> F", "by(simp add: Let_def split: if_splits; elim disjE; simp add: * 1 2)"], ["proof (state)\nthis:\n  \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>0 \\<le> x; F \\<in> extender 0 {}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> F", "qed simp"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 \\<le> x; ?F1 \\<in> extender ?y1 {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "hence \"fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x ?S)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<le> x; ?F1 \\<in> extender ?y1 {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n\ngoal (1 subgoal):\n 1. fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x {})", "using Px"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<le> x; ?F1 \\<in> extender ?y1 {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n  P x\n\ngoal (1 subgoal):\n 1. fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x {})", "unfolding P_def Let_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<le> x; ?F1 \\<in> extender ?y1 {}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile> ?F1\n  (\\<exists>A. \\<not> A \\<Turnstile> from_nat x) \\<and>\n  (\\<exists>A. A \\<Turnstile> from_nat x)\n\ngoal (1 subgoal):\n 1. fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x {})", "by (clarsimp simp: fin_sat_def sat_def) (insert formula_semantics.simps(3), blast)"], ["proof (state)\nthis:\n  fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x {})\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "hence \"Not (from_nat x) \\<in> extender (Suc x) ?S\""], ["proof (prove)\nusing this:\n  fin_sat (\\<^bold>\\<not> (from_nat x) \\<triangleright> extender x {})\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> (from_nat x) \\<in> extender (Suc x) {}", "by(simp)"], ["proof (state)\nthis:\n  \\<^bold>\\<not> (from_nat x) \\<in> extender (Suc x) {}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "hence \"Not (from_nat x) \\<in> extended ?S\""], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> (from_nat x) \\<in> extender (Suc x) {}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> (from_nat x) \\<in> extended {}", "unfolding extended_def"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> (from_nat x) \\<in> extender (Suc x) {}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> (from_nat x) \\<in> \\<Union> {extender n {} |n. True}", "by blast"], ["proof (state)\nthis:\n  \\<^bold>\\<not> (from_nat x) \\<in> extended {}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "moreover"], ["proof (state)\nthis:\n  \\<^bold>\\<not> (from_nat x) \\<in> extended {}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "have \"Not (from_nat x) \\<notin> extended ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}", "using extended_complem extended_superset s(2)"], ["proof (prove)\nusing this:\n  fin_sat ?S \\<Longrightarrow>\n  (?F \\<in> extended ?S) \\<noteq> (\\<^bold>\\<not> ?F \\<in> extended ?S)\n  ?S \\<subseteq> extended ?S\n  fin_sat {from_nat x}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}", "by blast"], ["proof (state)\nthis:\n  \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "ultimately"], ["proof (chain)\npicking this:\n  \\<^bold>\\<not> (from_nat x) \\<in> extended {}\n  \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> (from_nat x) \\<in> extended {}\n  \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "using s"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> (from_nat x) \\<in> extended {}\n  \\<^bold>\\<not> (from_nat x) \\<notin> extended {from_nat x}\n  fin_sat {}\n  fin_sat {from_nat x}\n\ngoal (1 subgoal):\n 1. \\<exists>S T.\n       fin_sat S \\<and>\n       fin_sat T \\<and>\n       \\<not> (S \\<subseteq> T \\<longrightarrow>\n               extended S \\<subseteq> extended T)", "by blast"], ["proof (state)\nthis:\n  \\<exists>S T.\n     fin_sat S \\<and>\n     fin_sat T \\<and>\n     \\<not> (S \\<subseteq> T \\<longrightarrow>\n             extended S \\<subseteq> extended T)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma not_in_extended_FE: \"fin_sat S \\<Longrightarrow> (\\<not>sat (insert (Not F) G)) \\<Longrightarrow> F \\<notin> extended S \\<Longrightarrow> G \\<subseteq> extended S \\<Longrightarrow> finite G \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S; \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G);\n     F \\<notin> extended S; G \\<subseteq> extended S; finite G\\<rbrakk>\n    \\<Longrightarrow> False", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S; \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G);\n     F \\<notin> extended S; G \\<subseteq> extended S; finite G\\<rbrakk>\n    \\<Longrightarrow> False", "case 1"], ["proof (state)\nthis:\n  fin_sat S\n  \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G)\n  F \\<notin> extended S\n  G \\<subseteq> extended S\n  finite G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S; \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G);\n     F \\<notin> extended S; G \\<subseteq> extended S; finite G\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"Not F \\<in> extended S\""], ["proof (prove)\nusing this:\n  fin_sat S\n  \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G)\n  F \\<notin> extended S\n  G \\<subseteq> extended S\n  finite G\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S", "using extended_max"], ["proof (prove)\nusing this:\n  fin_sat S\n  \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G)\n  F \\<notin> extended S\n  G \\<subseteq> extended S\n  finite G\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F \\<in> extended S", "by blast"], ["proof (state)\nthis:\n  \\<^bold>\\<not> F \\<in> extended S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fin_sat S; \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G);\n     F \\<notin> extended S; G \\<subseteq> extended S; finite G\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> F \\<in> extended S\n\ngoal (1 subgoal):\n 1. False", "using 1 extended_fin_sat fin_sat_def"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> F \\<in> extended S\n  fin_sat S\n  \\<not> sat (\\<^bold>\\<not> F \\<triangleright> G)\n  F \\<notin> extended S\n  G \\<subseteq> extended S\n  finite G\n  fin_sat ?S \\<Longrightarrow> fin_sat (extended ?S)\n  fin_sat ?S \\<equiv>\n  \\<forall>s\\<subseteq>?S. finite s \\<longrightarrow> sat s\n\ngoal (1 subgoal):\n 1. False", "by (metis Diff_eq_empty_iff finite.insertI insert_Diff_if)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extended_id: \"extended (extended S) = extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended (extended S) = extended S", "using extended_complem extended_fin_sat extended_max extended_superset not_fin_sat_extended_UNIV"], ["proof (prove)\nusing this:\n  fin_sat ?S \\<Longrightarrow>\n  (?F \\<in> extended ?S) \\<noteq> (\\<^bold>\\<not> ?F \\<in> extended ?S)\n  fin_sat ?S \\<Longrightarrow> fin_sat (extended ?S)\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  ?S \\<subseteq> extended ?S\n  \\<not> fin_sat ?S \\<Longrightarrow> extended ?S = UNIV\n\ngoal (1 subgoal):\n 1. extended (extended S) = extended S", "by(intro equalityI[rotated] extended_superset) blast"], ["", "(* This would be nicer, though\\<dots> \ninductive_set extended_set :: \"form set \\<Rightarrow> form set\" for S where\n\"F \\<in> S \\<Longrightarrow> F \\<in> extended_set S\" |\n\"fin_sat (insert F (extended_set S)) \\<or> F \\<in> extended_set S \\<Longrightarrow> F \\<in> extended_set S\"\nbut it can't work, as extended is not increasing (?) *)"], ["", "lemma ext_model:\n  assumes r: \"fin_sat S\"\n  shows \"(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<longleftrightarrow> F \\<in> extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n    (F \\<in> extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n    (F \\<in> extended S)", "note fs = r[THEN extended_fin_sat]"], ["proof (state)\nthis:\n  fin_sat (extended S)\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n    (F \\<in> extended S)", "have Elim: \"F \\<in> S \\<and> G \\<in> S \\<Longrightarrow> {F,G} \\<subseteq> S\" \"F \\<in> S \\<Longrightarrow> {F} \\<subseteq> S\" for F G S"], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> S \\<and> G \\<in> S \\<Longrightarrow> {F, G} \\<subseteq> S) &&&\n    (F \\<in> S \\<Longrightarrow> {F} \\<subseteq> S)", "by simp+"], ["proof (state)\nthis:\n  ?F1 \\<in> ?S1 \\<and> ?G1 \\<in> ?S1 \\<Longrightarrow>\n  {?F1, ?G1} \\<subseteq> ?S1\n  ?F1 \\<in> ?S1 \\<Longrightarrow> {?F1} \\<subseteq> ?S1\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n    (F \\<in> extended S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n    (F \\<in> extended S)", "proof(induction F)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> Atom x =\n       (Atom x \\<in> extended S)\n 2. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 3. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 6. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case Atom"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>x.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> Atom x =\n       (Atom x \\<in> extended S)\n 2. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 3. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 6. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> Atom x_ =\n    (Atom x_ \\<in> extended S)", "by(simp)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> Atom x_ =\n  (Atom x_ \\<in> extended S)\n\ngoal (5 subgoals):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 2. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 2. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case Bot"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 2. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "have False if \"\\<bottom> \\<in> extended S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have \"finite {\\<bottom>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {\\<bottom>}", "by simp"], ["proof (state)\nthis:\n  finite {\\<bottom>}\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  finite {\\<bottom>}\n\ngoal (1 subgoal):\n 1. False", "from that"], ["proof (chain)\npicking this:\n  \\<bottom> \\<in> extended S", "have \"{\\<bottom>} \\<subseteq> extended S\""], ["proof (prove)\nusing this:\n  \\<bottom> \\<in> extended S\n\ngoal (1 subgoal):\n 1. {\\<bottom>} \\<subseteq> extended S", "by simp"], ["proof (state)\nthis:\n  {\\<bottom>} \\<subseteq> extended S\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  finite {\\<bottom>}\n  {\\<bottom>} \\<subseteq> extended S", "have \"\\<exists>A. A \\<Turnstile> \\<bottom>\""], ["proof (prove)\nusing this:\n  finite {\\<bottom>}\n  {\\<bottom>} \\<subseteq> extended S\n\ngoal (1 subgoal):\n 1. \\<exists>A. A \\<Turnstile> \\<bottom>", "using fs"], ["proof (prove)\nusing this:\n  finite {\\<bottom>}\n  {\\<bottom>} \\<subseteq> extended S\n  fin_sat (extended S)\n\ngoal (1 subgoal):\n 1. \\<exists>A. A \\<Turnstile> \\<bottom>", "unfolding fin_sat_def sat_def"], ["proof (prove)\nusing this:\n  finite {\\<bottom>}\n  {\\<bottom>} \\<subseteq> extended S\n  \\<forall>s\\<subseteq>extended S.\n     finite s \\<longrightarrow>\n     (\\<exists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F)\n\ngoal (1 subgoal):\n 1. \\<exists>A. A \\<Turnstile> \\<bottom>", "by(elim allE[of _ \"{\\<bottom>}\"]) simp"], ["proof (state)\nthis:\n  \\<exists>A. A \\<Turnstile> \\<bottom>\n\ngoal (1 subgoal):\n 1. False", "thus False"], ["proof (prove)\nusing this:\n  \\<exists>A. A \\<Turnstile> \\<bottom>\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<bottom> \\<in> extended S \\<Longrightarrow> False\n\ngoal (5 subgoals):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)\n 2. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 5. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<bottom> \\<in> extended S \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n    (\\<bottom> \\<in> extended S)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<bottom> =\n  (\\<bottom> \\<in> extended S)\n\ngoal (4 subgoals):\n 1. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case (Not F)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n\ngoal (4 subgoals):\n 1. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n\ngoal (4 subgoals):\n 1. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "have \"A \\<Turnstile> F \\<noteq> A \\<Turnstile> \\<^bold>\\<not>F\" for A F"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> F \\<noteq> A \\<Turnstile> \\<^bold>\\<not> F", "by simp"], ["proof (state)\nthis:\n  ?A2 \\<Turnstile> ?F2 \\<noteq> ?A2 \\<Turnstile> \\<^bold>\\<not> ?F2\n\ngoal (4 subgoals):\n 1. \\<And>F.\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n       (F \\<in> extended S) \\<Longrightarrow>\n       (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n       (\\<^bold>\\<not> F \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 4. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  ?A2 \\<Turnstile> ?F2 \\<noteq> ?A2 \\<Turnstile> \\<^bold>\\<not> ?F2", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  ?A2 \\<Turnstile> ?F2 \\<noteq> ?A2 \\<Turnstile> \\<^bold>\\<not> ?F2\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n    (\\<^bold>\\<not> F \\<in> extended S)", "using extended_complem[OF r]"], ["proof (prove)\nusing this:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  ?A2 \\<Turnstile> ?F2 \\<noteq> ?A2 \\<Turnstile> \\<^bold>\\<not> ?F2\n  (?F \\<in> extended S) \\<noteq> (\\<^bold>\\<not> ?F \\<in> extended S)\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n    (\\<^bold>\\<not> F \\<in> extended S)", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> \\<^bold>\\<not> F =\n  (\\<^bold>\\<not> F \\<in> extended S)\n\ngoal (3 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case (And F G)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> G =\n  (G \\<in> extended S)\n\ngoal (3 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "have \"(F \\<in> extended S \\<and> G \\<in> extended S) = (F \\<^bold>\\<and> G \\<in> extended S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<and> G \\<in> extended S) =\n    (F \\<^bold>\\<and> G \\<in> extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<and> G \\<in> extended S) =\n    (F \\<^bold>\\<and> G \\<in> extended S)", "have *: \"\\<not>sat {\\<^bold>\\<not> (F \\<^bold>\\<and> G), F, G}\" \"\\<not>sat {\\<^bold>\\<not> F, (F \\<^bold>\\<and> G)}\" \"\\<not>sat {\\<^bold>\\<not> G, (F \\<^bold>\\<and> G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<and> G), F, G} &&&\n    \\<not> sat {\\<^bold>\\<not> F, F \\<^bold>\\<and> G} &&&\n    \\<not> sat {\\<^bold>\\<not> G, F \\<^bold>\\<and> G}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> (F \\<^bold>\\<and> G), F, G}.\n          \\<A> \\<Turnstile> F &&&\n    \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> F, F \\<^bold>\\<and> G}.\n          \\<A> \\<Turnstile> F &&&\n    \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> G, F \\<^bold>\\<and> G}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<and> G), F, G}\n  \\<not> sat {\\<^bold>\\<not> F, F \\<^bold>\\<and> G}\n  \\<not> sat {\\<^bold>\\<not> G, F \\<^bold>\\<and> G}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<and> G \\<in> extended S) =\n    (F \\<^bold>\\<and> G \\<in> extended S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<and> G \\<in> extended S) =\n    (F \\<^bold>\\<and> G \\<in> extended S)", "by(intro iffI; rule ccontr) (auto intro: *[THEN not_in_extended_FE[OF r]])"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<and> G \\<in> extended S) =\n  (F \\<^bold>\\<and> G \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<and> G \\<in> extended S) =\n  (F \\<^bold>\\<and> G \\<in> extended S)\n\ngoal (3 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<and> F2 =\n                         (F1 \\<^bold>\\<and> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 3. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "thus ?case"], ["proof (prove)\nusing this:\n  (F \\<in> extended S \\<and> G \\<in> extended S) =\n  (F \\<^bold>\\<and> G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<^bold>\\<and> G =\n    (F \\<^bold>\\<and> G \\<in> extended S)", "by(simp add: And)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<^bold>\\<and> G =\n  (F \\<^bold>\\<and> G \\<in> extended S)\n\ngoal (2 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case (Or F G)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> G =\n  (G \\<in> extended S)\n\ngoal (2 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "have \"(F \\<in> extended S \\<or> G \\<in> extended S) = (F \\<^bold>\\<or> G \\<in> extended S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "have \"\\<not>sat {\\<^bold>\\<not>(F \\<^bold>\\<or> G), F}\" \"\\<not>sat {\\<^bold>\\<not>(F \\<^bold>\\<or> G), G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<or> G), F} &&&\n    \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<or> G), G}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> (F \\<^bold>\\<or> G), F}.\n          \\<A> \\<Turnstile> F &&&\n    \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> (F \\<^bold>\\<or> G), G}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<or> G), F}\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<or> G), G}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "from this[THEN not_in_extended_FE[OF r]]"], ["proof (chain)\npicking this:\n  \\<lbrakk>F \\<^bold>\\<or> G \\<notin> extended S;\n   {F} \\<subseteq> extended S; finite {F}\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>F \\<^bold>\\<or> G \\<notin> extended S;\n   {G} \\<subseteq> extended S; finite {G}\\<rbrakk>\n  \\<Longrightarrow> False", "have 1: \"\\<lbrakk>F \\<in> extended S \\<or> G \\<in> extended S; F \\<^bold>\\<or> G \\<notin> extended S\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<lbrakk>F \\<^bold>\\<or> G \\<notin> extended S;\n   {F} \\<subseteq> extended S; finite {F}\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>F \\<^bold>\\<or> G \\<notin> extended S;\n   {G} \\<subseteq> extended S; finite {G}\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<in> extended S \\<or> G \\<in> extended S;\n     F \\<^bold>\\<or> G \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>F \\<in> extended S \\<or> G \\<in> extended S;\n   F \\<^bold>\\<or> G \\<notin> extended S\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "have \"\\<not>sat {\\<^bold>\\<not>F, \\<^bold>\\<not>G, F \\<^bold>\\<or> G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> G, F \\<^bold>\\<or> G}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> F, \\<^bold>\\<not> G,\n                       F \\<^bold>\\<or> G}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> G, F \\<^bold>\\<or> G}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "hence 2: \"\\<lbrakk>F \\<^bold>\\<or> G \\<in> extended S; F \\<notin> extended S; G \\<notin> extended S\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> G, F \\<^bold>\\<or> G}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> extended S; F \\<notin> extended S;\n     G \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "using extended_max not_in_extended_FE[OF r]"], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> G, F \\<^bold>\\<or> G}\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  \\<lbrakk>\\<not> sat (\\<^bold>\\<not> ?F \\<triangleright> ?G);\n   ?F \\<notin> extended S; ?G \\<subseteq> extended S; finite ?G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<or> G \\<in> extended S; F \\<notin> extended S;\n     G \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>F \\<^bold>\\<or> G \\<in> extended S; F \\<notin> extended S;\n   G \\<notin> extended S\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<or> G \\<in> extended S) =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "by(intro iffI; rule ccontr) (auto intro: 1 2)"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<or> G \\<in> extended S) =\n  (F \\<^bold>\\<or> G \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<or> G \\<in> extended S) =\n  (F \\<^bold>\\<or> G \\<in> extended S)\n\ngoal (2 subgoals):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<or> F2 =\n                         (F1 \\<^bold>\\<or> F2 \\<in> extended S)\n 2. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "thus ?case"], ["proof (prove)\nusing this:\n  (F \\<in> extended S \\<or> G \\<in> extended S) =\n  (F \\<^bold>\\<or> G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<^bold>\\<or> G =\n    (F \\<^bold>\\<or> G \\<in> extended S)", "by(simp add: Or)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F \\<^bold>\\<or> G =\n  (F \\<^bold>\\<or> G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "case (Imp F G)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> G =\n  (G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "have \"(F \\<in> extended S \\<longrightarrow> G \\<in> extended S) = (F \\<^bold>\\<rightarrow> G \\<in> extended S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "have \"\\<not>sat {\\<^bold>\\<not>G, F, F \\<^bold>\\<rightarrow> G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> G, F, F \\<^bold>\\<rightarrow> G}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> G, F, F \\<^bold>\\<rightarrow> G}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> G, F, F \\<^bold>\\<rightarrow> G}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "hence 1: \"\\<lbrakk>F \\<^bold>\\<rightarrow> G \\<in> extended S; F \\<in> extended S; G \\<notin> extended S\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> G, F, F \\<^bold>\\<rightarrow> G}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<in> extended S; F \\<in> extended S;\n     G \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "using extended_max not_in_extended_FE[OF r]"], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> G, F, F \\<^bold>\\<rightarrow> G}\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  \\<lbrakk>\\<not> sat (\\<^bold>\\<not> ?F \\<triangleright> ?G);\n   ?F \\<notin> extended S; ?G \\<subseteq> extended S; finite ?G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<in> extended S; F \\<in> extended S;\n     G \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<in> extended S; F \\<in> extended S;\n   G \\<notin> extended S\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "have \"\\<not>sat {\\<^bold>\\<not>F,\\<^bold>\\<not>(F \\<^bold>\\<rightarrow> G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> F,\n                \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> F,\n                       \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "hence 2: \"\\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S; F \\<notin> extended S\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n     F \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "using extended_max not_in_extended_FE[OF r]"], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> F, \\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G)}\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  \\<lbrakk>\\<not> sat (\\<^bold>\\<not> ?F \\<triangleright> ?G);\n   ?F \\<notin> extended S; ?G \\<subseteq> extended S; finite ?G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n     F \\<notin> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n   F \\<notin> extended S\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "have \"\\<not>sat {\\<^bold>\\<not>(F \\<^bold>\\<rightarrow> G),G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), G}", "unfolding sat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>{\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), G}.\n          \\<A> \\<Turnstile> F", "by auto"], ["proof (state)\nthis:\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), G}\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "hence 3: \"\\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S; G \\<in> extended S\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), G}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n     G \\<in> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "using extended_max not_in_extended_FE[OF r]"], ["proof (prove)\nusing this:\n  \\<not> sat {\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), G}\n  ?F \\<in> extended ?S \\<or> \\<^bold>\\<not> ?F \\<in> extended ?S\n  \\<lbrakk>\\<not> sat (\\<^bold>\\<not> ?F \\<triangleright> ?G);\n   ?F \\<notin> extended S; ?G \\<subseteq> extended S; finite ?G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n     G \\<in> extended S\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>F \\<^bold>\\<rightarrow> G \\<notin> extended S;\n   G \\<in> extended S\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "by(intro iffI; rule ccontr) (auto intro: 1 2 3)"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n  (F \\<^bold>\\<rightarrow> G \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n  (F \\<^bold>\\<rightarrow> G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2.\n       \\<lbrakk>(\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F1 =\n                (F1 \\<in> extended S);\n        (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F2 =\n        (F2 \\<in> extended S)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n                         F1 \\<^bold>\\<rightarrow> F2 =\n                         (F1 \\<^bold>\\<rightarrow> F2 \\<in> extended S)", "thus ?case"], ["proof (prove)\nusing this:\n  (F \\<in> extended S \\<longrightarrow> G \\<in> extended S) =\n  (F \\<^bold>\\<rightarrow> G \\<in> extended S)\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n    F \\<^bold>\\<rightarrow> G =\n    (F \\<^bold>\\<rightarrow> G \\<in> extended S)", "by(simp add: Imp)"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile>\n  F \\<^bold>\\<rightarrow> G =\n  (F \\<^bold>\\<rightarrow> G \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F =\n  (F \\<in> extended S)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem compactness:\n  fixes S :: \"'a :: countable formula set\"\n  shows \"sat S \\<longleftrightarrow> fin_sat S\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat S = fin_sat S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. sat S \\<Longrightarrow> fin_sat S\n 2. fin_sat S \\<Longrightarrow> sat S", "assume ?l"], ["proof (state)\nthis:\n  sat S\n\ngoal (2 subgoals):\n 1. sat S \\<Longrightarrow> fin_sat S\n 2. fin_sat S \\<Longrightarrow> sat S", "thus ?r"], ["proof (prove)\nusing this:\n  sat S\n\ngoal (1 subgoal):\n 1. fin_sat S", "unfolding sat_def fin_sat_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<A>. \\<forall>F\\<in>S. \\<A> \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<subseteq>S.\n       finite s \\<longrightarrow>\n       (\\<exists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F)", "by blast"], ["proof (state)\nthis:\n  fin_sat S\n\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> sat S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> sat S", "assume r: ?r"], ["proof (state)\nthis:\n  fin_sat S\n\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> sat S", "note ext_model[OF r, THEN iffD2]"], ["proof (state)\nthis:\n  ?F1 \\<in> extended S \\<Longrightarrow>\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> ?F1\n\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> sat S", "hence \"\\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F\""], ["proof (prove)\nusing this:\n  ?F1 \\<in> extended S \\<Longrightarrow>\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> ?F1\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F", "using extended_superset"], ["proof (prove)\nusing this:\n  ?F1 \\<in> extended S \\<Longrightarrow>\n  (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> ?F1\n  ?S \\<subseteq> extended ?S\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F", "by blast"], ["proof (state)\nthis:\n  \\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. fin_sat S \\<Longrightarrow> sat S", "thus ?l"], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. sat S", "unfolding sat_def"], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>S. (\\<lambda>k. Atom k \\<in> extended S) \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. \\<exists>\\<A>. \\<forall>F\\<in>S. \\<A> \\<Turnstile> F", "by blast"], ["proof (state)\nthis:\n  sat S\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary compact_entailment:\n  fixes F :: \"'a :: countable formula\"\n  assumes fent: \"\\<Gamma> \\<TTurnstile> F\"\n  shows \"\\<exists>\\<Gamma>'. finite \\<Gamma>' \\<and> \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'.\n       finite \\<Gamma>' \\<and>\n       \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'.\n       finite \\<Gamma>' \\<and>\n       \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "have ND_sem:  \"\\<Gamma> \\<TTurnstile> F \\<longleftrightarrow> \\<not>sat (insert (\\<^bold>\\<not>F) \\<Gamma>)\" \n    for \\<Gamma> F"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<TTurnstile> F =\n    (\\<not> sat (\\<^bold>\\<not> F \\<triangleright> \\<Gamma>))", "unfolding sat_def entailment_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<A>.\n        (\\<forall>G\\<in>\\<Gamma>. \\<A> \\<Turnstile> G) \\<longrightarrow>\n        \\<A> \\<Turnstile> F) =\n    (\\<nexists>\\<A>.\n        \\<forall>F\\<in>\\<^bold>\\<not> F \\<triangleright> \\<Gamma>.\n           \\<A> \\<Turnstile> F)", "by auto"], ["proof (state)\nthis:\n  ?\\<Gamma>1 \\<TTurnstile> ?F1 =\n  (\\<not> sat (\\<^bold>\\<not> ?F1 \\<triangleright> ?\\<Gamma>1))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'.\n       finite \\<Gamma>' \\<and>\n       \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "obtain \\<Gamma>' where 0: \"finite \\<Gamma>'\" \"\\<Gamma>' \\<TTurnstile> F\" \"\\<Gamma>' \\<subseteq> \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from fent[unfolded ND_sem compactness]"], ["proof (chain)\npicking this:\n  \\<not> fin_sat (\\<^bold>\\<not> F \\<triangleright> \\<Gamma>)", "have \"\\<not> fin_sat (insert (\\<^bold>\\<not> F) \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<not> fin_sat (\\<^bold>\\<not> F \\<triangleright> \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> fin_sat (\\<^bold>\\<not> F \\<triangleright> \\<Gamma>)", "."], ["proof (state)\nthis:\n  \\<not> fin_sat (\\<^bold>\\<not> F \\<triangleright> \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this[unfolded fin_sat_def]"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>s\\<subseteq>\\<^bold>\\<not> F \\<triangleright> \\<Gamma>.\n             finite s \\<longrightarrow> sat s)", "obtain s where s: \"s \\<subseteq> insert(\\<^bold>\\<not>F) \\<Gamma>\" \"finite s\" \"\\<not>sat s\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>s\\<subseteq>\\<^bold>\\<not> F \\<triangleright> \\<Gamma>.\n             finite s \\<longrightarrow> sat s)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<subseteq> \\<^bold>\\<not> F \\<triangleright> \\<Gamma>;\n         finite s; \\<not> sat s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<subseteq> \\<^bold>\\<not> F \\<triangleright> \\<Gamma>\n  finite s\n  \\<not> sat s\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 2: \"finite (s - {\\<^bold>\\<not> F})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (s - {\\<^bold>\\<not> F})", "using s"], ["proof (prove)\nusing this:\n  s \\<subseteq> \\<^bold>\\<not> F \\<triangleright> \\<Gamma>\n  finite s\n  \\<not> sat s\n\ngoal (1 subgoal):\n 1. finite (s - {\\<^bold>\\<not> F})", "by simp"], ["proof (state)\nthis:\n  finite (s - {\\<^bold>\\<not> F})\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 3: \"s - {\\<^bold>\\<not> F} \\<TTurnstile> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s - {\\<^bold>\\<not> F} \\<TTurnstile> F", "unfolding ND_sem"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sat (\\<^bold>\\<not> F \\<triangleright> s - {\\<^bold>\\<not> F})", "using s(3)"], ["proof (prove)\nusing this:\n  \\<not> sat s\n\ngoal (1 subgoal):\n 1. \\<not> sat (\\<^bold>\\<not> F \\<triangleright> s - {\\<^bold>\\<not> F})", "unfolding sat_def"], ["proof (prove)\nusing this:\n  \\<nexists>\\<A>. \\<forall>F\\<in>s. \\<A> \\<Turnstile> F\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<A>.\n       \\<forall>F\\<in>\\<^bold>\\<not>\n                       F \\<triangleright> s - {\\<^bold>\\<not> F}.\n          \\<A> \\<Turnstile> F", "by blast"], ["proof (state)\nthis:\n  s - {\\<^bold>\\<not> F} \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 4: \"s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>", "using s"], ["proof (prove)\nusing this:\n  s \\<subseteq> \\<^bold>\\<not> F \\<triangleright> \\<Gamma>\n  finite s\n  \\<not> sat s\n\ngoal (1 subgoal):\n 1. s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>", "by blast"], ["proof (state)\nthis:\n  s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "case 1"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?\\<Gamma>'1; ?\\<Gamma>'1 \\<TTurnstile> F;\n   ?\\<Gamma>'1 \\<subseteq> \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>finite \\<Gamma>'; \\<Gamma>' \\<TTurnstile> F;\n         \\<Gamma>' \\<subseteq> \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from 2 3 4"], ["proof (chain)\npicking this:\n  finite (s - {\\<^bold>\\<not> F})\n  s - {\\<^bold>\\<not> F} \\<TTurnstile> F\n  s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>", "show ?case"], ["proof (prove)\nusing this:\n  finite (s - {\\<^bold>\\<not> F})\n  s - {\\<^bold>\\<not> F} \\<TTurnstile> F\n  s - {\\<^bold>\\<not> F} \\<subseteq> \\<Gamma>\n\ngoal (1 subgoal):\n 1. thesis", "by(intro 1[of \"s - {Not F}\"])"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite \\<Gamma>'\n  \\<Gamma>' \\<TTurnstile> F\n  \\<Gamma>' \\<subseteq> \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'.\n       finite \\<Gamma>' \\<and>\n       \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite \\<Gamma>'\n  \\<Gamma>' \\<TTurnstile> F\n  \\<Gamma>' \\<subseteq> \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'.\n       finite \\<Gamma>' \\<and>\n       \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary compact_to_formula:\n  fixes F :: \"'a :: countable formula\"\n  assumes fent: \"\\<Gamma> \\<TTurnstile> F\"\n  obtains \\<Gamma>' where \"set \\<Gamma>' \\<subseteq> \\<Gamma>\" \"\\<Turnstile> (\\<^bold>\\<And>\\<Gamma>') \\<^bold>\\<rightarrow> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "case 1"], ["proof (state)\nthis:\n  \\<lbrakk>set ?\\<Gamma>' \\<subseteq> \\<Gamma>;\n   \\<Turnstile> \\<^bold>\\<And>?\\<Gamma>' \\<^bold>\\<rightarrow> F\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note compact_entailment[OF assms]"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "guess \\<Gamma>'"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F", "obtain \\<Gamma>'' where \"\\<Gamma>' = set \\<Gamma>''\""], ["proof (prove)\nusing this:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>''.\n        \\<Gamma>' = set \\<Gamma>'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using finite_list"], ["proof (prove)\nusing this:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>''.\n        \\<Gamma>' = set \\<Gamma>'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>' = set \\<Gamma>''\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'.\n        \\<lbrakk>set \\<Gamma>' \\<subseteq> \\<Gamma>;\n         \\<Turnstile> \\<^bold>\\<And>\\<Gamma>' \\<^bold>\\<rightarrow>\n                      F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n  \\<Gamma>' = set \\<Gamma>''", "show thesis"], ["proof (prove)\nusing this:\n  finite \\<Gamma>' \\<and>\n  \\<Gamma>' \\<subseteq> \\<Gamma> \\<and> \\<Gamma>' \\<TTurnstile> F\n  \\<Gamma>' = set \\<Gamma>''\n\ngoal (1 subgoal):\n 1. thesis", "by(intro 1)  (blast, simp add: entailment_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}