{"file_name": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems/Resolution_Compl_SC_Full.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems", "problem_names": ["theorem Resolution_complete:\n  fixes S :: \"'a :: countable formula set\"\n  assumes val: \"S \\<TTurnstile> F\"\n  shows \"\\<Union>((cnf \\<circ> nnf) ` ({\\<^bold>\\<not>F} \\<union> S)) \\<turnstile> \\<box>\""], "translations": [["", "theorem Resolution_complete:\n  fixes S :: \"'a :: countable formula set\"\n  assumes val: \"S \\<TTurnstile> F\"\n  shows \"\\<Union>((cnf \\<circ> nnf) ` ({\\<^bold>\\<not>F} \\<union> S)) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "(* look: S may be infinite. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "let ?mun = \"\\<lambda>s. \\<Union>((cnf \\<circ> nnf) ` s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "(* note: there's an alternate version of this proof with CSC_Resolution_pre and the CNF_Semantics *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "from compact_entailment[OF val]"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> S \\<and> \\<Gamma>' \\<TTurnstile> F", "obtain S'' where fin: \"finite S''\" and su: \"S'' \\<subseteq> S\" and val': \" S'' \\<TTurnstile> F\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'.\n     finite \\<Gamma>' \\<and>\n     \\<Gamma>' \\<subseteq> S \\<and> \\<Gamma>' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. (\\<And>S''.\n        \\<lbrakk>finite S''; S'' \\<subseteq> S; S'' \\<TTurnstile> F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite S''\n  S'' \\<subseteq> S\n  S'' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "from fin"], ["proof (chain)\npicking this:\n  finite S''", "obtain S' where S: \"S'' = set_mset S'\""], ["proof (prove)\nusing this:\n  finite S''\n\ngoal (1 subgoal):\n 1. (\\<And>S'. S'' = set_mset S' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_set_mset_mset_set"], ["proof (prove)\nusing this:\n  finite S''\n  finite ?A \\<Longrightarrow> set_mset (mset_set ?A) = ?A\n\ngoal (1 subgoal):\n 1. (\\<And>S'. S'' = set_mset S' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S'' = set_mset S'\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "have cnf: \"\\<forall>F \\<in> set_mset (image_mset (cnf_form_of \\<circ> nnf) (\\<^bold>\\<not> F, S')). is_cnf F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>#image_mset (cnf_form_of \\<circ> nnf)\n                     (\\<^bold>\\<not> F, S').\n       is_cnf F", "by(simp add: cnf_form_of_is is_nnf_nnf)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>#image_mset (cnf_form_of \\<circ> nnf)\n                   (\\<^bold>\\<not> F, S').\n     is_cnf F\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "note entailment_def[simp]"], ["proof (state)\nthis:\n  ?\\<Gamma> \\<TTurnstile> ?F \\<equiv>\n  \\<forall>\\<A>.\n     (\\<forall>G\\<in>?\\<Gamma>. \\<A> \\<Turnstile> G) \\<longrightarrow>\n     \\<A> \\<Turnstile> ?F\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "from val'"], ["proof (chain)\npicking this:\n  S'' \\<TTurnstile> F", "have \"S'' \\<TTurnstile> \\<^bold>\\<not>(\\<^bold>\\<not>F)\""], ["proof (prove)\nusing this:\n  S'' \\<TTurnstile> F\n\ngoal (1 subgoal):\n 1. S'' \\<TTurnstile> \\<^bold>\\<not> (\\<^bold>\\<not> F)", "by simp"], ["proof (state)\nthis:\n  S'' \\<TTurnstile> \\<^bold>\\<not> (\\<^bold>\\<not> F)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "hence \"S' \\<Rightarrow> {#\\<^bold>\\<not>(\\<^bold>\\<not>F)#}\""], ["proof (prove)\nusing this:\n  S'' \\<TTurnstile> \\<^bold>\\<not> (\\<^bold>\\<not> F)\n\ngoal (1 subgoal):\n 1. S' \\<Rightarrow> \\<^bold>\\<not> (\\<^bold>\\<not> F), {#}", "unfolding SC_sound_complete sequent_intuitonistic_semantics S"], ["proof (prove)\nusing this:\n  set_mset S' \\<TTurnstile> \\<^bold>\\<not> (\\<^bold>\\<not> F)\n\ngoal (1 subgoal):\n 1. set_mset S' \\<TTurnstile> \\<^bold>\\<not> (\\<^bold>\\<not> F)", "."], ["proof (state)\nthis:\n  S' \\<Rightarrow> \\<^bold>\\<not> (\\<^bold>\\<not> F), {#}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "hence \"\\<^bold>\\<not>F, S' \\<Rightarrow> {#}\""], ["proof (prove)\nusing this:\n  S' \\<Rightarrow> \\<^bold>\\<not> (\\<^bold>\\<not> F), {#}\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<not> F, S' \\<Rightarrow> {#}", "by (simp add: NotR_inv)"], ["proof (state)\nthis:\n  \\<^bold>\\<not> F, S' \\<Rightarrow> {#}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "hence \"image_mset nnf (\\<^bold>\\<not>F, S') \\<Rightarrow> {#}\""], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> F, S' \\<Rightarrow> {#}\n\ngoal (1 subgoal):\n 1. image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow> {#}", "using LSC_NNF SC_LSC"], ["proof (prove)\nusing this:\n  \\<^bold>\\<not> F, S' \\<Rightarrow> {#}\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset nnf ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n  ?\\<Gamma> \\<Rightarrow> {#} = ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow> {#}", "by blast"], ["proof (state)\nthis:\n  image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow> {#}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "hence \"image_mset nnf (\\<^bold>\\<not>F, S') \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\nusing this:\n  image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow> {#}\n\ngoal (1 subgoal):\n 1. image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow>\\<^sub>n", "by (simp add: SC_LSC is_nnf_nnf)"], ["proof (state)\nthis:\n  image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "with LSC_Resolution"], ["proof (chain)\npicking this:\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  \\<Union> (cnf ` nnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>\n  image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow>\\<^sub>n", "have \"\\<Union>(cnf ` nnf ` set_mset (image_mset nnf (\\<^bold>\\<not> F, S'))) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  \\<Union> (cnf ` nnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>\n  image_mset nnf (\\<^bold>\\<not> F, S') \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      nnf `\n      set_mset (image_mset nnf (\\<^bold>\\<not> F, S'))) \\<turnstile> \\<box>", "."], ["proof (state)\nthis:\n  \\<Union>\n   (cnf `\n    nnf `\n    set_mset (image_mset nnf (\\<^bold>\\<not> F, S'))) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "hence \"?mun ({\\<^bold>\\<not> F} \\<union> S'') \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf `\n    nnf `\n    set_mset (image_mset nnf (\\<^bold>\\<not> F, S'))) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S'')) \\<turnstile> \\<box>", "unfolding set_image_mset image_comp comp_def S is_nnf_nnf_id[OF is_nnf_nnf]"], ["proof (prove)\nusing this:\n  (\\<Union>x\\<in>set_mset (\\<^bold>\\<not> F, S').\n      cnf (nnf x)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>{\\<^bold>\\<not> F} \\<union> set_mset S'.\n        cnf (nnf x)) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   ((cnf \\<circ> nnf) `\n    ({\\<^bold>\\<not> F} \\<union> S'')) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "from Resolution_weaken[OF this, of \"?mun S\"]"], ["proof (chain)\npicking this:\n  \\<Union> ((cnf \\<circ> nnf) ` S) \\<union>\n  \\<Union>\n   ((cnf \\<circ> nnf) `\n    ({\\<^bold>\\<not> F} \\<union> S'')) \\<turnstile> \\<box>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> ((cnf \\<circ> nnf) ` S) \\<union>\n  \\<Union>\n   ((cnf \\<circ> nnf) `\n    ({\\<^bold>\\<not> F} \\<union> S'')) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "using su"], ["proof (prove)\nusing this:\n  \\<Union> ((cnf \\<circ> nnf) ` S) \\<union>\n  \\<Union>\n   ((cnf \\<circ> nnf) `\n    ({\\<^bold>\\<not> F} \\<union> S'')) \\<turnstile> \\<box>\n  S'' \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<Union>\n     ((cnf \\<circ> nnf) `\n      ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>", "by (metis UN_Un Un_left_commute sup.order_iff)"], ["proof (state)\nthis:\n  \\<Union>\n   ((cnf \\<circ> nnf) ` ({\\<^bold>\\<not> F} \\<union> S)) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}