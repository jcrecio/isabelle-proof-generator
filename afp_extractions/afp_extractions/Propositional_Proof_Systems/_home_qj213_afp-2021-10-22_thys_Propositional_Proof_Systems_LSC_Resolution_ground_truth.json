{"file_name": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems/LSC_Resolution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems", "problem_names": ["lemma literal_subset_sandwich:\n  assumes \"is_lit_plus F\" \"cnf F = {C}\" \"R \\<subseteq> C\"\n  shows \"R = \\<box> \\<or> R = C\"", "theorem CSC_Resolution_pre: \"\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow> \\<forall>\\<gamma> \\<in> set_mset \\<Gamma>. is_cnf \\<gamma> \\<Longrightarrow> (\\<Union>(cnf ` set_mset \\<Gamma>)) \\<turnstile> \\<box>\"", "lemma Resolution_LSC_pre:\n  assumes \"S \\<turnstile> R\"\n  assumes \"finite R\"\n  assumes \"finite S\" \"Ball S finite\"\n  shows \"\\<exists>S' R'. \\<forall>\\<Gamma>. set R' = R \\<and> set (map set S') = S \\<and> \n    (disj_of_clause R', {#disj_of_clause c. c \\<in># mset S'#} + \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow> {#disj_of_clause c. c \\<in># mset S'#} + \\<Gamma> \\<Rightarrow>\\<^sub>n)\"", "lemma Resolution_LSC_pre_nodisj: (* I've tried showing this directly instead of Resolution_LSC_pre, but that is surprisingly painful. *)\n  assumes \"S \\<turnstile> R\"\n  assumes \"finite R\"\n  assumes \"finite S\" \"Ball S finite\"\n  shows \"\\<exists>S' R'. \\<forall>\\<Gamma>. is_nnf_mset \\<Gamma> \\<longrightarrow> is_disj R' \\<and> is_nnf S' \\<and> cnf R' = {R} \\<and> cnf S' \\<subseteq> S \\<and> \n    (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow> S', \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], "translations": [["", "lemma literal_subset_sandwich:\n  assumes \"is_lit_plus F\" \"cnf F = {C}\" \"R \\<subseteq> C\"\n  shows \"R = \\<box> \\<or> R = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = \\<box> \\<or> R = C", "using assms"], ["proof (prove)\nusing this:\n  is_lit_plus F\n  cnf F = {C}\n  R \\<subseteq> C\n\ngoal (1 subgoal):\n 1. R = \\<box> \\<or> R = C", "by(cases F rule: is_lit_plus.cases; simp) blast+"], ["", "(* proof somewhat strange internally\\<dots> *)"], ["", "text\\<open>Proof following Gallier~\\cite{gallier2015logic}.\\<close>"], ["", "theorem CSC_Resolution_pre: \"\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow> \\<forall>\\<gamma> \\<in> set_mset \\<Gamma>. is_cnf \\<gamma> \\<Longrightarrow> (\\<Union>(cnf ` set_mset \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<Rightarrow>\\<^sub>n;\n     \\<forall>\\<gamma>\\<in>#\\<Gamma>. is_cnf \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "proof(induction rule: LSC.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>k \\<Gamma>.\n       Multiset.Ball (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)\n        is_cnf \\<Longrightarrow>\n       \\<Union>\n        (cnf `\n         set_mset\n          (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 9. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "case (Ax k \\<Gamma>)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>#\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>. is_cnf a\n\ngoal (9 subgoals):\n 1. \\<And>k \\<Gamma>.\n       Multiset.Ball (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)\n        is_cnf \\<Longrightarrow>\n       \\<Union>\n        (cnf `\n         set_mset\n          (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 9. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "let ?s = \"\\<Union>(cnf ` set_mset (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>))\""], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>k \\<Gamma>.\n       Multiset.Ball (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)\n        is_cnf \\<Longrightarrow>\n       \\<Union>\n        (cnf `\n         set_mset\n          (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 9. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "have \"?s \\<turnstile> {k\\<^sup>+}\" \"?s \\<turnstile> {k\\<inverse>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not>\n         (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<^sup>+} &&&\n    \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not>\n         (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<inverse>}", "using Resolution.Ass[where 'a='a]"], ["proof (prove)\nusing this:\n  ?C \\<in> ?S \\<Longrightarrow> ?S \\<turnstile> ?C\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not>\n         (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<^sup>+} &&&\n    \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not>\n         (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<inverse>}", "by simp_all"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf `\n    set_mset\n     (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<^sup>+}\n  \\<Union>\n   (cnf `\n    set_mset\n     (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> {k\\<inverse>}\n\ngoal (9 subgoals):\n 1. \\<And>k \\<Gamma>.\n       Multiset.Ball (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)\n        is_cnf \\<Longrightarrow>\n       \\<Union>\n        (cnf `\n         set_mset\n          (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 9. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "from Resolution.R[OF this, of k]"], ["proof (chain)\npicking this:\n  \\<lbrakk>k\\<^sup>+ \\<in> {k\\<^sup>+};\n   k\\<inverse> \\<in> {k\\<inverse>}\\<rbrakk>\n  \\<Longrightarrow> \\<Union>\n                     (cnf `\n                      set_mset\n                       (\\<^bold>\\<not>\n                         (Atom\n                           k), Atom\n                                k, \\<Gamma>)) \\<turnstile> {k\\<^sup>+} -\n                     {k\\<^sup>+} \\<union>\n                     ({k\\<inverse>} - {k\\<inverse>})", "have \"?s \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>k\\<^sup>+ \\<in> {k\\<^sup>+};\n   k\\<inverse> \\<in> {k\\<inverse>}\\<rbrakk>\n  \\<Longrightarrow> \\<Union>\n                     (cnf `\n                      set_mset\n                       (\\<^bold>\\<not>\n                         (Atom\n                           k), Atom\n                                k, \\<Gamma>)) \\<turnstile> {k\\<^sup>+} -\n                     {k\\<^sup>+} \\<union>\n                     ({k\\<inverse>} - {k\\<inverse>})\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf `\n    set_mset\n     (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (9 subgoals):\n 1. \\<And>k \\<Gamma>.\n       Multiset.Ball (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)\n        is_cnf \\<Longrightarrow>\n       \\<Union>\n        (cnf `\n         set_mset\n          (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 9. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf `\n    set_mset\n     (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      set_mset\n       (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf `\n    set_mset\n     (\\<^bold>\\<not> (Atom k), Atom k, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "case (BotL \\<Gamma>)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>#\\<bottom>, \\<Gamma>. is_cnf a\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma>.\n       Multiset.Ball (\\<bottom>, \\<Gamma>) is_cnf \\<Longrightarrow>\n       \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 8. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>#\\<bottom>, \\<Gamma>. is_cnf a\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>", "by(simp add: Ass)"], ["proof (state)\nthis:\n  \\<Union> (cnf ` set_mset (\\<bottom>, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (7 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "case (AndL F G \\<Gamma>)"], ["proof (state)\nthis:\n  F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<and> G, \\<Gamma>. is_cnf a\n\ngoal (7 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence \"\\<Union>(cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<and> G, \\<Gamma>. is_cnf a\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (7 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<and> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<and>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 7. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Union> (cnf ` set_mset (F, G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<and> G, \\<Gamma>)) \\<turnstile> \\<box>", "by(simp add: Un_left_commute sup.assoc)"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf ` set_mset (F \\<^bold>\\<and> G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "(* The idea for the whole trickery with F being a literal (is_disj has to only allows right deep formulas)\n    and the sandwiching is from Gallier, but mentioned there only in one little sentence. *)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "case (OrL F \\<Gamma> G)"], ["proof (state)\nthis:\n  F, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<or> G, \\<Gamma>. is_cnf a\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence \"is_cnf (F \\<^bold>\\<or> G)\""], ["proof (prove)\nusing this:\n  F, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<or> G, \\<Gamma>. is_cnf a\n\ngoal (1 subgoal):\n 1. is_cnf (F \\<^bold>\\<or> G)", "by simp"], ["proof (state)\nthis:\n  is_cnf (F \\<^bold>\\<or> G)\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence d: \"is_disj (F \\<^bold>\\<or> G)\""], ["proof (prove)\nusing this:\n  is_cnf (F \\<^bold>\\<or> G)\n\ngoal (1 subgoal):\n 1. is_disj (F \\<^bold>\\<or> G)", "by simp"], ["proof (state)\nthis:\n  is_disj (F \\<^bold>\\<or> G)\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence db: \"is_disj F\" \"is_lit_plus F\" \"is_disj G\""], ["proof (prove)\nusing this:\n  is_disj (F \\<^bold>\\<or> G)\n\ngoal (1 subgoal):\n 1. is_disj F &&& is_lit_plus F &&& is_disj G", "by (-, cases F) simp_all"], ["proof (state)\nthis:\n  is_disj F\n  is_lit_plus F\n  is_disj G\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence \"is_cnf F \\<and> is_cnf G\""], ["proof (prove)\nusing this:\n  is_disj F\n  is_lit_plus F\n  is_disj G\n\ngoal (1 subgoal):\n 1. is_cnf F \\<and> is_cnf G", "by(cases F; cases G; simp)"], ["proof (state)\nthis:\n  is_cnf F \\<and> is_cnf G\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "with OrL"], ["proof (chain)\npicking this:\n  F, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<or> G, \\<Gamma>. is_cnf a\n  is_cnf F \\<and> is_cnf G", "have IH: \"(\\<Union>(cnf ` set_mset (F, \\<Gamma>))) \\<turnstile> \\<box>\" \"(\\<Union>(cnf ` set_mset (G, \\<Gamma>))) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  F, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>a\\<in>#F, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#G, \\<Gamma>. is_cnf a \\<Longrightarrow>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<forall>a\\<in>#F \\<^bold>\\<or> G, \\<Gamma>. is_cnf a\n  is_cnf F \\<and> is_cnf G\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box> &&&\n    \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>", "by simp_all"], ["proof (state)\nthis:\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "let ?\\<Gamma> = \"(\\<Union>(cnf ` set_mset \\<Gamma>))\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "from IH"], ["proof (chain)\npicking this:\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>", "have IH_readable: \"cnf F \\<union> ?\\<Gamma> \\<turnstile> \\<box>\" \"cnf G \\<union> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. cnf F \\<union>\n    \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box> &&&\n    cnf G \\<union> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  cnf F \\<union> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  cnf G \\<union> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (6 subgoals):\n 1. \\<And>F \\<Gamma> G.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<or> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<or>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 6. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "proof(cases \"cnf F = {} \\<or> cnf G = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "case True"], ["proof (state)\nthis:\n  cnf F = {} \\<or> cnf G = {}\n\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "hence \"cnf (F \\<^bold>\\<or> G) = {}\""], ["proof (prove)\nusing this:\n  cnf F = {} \\<or> cnf G = {}\n\ngoal (1 subgoal):\n 1. cnf (F \\<^bold>\\<or> G) = {}", "by auto"], ["proof (state)\nthis:\n  cnf (F \\<^bold>\\<or> G) = {}\n\ngoal (2 subgoals):\n 1. cnf F = {} \\<or> cnf G = {} \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  cnf (F \\<^bold>\\<or> G) = {}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "using True IH"], ["proof (prove)\nusing this:\n  cnf (F \\<^bold>\\<or> G) = {}\n  cnf F = {} \\<or> cnf G = {}\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "case False"], ["proof (state)\nthis:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "then"], ["proof (chain)\npicking this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})", "obtain S T where ST: \"cnf F = {S}\" \"cnf G = {T}\""], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cnf_disj_ex db(1,3)"], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n  is_disj ?F \\<Longrightarrow> \\<exists>R. cnf ?F = {R} \\<or> cnf ?F = {}\n  is_disj F\n  is_disj G\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(* try applying meson here. It's weird. and sledgehammer even suggests it. *)"], ["proof (prove)\nusing this:\n  \\<not> (cnf F = {} \\<or> cnf G = {})\n  is_disj ?F \\<Longrightarrow> \\<exists>R. cnf ?F = {R} \\<or> cnf ?F = {}\n  is_disj F\n  is_disj G\n\ngoal (1 subgoal):\n 1. (\\<And>S T.\n        \\<lbrakk>cnf F = {S}; cnf G = {T}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "(* hint: card S \\<le> 1 *)"], ["proof (state)\nthis:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "hence R: \"cnf (F \\<^bold>\\<or> G) = { S \\<union> T }\""], ["proof (prove)\nusing this:\n  cnf F = {S}\n  cnf G = {T}\n\ngoal (1 subgoal):\n 1. cnf (F \\<^bold>\\<or> G) = {S \\<union> T}", "by simp"], ["proof (state)\nthis:\n  cnf (F \\<^bold>\\<or> G) = {S \\<union> T}\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "have \"\\<lbrakk>S\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>; T\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\\<rbrakk> \\<Longrightarrow> S \\<union> T\\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "assume s: \"S\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\" and t: \"T\\<triangleright>?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (state)\nthis:\n  S \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "hence s_w: \"S \\<triangleright> S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  S \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. S \\<triangleright> S \\<union>\n                       T \\<triangleright> \\<Union>\n     (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "using Resolution_weaken"], ["proof (prove)\nusing this:\n  S \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  ?S \\<turnstile> ?D \\<Longrightarrow> ?T \\<union> ?S \\<turnstile> ?D\n\ngoal (1 subgoal):\n 1. S \\<triangleright> S \\<union>\n                       T \\<triangleright> \\<Union>\n     (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by (metis insert_commute insert_is_Un)"], ["proof (state)\nthis:\n  S \\<triangleright> S \\<union>\n                     T \\<triangleright> \\<Union>\n   (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "note Resolution_taint_assumptions[of \"{T}\" ?\\<Gamma> \"\\<box>\" S] t"], ["proof (state)\nthis:\n  {T} \\<union>\n  \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "then"], ["proof (chain)\npicking this:\n  {T} \\<union>\n  \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "obtain R where R: \"S \\<union> T \\<triangleright> \\<Union>(cnf ` set_mset \\<Gamma>) \\<turnstile> R\" \"R\\<subseteq>S\""], ["proof (prove)\nusing this:\n  {T} \\<union>\n  \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box> \\<Longrightarrow>\n  \\<exists>R\\<subseteq>S.\n     (\\<union>) S ` {T} \\<union>\n     \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R \\<union> \\<box>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        \\<lbrakk>S \\<union>\n                 T \\<triangleright> \\<Union>\n                                     (cnf `\nset_mset \\<Gamma>) \\<turnstile> R;\n         R \\<subseteq> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Un_commute)"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R\n  R \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<triangleright> \\<Union>\n                                 (cnf `\n                                  set_mset \\<Gamma>) \\<turnstile> \\<box>;\n     T \\<triangleright> \\<Union>\n                         (cnf `\n                          set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n    \\<Longrightarrow> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "using literal_subset_sandwich[OF db(2) ST(1) R(2)]"], ["proof (prove)\nusing this:\n  R = \\<box> \\<or> R = S\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. R = \\<box> \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n 2. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "assume \"R = \\<box>\""], ["proof (state)\nthis:\n  R = \\<box>\n\ngoal (2 subgoals):\n 1. R = \\<box> \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n 2. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  R = \\<box>\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "using R(1)"], ["proof (prove)\nusing this:\n  R = \\<box>\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by blast"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "from Resolution_unnecessary[where T=\"{_}\", simplified] R(1)"], ["proof (chain)\npicking this:\n  ?S \\<turnstile> ?uu5 \\<Longrightarrow>\n  (?uu5 \\<triangleright> ?S \\<turnstile> ?D) = (?S \\<turnstile> ?D)\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R", "have \"(R \\<triangleright> S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>) = (S \\<union> T \\<triangleright> ?\\<Gamma> \\<turnstile> \\<box>)\""], ["proof (prove)\nusing this:\n  ?S \\<turnstile> ?uu5 \\<Longrightarrow>\n  (?uu5 \\<triangleright> ?S \\<turnstile> ?D) = (?S \\<turnstile> ?D)\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> R\n\ngoal (1 subgoal):\n 1. (R \\<triangleright> S \\<union>\n                        T \\<triangleright> \\<Union>\n      (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n    (S \\<union>\n     T \\<triangleright> \\<Union>\n                         (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)", "."], ["proof (state)\nthis:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union>\n                       (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "moreover"], ["proof (state)\nthis:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union>\n                       (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "assume \"R = S\""], ["proof (state)\nthis:\n  R = S\n\ngoal (1 subgoal):\n 1. R = S \\<Longrightarrow>\n    S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "ultimately"], ["proof (chain)\npicking this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union>\n                       (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)\n  R = S", "show ?thesis"], ["proof (prove)\nusing this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union>\n                       (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)\n  R = S\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "using s_w"], ["proof (prove)\nusing this:\n  (R \\<triangleright> S \\<union>\n                      T \\<triangleright> \\<Union>\n    (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>) =\n  (S \\<union>\n   T \\<triangleright> \\<Union>\n                       (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>)\n  R = S\n  S \\<triangleright> S \\<union>\n                     T \\<triangleright> \\<Union>\n   (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. S \\<union>\n    T \\<triangleright> \\<Union>\n                        (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<union>\n  T \\<triangleright> \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<triangleright> \\<Union>\n                               (cnf `\n                                set_mset \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union>\n                       (cnf `\n                        set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<not> (cnf F = {} \\<or> cnf G = {}) \\<Longrightarrow>\n    \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>S \\<triangleright> \\<Union>\n                               (cnf `\n                                set_mset \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union>\n                       (cnf `\n                        set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "using IH ST R"], ["proof (prove)\nusing this:\n  \\<lbrakk>S \\<triangleright> \\<Union>\n                               (cnf `\n                                set_mset \\<Gamma>) \\<turnstile> \\<box>;\n   T \\<triangleright> \\<Union>\n                       (cnf `\n                        set_mset \\<Gamma>) \\<turnstile> \\<box>\\<rbrakk>\n  \\<Longrightarrow> S \\<union>\n                    T \\<triangleright> \\<Union>\n  (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>\n  \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>\n  cnf F = {S}\n  cnf G = {T}\n  cnf (F \\<^bold>\\<or> G) = {S \\<union> T}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (5 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "hence case_readable: \"cnf (F \\<^bold>\\<or> G) \\<union> ?\\<Gamma> \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf ` set_mset (F \\<^bold>\\<or> G, \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. cnf (F \\<^bold>\\<or> G) \\<union>\n    \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  cnf (F \\<^bold>\\<or> G) \\<union>\n  \\<Union> (cnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal (5 subgoals):\n 1. \\<And>F G \\<Gamma>.\n       \\<lbrakk>\\<^bold>\\<not>\n                 F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset\n           (\\<^bold>\\<not>\n             F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<or> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<or>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 2. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<and> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<and>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 3. \\<And>F \\<Gamma> G.\n       \\<lbrakk>\\<^bold>\\<not> F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (\\<^bold>\\<not> F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf ` set_mset (\\<^bold>\\<not> F, \\<Gamma>)) \\<turnstile> \\<box>;\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (G, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (F \\<^bold>\\<rightarrow> G, \\<Gamma>) is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (F \\<^bold>\\<rightarrow>\n                             G, \\<Gamma>)) \\<turnstile> \\<box>\n 4. \\<And>F G \\<Gamma>.\n       \\<lbrakk>F, \\<^bold>\\<not> G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<^bold>\\<not> G, \\<Gamma>)\n         is_cnf \\<Longrightarrow>\n        \\<Union>\n         (cnf `\n          set_mset (F, \\<^bold>\\<not> G, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (F \\<^bold>\\<rightarrow> G), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (F \\<^bold>\\<rightarrow>\n                               G), \\<Gamma>)) \\<turnstile> \\<box>\n 5. \\<And>F \\<Gamma>.\n       \\<lbrakk>F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        Multiset.Ball (F, \\<Gamma>) is_cnf \\<Longrightarrow>\n        \\<Union> (cnf ` set_mset (F, \\<Gamma>)) \\<turnstile> \\<box>;\n        Multiset.Ball (\\<^bold>\\<not> (\\<^bold>\\<not> F), \\<Gamma>)\n         is_cnf\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (cnf `\n                           set_mset\n                            (\\<^bold>\\<not>\n                              (\\<^bold>\\<not>\n                                F), \\<Gamma>)) \\<turnstile> \\<box>", "qed auto"], ["", "corollary LSC_Resolution:\n  assumes \"\\<Gamma> \\<Rightarrow>\\<^sub>n\"\n  shows \"(\\<Union>(cnf ` nnf ` set_mset \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<Rightarrow>\\<^sub>n", "have \"image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n", "by (simp add: LSC_NNF)"], ["proof (state)\nthis:\n  image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "from LSC_cnf[OF this]"], ["proof (chain)\npicking this:\n  is_nnf_mset (image_mset nnf \\<Gamma>) \\<Longrightarrow>\n  image_mset cnf_form_of (image_mset nnf \\<Gamma>) \\<Rightarrow>\\<^sub>n", "have \"image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\nusing this:\n  is_nnf_mset (image_mset nnf \\<Gamma>) \\<Longrightarrow>\n  image_mset cnf_form_of (image_mset nnf \\<Gamma>) \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n", "by(simp add: image_mset.compositionality is_nnf_nnf)"], ["proof (state)\nthis:\n  image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "moreover"], ["proof (state)\nthis:\n  image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "have \"\\<forall>\\<gamma> \\<in> set_mset (image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>). is_cnf \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n       is_cnf \\<gamma>", "using cnf_form_of_is[where 'a='a, OF is_nnf_nnf]"], ["proof (prove)\nusing this:\n  is_cnf (cnf_form_of (nnf ?F1))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n       is_cnf \\<gamma>", "by simp"], ["proof (state)\nthis:\n  \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n     is_cnf \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n     is_cnf \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "note CSC_Resolution_pre"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<Gamma> \\<Rightarrow>\\<^sub>n;\n   \\<forall>\\<gamma>\\<in>#?\\<Gamma>. is_cnf \\<gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (cnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "ultimately"], ["proof (chain)\npicking this:\n  image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n     is_cnf \\<gamma>\n  \\<lbrakk>?\\<Gamma> \\<Rightarrow>\\<^sub>n;\n   \\<forall>\\<gamma>\\<in>#?\\<Gamma>. is_cnf \\<gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (cnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>", "have \"\\<Union>(cnf ` set_mset (image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  image_mset (cnf_form_of \\<circ> nnf) \\<Gamma> \\<Rightarrow>\\<^sub>n\n  \\<forall>\\<gamma>\\<in>#image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>.\n     is_cnf \\<gamma>\n  \\<lbrakk>?\\<Gamma> \\<Rightarrow>\\<^sub>n;\n   \\<forall>\\<gamma>\\<in>#?\\<Gamma>. is_cnf \\<gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (cnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf `\n      set_mset\n       (image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>)) \\<turnstile> \\<box>", "by blast"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf `\n    set_mset\n     (image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "hence \"\\<Union>((\\<lambda>F. cnf (cnf_form_of (nnf F))) ` set_mset \\<Gamma>) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf `\n    set_mset\n     (image_mset (cnf_form_of \\<circ> nnf) \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. (\\<Union>F\\<in>set_mset \\<Gamma>.\n        cnf (cnf_form_of (nnf F))) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  (\\<Union>F\\<in>set_mset \\<Gamma>.\n      cnf (cnf_form_of (nnf F))) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>F\\<in>set_mset \\<Gamma>.\n      cnf (cnf_form_of (nnf F))) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "unfolding cnf_cnf[OF is_nnf_nnf]"], ["proof (prove)\nusing this:\n  (\\<Union>F\\<in>set_mset \\<Gamma>. cnf (nnf F)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by simp"], ["proof (state)\nthis:\n  \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary SC_Resolution:\n  assumes \"\\<Gamma> \\<Rightarrow> {#}\"\n  shows \"(\\<Union>(cnf ` nnf ` set_mset \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<Rightarrow> {#}", "have \"image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<Rightarrow> {#}\n\ngoal (1 subgoal):\n 1. image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n", "by (simp add: LSC_NNF SC_LSC)"], ["proof (state)\nthis:\n  image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "hence \"\\<Union>(cnf` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>\""], ["proof (prove)\nusing this:\n  image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>", "using LSC_Resolution"], ["proof (prove)\nusing this:\n  image_mset nnf \\<Gamma> \\<Rightarrow>\\<^sub>n\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  \\<Union> (cnf ` nnf ` set_mset ?\\<Gamma>) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (cnf ` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>", "by blast"], ["proof (state)\nthis:\n  \\<Union>\n   (cnf ` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf ` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "using is_nnf_nnf_id[where 'a='a] is_nnf_nnf[where 'a='a]"], ["proof (prove)\nusing this:\n  \\<Union>\n   (cnf ` nnf ` set_mset (image_mset nnf \\<Gamma>)) \\<turnstile> \\<box>\n  is_nnf ?F \\<Longrightarrow> nnf ?F = ?F\n  is_nnf (nnf ?F)\n\ngoal (1 subgoal):\n 1. \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>", "by auto"], ["proof (state)\nthis:\n  \\<Union> (cnf ` nnf ` set_mset \\<Gamma>) \\<turnstile> \\<box>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Gallier just goes \"Any resolution refutation can be transformed to a derivation in SCNF'\"\n   But we don't know what a resolution refutation is, inductively speaking. *)\n(* would have been a bit nicer with orderings on formula to convert mset \\<rightarrow> list *)"], ["", "lemma Resolution_LSC_pre:\n  assumes \"S \\<turnstile> R\"\n  assumes \"finite R\"\n  assumes \"finite S\" \"Ball S finite\"\n  shows \"\\<exists>S' R'. \\<forall>\\<Gamma>. set R' = R \\<and> set (map set S') = S \\<and> \n    (disj_of_clause R', {#disj_of_clause c. c \\<in># mset S'#} + \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow> {#disj_of_clause c. c \\<in># mset S'#} + \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = R \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "(* order of quantifiers is important here\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = R \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "using assms"], ["proof (prove)\nusing this:\n  S \\<turnstile> R\n  finite R\n  finite S\n  Ball S finite\n\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = R \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "proof(induction S R rule: Resolution.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "case (Ass F S)"], ["proof (state)\nthis:\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "(* Idea: we don't just obtain an S', we obtain an S' that contains R (and not just some reordering of it) *)"], ["proof (state)\nthis:\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "define Sm where \"Sm = S - {F}\""], ["proof (state)\nthis:\n  Sm = S - {F}\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "hence Sm: \"S = F\\<triangleright>Sm\" \"F \\<notin> Sm\""], ["proof (prove)\nusing this:\n  Sm = S - {F}\n\ngoal (1 subgoal):\n 1. S = F \\<triangleright> Sm &&& F \\<notin> Sm", "using Ass"], ["proof (prove)\nusing this:\n  Sm = S - {F}\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n\ngoal (1 subgoal):\n 1. S = F \\<triangleright> Sm &&& F \\<notin> Sm", "by fast+"], ["proof (state)\nthis:\n  S = F \\<triangleright> Sm\n  F \\<notin> Sm\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "(* try doing this with obtain\\<dots> *)"], ["proof (state)\nthis:\n  S = F \\<triangleright> Sm\n  F \\<notin> Sm\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "with Ass"], ["proof (chain)\npicking this:\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n  S = F \\<triangleright> Sm\n  F \\<notin> Sm", "have fsm: \"finite Sm\" \"Ball Sm finite\""], ["proof (prove)\nusing this:\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n  S = F \\<triangleright> Sm\n  F \\<notin> Sm\n\ngoal (1 subgoal):\n 1. finite Sm &&& Ball Sm finite", "by auto"], ["proof (state)\nthis:\n  finite Sm\n  Ball Sm finite\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "then"], ["proof (chain)\npicking this:\n  finite Sm\n  Ball Sm finite", "obtain Sm' where \"Sm = set (map set Sm')\""], ["proof (prove)\nusing this:\n  finite Sm\n  Ball Sm finite\n\ngoal (1 subgoal):\n 1. (\\<And>Sm'.\n        Sm = set (map set Sm') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) ex_map_conv finite_list)"], ["proof (state)\nthis:\n  Sm = set (map set Sm')\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "moreover"], ["proof (state)\nthis:\n  Sm = set (map set Sm')\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "obtain R' where [simp]: \"F = set R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>R'. F = set R' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using Ass finite_list"], ["proof (prove)\nusing this:\n  F \\<in> S\n  finite F\n  finite S\n  \\<forall>a\\<in>S. finite a\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A\n\ngoal (1 subgoal):\n 1. (\\<And>R'. F = set R' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  F = set R'\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "ultimately"], ["proof (chain)\npicking this:\n  Sm = set (map set Sm')\n  F = set R'", "have S: \"S = set (map set (R'#Sm'))\""], ["proof (prove)\nusing this:\n  Sm = set (map set Sm')\n  F = set R'\n\ngoal (1 subgoal):\n 1. S = set (map set (R' # Sm'))", "unfolding Sm"], ["proof (prove)\nusing this:\n  Sm = set (map set Sm')\n  F = set R'\n\ngoal (1 subgoal):\n 1. F \\<triangleright> Sm = set (map set (R' # Sm'))", "by simp"], ["proof (state)\nthis:\n  S = set (map set (R' # Sm'))\n\ngoal (2 subgoals):\n 1. \\<And>C S.\n       \\<lbrakk>C \\<in> S; finite C; finite S; Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' = C \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)\n 2. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = F \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "using LSC_Contract[where 'a='a]"], ["proof (prove)\nusing this:\n  ?F, ?F, ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  ?F, ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = F \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "by(intro exI[where x=\"R'#Sm'\"] exI[where x=R']) (simp add: S add_ac)"], ["proof (state)\nthis:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = F \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "(* this was the base case. ugh. *)"], ["proof (state)\nthis:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = F \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "case (R S F G k)"], ["proof (state)\nthis:\n  S \\<turnstile> F\n  S \\<turnstile> G\n  k\\<^sup>+ \\<in> F\n  k\\<inverse> \\<in> G\n  \\<lbrakk>finite F; finite S; \\<forall>a\\<in>S. finite a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S' R'.\n                       \\<forall>\\<Gamma>.\n                          set R' = F \\<and>\n                          set (map set S') = S \\<and>\n                          (disj_of_clause\n                            R', image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                           image_mset disj_of_clause (mset S') +\n                           \\<Gamma> \\<Rightarrow>\\<^sub>n)\n  \\<lbrakk>finite G; finite S; \\<forall>a\\<in>S. finite a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S' R'.\n                       \\<forall>\\<Gamma>.\n                          set R' = G \\<and>\n                          set (map set S') = S \\<and>\n                          (disj_of_clause\n                            R', image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                           image_mset disj_of_clause (mset S') +\n                           \\<Gamma> \\<Rightarrow>\\<^sub>n)\n  finite (F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>}))\n  finite S\n  \\<forall>a\\<in>S. finite a\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "from R.prems"], ["proof (chain)\npicking this:\n  finite (F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>}))\n  finite S\n  \\<forall>a\\<in>S. finite a", "have fin: \"finite F\" \"finite G\""], ["proof (prove)\nusing this:\n  finite (F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>}))\n  finite S\n  \\<forall>a\\<in>S. finite a\n\ngoal (1 subgoal):\n 1. finite F &&& finite G", "by simp_all"], ["proof (state)\nthis:\n  finite F\n  finite G\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "from R.IH(1)[OF fin(1) R.prems(2,3)]"], ["proof (chain)\npicking this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = F \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)", "obtain FR FS where IHF:\n    \"set FR = F\" \"set (map set FS) = S\"\n    \"\\<And>\\<Gamma> GS. (disj_of_clause FR, image_mset disj_of_clause (mset (FS@GS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n \n      \\<Longrightarrow> image_mset disj_of_clause (mset (FS@GS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], ["proof (prove)\nusing this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = F \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. (\\<And>FR FS.\n        \\<lbrakk>set FR = F; set (map set FS) = S;\n         \\<And>\\<Gamma> GS.\n            disj_of_clause\n             FR, image_mset disj_of_clause (mset (FS @ GS)) +\n                 \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n            image_mset disj_of_clause (mset (FS @ GS)) +\n            \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (metis add.assoc)"], ["proof (state)\nthis:\n  set FR = F\n  set (map set FS) = S\n  disj_of_clause\n   FR, image_mset disj_of_clause (mset (FS @ ?GS)) +\n       ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset disj_of_clause (mset (FS @ ?GS)) +\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "from R.IH(2)[OF fin(2) R.prems(2,3)]"], ["proof (chain)\npicking this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = G \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)", "obtain GR GS where IHG:\n    \"set GR = G\" \"set (map set GS) = S\"\n    \"\\<And>\\<Gamma> HS. (disj_of_clause GR, image_mset disj_of_clause (mset (GS@HS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n \n      \\<Longrightarrow> image_mset disj_of_clause (mset (GS@HS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], ["proof (prove)\nusing this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = G \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. (\\<And>GR GS.\n        \\<lbrakk>set GR = G; set (map set GS) = S;\n         \\<And>\\<Gamma> HS.\n            disj_of_clause\n             GR, image_mset disj_of_clause (mset (GS @ HS)) +\n                 \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n            image_mset disj_of_clause (mset (GS @ HS)) +\n            \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (metis add.assoc)"], ["proof (state)\nthis:\n  set GR = G\n  set (map set GS) = S\n  disj_of_clause\n   GR, image_mset disj_of_clause (mset (GS @ ?HS)) +\n       ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset disj_of_clause (mset (GS @ ?HS)) +\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "have IH: \"image_mset disj_of_clause (mset (FS @ GS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n\"\n    if \"disj_of_clause FR, disj_of_clause GR, image_mset disj_of_clause (mset (FS @ GS)) + \\<Gamma> \\<Rightarrow>\\<^sub>n\"\n    for \\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset disj_of_clause (mset (FS @ GS)) +\n    \\<Gamma> \\<Rightarrow>\\<^sub>n", "using IHF(3)[of GS \\<Gamma>] IHG(3)[of FS \"disj_of_clause FR, \\<Gamma>\"] that"], ["proof (prove)\nusing this:\n  disj_of_clause\n   FR, image_mset disj_of_clause (mset (FS @ GS)) +\n       \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset disj_of_clause (mset (FS @ GS)) +\n  \\<Gamma> \\<Rightarrow>\\<^sub>n\n  disj_of_clause\n   GR, image_mset disj_of_clause (mset (GS @ FS)) +\n       (disj_of_clause FR, \\<Gamma>) \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset disj_of_clause (mset (GS @ FS)) +\n  (disj_of_clause FR, \\<Gamma>) \\<Rightarrow>\\<^sub>n\n  disj_of_clause\n   FR, disj_of_clause\n        GR, image_mset disj_of_clause (mset (FS @ GS)) +\n            \\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. image_mset disj_of_clause (mset (FS @ GS)) +\n    \\<Gamma> \\<Rightarrow>\\<^sub>n", "by(simp add: add_mset_commute add_ac)"], ["proof (state)\nthis:\n  disj_of_clause\n   FR, disj_of_clause\n        GR, image_mset disj_of_clause (mset (FS @ GS)) +\n            ?\\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n  image_mset disj_of_clause (mset (FS @ GS)) +\n  ?\\<Gamma> \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<And>S C D k.\n       \\<lbrakk>S \\<turnstile> C;\n        \\<lbrakk>finite C; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = C \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        S \\<turnstile> D;\n        \\<lbrakk>finite D; finite S; Ball S finite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>S' R'.\n                             \\<forall>\\<Gamma>.\n                                set R' = D \\<and>\n                                set (map set S') = S \\<and>\n                                (disj_of_clause\n                                  R', image_mset disj_of_clause (mset S') +\n\\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                 image_mset disj_of_clause (mset S') +\n                                 \\<Gamma> \\<Rightarrow>\\<^sub>n);\n        k\\<^sup>+ \\<in> C; k\\<inverse> \\<in> D;\n        finite (C - {k\\<^sup>+} \\<union> (D - {k\\<inverse>})); finite S;\n        Ball S finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S' R'.\n                            \\<forall>\\<Gamma>.\n                               set R' =\n                               C - {k\\<^sup>+} \\<union>\n                               (D - {k\\<inverse>}) \\<and>\n                               set (map set S') = S \\<and>\n                               (disj_of_clause\n                                 R', image_mset disj_of_clause (mset S') +\n                                     \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n                                image_mset disj_of_clause (mset S') +\n                                \\<Gamma> \\<Rightarrow>\\<^sub>n)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          set R' = F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>}) \\<and>\n          set (map set S') = S \\<and>\n          (disj_of_clause\n            R', image_mset disj_of_clause (mset S') +\n                \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           image_mset disj_of_clause (mset S') +\n           \\<Gamma> \\<Rightarrow>\\<^sub>n)", "apply(intro exI[where x=\"FS @ GS\"] exI[where x=\"removeAll (k\\<^sup>+) FR @ removeAll (k\\<inverse>) GR\"] allI impI conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma>.\n       set (removeAll (k\\<^sup>+) FR @ removeAll (k\\<inverse>) GR) =\n       F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>})\n 2. \\<And>\\<Gamma>. set (map set (FS @ GS)) = S\n 3. \\<And>\\<Gamma>.\n       disj_of_clause\n        (removeAll (k\\<^sup>+) FR @\n         removeAll (k\\<inverse>)\n          GR), image_mset disj_of_clause (mset (FS @ GS)) +\n               \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n       image_mset disj_of_clause (mset (FS @ GS)) +\n       \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(simp add: IHF IHG;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma>. set (map set (FS @ GS)) = S\n 2. \\<And>\\<Gamma>.\n       disj_of_clause\n        (removeAll (k\\<^sup>+) FR @\n         removeAll (k\\<inverse>)\n          GR), image_mset disj_of_clause (mset (FS @ GS)) +\n               \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n       image_mset disj_of_clause (mset (FS @ GS)) +\n       \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(insert IHF IHG; simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma>.\n       disj_of_clause\n        (removeAll (k\\<^sup>+) FR @\n         removeAll (k\\<inverse>)\n          GR), image_mset disj_of_clause (mset (FS @ GS)) +\n               \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n       image_mset disj_of_clause (mset (FS @ GS)) +\n       \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(intro IH)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma>.\n       disj_of_clause\n        (removeAll (k\\<^sup>+) FR @\n         removeAll (k\\<inverse>)\n          GR), image_mset disj_of_clause (mset (FS @ GS)) +\n               \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n       disj_of_clause\n        FR, disj_of_clause\n             GR, image_mset disj_of_clause (mset (FS @ GS)) +\n                 \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(auto dest!: LSC_Sim_resolution_la simp add: IHF IHG R.hyps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = F - {k\\<^sup>+} \\<union> (G - {k\\<inverse>}) \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Resolution_LSC_pre_nodisj: (* I've tried showing this directly instead of Resolution_LSC_pre, but that is surprisingly painful. *)\n  assumes \"S \\<turnstile> R\"\n  assumes \"finite R\"\n  assumes \"finite S\" \"Ball S finite\"\n  shows \"\\<exists>S' R'. \\<forall>\\<Gamma>. is_nnf_mset \\<Gamma> \\<longrightarrow> is_disj R' \\<and> is_nnf S' \\<and> cnf R' = {R} \\<and> cnf S' \\<subseteq> S \\<and> \n    (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow> S', \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "have mehorder: \"F, \\<^bold>\\<And>G, \\<Gamma> = \\<^bold>\\<And>G, F, \\<Gamma>\" for F G \\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. F, \\<^bold>\\<And>G, \\<Gamma> = \\<^bold>\\<And>G, F, \\<Gamma>", "by(simp add: add_ac)"], ["proof (state)\nthis:\n  ?F1, \\<^bold>\\<And>?G1, ?\\<Gamma>1 = \\<^bold>\\<And>?G1, ?F1, ?\\<Gamma>1\n\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "from Resolution_LSC_pre[where 'a='a,OF assms]"], ["proof (chain)\npicking this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = R \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)", "obtain S' R' where o: \"\\<And>\\<Gamma>. is_nnf_mset \\<Gamma> \\<Longrightarrow> set R' = R \\<and> set (map set S') = S \\<and> \n  (disj_of_clause R', image_mset disj_of_clause (mset S') + \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow> image_mset disj_of_clause (mset S') + \\<Gamma> \\<Rightarrow>\\<^sub>n)\""], ["proof (prove)\nusing this:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        set R' = R \\<and>\n        set (map set S') = S \\<and>\n        (disj_of_clause\n          R', image_mset disj_of_clause (mset S') +\n              \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         image_mset disj_of_clause (mset S') +\n         \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. (\\<And>R' S'.\n        (\\<And>\\<Gamma>.\n            is_nnf_mset \\<Gamma> \\<Longrightarrow>\n            set R' = R \\<and>\n            set (map set S') = S \\<and>\n            (disj_of_clause\n              R', image_mset disj_of_clause (mset S') +\n                  \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n             image_mset disj_of_clause (mset S') +\n             \\<Gamma> \\<Rightarrow>\\<^sub>n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_nnf_mset ?\\<Gamma>1 \\<Longrightarrow>\n  set R' = R \\<and>\n  set (map set S') = S \\<and>\n  (disj_of_clause\n    R', image_mset disj_of_clause (mset S') +\n        ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n   image_mset disj_of_clause (mset S') + ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "hence p: \"is_nnf_mset \\<Gamma> \\<Longrightarrow> (disj_of_clause R', image_mset disj_of_clause (mset S') + \\<Gamma> \\<Rightarrow>\\<^sub>n \\<Longrightarrow> image_mset disj_of_clause (mset S') + \\<Gamma> \\<Rightarrow>\\<^sub>n)\" \n    for \\<Gamma>"], ["proof (prove)\nusing this:\n  is_nnf_mset ?\\<Gamma>1 \\<Longrightarrow>\n  set R' = R \\<and>\n  set (map set S') = S \\<and>\n  (disj_of_clause\n    R', image_mset disj_of_clause (mset S') +\n        ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n   image_mset disj_of_clause (mset S') + ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     disj_of_clause\n      R', image_mset disj_of_clause (mset S') +\n          \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> image_mset disj_of_clause (mset S') +\n                      \\<Gamma> \\<Rightarrow>\\<^sub>n", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>is_nnf_mset ?\\<Gamma>1;\n   disj_of_clause\n    R', image_mset disj_of_clause (mset S') +\n        ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n\\<rbrakk>\n  \\<Longrightarrow> image_mset disj_of_clause (mset S') +\n                    ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S' R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf S' \\<subseteq> S \\<and>\n          (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "apply(rule exI[where x=\"\\<^bold>\\<And>map disj_of_clause S'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R'.\n       \\<forall>\\<Gamma>.\n          is_nnf_mset \\<Gamma> \\<longrightarrow>\n          is_disj R' \\<and>\n          is_nnf \\<^bold>\\<And>map disj_of_clause S' \\<and>\n          cnf R' = {R} \\<and>\n          cnf \\<^bold>\\<And>map disj_of_clause S' \\<subseteq> S \\<and>\n          (R', \\<^bold>\\<And>map disj_of_clause\n                              S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n           \\<^bold>\\<And>map disj_of_clause\n                          S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "apply(rule exI[where x=\"disj_of_clause R'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Gamma>.\n       is_nnf_mset \\<Gamma> \\<longrightarrow>\n       is_disj (disj_of_clause R') \\<and>\n       is_nnf \\<^bold>\\<And>map disj_of_clause S' \\<and>\n       cnf (disj_of_clause R') = {R} \\<and>\n       cnf \\<^bold>\\<And>map disj_of_clause S' \\<subseteq> S \\<and>\n       (disj_of_clause\n         R', \\<^bold>\\<And>map disj_of_clause\n                            S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n        \\<^bold>\\<And>map disj_of_clause S', \\<Gamma> \\<Rightarrow>\\<^sub>n)", "apply safe"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma>.\n       is_nnf_mset \\<Gamma> \\<Longrightarrow> is_disj (disj_of_clause R')\n 2. \\<And>\\<Gamma>.\n       is_nnf_mset \\<Gamma> \\<Longrightarrow>\n       is_nnf \\<^bold>\\<And>map disj_of_clause S'\n 3. \\<And>\\<Gamma> x xa.\n       \\<lbrakk>is_nnf_mset \\<Gamma>; x \\<in> cnf (disj_of_clause R');\n        x \\<notin> {}; xa \\<in> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> R\n 4. \\<And>\\<Gamma> x xa.\n       \\<lbrakk>is_nnf_mset \\<Gamma>; x \\<in> cnf (disj_of_clause R');\n        x \\<notin> {}; xa \\<in> R\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> x\n 5. \\<And>\\<Gamma> x.\n       is_nnf_mset \\<Gamma> \\<Longrightarrow>\n       R \\<in> cnf (disj_of_clause R')\n 6. \\<And>\\<Gamma> x.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        x \\<in> cnf \\<^bold>\\<And>map disj_of_clause S'\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S\n 7. \\<And>\\<Gamma>.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        disj_of_clause\n         R', \\<^bold>\\<And>map disj_of_clause\n                            S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n  S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(intro disj_of_clause_is;fail)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma>.\n       is_nnf_mset \\<Gamma> \\<Longrightarrow>\n       is_nnf \\<^bold>\\<And>map disj_of_clause S'\n 2. \\<And>\\<Gamma> x xa.\n       \\<lbrakk>is_nnf_mset \\<Gamma>; x \\<in> cnf (disj_of_clause R');\n        x \\<notin> {}; xa \\<in> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> R\n 3. \\<And>\\<Gamma> x xa.\n       \\<lbrakk>is_nnf_mset \\<Gamma>; x \\<in> cnf (disj_of_clause R');\n        x \\<notin> {}; xa \\<in> R\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> x\n 4. \\<And>\\<Gamma> x.\n       is_nnf_mset \\<Gamma> \\<Longrightarrow>\n       R \\<in> cnf (disj_of_clause R')\n 5. \\<And>\\<Gamma> x.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        x \\<in> cnf \\<^bold>\\<And>map disj_of_clause S'\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S\n 6. \\<And>\\<Gamma>.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        disj_of_clause\n         R', \\<^bold>\\<And>map disj_of_clause\n                            S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n  S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(simp add: cnf_disj o; fail)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> x.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        x \\<in> cnf \\<^bold>\\<And>map disj_of_clause S'\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S\n 2. \\<And>\\<Gamma>.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        disj_of_clause\n         R', \\<^bold>\\<And>map disj_of_clause\n                            S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n  S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>_;\n     x_ \\<in> cnf \\<^bold>\\<And>map disj_of_clause S'\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> S", "using o"], ["proof (prove)\nusing this:\n  is_nnf_mset ?\\<Gamma>1 \\<Longrightarrow>\n  set R' = R \\<and>\n  set (map set S') = S \\<and>\n  (disj_of_clause\n    R', image_mset disj_of_clause (mset S') +\n        ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n   image_mset disj_of_clause (mset S') + ?\\<Gamma>1 \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>_;\n     x_ \\<in> cnf \\<^bold>\\<And>map disj_of_clause S'\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> S", "by(fastforce simp add: cnf_BigAnd cnf_disj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma>.\n       \\<lbrakk>is_nnf_mset \\<Gamma>;\n        disj_of_clause\n         R', \\<^bold>\\<And>map disj_of_clause\n                            S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n  S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "subgoal for \\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     disj_of_clause\n      R', \\<^bold>\\<And>map disj_of_clause\n                         S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n                                     S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(frule p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     disj_of_clause\n      R', \\<^bold>\\<And>map disj_of_clause\n                         S', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> disj_of_clause\n                       R', image_mset disj_of_clause (mset S') +\n                           \\<Gamma> \\<Rightarrow>\\<^sub>n\n 2. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     disj_of_clause\n      R', \\<^bold>\\<And>map disj_of_clause\n                         S', \\<Gamma> \\<Rightarrow>\\<^sub>n;\n     image_mset disj_of_clause (mset S') +\n     \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n                                     S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(unfold mehorder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     \\<^bold>\\<And>map disj_of_clause\n                    S', disj_of_clause\n                         R', \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> disj_of_clause\n                       R', image_mset disj_of_clause (mset S') +\n                           \\<Gamma> \\<Rightarrow>\\<^sub>n\n 2. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     \\<^bold>\\<And>map disj_of_clause\n                    S', disj_of_clause R', \\<Gamma> \\<Rightarrow>\\<^sub>n;\n     image_mset disj_of_clause (mset S') +\n     \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n                                     S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(drule LSC_BigAndL_inv)"], ["proof (prove)\ngoal (4 subgoals):\n 1. is_nnf_mset \\<Gamma> \\<Longrightarrow>\n    \\<forall>f\\<in>set (map disj_of_clause S'). is_nnf f\n 2. is_nnf_mset \\<Gamma> \\<Longrightarrow>\n    is_nnf_mset (disj_of_clause R', \\<Gamma>)\n 3. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     mset (map disj_of_clause S') +\n     (disj_of_clause R', \\<Gamma>) \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> disj_of_clause\n                       R', image_mset disj_of_clause (mset S') +\n                           \\<Gamma> \\<Rightarrow>\\<^sub>n\n 4. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     \\<^bold>\\<And>map disj_of_clause\n                    S', disj_of_clause R', \\<Gamma> \\<Rightarrow>\\<^sub>n;\n     image_mset disj_of_clause (mset S') +\n     \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n                                     S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(simp;fail)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf_mset \\<Gamma>;\n     \\<^bold>\\<And>map disj_of_clause\n                    S', disj_of_clause R', \\<Gamma> \\<Rightarrow>\\<^sub>n;\n     image_mset disj_of_clause (mset S') +\n     \\<Gamma> \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> \\<^bold>\\<And>map disj_of_clause\n                                     S', \\<Gamma> \\<Rightarrow>\\<^sub>n", "by (simp add: LSC_BigAndL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>S' R'.\n     \\<forall>\\<Gamma>.\n        is_nnf_mset \\<Gamma> \\<longrightarrow>\n        is_disj R' \\<and>\n        is_nnf S' \\<and>\n        cnf R' = {R} \\<and>\n        cnf S' \\<subseteq> S \\<and>\n        (R', S', \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         S', \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Resolution_LSC1:\n  assumes \"S \\<turnstile> \\<box>\"\n  shows \"\\<exists>F. is_nnf F \\<and> cnf F \\<subseteq> S \\<and> {#F#} \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "have *: \"{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>} \\<Longrightarrow> F = {\\<box>}\" for F G"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} =\n    {\\<box>} \\<Longrightarrow>\n    F = {\\<box>}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>};\n     F \\<noteq> {\\<box>}\\<rbrakk>\n    \\<Longrightarrow> False", "assume m: \"{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\""], ["proof (state)\nthis:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>};\n     F \\<noteq> {\\<box>}\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"F \\<noteq> {\\<box>}\""], ["proof (state)\nthis:\n  F \\<noteq> {\\<box>}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>};\n     F \\<noteq> {\\<box>}\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"F = {} \\<or> (\\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>)\""], ["proof (prove)\nusing this:\n  F \\<noteq> {\\<box>}\n\ngoal (1 subgoal):\n 1. F = {} \\<or> (\\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>)", "by blast"], ["proof (state)\nthis:\n  F = {} \\<or> (\\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>};\n     F \\<noteq> {\\<box>}\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  F = {} \\<or> (\\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {} \\<Longrightarrow> False\n 2. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "assume \"F = {}\""], ["proof (state)\nthis:\n  F = {}\n\ngoal (2 subgoals):\n 1. F = {} \\<Longrightarrow> False\n 2. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "with m"], ["proof (chain)\npicking this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  F = {}", "show False"], ["proof (prove)\nusing this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  F = {}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "assume \"\\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>\""], ["proof (state)\nthis:\n  \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>", "guess E"], ["proof (prove)\nusing this:\n  \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "note E = this"], ["proof (state)\nthis:\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>E. E \\<in> F \\<and> E \\<noteq> \\<box> \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume \"G = {}\""], ["proof (state)\nthis:\n  G = {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "with m"], ["proof (chain)\npicking this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  G = {}", "show False"], ["proof (prove)\nusing this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  G = {}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. G \\<noteq> {} \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<noteq> {} \\<Longrightarrow> False", "assume \"G \\<noteq> {}\""], ["proof (state)\nthis:\n  G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. G \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G \\<noteq> {}", "obtain D where \"D \\<in> G\""], ["proof (prove)\nusing this:\n  G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>D. D \\<in> G \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  D \\<in> G\n\ngoal (1 subgoal):\n 1. G \\<noteq> {} \\<Longrightarrow> False", "with E"], ["proof (chain)\npicking this:\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n  D \\<in> G", "have \"E \\<union> D \\<in> {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}\""], ["proof (prove)\nusing this:\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n  D \\<in> G\n\ngoal (1 subgoal):\n 1. E \\<union> D \\<in> {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}", "by blast"], ["proof (state)\nthis:\n  E \\<union> D \\<in> {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}\n\ngoal (1 subgoal):\n 1. G \\<noteq> {} \\<Longrightarrow> False", "with m E"], ["proof (chain)\npicking this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n  E \\<union> D \\<in> {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}", "show False"], ["proof (prove)\nusing this:\n  {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\n  E \\<in> F \\<and> E \\<noteq> \\<box>\n  E \\<union> D \\<in> {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f \\<union> g |f g. f \\<in> ?F1 \\<and> g \\<in> ?G1} =\n  {\\<box>} \\<Longrightarrow>\n  ?F1 = {\\<box>}\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "have *: \"F = {\\<box>} \\<and> G = {\\<box>}\" if \"{f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G} = {\\<box>}\" for F G"], ["proof (prove)\ngoal (1 subgoal):\n 1. F = {\\<box>} \\<and> G = {\\<box>}", "proof (intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {\\<box>}\n 2. G = {\\<box>}", "show \"G = {\\<box>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = {\\<box>}", "apply(rule *[of G F])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> g |f g. f \\<in> G \\<and> g \\<in> F} = {\\<box>}", "apply(subst that[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> g |f g. f \\<in> G \\<and> g \\<in> F} =\n    {f \\<union> g |f g. f \\<in> F \\<and> g \\<in> G}", "by blast"], ["proof (state)\nthis:\n  G = {\\<box>}\n\ngoal (1 subgoal):\n 1. F = {\\<box>}", "qed (rule *[OF that])"], ["proof (state)\nthis:\n  {f \\<union> g |f g. f \\<in> ?F2 \\<and> g \\<in> ?G2} =\n  {\\<box>} \\<Longrightarrow>\n  ?F2 = {\\<box>} \\<and> ?G2 = {\\<box>}\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "have *: \"is_nnf F \\<Longrightarrow> is_nnf_mset \\<Gamma> \\<Longrightarrow> cnf F = {\\<box>} \\<Longrightarrow> F,\\<Gamma> \\<Rightarrow>\\<^sub>n\" for F \\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf F; is_nnf_mset \\<Gamma>; cnf F = {\\<box>}\\<rbrakk>\n    \\<Longrightarrow> F, \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(induction F rule: cnf.induct; simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. is_nnf_mset \\<Gamma> \\<Longrightarrow>\n    \\<bottom>, \\<Gamma> \\<Rightarrow>\\<^sub>n\n 2. \\<And>F G.\n       \\<lbrakk>cnf F = {\\<box>} \\<Longrightarrow>\n                F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        cnf G = {\\<box>} \\<Longrightarrow>\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        is_nnf F \\<and> is_nnf G; is_nnf_mset \\<Gamma>;\n        cnf F \\<union> cnf G = {\\<box>}\\<rbrakk>\n       \\<Longrightarrow> F \\<^bold>\\<and> G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n 3. \\<And>F G.\n       \\<lbrakk>cnf F = {\\<box>} \\<Longrightarrow>\n                F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        cnf G = {\\<box>} \\<Longrightarrow>\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        is_nnf F \\<and> is_nnf G; is_nnf_mset \\<Gamma>;\n        {C \\<union> D |C D. C \\<in> cnf F \\<and> D \\<in> cnf G} =\n        {\\<box>}\\<rbrakk>\n       \\<Longrightarrow> F \\<^bold>\\<or> G, \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F G.\n       \\<lbrakk>cnf F = {\\<box>} \\<Longrightarrow>\n                F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        cnf G = {\\<box>} \\<Longrightarrow>\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        is_nnf F \\<and> is_nnf G; is_nnf_mset \\<Gamma>;\n        cnf F \\<union> cnf G = {\\<box>}\\<rbrakk>\n       \\<Longrightarrow> F \\<^bold>\\<and> G, \\<Gamma> \\<Rightarrow>\\<^sub>n\n 2. \\<And>F G.\n       \\<lbrakk>cnf F = {\\<box>} \\<Longrightarrow>\n                F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        cnf G = {\\<box>} \\<Longrightarrow>\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        is_nnf F \\<and> is_nnf G; is_nnf_mset \\<Gamma>;\n        {C \\<union> D |C D. C \\<in> cnf F \\<and> D \\<in> cnf G} =\n        {\\<box>}\\<rbrakk>\n       \\<Longrightarrow> F \\<^bold>\\<or> G, \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply (metis LSC.LSC.AndL LSC_weaken add_mset_commute singleton_Un_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F G.\n       \\<lbrakk>cnf F = {\\<box>} \\<Longrightarrow>\n                F, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        cnf G = {\\<box>} \\<Longrightarrow>\n        G, \\<Gamma> \\<Rightarrow>\\<^sub>n;\n        is_nnf F \\<and> is_nnf G; is_nnf_mset \\<Gamma>;\n        {C \\<union> D |C D. C \\<in> cnf F \\<and> D \\<in> cnf G} =\n        {\\<box>}\\<rbrakk>\n       \\<Longrightarrow> F \\<^bold>\\<or> G, \\<Gamma> \\<Rightarrow>\\<^sub>n", "apply(drule *; simp add: LSC.LSC.OrL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>is_nnf ?F3; is_nnf_mset ?\\<Gamma>3; cnf ?F3 = {\\<box>}\\<rbrakk>\n  \\<Longrightarrow> ?F3, ?\\<Gamma>3 \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "from Resolution_useless_infinite[OF assms]"], ["proof (chain)\npicking this:\n  finite \\<box> \\<Longrightarrow>\n  \\<exists>S'\\<subseteq>S.\n     Ball S' finite \\<and> finite S' \\<and> (S' \\<turnstile> \\<box>)", "obtain S' where su: \"S'\\<subseteq>S\" and fin: \"finite S'\" \"Ball S' finite\" and pr: \"(S' \\<turnstile> \\<box>)\""], ["proof (prove)\nusing this:\n  finite \\<box> \\<Longrightarrow>\n  \\<exists>S'\\<subseteq>S.\n     Ball S' finite \\<and> finite S' \\<and> (S' \\<turnstile> \\<box>)\n\ngoal (1 subgoal):\n 1. (\\<And>S'.\n        \\<lbrakk>S' \\<subseteq> S; finite S'; Ball S' finite;\n         S' \\<turnstile> \\<box>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S' \\<subseteq> S\n  finite S'\n  Ball S' finite\n  S' \\<turnstile> \\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "from Resolution_LSC_pre_nodisj[OF pr finite.emptyI fin]"], ["proof (chain)\npicking this:\n  \\<exists>S'a R'.\n     \\<forall>\\<Gamma>.\n        is_nnf_mset \\<Gamma> \\<longrightarrow>\n        is_disj R' \\<and>\n        is_nnf S'a \\<and>\n        cnf R' = {\\<box>} \\<and>\n        cnf S'a \\<subseteq> S' \\<and>\n        (R', S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n)", "obtain S'' where \"is_nnf S''\" \"cnf S'' \\<subseteq> S'\" \"{# S'' #} \\<Rightarrow>\\<^sub>n\""], ["proof (prove)\nusing this:\n  \\<exists>S'a R'.\n     \\<forall>\\<Gamma>.\n        is_nnf_mset \\<Gamma> \\<longrightarrow>\n        is_disj R' \\<and>\n        is_nnf S'a \\<and>\n        cnf R' = {\\<box>} \\<and>\n        cnf S'a \\<subseteq> S' \\<and>\n        (R', S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n)\n\ngoal (1 subgoal):\n 1. (\\<And>S''.\n        \\<lbrakk>is_nnf S''; cnf S'' \\<subseteq> S';\n         S'', {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *[OF disj_is_nnf, of _ Mempty]"], ["proof (prove)\nusing this:\n  \\<exists>S'a R'.\n     \\<forall>\\<Gamma>.\n        is_nnf_mset \\<Gamma> \\<longrightarrow>\n        is_disj R' \\<and>\n        is_nnf S'a \\<and>\n        cnf R' = {\\<box>} \\<and>\n        cnf S'a \\<subseteq> S' \\<and>\n        (R', S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n \\<longrightarrow>\n         S'a, \\<Gamma> \\<Rightarrow>\\<^sub>n)\n  \\<lbrakk>is_disj ?F3; is_nnf_mset {#}; cnf ?F3 = {\\<box>}\\<rbrakk>\n  \\<Longrightarrow> ?F3, {#} \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. (\\<And>S''.\n        \\<lbrakk>is_nnf S''; cnf S'' \\<subseteq> S';\n         S'', {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis LSC_weaken add_mset_commute empty_iff set_mset_empty)"], ["proof (state)\nthis:\n  is_nnf S''\n  cnf S'' \\<subseteq> S'\n  S'', {#} \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "with su"], ["proof (chain)\npicking this:\n  S' \\<subseteq> S\n  is_nnf S''\n  cnf S'' \\<subseteq> S'\n  S'', {#} \\<Rightarrow>\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  S' \\<subseteq> S\n  is_nnf S''\n  cnf S'' \\<subseteq> S'\n  S'', {#} \\<Rightarrow>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n", "by blast"], ["proof (state)\nthis:\n  \\<exists>F.\n     is_nnf F \\<and> cnf F \\<subseteq> S \\<and> F, {#} \\<Rightarrow>\\<^sub>n\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Resolution_SC1:\n  assumes \"S \\<turnstile> \\<box>\"\n  shows \"\\<exists>F. cnf (nnf F) \\<subseteq> S \\<and> {#F#} \\<Rightarrow> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F. cnf (nnf F) \\<subseteq> S \\<and> F, {#} \\<Rightarrow> {#}", "apply(insert Resolution_LSC1[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and>\n       F, {#} \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n    \\<exists>F. cnf (nnf F) \\<subseteq> S \\<and> F, {#} \\<Rightarrow> {#}", "apply(elim ex_forward)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       is_nnf F \\<and>\n       cnf F \\<subseteq> S \\<and>\n       F, {#} \\<Rightarrow>\\<^sub>n \\<Longrightarrow>\n       cnf (nnf F) \\<subseteq> S \\<and> F, {#} \\<Rightarrow> {#}", "apply(elim conjE; intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>is_nnf F; cnf F \\<subseteq> S;\n        F, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> cnf (nnf F) \\<subseteq> S\n 2. \\<And>F.\n       \\<lbrakk>is_nnf F; cnf F \\<subseteq> S;\n        F, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> F, {#} \\<Rightarrow> {#}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf F_; cnf F_ \\<subseteq> S;\n     F_, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> cnf (nnf F_) \\<subseteq> S", "by(subst is_nnf_nnf_id; assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>is_nnf F; cnf F \\<subseteq> S;\n        F, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> F, {#} \\<Rightarrow> {#}", "apply(unfold SC_LSC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>is_nnf F; cnf F \\<subseteq> S;\n        F, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n       \\<Longrightarrow> F, {#} \\<Rightarrow>\\<^sub>n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_nnf F_; cnf F_ \\<subseteq> S;\n     F_, {#} \\<Rightarrow>\\<^sub>n\\<rbrakk>\n    \\<Longrightarrow> F_, {#} \\<Rightarrow>\\<^sub>n", "by (simp;fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* really, these proofs have to do with sets, multisets and lists.\nIf I'd introduce finite sets somehow, the chaos would be perfect.\nI want out.\n*)"], ["", "end"]]}