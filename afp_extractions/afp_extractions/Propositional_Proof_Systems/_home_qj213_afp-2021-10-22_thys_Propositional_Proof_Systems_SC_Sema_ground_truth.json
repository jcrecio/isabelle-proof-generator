{"file_name": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems/SC_Sema.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Propositional_Proof_Systems", "problem_names": ["lemma sequent_intuitonistic_semantics: \"\\<Turnstile> \\<Gamma> \\<Rightarrow> {#\\<delta>#} \\<longleftrightarrow> set_mset \\<Gamma> \\<TTurnstile> \\<delta>\"", "lemma SC_soundness: \"\\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\"", "lemma \"sc [] [] [((Atom 0 \\<^bold>\\<rightarrow> Atom 1) \\<^bold>\\<rightarrow> Atom 0) \\<^bold>\\<rightarrow> Atom 1] [] = {([0], [1 :: nat])}\"", "lemma sc_sim:\n  fixes \\<Gamma> \\<Delta> :: \"'a formula list\" and G D :: \"'a list\"\n  assumes \"sc \\<Gamma> A \\<Delta> B = {}\"\n  shows \"image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow> image_mset Atom (mset B) + mset \\<Delta>\"", "lemma scc_ce_distinct:\n  \"(C,E) \\<in> sc \\<Gamma> G \\<Delta> D \\<Longrightarrow> set C \\<inter> set E = {}\"", "theorem SC_counterexample:\n  \"(C,D) \\<in> sc \\<Gamma> A \\<Delta> B \\<Longrightarrow>\n  (\\<lambda>a. a \\<in> set C) \\<not>\\<Turnstile> image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow> image_mset Atom (mset B) + mset \\<Delta>\"", "theorem SC_sound_complete: \"\\<Gamma> \\<Rightarrow> \\<Delta> \\<longleftrightarrow> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\"", "theorem \"\\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow> \\<Gamma> \\<Rightarrow> \\<Delta>\""], "translations": [["", "lemma sequent_intuitonistic_semantics: \"\\<Turnstile> \\<Gamma> \\<Rightarrow> {#\\<delta>#} \\<longleftrightarrow> set_mset \\<Gamma> \\<TTurnstile> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<delta>, {#} =\n    set_mset \\<Gamma> \\<TTurnstile> \\<delta>", "unfolding sequent_semantics_def entailment_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A.\n        (\\<forall>\\<gamma>\\<in>#\\<Gamma>.\n            A \\<Turnstile> \\<gamma>) \\<longrightarrow>\n        (\\<exists>\\<delta>\\<in>#\\<delta>, {#}. A \\<Turnstile> \\<delta>)) =\n    (\\<forall>\\<A>.\n        (\\<forall>G\\<in>#\\<Gamma>. \\<A> \\<Turnstile> G) \\<longrightarrow>\n        \\<A> \\<Turnstile> \\<delta>)", "by simp"], ["", "lemma SC_soundness: \"\\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "by(induction rule: SCp.induct) (auto simp add: sequent_semantics_def)"], ["", "definition \"sequent_cost \\<Gamma> \\<Delta> = Suc (sum_list (sorted_list_of_multiset (image_mset size (\\<Gamma> + \\<Delta>))))\""], ["", "function(sequential)\n  sc :: \"'a formula list \\<Rightarrow> 'a list \\<Rightarrow> 'a formula list \\<Rightarrow> 'a list \\<Rightarrow> ('a list \\<times> 'a list) set\" where\n\"sc (\\<bottom> # \\<Gamma>) A \\<Delta> B = {}\" |\n\"sc [] A [] B = (if set A \\<inter> set B = {} then {(remdups A,remdups B)} else {})\" |\n\"sc (Atom k # \\<Gamma>) A  \\<Delta> B = sc \\<Gamma> (k#A) \\<Delta> B\" |\n\"sc (Not F # \\<Gamma>) A \\<Delta> B = sc \\<Gamma> A (F#\\<Delta>) B\" |\n\"sc (And F G # \\<Gamma>) A \\<Delta> B = sc (F#G#\\<Gamma>) A \\<Delta> B\" |\n\"sc (Or F G # \\<Gamma>) A \\<Delta> B = sc (F#\\<Gamma>) A \\<Delta> B \\<union> sc (G#\\<Gamma>) A \\<Delta> B\" |\n\"sc (Imp F G # \\<Gamma>) A \\<Delta> B = sc \\<Gamma> A (F#\\<Delta>) B \\<union> sc (G#\\<Gamma>) A \\<Delta> B\" |\n\"sc \\<Gamma> A (\\<bottom>#\\<Delta>) B = sc \\<Gamma> A \\<Delta> B\" |\n\"sc \\<Gamma> A (Atom k # \\<Delta>) B = sc \\<Gamma> A \\<Delta> (k#B)\" |\n\"sc \\<Gamma> A (Not F # \\<Delta>) B = sc (F#\\<Gamma>) A \\<Delta> B\" |\n\"sc \\<Gamma> A (And F G # \\<Delta>) B = sc \\<Gamma> A (F#\\<Delta>) B \\<union> sc \\<Gamma> A (G#\\<Delta>) B\" |\n\"sc \\<Gamma> A (Or F G # \\<Delta>) B = sc \\<Gamma> A (F#G#\\<Delta>) B\" |\n\"sc \\<Gamma> A (Imp F G # \\<Delta>) B = sc (F#\\<Gamma>) A (G#\\<Delta>) B\""], ["proof (prove)\ngoal (92 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>\\<Gamma> A \\<Delta> B.\n                   x =\n                   (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) \\<Longrightarrow>\n                   P;\n        \\<And>A B. x = ([], A, [], B) \\<Longrightarrow> P;\n        \\<And>k \\<Gamma> A \\<Delta> B.\n           x = (Atom k # \\<Gamma>, A, \\<Delta>, B) \\<Longrightarrow> P;\n        \\<And>F \\<Gamma> A \\<Delta> B.\n           x =\n           (\\<^bold>\\<not> F # \\<Gamma>, A, \\<Delta>, B) \\<Longrightarrow>\n           P;\n        \\<And>F G \\<Gamma> A \\<Delta> B.\n           x =\n           (F \\<^bold>\\<and> G # \\<Gamma>, A, \\<Delta>, B) \\<Longrightarrow>\n           P;\n        \\<And>F G \\<Gamma> A \\<Delta> B.\n           x =\n           (F \\<^bold>\\<or> G # \\<Gamma>, A, \\<Delta>, B) \\<Longrightarrow>\n           P;\n        \\<And>F G \\<Gamma> A \\<Delta> B.\n           x =\n           (F \\<^bold>\\<rightarrow> G # \\<Gamma>, A, \\<Delta>,\n            B) \\<Longrightarrow>\n           P;\n        \\<And>A \\<Delta> B.\n           x = ([], A, \\<bottom> # \\<Delta>, B) \\<Longrightarrow> P;\n        \\<And>A k \\<Delta> B.\n           x = ([], A, Atom k # \\<Delta>, B) \\<Longrightarrow> P;\n        \\<And>A F \\<Delta> B.\n           x = ([], A, \\<^bold>\\<not> F # \\<Delta>, B) \\<Longrightarrow> P;\n        \\<And>A F G \\<Delta> B.\n           x = ([], A, F \\<^bold>\\<and> G # \\<Delta>, B) \\<Longrightarrow>\n           P;\n        \\<And>A F G \\<Delta> B.\n           x = ([], A, F \\<^bold>\\<or> G # \\<Delta>, B) \\<Longrightarrow> P;\n        \\<And>A F G \\<Delta> B.\n           x =\n           ([], A, F \\<^bold>\\<rightarrow> G # \\<Delta>,\n            B) \\<Longrightarrow>\n           P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>\\<Gamma> A \\<Delta> B \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (\\<bottom> # \\<Gamma>', Aa, \\<Delta>', Ba) \\<Longrightarrow>\n       {} = {}\n 3. \\<And>\\<Gamma> A \\<Delta> B Aa Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       ([], Aa, [], Ba) \\<Longrightarrow>\n       {} =\n       (if set Aa \\<inter> set Ba = {} then {(remdups Aa, remdups Ba)}\n        else {})\n 4. \\<And>\\<Gamma> A \\<Delta> B k \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (Atom k # \\<Gamma>', Aa, \\<Delta>', Ba) \\<Longrightarrow>\n       {} = sc_sumC (\\<Gamma>', k # Aa, \\<Delta>', Ba)\n 5. \\<And>\\<Gamma> A \\<Delta> B F \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (\\<^bold>\\<not> F # \\<Gamma>', Aa, \\<Delta>', Ba) \\<Longrightarrow>\n       {} = sc_sumC (\\<Gamma>', Aa, F # \\<Delta>', Ba)\n 6. \\<And>\\<Gamma> A \\<Delta> B F G \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (F \\<^bold>\\<and> G # \\<Gamma>', Aa, \\<Delta>', Ba) \\<Longrightarrow>\n       {} = sc_sumC (F # G # \\<Gamma>', Aa, \\<Delta>', Ba)\n 7. \\<And>\\<Gamma> A \\<Delta> B F G \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (F \\<^bold>\\<or> G # \\<Gamma>', Aa, \\<Delta>', Ba) \\<Longrightarrow>\n       {} =\n       sc_sumC (F # \\<Gamma>', Aa, \\<Delta>', Ba) \\<union>\n       sc_sumC (G # \\<Gamma>', Aa, \\<Delta>', Ba)\n 8. \\<And>\\<Gamma> A \\<Delta> B F G \\<Gamma>' Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       (F \\<^bold>\\<rightarrow> G # \\<Gamma>', Aa, \\<Delta>',\n        Ba) \\<Longrightarrow>\n       {} =\n       sc_sumC (\\<Gamma>', Aa, F # \\<Delta>', Ba) \\<union>\n       sc_sumC (G # \\<Gamma>', Aa, \\<Delta>', Ba)\n 9. \\<And>\\<Gamma> A \\<Delta> B Aa \\<Delta>' Ba.\n       (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n       ([], Aa, \\<bottom> # \\<Delta>', Ba) \\<Longrightarrow>\n       {} = sc_sumC ([], Aa, \\<Delta>', Ba)\n 10. \\<And>\\<Gamma> A \\<Delta> B Aa k \\<Delta>' Ba.\n        (\\<bottom> # \\<Gamma>, A, \\<Delta>, B) =\n        ([], Aa, Atom k # \\<Delta>', Ba) \\<Longrightarrow>\n        {} = sc_sumC ([], Aa, \\<Delta>', k # Ba)\nA total of 92 subgoals...", "by pat_completeness auto"], ["", "(* Paremeters 2 and 4:\n   atoms are stored in lists, not sets, simply because lists are automatically finite;\n   finiteness is required when we relate back to sequents, which are finite. *)"], ["", "definition \"list_sequent_cost \\<Gamma> \\<Delta> = 2*sum_list (map size (\\<Gamma>@\\<Delta>)) + length (\\<Gamma>@\\<Delta>)\""], ["", "termination sc"], ["proof (prove)\ngoal (1 subgoal):\n 1. All sc_dom", "by (relation \"measure (\\<lambda>(\\<Gamma>,A,\\<Delta>,B). list_sequent_cost \\<Gamma> \\<Delta>)\") (simp_all add: list_sequent_cost_def)"], ["", "lemma \"sc [] [] [((Atom 0 \\<^bold>\\<rightarrow> Atom 1) \\<^bold>\\<rightarrow> Atom 0) \\<^bold>\\<rightarrow> Atom 1] [] = {([0], [1 :: nat])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sc [] []\n     [((Atom 0 \\<^bold>\\<rightarrow> Atom 1) \\<^bold>\\<rightarrow>\n       Atom 0) \\<^bold>\\<rightarrow>\n      Atom 1]\n     [] =\n    {([0], [1])}", "(* An atom may appear twice in one of the lists, but that is of no concern. \n     Using sets for the atoms stands in the way of automation. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sc [] []\n     [((Atom 0 \\<^bold>\\<rightarrow> Atom 1) \\<^bold>\\<rightarrow>\n       Atom 0) \\<^bold>\\<rightarrow>\n      Atom 1]\n     [] =\n    {([0], [1])}", "by code_simp"], ["", "lemma sc_sim:\n  fixes \\<Gamma> \\<Delta> :: \"'a formula list\" and G D :: \"'a list\"\n  assumes \"sc \\<Gamma> A \\<Delta> B = {}\"\n  shows \"image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow> image_mset Atom (mset B) + mset \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow>\n    image_mset Atom (mset B) + mset \\<Delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow>\n    image_mset Atom (mset B) + mset \\<Delta>", "have *[simp]: \"image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)\" (is ?k) if \"k \\<in> set A\" \"k \\<in> set B\" for A B :: \"'a list\" and k"], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)", "from that"], ["proof (chain)\npicking this:\n  k \\<in> set A\n  k \\<in> set B", "obtain a where \"a \\<in> set A\" \"a \\<in> set B\""], ["proof (prove)\nusing this:\n  k \\<in> set A\n  k \\<in> set B\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> set A; a \\<in> set B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> set A\n  a \\<in> set B\n\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)", "thus ?k"], ["proof (prove)\nusing this:\n  a \\<in> set A\n  a \\<in> set B\n\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)", "by(force simp: in_image_mset intro: SCp.Ax[where k=a])"], ["proof (state)\nthis:\n  image_mset Atom (mset A) \\<Rightarrow> image_mset Atom (mset B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?k \\<in> set ?A; ?k \\<in> set ?B\\<rbrakk>\n  \\<Longrightarrow> image_mset Atom (mset ?A) \\<Rightarrow>\n                    image_mset Atom (mset ?B)\n\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow>\n    image_mset Atom (mset B) + mset \\<Delta>", "from assms"], ["proof (chain)\npicking this:\n  sc \\<Gamma> A \\<Delta> B = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  sc \\<Gamma> A \\<Delta> B = {}\n\ngoal (1 subgoal):\n 1. image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow>\n    image_mset Atom (mset B) + mset \\<Delta>", "by(induction rule: sc.induct[where 'a='a]) (auto\n        simp add: list_sequent_cost_def add.assoc Bot_delR_simp\n        split: if_splits option.splits \n        intro: SCp.intros(3-))"], ["proof (state)\nthis:\n  image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow>\n  image_mset Atom (mset B) + mset \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_ce_distinct:\n  \"(C,E) \\<in> sc \\<Gamma> G \\<Delta> D \\<Longrightarrow> set C \\<inter> set E = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, E) \\<in> sc \\<Gamma> G \\<Delta> D \\<Longrightarrow>\n    set C \\<inter> set E = {}", "by(induction \\<Gamma> G \\<Delta> D arbitrary: C E rule: sc.induct)\n  (fastforce split: if_splits)+"], ["", "text\\<open>Completeness set aside, this is an interesting fact on the side: Sequent Calculus can provide counterexamples.\\<close>"], ["", "theorem SC_counterexample:\n  \"(C,D) \\<in> sc \\<Gamma> A \\<Delta> B \\<Longrightarrow>\n  (\\<lambda>a. a \\<in> set C) \\<not>\\<Turnstile> image_mset Atom (mset A) + mset \\<Gamma> \\<Rightarrow> image_mset Atom (mset B) + mset \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, D) \\<in> sc \\<Gamma> A \\<Delta> B \\<Longrightarrow>\n    (\\<lambda>a.\n        a \\<in> set C) \\<not>\\<Turnstile> image_mset Atom (mset A) +\n    mset \\<Gamma> \\<Rightarrow>\n    image_mset Atom (mset B) + mset \\<Delta>", "by(induction rule: sc.induct[where 'a='a]; \n   simp add: sequent_semantics_def split: if_splits; \n   (* used to be only for one, now it's four\\<dots> *) blast)"], ["", "corollary SC_counterexample':\n  assumes \"(C,D) \\<in> sc \\<Gamma> [] \\<Delta> []\"\n  shows \"(\\<lambda>k. k \\<in> set C) \\<not>\\<Turnstile> mset \\<Gamma> \\<Rightarrow> mset \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k.\n        k \\<in> set C) \\<not>\\<Turnstile> mset \\<Gamma> \\<Rightarrow>\n    mset \\<Delta>", "using SC_counterexample[OF assms]"], ["proof (prove)\nusing this:\n  (\\<lambda>a.\n      a \\<in> set C) \\<not>\\<Turnstile> image_mset Atom (mset []) +\n  mset \\<Gamma> \\<Rightarrow>\n  image_mset Atom (mset []) + mset \\<Delta>\n\ngoal (1 subgoal):\n 1. (\\<lambda>k.\n        k \\<in> set C) \\<not>\\<Turnstile> mset \\<Gamma> \\<Rightarrow>\n    mset \\<Delta>", "by simp"], ["", "theorem SC_sound_complete: \"\\<Gamma> \\<Rightarrow> \\<Delta> \\<longleftrightarrow> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta> =\n    \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n 2. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "assume \"\\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (state)\nthis:\n  \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (2 subgoals):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n 2. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "thus \"\\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "using SC_soundness"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<Rightarrow> \\<Delta>\n  ?\\<Gamma> \\<Rightarrow> ?\\<Delta> \\<Longrightarrow>\n  \\<Turnstile> ?\\<Gamma> \\<Rightarrow> ?\\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "by blast"], ["proof (state)\nthis:\n  \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "obtain \\<Gamma>' \\<Delta>' where [simp]: \"\\<Gamma> = mset  \\<Gamma>'\" \"\\<Delta> = mset \\<Delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>' \\<Delta>'.\n        \\<lbrakk>\\<Gamma> = mset \\<Gamma>';\n         \\<Delta> = mset \\<Delta>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset)"], ["proof (state)\nthis:\n  \\<Gamma> = mset \\<Gamma>'\n  \\<Delta> = mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "assume \"\\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (state)\nthis:\n  \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "hence \"sc \\<Gamma>' [] \\<Delta>' [] = {}\""], ["proof (prove)\nusing this:\n  \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] = {}", "proof(rule contrapos_pp)"], ["proof (state)\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "assume \"sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\""], ["proof (state)\nthis:\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}", "obtain C E where \"(C,E) \\<in> sc \\<Gamma>' [] \\<Delta>' []\""], ["proof (prove)\nusing this:\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>C E.\n        (C, E) \\<in> sc \\<Gamma>' [] \\<Delta>' [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  (C, E) \\<in> sc \\<Gamma>' [] \\<Delta>' []\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "thus \"\\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\nusing this:\n  (C, E) \\<in> sc \\<Gamma>' [] \\<Delta>' []\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "using SC_counterexample'"], ["proof (prove)\nusing this:\n  (C, E) \\<in> sc \\<Gamma>' [] \\<Delta>' []\n  (?C, ?D) \\<in> sc ?\\<Gamma> [] ?\\<Delta> [] \\<Longrightarrow>\n  (\\<lambda>k.\n      k \\<in> set ?C) \\<not>\\<Turnstile> mset ?\\<Gamma> \\<Rightarrow>\n   mset ?\\<Delta>\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>", "by fastforce"], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sc \\<Gamma>' [] \\<Delta>' [] = {}\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "from sc_sim[OF this]"], ["proof (chain)\npicking this:\n  image_mset Atom (mset []) + mset \\<Gamma>' \\<Rightarrow>\n  image_mset Atom (mset []) + mset \\<Delta>'", "show \"\\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\nusing this:\n  image_mset Atom (mset []) + mset \\<Gamma>' \\<Rightarrow>\n  image_mset Atom (mset []) + mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem \"\\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "assume s: \"\\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\""], ["proof (state)\nthis:\n  \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "obtain \\<Gamma>' \\<Delta>' where p: \"\\<Gamma> = mset \\<Gamma>'\" \"\\<Delta> = mset \\<Delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>' \\<Delta>'.\n        \\<lbrakk>\\<Gamma> = mset \\<Gamma>';\n         \\<Delta> = mset \\<Delta>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset)"], ["proof (state)\nthis:\n  \\<Gamma> = mset \\<Gamma>'\n  \\<Delta> = mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "have \"mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "proof cases \\<comment> \\<open>just to show that we didn't need to show the lemma above by contraposition. It's just quicker to do so.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n 2. \\<not> ?P \\<Longrightarrow> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "assume \"sc \\<Gamma>' [] \\<Delta>' [] = {}\""], ["proof (state)\nthis:\n  sc \\<Gamma>' [] \\<Delta>' [] = {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n 2. \\<not> ?P \\<Longrightarrow> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "from sc_sim[OF this]"], ["proof (chain)\npicking this:\n  image_mset Atom (mset []) + mset \\<Gamma>' \\<Rightarrow>\n  image_mset Atom (mset []) + mset \\<Delta>'", "show \"mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\""], ["proof (prove)\nusing this:\n  image_mset Atom (mset []) + mset \\<Gamma>' \\<Rightarrow>\n  image_mset Atom (mset []) + mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "assume \"sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\""], ["proof (state)\nthis:\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "with SC_counterexample"], ["proof (chain)\npicking this:\n  (?C, ?D) \\<in> sc ?\\<Gamma> ?A ?\\<Delta> ?B \\<Longrightarrow>\n  (\\<lambda>a.\n      a \\<in> set ?C) \\<not>\\<Turnstile> image_mset Atom (mset ?A) +\n   mset ?\\<Gamma> \\<Rightarrow>\n   image_mset Atom (mset ?B) + mset ?\\<Delta>\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}", "have \"\\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\""], ["proof (prove)\nusing this:\n  (?C, ?D) \\<in> sc ?\\<Gamma> ?A ?\\<Delta> ?B \\<Longrightarrow>\n  (\\<lambda>a.\n      a \\<in> set ?C) \\<not>\\<Turnstile> image_mset Atom (mset ?A) +\n   mset ?\\<Gamma> \\<Rightarrow>\n   image_mset Atom (mset ?B) + mset ?\\<Delta>\n  sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "by fastforce"], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "note s[unfolded p]"], ["proof (state)\nthis:\n  \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n  \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "have False"], ["proof (prove)\nusing this:\n  \\<not> \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n  \\<Turnstile> mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. sc \\<Gamma>' [] \\<Delta>' [] \\<noteq> {} \\<Longrightarrow>\n    mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "thus \"mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", ".."], ["proof (state)\nthis:\n  mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Turnstile> \\<Gamma> \\<Rightarrow> \\<Delta> \\<Longrightarrow>\n    \\<Gamma> \\<Rightarrow> \\<Delta>", "thus ?thesis"], ["proof (prove)\nusing this:\n  mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<Rightarrow> \\<Delta>", "unfolding p"], ["proof (prove)\nusing this:\n  mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'\n\ngoal (1 subgoal):\n 1. mset \\<Gamma>' \\<Rightarrow> mset \\<Delta>'", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<Rightarrow> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nJust as a side-note: some textbooks advertise completeness as a consequence of cut elimination.\nThis only makes sense if you have a cut-rule in the rules of SC to begin with.\nBut even if we did, this proof of completeness would not change a bit.\nSo\\<dots> huh.\n*)"], ["", "end"]]}