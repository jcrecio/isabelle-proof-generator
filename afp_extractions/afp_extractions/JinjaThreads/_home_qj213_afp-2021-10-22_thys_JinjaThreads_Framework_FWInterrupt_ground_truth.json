{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWInterrupt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma collect_interrupts_interrupted:\n  \"\\<lbrakk> interrupt_actions_ok is ias; t' \\<in> collect_interrupts ias \\<rbrakk> \\<Longrightarrow> t' \\<in> is\"", "lemma interrupt_actions_ok_append [simp]:\n  \"interrupt_actions_ok is (ias @ ias') \\<longleftrightarrow> interrupt_actions_ok is ias \\<and> interrupt_actions_ok (redT_updIs is ias) ias'\"", "lemma collect_interrupt_subset: \"Ts \\<subseteq> Ts' \\<Longrightarrow> collect_interrupt ia Ts \\<subseteq> collect_interrupt ia Ts'\"", "lemma foldr_collect_interrupt_subset:\n  \"Ts \\<subseteq> Ts' \\<Longrightarrow> foldr collect_interrupt ias Ts \\<subseteq> foldr collect_interrupt ias Ts'\"", "lemma interrupt_actions_ok_all_nthI:\n  assumes \"\\<And>n. n < length ias \\<Longrightarrow> interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\"\n  shows \"interrupt_actions_ok is ias\"", "lemma interrupt_actions_ok_nthD:\n  assumes \"interrupt_actions_ok is ias\"\n  and \"n < length ias\"\n  shows \"interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\"", "lemma interrupt_actions_ok'_all_nthI:\n  assumes \"\\<And>n. n < length ias \\<Longrightarrow> interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\"\n  shows \"interrupt_actions_ok' is ias\"", "lemma interrupt_actions_ok'_nthD:\n  assumes \"interrupt_actions_ok' is ias\"\n  and \"n < length ias\"\n  shows \"interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\"", "lemma interrupt_action_ok_imp_interrupt_action_ok' [simp]:\n  \"interrupt_action_ok is ia \\<Longrightarrow> interrupt_action_ok' is ia\"", "lemma interrupt_actions_ok_imp_interrupt_actions_ok' [simp]:\n  \"interrupt_actions_ok is ias \\<Longrightarrow> interrupt_actions_ok' is ias\"", "lemma collect_interruptsE:\n  assumes \"t' \\<in> collect_interrupts ias'\"\n  obtains n' where \"n' < length ias'\" \"ias' ! n' = IsInterrupted t' True\"\n  and \"Interrupt t' \\<notin> set (take n' ias')\"", "lemma collect_interrupts_prefix:\n  \"collect_interrupts ias \\<subseteq> collect_interrupts (ias @ ias')\"", "lemma redT_updI_insert_Interrupt:\n  \"\\<lbrakk> t \\<in> redT_updI is ia; t \\<notin> is \\<rbrakk> \\<Longrightarrow> ia = Interrupt t\"", "lemma redT_updIs_insert_Interrupt:\n  \"\\<lbrakk> t \\<in> redT_updIs is ias; t \\<notin> is \\<rbrakk> \\<Longrightarrow> Interrupt t \\<in> set ias\"", "lemma interrupt_actions_ok_takeI:\n  \"interrupt_actions_ok is ias \\<Longrightarrow> interrupt_actions_ok is (take n ias)\"", "lemma interrupt_actions_ok'_collect_interrupts_imp_interrupt_actions_ok:\n  assumes int: \"interrupt_actions_ok' is ias\"\n  and ci: \"collect_interrupts ias \\<subseteq> is\"\n  and int': \"interrupt_actions_ok is' ias\"\n  shows \"interrupt_actions_ok is ias\""], "translations": [["", "lemma collect_interrupts_interrupted:\n  \"\\<lbrakk> interrupt_actions_ok is ias; t' \\<in> collect_interrupts ias \\<rbrakk> \\<Longrightarrow> t' \\<in> is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>interrupt_actions_ok is ias;\n     t' \\<in> collect_interrupts ias\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> is", "unfolding collect_interrupts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>interrupt_actions_ok is ias;\n     t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> is", "proof(induct ias arbitrary: \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>is.\n       \\<lbrakk>interrupt_actions_ok is [];\n        t' \\<in> foldr collect_interrupt [] {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>interrupt_actions_ok is ias;\n                    t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n                   \\<Longrightarrow> t' \\<in> is;\n        interrupt_actions_ok is (a # ias);\n        t' \\<in> foldr collect_interrupt (a # ias) {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is", "case Nil"], ["proof (state)\nthis:\n  interrupt_actions_ok is []\n  t' \\<in> foldr collect_interrupt [] {}\n\ngoal (2 subgoals):\n 1. \\<And>is.\n       \\<lbrakk>interrupt_actions_ok is [];\n        t' \\<in> foldr collect_interrupt [] {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>interrupt_actions_ok is ias;\n                    t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n                   \\<Longrightarrow> t' \\<in> is;\n        interrupt_actions_ok is (a # ias);\n        t' \\<in> foldr collect_interrupt (a # ias) {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is", "thus ?case"], ["proof (prove)\nusing this:\n  interrupt_actions_ok is []\n  t' \\<in> foldr collect_interrupt [] {}\n\ngoal (1 subgoal):\n 1. t' \\<in> is", "by simp"], ["proof (state)\nthis:\n  t' \\<in> is\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>interrupt_actions_ok is ias;\n                    t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n                   \\<Longrightarrow> t' \\<in> is;\n        interrupt_actions_ok is (a # ias);\n        t' \\<in> foldr collect_interrupt (a # ias) {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>interrupt_actions_ok is ias;\n                    t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n                   \\<Longrightarrow> t' \\<in> is;\n        interrupt_actions_ok is (a # ias);\n        t' \\<in> foldr collect_interrupt (a # ias) {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is", "case (Cons ia ias)"], ["proof (state)\nthis:\n  \\<lbrakk>interrupt_actions_ok ?is ias;\n   t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n  \\<Longrightarrow> t' \\<in> ?is\n  interrupt_actions_ok is (ia # ias)\n  t' \\<in> foldr collect_interrupt (ia # ias) {}\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>interrupt_actions_ok is ias;\n                    t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n                   \\<Longrightarrow> t' \\<in> is;\n        interrupt_actions_ok is (a # ias);\n        t' \\<in> foldr collect_interrupt (a # ias) {}\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> is", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>interrupt_actions_ok ?is ias;\n   t' \\<in> foldr collect_interrupt ias {}\\<rbrakk>\n  \\<Longrightarrow> t' \\<in> ?is\n  interrupt_actions_ok is (ia # ias)\n  t' \\<in> foldr collect_interrupt (ia # ias) {}\n\ngoal (1 subgoal):\n 1. t' \\<in> is", "by(cases \"(ia, foldr collect_interrupt ias {})\" rule: collect_interrupt.cases) auto"], ["proof (state)\nthis:\n  t' \\<in> is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interrupt_actions_ok_append [simp]:\n  \"interrupt_actions_ok is (ias @ ias') \\<longleftrightarrow> interrupt_actions_ok is ias \\<and> interrupt_actions_ok (redT_updIs is ias) ias'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok is (ias @ ias') =\n    (interrupt_actions_ok is ias \\<and>\n     interrupt_actions_ok (redT_updIs is ias) ias')", "by(induct ias arbitrary: \"is\") auto"], ["", "lemma collect_interrupt_subset: \"Ts \\<subseteq> Ts' \\<Longrightarrow> collect_interrupt ia Ts \\<subseteq> collect_interrupt ia Ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<subseteq> Ts' \\<Longrightarrow>\n    collect_interrupt ia Ts \\<subseteq> collect_interrupt ia Ts'", "by(cases \"(ia, Ts)\" rule: collect_interrupt.cases) auto"], ["", "lemma foldr_collect_interrupt_subset:\n  \"Ts \\<subseteq> Ts' \\<Longrightarrow> foldr collect_interrupt ias Ts \\<subseteq> foldr collect_interrupt ias Ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<subseteq> Ts' \\<Longrightarrow>\n    foldr collect_interrupt ias Ts\n    \\<subseteq> foldr collect_interrupt ias Ts'", "by(induct ias)(simp_all add: collect_interrupt_subset)"], ["", "lemma interrupt_actions_ok_all_nthI:\n  assumes \"\\<And>n. n < length ias \\<Longrightarrow> interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\"\n  shows \"interrupt_actions_ok is ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok is ias", "using assms"], ["proof (prove)\nusing this:\n  ?n < length ias \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take ?n ias)) (ias ! ?n)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok is ias", "proof(induct ias arbitrary: \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>is.\n       (\\<And>n.\n           n < length [] \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n []))\n            ([] ! n)) \\<Longrightarrow>\n       interrupt_actions_ok is []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "case Nil"], ["proof (state)\nthis:\n  ?n < length [] \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take ?n [])) ([] ! ?n)\n\ngoal (2 subgoals):\n 1. \\<And>is.\n       (\\<And>n.\n           n < length [] \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n []))\n            ([] ! n)) \\<Longrightarrow>\n       interrupt_actions_ok is []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "thus ?case"], ["proof (prove)\nusing this:\n  ?n < length [] \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take ?n [])) ([] ! ?n)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok is []", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok is []\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "case (Cons ia ias)"], ["proof (state)\nthis:\n  (\\<And>n.\n      n < length ias \\<Longrightarrow>\n      interrupt_action_ok (redT_updIs ?is (take n ias))\n       (ias ! n)) \\<Longrightarrow>\n  interrupt_actions_ok ?is ias\n  ?n < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take ?n (ia # ias))) ((ia # ias) ! ?n)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "from Cons.prems[of 0]"], ["proof (chain)\npicking this:\n  0 < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take 0 (ia # ias))) ((ia # ias) ! 0)", "have \"interrupt_action_ok is ia\""], ["proof (prove)\nusing this:\n  0 < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take 0 (ia # ias))) ((ia # ias) ! 0)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok is ia", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "moreover"], ["proof (state)\nthis:\n  interrupt_action_ok is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "{"], ["proof (state)\nthis:\n  interrupt_action_ok is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "assume \"n < length ias\""], ["proof (state)\nthis:\n  n < length ias\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "hence \"interrupt_action_ok (redT_updIs (redT_updI is ia) (take n ias)) (ias ! n)\""], ["proof (prove)\nusing this:\n  n < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs (redT_updI is ia) (take n ias))\n     (ias ! n)", "using Cons.prems[of \"Suc n\"]"], ["proof (prove)\nusing this:\n  n < length ias\n  Suc n < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs is (take (Suc n) (ia # ias)))\n   ((ia # ias) ! Suc n)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs (redT_updI is ia) (take n ias))\n     (ias ! n)", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs (redT_updI is ia) (take n ias)) (ias ! n)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "}"], ["proof (state)\nthis:\n  ?n2 < length ias \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs (redT_updI is ia) (take ?n2 ias))\n   (ias ! ?n2)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "hence \"interrupt_actions_ok (redT_updI is ia) ias\""], ["proof (prove)\nusing this:\n  ?n2 < length ias \\<Longrightarrow>\n  interrupt_action_ok (redT_updIs (redT_updI is ia) (take ?n2 ias))\n   (ias ! ?n2)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok (redT_updI is ia) ias", "by(rule Cons.hyps)"], ["proof (state)\nthis:\n  interrupt_actions_ok (redT_updI is ia) ias\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok is (a # ias)", "ultimately"], ["proof (chain)\npicking this:\n  interrupt_action_ok is ia\n  interrupt_actions_ok (redT_updI is ia) ias", "show ?case"], ["proof (prove)\nusing this:\n  interrupt_action_ok is ia\n  interrupt_actions_ok (redT_updI is ia) ias\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok is (ia # ias)", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok is (ia # ias)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interrupt_actions_ok_nthD:\n  assumes \"interrupt_actions_ok is ias\"\n  and \"n < length ias\"\n  shows \"interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "using assms"], ["proof (prove)\nusing this:\n  interrupt_actions_ok is ias\n  n < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "by(induct n arbitrary: \"is\" ias)(case_tac [!] ias, auto)"], ["", "lemma interrupt_actions_ok'_all_nthI:\n  assumes \"\\<And>n. n < length ias \\<Longrightarrow> interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\"\n  shows \"interrupt_actions_ok' is ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok' is ias", "using assms"], ["proof (prove)\nusing this:\n  ?n < length ias \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take ?n ias)) (ias ! ?n)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' is ias", "proof(induct ias arbitrary: \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>is.\n       (\\<And>n.\n           n < length [] \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n []))\n            ([] ! n)) \\<Longrightarrow>\n       interrupt_actions_ok' is []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "case Nil"], ["proof (state)\nthis:\n  ?n < length [] \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take ?n [])) ([] ! ?n)\n\ngoal (2 subgoals):\n 1. \\<And>is.\n       (\\<And>n.\n           n < length [] \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n []))\n            ([] ! n)) \\<Longrightarrow>\n       interrupt_actions_ok' is []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "thus ?case"], ["proof (prove)\nusing this:\n  ?n < length [] \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take ?n [])) ([] ! ?n)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' is []", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok' is []\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "case (Cons ia ias)"], ["proof (state)\nthis:\n  (\\<And>n.\n      n < length ias \\<Longrightarrow>\n      interrupt_action_ok' (redT_updIs ?is (take n ias))\n       (ias ! n)) \\<Longrightarrow>\n  interrupt_actions_ok' ?is ias\n  ?n < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take ?n (ia # ias)))\n   ((ia # ias) ! ?n)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "from Cons.prems[of 0]"], ["proof (chain)\npicking this:\n  0 < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take 0 (ia # ias))) ((ia # ias) ! 0)", "have \"interrupt_action_ok' is ia\""], ["proof (prove)\nusing this:\n  0 < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take 0 (ia # ias))) ((ia # ias) ! 0)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok' is ia", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok' is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "moreover"], ["proof (state)\nthis:\n  interrupt_action_ok' is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "{"], ["proof (state)\nthis:\n  interrupt_action_ok' is ia\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "assume \"n < length ias\""], ["proof (state)\nthis:\n  n < length ias\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "hence \"interrupt_action_ok' (redT_updIs (redT_updI is ia) (take n ias)) (ias ! n)\""], ["proof (prove)\nusing this:\n  n < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok' (redT_updIs (redT_updI is ia) (take n ias))\n     (ias ! n)", "using Cons.prems[of \"Suc n\"]"], ["proof (prove)\nusing this:\n  n < length ias\n  Suc n < length (ia # ias) \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs is (take (Suc n) (ia # ias)))\n   ((ia # ias) ! Suc n)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok' (redT_updIs (redT_updI is ia) (take n ias))\n     (ias ! n)", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok' (redT_updIs (redT_updI is ia) (take n ias)) (ias ! n)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "}"], ["proof (state)\nthis:\n  ?n2 < length ias \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs (redT_updI is ia) (take ?n2 ias))\n   (ias ! ?n2)\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "hence \"interrupt_actions_ok' (redT_updI is ia) ias\""], ["proof (prove)\nusing this:\n  ?n2 < length ias \\<Longrightarrow>\n  interrupt_action_ok' (redT_updIs (redT_updI is ia) (take ?n2 ias))\n   (ias ! ?n2)\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' (redT_updI is ia) ias", "by(rule Cons.hyps)"], ["proof (state)\nthis:\n  interrupt_actions_ok' (redT_updI is ia) ias\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   (\\<And>n.\n                       n < length ias \\<Longrightarrow>\n                       interrupt_action_ok' (redT_updIs is (take n ias))\n                        (ias ! n)) \\<Longrightarrow>\n                   interrupt_actions_ok' is ias;\n        \\<And>n.\n           n < length (a # ias) \\<Longrightarrow>\n           interrupt_action_ok' (redT_updIs is (take n (a # ias)))\n            ((a # ias) ! n)\\<rbrakk>\n       \\<Longrightarrow> interrupt_actions_ok' is (a # ias)", "ultimately"], ["proof (chain)\npicking this:\n  interrupt_action_ok' is ia\n  interrupt_actions_ok' (redT_updI is ia) ias", "show ?case"], ["proof (prove)\nusing this:\n  interrupt_action_ok' is ia\n  interrupt_actions_ok' (redT_updI is ia) ias\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' is (ia # ias)", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok' is (ia # ias)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interrupt_actions_ok'_nthD:\n  assumes \"interrupt_actions_ok' is ias\"\n  and \"n < length ias\"\n  shows \"interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)", "using assms"], ["proof (prove)\nusing this:\n  interrupt_actions_ok' is ias\n  n < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)", "by(induct n arbitrary: \"is\" ias)(case_tac [!] ias, auto)"], ["", "lemma interrupt_action_ok_imp_interrupt_action_ok' [simp]:\n  \"interrupt_action_ok is ia \\<Longrightarrow> interrupt_action_ok' is ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_action_ok is ia \\<Longrightarrow> interrupt_action_ok' is ia", "by(cases ia) simp_all"], ["", "lemma interrupt_actions_ok_imp_interrupt_actions_ok' [simp]:\n  \"interrupt_actions_ok is ias \\<Longrightarrow> interrupt_actions_ok' is ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok is ias \\<Longrightarrow>\n    interrupt_actions_ok' is ias", "by(induct ias arbitrary: \"is\")(simp_all)"], ["", "lemma collect_interruptsE:\n  assumes \"t' \\<in> collect_interrupts ias'\"\n  obtains n' where \"n' < length ias'\" \"ias' ! n' = IsInterrupted t' True\"\n  and \"Interrupt t' \\<notin> set (take n' ias')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' < length ias'; ias' ! n' = IsInterrupted t' True;\n         Interrupt t' \\<notin> set (take n' ias')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'<length ias'.\n       ias' ! n' = IsInterrupted t' True \\<and>\n       Interrupt t' \\<notin> set (take n' ias')", "from assms"], ["proof (chain)\npicking this:\n  t' \\<in> collect_interrupts ias'", "show \"\\<exists>n'<length ias'. ias' ! n' = IsInterrupted t' True \\<and> Interrupt t' \\<notin> set (take n' ias')\""], ["proof (prove)\nusing this:\n  t' \\<in> collect_interrupts ias'\n\ngoal (1 subgoal):\n 1. \\<exists>n'<length ias'.\n       ias' ! n' = IsInterrupted t' True \\<and>\n       Interrupt t' \\<notin> set (take n' ias')", "unfolding collect_interrupts_def"], ["proof (prove)\nusing this:\n  t' \\<in> foldr collect_interrupt ias' {}\n\ngoal (1 subgoal):\n 1. \\<exists>n'<length ias'.\n       ias' ! n' = IsInterrupted t' True \\<and>\n       Interrupt t' \\<notin> set (take n' ias')", "proof(induct ias' arbitrary: t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t'.\n       t' \\<in> foldr collect_interrupt [] {} \\<Longrightarrow>\n       \\<exists>n'<length [].\n          [] ! n' = IsInterrupted t' True \\<and>\n          Interrupt t' \\<notin> set (take n' [])\n 2. \\<And>a ias' t'.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<in> foldr collect_interrupt ias'\n                             {} \\<Longrightarrow>\n                   \\<exists>n'<length ias'.\n                      ias' ! n' = IsInterrupted t' True \\<and>\n                      Interrupt t' \\<notin> set (take n' ias');\n        t' \\<in> foldr collect_interrupt (a # ias') {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'<length (a # ias').\n                            (a # ias') ! n' = IsInterrupted t' True \\<and>\n                            Interrupt t' \\<notin> set (take n' (a # ias'))", "case Nil"], ["proof (state)\nthis:\n  t' \\<in> foldr collect_interrupt [] {}\n\ngoal (2 subgoals):\n 1. \\<And>t'.\n       t' \\<in> foldr collect_interrupt [] {} \\<Longrightarrow>\n       \\<exists>n'<length [].\n          [] ! n' = IsInterrupted t' True \\<and>\n          Interrupt t' \\<notin> set (take n' [])\n 2. \\<And>a ias' t'.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<in> foldr collect_interrupt ias'\n                             {} \\<Longrightarrow>\n                   \\<exists>n'<length ias'.\n                      ias' ! n' = IsInterrupted t' True \\<and>\n                      Interrupt t' \\<notin> set (take n' ias');\n        t' \\<in> foldr collect_interrupt (a # ias') {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'<length (a # ias').\n                            (a # ias') ! n' = IsInterrupted t' True \\<and>\n                            Interrupt t' \\<notin> set (take n' (a # ias'))", "thus ?case"], ["proof (prove)\nusing this:\n  t' \\<in> foldr collect_interrupt [] {}\n\ngoal (1 subgoal):\n 1. \\<exists>n'<length [].\n       [] ! n' = IsInterrupted t' True \\<and>\n       Interrupt t' \\<notin> set (take n' [])", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'<length [].\n     [] ! n' = IsInterrupted t' True \\<and>\n     Interrupt t' \\<notin> set (take n' [])\n\ngoal (1 subgoal):\n 1. \\<And>a ias' t'.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<in> foldr collect_interrupt ias'\n                             {} \\<Longrightarrow>\n                   \\<exists>n'<length ias'.\n                      ias' ! n' = IsInterrupted t' True \\<and>\n                      Interrupt t' \\<notin> set (take n' ias');\n        t' \\<in> foldr collect_interrupt (a # ias') {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'<length (a # ias').\n                            (a # ias') ! n' = IsInterrupted t' True \\<and>\n                            Interrupt t' \\<notin> set (take n' (a # ias'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias' t'.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<in> foldr collect_interrupt ias'\n                             {} \\<Longrightarrow>\n                   \\<exists>n'<length ias'.\n                      ias' ! n' = IsInterrupted t' True \\<and>\n                      Interrupt t' \\<notin> set (take n' ias');\n        t' \\<in> foldr collect_interrupt (a # ias') {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'<length (a # ias').\n                            (a # ias') ! n' = IsInterrupted t' True \\<and>\n                            Interrupt t' \\<notin> set (take n' (a # ias'))", "case (Cons ia ias)"], ["proof (state)\nthis:\n  ?t' \\<in> foldr collect_interrupt ias {} \\<Longrightarrow>\n  \\<exists>n'<length ias.\n     ias ! n' = IsInterrupted ?t' True \\<and>\n     Interrupt ?t' \\<notin> set (take n' ias)\n  t' \\<in> foldr collect_interrupt (ia # ias) {}\n\ngoal (1 subgoal):\n 1. \\<And>a ias' t'.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<in> foldr collect_interrupt ias'\n                             {} \\<Longrightarrow>\n                   \\<exists>n'<length ias'.\n                      ias' ! n' = IsInterrupted t' True \\<and>\n                      Interrupt t' \\<notin> set (take n' ias');\n        t' \\<in> foldr collect_interrupt (a # ias') {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'<length (a # ias').\n                            (a # ias') ! n' = IsInterrupted t' True \\<and>\n                            Interrupt t' \\<notin> set (take n' (a # ias'))", "thus ?case"], ["proof (prove)\nusing this:\n  ?t' \\<in> foldr collect_interrupt ias {} \\<Longrightarrow>\n  \\<exists>n'<length ias.\n     ias ! n' = IsInterrupted ?t' True \\<and>\n     Interrupt ?t' \\<notin> set (take n' ias)\n  t' \\<in> foldr collect_interrupt (ia # ias) {}\n\ngoal (1 subgoal):\n 1. \\<exists>n'<length (ia # ias).\n       (ia # ias) ! n' = IsInterrupted t' True \\<and>\n       Interrupt t' \\<notin> set (take n' (ia # ias))", "by(cases \"(ia, foldr collect_interrupt ias {})\" rule: collect_interrupt.cases) fastforce+"], ["proof (state)\nthis:\n  \\<exists>n'<length (ia # ias).\n     (ia # ias) ! n' = IsInterrupted t' True \\<and>\n     Interrupt t' \\<notin> set (take n' (ia # ias))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'<length ias'.\n     ias' ! n' = IsInterrupted t' True \\<and>\n     Interrupt t' \\<notin> set (take n' ias')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma collect_interrupts_prefix:\n  \"collect_interrupts ias \\<subseteq> collect_interrupts (ias @ ias')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. collect_interrupts ias \\<subseteq> collect_interrupts (ias @ ias')", "by (metis Un_empty collect_interrupts_def foldr_append foldr_collect_interrupt_subset inf_sup_ord(1) inf_sup_ord(2) subset_Un_eq)"], ["", "lemma redT_updI_insert_Interrupt:\n  \"\\<lbrakk> t \\<in> redT_updI is ia; t \\<notin> is \\<rbrakk> \\<Longrightarrow> ia = Interrupt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> redT_updI is ia; t \\<notin> is\\<rbrakk>\n    \\<Longrightarrow> ia = Interrupt t", "by(cases ia) simp_all"], ["", "lemma redT_updIs_insert_Interrupt:\n  \"\\<lbrakk> t \\<in> redT_updIs is ias; t \\<notin> is \\<rbrakk> \\<Longrightarrow> Interrupt t \\<in> set ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> redT_updIs is ias; t \\<notin> is\\<rbrakk>\n    \\<Longrightarrow> Interrupt t \\<in> set ias", "proof(induct ias arbitrary: \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>is.\n       \\<lbrakk>t \\<in> redT_updIs is []; t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>t \\<in> redT_updIs is ias;\n                    t \\<notin> is\\<rbrakk>\n                   \\<Longrightarrow> Interrupt t \\<in> set ias;\n        t \\<in> redT_updIs is (a # ias); t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set (a # ias)", "case Nil"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is []\n  t \\<notin> is\n\ngoal (2 subgoals):\n 1. \\<And>is.\n       \\<lbrakk>t \\<in> redT_updIs is []; t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set []\n 2. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>t \\<in> redT_updIs is ias;\n                    t \\<notin> is\\<rbrakk>\n                   \\<Longrightarrow> Interrupt t \\<in> set ias;\n        t \\<in> redT_updIs is (a # ias); t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set (a # ias)", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is []\n  t \\<notin> is\n\ngoal (1 subgoal):\n 1. Interrupt t \\<in> set []", "by simp"], ["proof (state)\nthis:\n  Interrupt t \\<in> set []\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>t \\<in> redT_updIs is ias;\n                    t \\<notin> is\\<rbrakk>\n                   \\<Longrightarrow> Interrupt t \\<in> set ias;\n        t \\<in> redT_updIs is (a # ias); t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set (a # ias)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>t \\<in> redT_updIs is ias;\n                    t \\<notin> is\\<rbrakk>\n                   \\<Longrightarrow> Interrupt t \\<in> set ias;\n        t \\<in> redT_updIs is (a # ias); t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set (a # ias)", "case (Cons ia ias)"], ["proof (state)\nthis:\n  \\<lbrakk>t \\<in> redT_updIs ?is ias; t \\<notin> ?is\\<rbrakk>\n  \\<Longrightarrow> Interrupt t \\<in> set ias\n  t \\<in> redT_updIs is (ia # ias)\n  t \\<notin> is\n\ngoal (1 subgoal):\n 1. \\<And>a ias is.\n       \\<lbrakk>\\<And>is.\n                   \\<lbrakk>t \\<in> redT_updIs is ias;\n                    t \\<notin> is\\<rbrakk>\n                   \\<Longrightarrow> Interrupt t \\<in> set ias;\n        t \\<in> redT_updIs is (a # ias); t \\<notin> is\\<rbrakk>\n       \\<Longrightarrow> Interrupt t \\<in> set (a # ias)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>t \\<in> redT_updIs ?is ias; t \\<notin> ?is\\<rbrakk>\n  \\<Longrightarrow> Interrupt t \\<in> set ias\n  t \\<in> redT_updIs is (ia # ias)\n  t \\<notin> is\n\ngoal (1 subgoal):\n 1. Interrupt t \\<in> set (ia # ias)", "by(cases \"t \\<in> redT_updI is ia\")(auto dest: redT_updI_insert_Interrupt)"], ["proof (state)\nthis:\n  Interrupt t \\<in> set (ia # ias)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interrupt_actions_ok_takeI:\n  \"interrupt_actions_ok is ias \\<Longrightarrow> interrupt_actions_ok is (take n ias)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok is ias \\<Longrightarrow>\n    interrupt_actions_ok is (take n ias)", "by(subst (asm) append_take_drop_id[symmetric, where n=n])(simp del: append_take_drop_id)"], ["", "lemma interrupt_actions_ok'_collect_interrupts_imp_interrupt_actions_ok:\n  assumes int: \"interrupt_actions_ok' is ias\"\n  and ci: \"collect_interrupts ias \\<subseteq> is\"\n  and int': \"interrupt_actions_ok is' ias\"\n  shows \"interrupt_actions_ok is ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_actions_ok is ias", "proof(rule interrupt_actions_ok_all_nthI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ias \\<Longrightarrow>\n       interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ias \\<Longrightarrow>\n       interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "assume n: \"n < length ias\""], ["proof (state)\nthis:\n  n < length ias\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ias \\<Longrightarrow>\n       interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "show \"interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "proof(cases \"\\<exists>t. ias ! n = IsInterrupted t True\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\n 2. \\<nexists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "case False"], ["proof (state)\nthis:\n  \\<nexists>t. ias ! n = IsInterrupted t True\n\ngoal (2 subgoals):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\n 2. \\<nexists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "with interrupt_actions_ok'_nthD[OF int n]"], ["proof (chain)\npicking this:\n  interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\n  \\<nexists>t. ias ! n = IsInterrupted t True", "show ?thesis"], ["proof (prove)\nusing this:\n  interrupt_action_ok' (redT_updIs is (take n ias)) (ias ! n)\n  \\<nexists>t. ias ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "by(cases \"ias ! n\") simp_all"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "case True"], ["proof (state)\nthis:\n  \\<exists>t. ias ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "then"], ["proof (chain)\npicking this:\n  \\<exists>t. ias ! n = IsInterrupted t True", "obtain t where ia: \"ias ! n = IsInterrupted t True\""], ["proof (prove)\nusing this:\n  \\<exists>t. ias ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        ias ! n = IsInterrupted t True \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  ias ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "from int' n"], ["proof (chain)\npicking this:\n  interrupt_actions_ok is' ias\n  n < length ias", "have \"interrupt_action_ok (redT_updIs is' (take n ias)) (ias ! n)\""], ["proof (prove)\nusing this:\n  interrupt_actions_ok is' ias\n  n < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is' (take n ias)) (ias ! n)", "by(rule interrupt_actions_ok_nthD)"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs is' (take n ias)) (ias ! n)\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "with ia"], ["proof (chain)\npicking this:\n  ias ! n = IsInterrupted t True\n  interrupt_action_ok (redT_updIs is' (take n ias)) (ias ! n)", "have \"t \\<in> redT_updIs is' (take n ias)\""], ["proof (prove)\nusing this:\n  ias ! n = IsInterrupted t True\n  interrupt_action_ok (redT_updIs is' (take n ias)) (ias ! n)\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs is' (take n ias)", "by simp"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is' (take n ias)\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "moreover"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is' (take n ias)\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "have \"ias = take (Suc n) ias @ drop (Suc n) ias\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ias = take (Suc n) ias @ drop (Suc n) ias", "by simp"], ["proof (state)\nthis:\n  ias = take (Suc n) ias @ drop (Suc n) ias\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "with ci"], ["proof (chain)\npicking this:\n  collect_interrupts ias \\<subseteq> is\n  ias = take (Suc n) ias @ drop (Suc n) ias", "have \"collect_interrupts (take (Suc n) ias) \\<subseteq> is\""], ["proof (prove)\nusing this:\n  collect_interrupts ias \\<subseteq> is\n  ias = take (Suc n) ias @ drop (Suc n) ias\n\ngoal (1 subgoal):\n 1. collect_interrupts (take (Suc n) ias) \\<subseteq> is", "by (metis collect_interrupts_prefix subset_trans)"], ["proof (state)\nthis:\n  collect_interrupts (take (Suc n) ias) \\<subseteq> is\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "ultimately"], ["proof (chain)\npicking this:\n  t \\<in> redT_updIs is' (take n ias)\n  collect_interrupts (take (Suc n) ias) \\<subseteq> is", "have \"t \\<in> redT_updIs is (take n ias)\""], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is' (take n ias)\n  collect_interrupts (take (Suc n) ias) \\<subseteq> is\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs is (take n ias)", "using n ia int int'"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is' (take n ias)\n  collect_interrupts (take (Suc n) ias) \\<subseteq> is\n  n < length ias\n  ias ! n = IsInterrupted t True\n  interrupt_actions_ok' is ias\n  interrupt_actions_ok is' ias\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs is (take n ias)", "proof(induct n arbitrary: \"is\" is' ias)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>is is' ias.\n       \\<lbrakk>t \\<in> redT_updIs is' (take 0 ias);\n        collect_interrupts (take (Suc 0) ias) \\<subseteq> is;\n        0 < length ias; ias ! 0 = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take 0 ias)\n 2. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "case 0"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is' (take 0 ias)\n  collect_interrupts (take (Suc 0) ias) \\<subseteq> is\n  0 < length ias\n  ias ! 0 = IsInterrupted t True\n  interrupt_actions_ok' is ias\n  interrupt_actions_ok is' ias\n\ngoal (2 subgoals):\n 1. \\<And>is is' ias.\n       \\<lbrakk>t \\<in> redT_updIs is' (take 0 ias);\n        collect_interrupts (take (Suc 0) ias) \\<subseteq> is;\n        0 < length ias; ias ! 0 = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take 0 ias)\n 2. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is' (take 0 ias)\n  collect_interrupts (take (Suc 0) ias) \\<subseteq> is\n  0 < length ias\n  ias ! 0 = IsInterrupted t True\n  interrupt_actions_ok' is ias\n  interrupt_actions_ok is' ias\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs is (take 0 ias)", "by(clarsimp simp add: neq_Nil_conv collect_interrupts_def)"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is (take 0 ias)\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>t \\<in> redT_updIs ?is' (take n ?ias);\n   collect_interrupts (take (Suc n) ?ias) \\<subseteq> ?is; n < length ?ias;\n   ?ias ! n = IsInterrupted t True; interrupt_actions_ok' ?is ?ias;\n   interrupt_actions_ok ?is' ?ias\\<rbrakk>\n  \\<Longrightarrow> t \\<in> redT_updIs ?is (take n ?ias)\n  t \\<in> redT_updIs is' (take (Suc n) ias)\n  collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\n  Suc n < length ias\n  ias ! Suc n = IsInterrupted t True\n  interrupt_actions_ok' is ias\n  interrupt_actions_ok is' ias\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>Suc n < length ias\\<close>"], ["proof (chain)\npicking this:\n  Suc n < length ias", "obtain ia ias'\n        where ias [simp]: \"ias = ia # ias'\""], ["proof (prove)\nusing this:\n  Suc n < length ias\n\ngoal (1 subgoal):\n 1. (\\<And>ia ias'.\n        ias = ia # ias' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases ias) auto"], ["proof (state)\nthis:\n  ias = ia # ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>interrupt_actions_ok is' ias\\<close>"], ["proof (chain)\npicking this:\n  interrupt_actions_ok is' ias", "have ia_ok: \"interrupt_action_ok is' ia\""], ["proof (prove)\nusing this:\n  interrupt_actions_ok is' ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok is' ia", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok is' ia\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>t \\<in> redT_updIs is' (take (Suc n) ias)\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> redT_updIs is' (take (Suc n) ias)", "have \"t \\<in> redT_updIs (redT_updI is' ia) (take n ias')\""], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is' (take (Suc n) ias)\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs (redT_updI is' ia) (take n ias')", "by simp"], ["proof (state)\nthis:\n  t \\<in> redT_updIs (redT_updI is' ia) (take n ias')\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "moreover"], ["proof (state)\nthis:\n  t \\<in> redT_updIs (redT_updI is' ia) (take n ias')\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\\<close> ia_ok"], ["proof (chain)\npicking this:\n  collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\n  interrupt_action_ok is' ia", "have \"collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\""], ["proof (prove)\nusing this:\n  collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\n  interrupt_action_ok is' ia\n\ngoal (1 subgoal):\n 1. collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia", "proof(cases \"(ia, is)\" rule: collect_interrupt.cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted t True, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 2. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia; (ia, is) = (Interrupt t, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 3. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted v False, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 4. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (ClearInterrupt v, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia", "case (\"3_2\" t' Ts)"], ["proof (state)\nthis:\n  (ia, is) = (ClearInterrupt t', Ts)\n\ngoal (4 subgoals):\n 1. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted t True, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 2. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia; (ia, is) = (Interrupt t, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 3. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted v False, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 4. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (ClearInterrupt v, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia", "hence [simp]: \"ia = ClearInterrupt t'\" \"Ts = is\""], ["proof (prove)\nusing this:\n  (ia, is) = (ClearInterrupt t', Ts)\n\ngoal (1 subgoal):\n 1. ia = ClearInterrupt t' &&& Ts = is", "by simp_all"], ["proof (state)\nthis:\n  ia = ClearInterrupt t'\n  Ts = is\n\ngoal (4 subgoals):\n 1. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted t True, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 2. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia; (ia, is) = (Interrupt t, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 3. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted v False, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 4. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (ClearInterrupt v, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia", "have \"t' \\<notin> collect_interrupts (take (Suc n) ias')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<notin> collect_interrupts (take (Suc n) ias')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "assume \"t' \\<in> collect_interrupts (take (Suc n) ias')\""], ["proof (state)\nthis:\n  t' \\<in> collect_interrupts (take (Suc n) ias')\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  t' \\<in> collect_interrupts (take (Suc n) ias')", "obtain n' where \"n' < length (take (Suc n) ias')\" \"take (Suc n) ias' ! n' = IsInterrupted t' True\"\n            \"Interrupt t' \\<notin> set (take n' (take (Suc n) ias'))\""], ["proof (prove)\nusing this:\n  t' \\<in> collect_interrupts (take (Suc n) ias')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' < length (take (Suc n) ias');\n         take (Suc n) ias' ! n' = IsInterrupted t' True;\n         Interrupt t' \\<notin> set (take n' (take (Suc n) ias'))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule collect_interruptsE)"], ["proof (state)\nthis:\n  n' < length (take (Suc n) ias')\n  take (Suc n) ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' (take (Suc n) ias'))\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "hence \"n' \\<le> n\" \"ias' ! n' = IsInterrupted t' True\" \"Interrupt t' \\<notin> set (take n' ias')\""], ["proof (prove)\nusing this:\n  n' < length (take (Suc n) ias')\n  take (Suc n) ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' (take (Suc n) ias'))\n\ngoal (1 subgoal):\n 1. n' \\<le> n &&&\n    ias' ! n' = IsInterrupted t' True &&&\n    Interrupt t' \\<notin> set (take n' ias')", "using \\<open>Suc n < length ias\\<close>"], ["proof (prove)\nusing this:\n  n' < length (take (Suc n) ias')\n  take (Suc n) ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' (take (Suc n) ias'))\n  Suc n < length ias\n\ngoal (1 subgoal):\n 1. n' \\<le> n &&&\n    ias' ! n' = IsInterrupted t' True &&&\n    Interrupt t' \\<notin> set (take n' ias')", "by(simp_all add: min_def split: if_split_asm)"], ["proof (state)\nthis:\n  n' \\<le> n\n  ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' ias')\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "hence \"Suc n' < length ias\""], ["proof (prove)\nusing this:\n  n' \\<le> n\n  ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' ias')\n\ngoal (1 subgoal):\n 1. Suc n' < length ias", "using \\<open>Suc n < length ias\\<close>"], ["proof (prove)\nusing this:\n  n' \\<le> n\n  ias' ! n' = IsInterrupted t' True\n  Interrupt t' \\<notin> set (take n' ias')\n  Suc n < length ias\n\ngoal (1 subgoal):\n 1. Suc n' < length ias", "by(simp add: min_def)"], ["proof (state)\nthis:\n  Suc n' < length ias\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "with \\<open>interrupt_actions_ok is' ias\\<close>"], ["proof (chain)\npicking this:\n  interrupt_actions_ok is' ias\n  Suc n' < length ias", "have \"interrupt_action_ok (redT_updIs is' (take (Suc n') ias)) (ias ! Suc n')\""], ["proof (prove)\nusing this:\n  interrupt_actions_ok is' ias\n  Suc n' < length ias\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is' (take (Suc n') ias)) (ias ! Suc n')", "by(rule interrupt_actions_ok_nthD)"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs is' (take (Suc n') ias)) (ias ! Suc n')\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "with \\<open>Suc n < length ias\\<close> \\<open>ias' ! n' = IsInterrupted t' True\\<close>"], ["proof (chain)\npicking this:\n  Suc n < length ias\n  ias' ! n' = IsInterrupted t' True\n  interrupt_action_ok (redT_updIs is' (take (Suc n') ias)) (ias ! Suc n')", "have \"t' \\<in> redT_updIs (is' - {t'}) (take n' ias')\""], ["proof (prove)\nusing this:\n  Suc n < length ias\n  ias' ! n' = IsInterrupted t' True\n  interrupt_action_ok (redT_updIs is' (take (Suc n') ias)) (ias ! Suc n')\n\ngoal (1 subgoal):\n 1. t' \\<in> redT_updIs (is' - {t'}) (take n' ias')", "by simp"], ["proof (state)\nthis:\n  t' \\<in> redT_updIs (is' - {t'}) (take n' ias')\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "hence \"Interrupt t' \\<in> set (take n' ias')\""], ["proof (prove)\nusing this:\n  t' \\<in> redT_updIs (is' - {t'}) (take n' ias')\n\ngoal (1 subgoal):\n 1. Interrupt t' \\<in> set (take n' ias')", "by(rule redT_updIs_insert_Interrupt) simp"], ["proof (state)\nthis:\n  Interrupt t' \\<in> set (take n' ias')\n\ngoal (1 subgoal):\n 1. t' \\<in> collect_interrupts (take (Suc n) ias') \\<Longrightarrow> False", "with \\<open>Interrupt t' \\<notin> set (take n' ias')\\<close>"], ["proof (chain)\npicking this:\n  Interrupt t' \\<notin> set (take n' ias')\n  Interrupt t' \\<in> set (take n' ias')", "show False"], ["proof (prove)\nusing this:\n  Interrupt t' \\<notin> set (take n' ias')\n  Interrupt t' \\<in> set (take n' ias')\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t' \\<notin> collect_interrupts (take (Suc n) ias')\n\ngoal (4 subgoals):\n 1. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted t True, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 2. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia; (ia, is) = (Interrupt t, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 3. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted v False, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 4. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (ClearInterrupt v, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia", "thus ?thesis"], ["proof (prove)\nusing this:\n  t' \\<notin> collect_interrupts (take (Suc n) ias')\n\ngoal (1 subgoal):\n 1. collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia", "using \\<open>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\\<close>"], ["proof (prove)\nusing this:\n  t' \\<notin> collect_interrupts (take (Suc n) ias')\n  collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is\n\ngoal (1 subgoal):\n 1. collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia", "by(auto simp add: collect_interrupts_def)"], ["proof (state)\nthis:\n  collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\n\ngoal (3 subgoals):\n 1. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted t True, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 2. \\<And>t Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia; (ia, is) = (Interrupt t, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia\n 3. \\<And>v Ts.\n       \\<lbrakk>collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        interrupt_action_ok is' ia;\n        (ia, is) = (IsInterrupted v False, Ts)\\<rbrakk>\n       \\<Longrightarrow> collect_interrupts (take (Suc n) ias')\n                         \\<subseteq> redT_updI is ia", "qed(auto simp add: collect_interrupts_def)"], ["proof (state)\nthis:\n  collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "moreover"], ["proof (state)\nthis:\n  collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>Suc n < length ias\\<close>"], ["proof (chain)\npicking this:\n  Suc n < length ias", "have \"n < length ias'\""], ["proof (prove)\nusing this:\n  Suc n < length ias\n\ngoal (1 subgoal):\n 1. n < length ias'", "by simp"], ["proof (state)\nthis:\n  n < length ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "moreover"], ["proof (state)\nthis:\n  n < length ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>ias ! Suc n = IsInterrupted t True\\<close>"], ["proof (chain)\npicking this:\n  ias ! Suc n = IsInterrupted t True", "have \"ias' ! n = IsInterrupted t True\""], ["proof (prove)\nusing this:\n  ias ! Suc n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. ias' ! n = IsInterrupted t True", "by simp"], ["proof (state)\nthis:\n  ias' ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "moreover"], ["proof (state)\nthis:\n  ias' ! n = IsInterrupted t True\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>interrupt_actions_ok' is ias\\<close>"], ["proof (chain)\npicking this:\n  interrupt_actions_ok' is ias", "have \"interrupt_actions_ok' (redT_updI is ia) ias'\""], ["proof (prove)\nusing this:\n  interrupt_actions_ok' is ias\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' (redT_updI is ia) ias'", "unfolding ias"], ["proof (prove)\nusing this:\n  interrupt_actions_ok' is (ia # ias')\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok' (redT_updI is ia) ias'", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok' (redT_updI is ia) ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "moreover"], ["proof (state)\nthis:\n  interrupt_actions_ok' (redT_updI is ia) ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "from \\<open>interrupt_actions_ok is' ias\\<close>"], ["proof (chain)\npicking this:\n  interrupt_actions_ok is' ias", "have \"interrupt_actions_ok (redT_updI is' ia) ias'\""], ["proof (prove)\nusing this:\n  interrupt_actions_ok is' ias\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok (redT_updI is' ia) ias'", "by simp"], ["proof (state)\nthis:\n  interrupt_actions_ok (redT_updI is' ia) ias'\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "ultimately"], ["proof (chain)\npicking this:\n  t \\<in> redT_updIs (redT_updI is' ia) (take n ias')\n  collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\n  n < length ias'\n  ias' ! n = IsInterrupted t True\n  interrupt_actions_ok' (redT_updI is ia) ias'\n  interrupt_actions_ok (redT_updI is' ia) ias'", "have \"t \\<in> redT_updIs (redT_updI is ia) (take n ias')\""], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs (redT_updI is' ia) (take n ias')\n  collect_interrupts (take (Suc n) ias') \\<subseteq> redT_updI is ia\n  n < length ias'\n  ias' ! n = IsInterrupted t True\n  interrupt_actions_ok' (redT_updI is ia) ias'\n  interrupt_actions_ok (redT_updI is' ia) ias'\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs (redT_updI is ia) (take n ias')", "by(rule Suc)"], ["proof (state)\nthis:\n  t \\<in> redT_updIs (redT_updI is ia) (take n ias')\n\ngoal (1 subgoal):\n 1. \\<And>n is is' ias.\n       \\<lbrakk>\\<And>is is' ias.\n                   \\<lbrakk>t \\<in> redT_updIs is' (take n ias);\n                    collect_interrupts (take (Suc n) ias) \\<subseteq> is;\n                    n < length ias; ias ! n = IsInterrupted t True;\n                    interrupt_actions_ok' is ias;\n                    interrupt_actions_ok is' ias\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> redT_updIs is (take n ias);\n        t \\<in> redT_updIs is' (take (Suc n) ias);\n        collect_interrupts (take (Suc (Suc n)) ias) \\<subseteq> is;\n        Suc n < length ias; ias ! Suc n = IsInterrupted t True;\n        interrupt_actions_ok' is ias; interrupt_actions_ok is' ias\\<rbrakk>\n       \\<Longrightarrow> t \\<in> redT_updIs is (take (Suc n) ias)", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs (redT_updI is ia) (take n ias')\n\ngoal (1 subgoal):\n 1. t \\<in> redT_updIs is (take (Suc n) ias)", "by simp"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is (take (Suc n) ias)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> redT_updIs is (take n ias)\n\ngoal (1 subgoal):\n 1. \\<exists>t. ias ! n = IsInterrupted t True \\<Longrightarrow>\n    interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is (take n ias)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)", "unfolding ia"], ["proof (prove)\nusing this:\n  t \\<in> redT_updIs is (take n ias)\n\ngoal (1 subgoal):\n 1. interrupt_action_ok (redT_updIs is (take n ias)) (IsInterrupted t True)", "by simp"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interrupt_action_ok (redT_updIs is (take n ias)) (ias ! n)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}