{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/Non_Speculative.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma w_value_cases:\n  obtains ad al v where \"x = NormalAction (WriteMem ad al v)\"\n  | ad hT where \"x = NormalAction (NewHeapElem ad hT)\"\n  | ad M vs v where \"x = NormalAction (ExternalCall ad M vs v)\"\n  | ad al v where \"x = NormalAction (ReadMem ad al v)\"\n  | t where \"x = NormalAction (ThreadStart t)\"\n  | t where \"x = NormalAction (ThreadJoin t)\"\n  | ad where \"x = NormalAction (SyncLock ad)\"\n  | ad where \"x = NormalAction (SyncUnlock ad)\"\n  | t where \"x = NormalAction (ObsInterrupt t)\"\n  | t where \"x = NormalAction (ObsInterrupted t)\"\n  | \"x = InitialThreadAction\"\n  | \"x = ThreadFinishAction\"", "lemma in_w_valuesD:\n  assumes w: \"v \\<in> w_values P vs0 obs (ad, al)\"\n  and v: \"v \\<notin> vs0 (ad, al)\"\n  shows \"\\<exists>obs' wa obs''. obs = obs' @ wa # obs'' \\<and> is_write_action wa \\<and> (ad, al) \\<in> action_loc_aux P wa \\<and>\n            value_written_aux P wa al = v\"\n  (is \"?concl obs\")", "lemma w_values_WriteMemD:\n  assumes \"NormalAction (WriteMem ad al v) \\<in> set obs\"\n  shows \"v \\<in> w_values P vs0 obs (ad, al)\"", "lemma w_values_new_actionD:\n  assumes \"NormalAction (NewHeapElem ad hT) \\<in> set obs\" \"(ad, al) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\"\n  shows \"addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al)\"", "lemma w_value_mono: \"vs0 adal \\<subseteq> w_value P vs0 ob adal\"", "lemma w_values_mono: \"vs0 adal \\<subseteq> w_values P vs0 obs adal\"", "lemma w_value_greater: \"vs0 \\<le> w_value P vs0 ob\"", "lemma w_values_greater: \"vs0 \\<le> w_values P vs0 obs\"", "lemma w_values_eq_emptyD:\n  assumes \"w_values P vs0 obs adal = {}\"\n  and \"w \\<in> set obs\" and \"is_write_action w\" and \"adal \\<in> action_loc_aux P w\"\n  shows False", "lemma non_speculative_lappend:\n  assumes \"lfinite obs\"\n  shows \"non_speculative P vs (lappend obs obs') \\<longleftrightarrow>\n         non_speculative P vs obs \\<and> non_speculative P (w_values P vs (list_of obs)) obs'\"\n  (is \"?concl vs obs\")", "lemma\n  assumes \"non_speculative P vs obs\"\n  shows non_speculative_ltake: \"non_speculative P vs (ltake n obs)\" (is ?thesis1)\n  and non_speculative_ldrop: \"non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)\" (is ?thesis2)", "lemma non_speculative_coinduct_append [consumes 1, case_names non_speculative, case_conclusion non_speculative LNil lappend]:\n  assumes major: \"X vs obs\"\n  and step: \"\\<And>vs obs. X vs obs \n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs''. obs = lappend obs' obs'' \\<and> obs' \\<noteq> LNil \\<and> non_speculative P vs obs' \\<and>\n                    (lfinite obs' \\<longrightarrow> (X (w_values P vs (list_of obs')) obs'' \\<or> \n                                       non_speculative P (w_values P vs (list_of obs')) obs'')))\"\n    (is \"\\<And>vs obs. _ \\<Longrightarrow> _ \\<or> ?step vs obs\")\n  shows \"non_speculative P vs obs\"", "lemma non_speculative_coinduct_append_wf\n  [consumes 2, case_names non_speculative, case_conclusion non_speculative LNil lappend]:\n  assumes major: \"X vs obs a\"\n  and wf: \"wf R\"\n  and step: \"\\<And>vs obs a. X vs obs a\n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'. obs = lappend obs' obs'' \\<and> non_speculative P vs obs' \\<and> (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n                        (lfinite obs' \\<longrightarrow> X (w_values P vs (list_of obs')) obs'' a' \\<or>\n                                          non_speculative P (w_values P vs (list_of obs')) obs''))\"\n    (is \"\\<And>vs obs a. _ \\<Longrightarrow> _ \\<or> ?step vs obs a\")\n  shows \"non_speculative P vs obs\"", "lemma non_speculative_nthI:\n  \"(\\<And>i ad al v. \n    \\<lbrakk> enat i < llength obs; lnth obs i = NormalAction (ReadMem ad al v);\n      non_speculative P vs (ltake (enat i) obs) \\<rbrakk> \n    \\<Longrightarrow> v \\<in> w_values P vs (list_of (ltake (enat i) obs)) (ad, al))\n  \\<Longrightarrow> non_speculative P vs obs\"", "lemma \\<E>_new_same_addr_singleton:\n  assumes E: \"E \\<in> \\<E>\"\n  shows \"\\<exists>a. new_actions_for P E adal \\<subseteq> {a}\"", "lemma new_action_before_read:\n  assumes E: \"E \\<in> \\<E>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and adal: \"adal \\<in> action_loc P E ra\"\n  and new: \"wa \\<in> new_actions_for P E adal\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat ra) (lmap snd E))\"\n  shows \"wa < ra\"", "lemma most_recent_write_exists:\n  assumes E: \"E \\<in> \\<E>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat ra) (lmap snd E))\"\n  shows \"\\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa\"", "lemma mrw_before:\n  assumes E: \"E \\<in> \\<E>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat r) (lmap snd E))\"\n  shows \"w < r\"", "lemma sequentially_consistent_most_recent_write_for:\n  assumes E: \"E \\<in> \\<E>\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (lmap snd E)\"\n  shows \"sequentially_consistent P (E, \\<lambda>r. THE w. P,E \\<turnstile> r \\<leadsto>mrw w)\""], "translations": [["", "lemma w_value_cases:\n  obtains ad al v where \"x = NormalAction (WriteMem ad al v)\"\n  | ad hT where \"x = NormalAction (NewHeapElem ad hT)\"\n  | ad M vs v where \"x = NormalAction (ExternalCall ad M vs v)\"\n  | ad al v where \"x = NormalAction (ReadMem ad al v)\"\n  | t where \"x = NormalAction (ThreadStart t)\"\n  | t where \"x = NormalAction (ThreadJoin t)\"\n  | ad where \"x = NormalAction (SyncLock ad)\"\n  | ad where \"x = NormalAction (SyncUnlock ad)\"\n  | t where \"x = NormalAction (ObsInterrupt t)\"\n  | t where \"x = NormalAction (ObsInterrupted t)\"\n  | \"x = InitialThreadAction\"\n  | \"x = ThreadFinishAction\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ad al v.\n                x = NormalAction (WriteMem ad al v) \\<Longrightarrow>\n                thesis;\n     \\<And>ad hT.\n        x = NormalAction (NewHeapElem ad hT) \\<Longrightarrow> thesis;\n     \\<And>ad M vs v.\n        x = NormalAction (ExternalCall ad M vs v) \\<Longrightarrow> thesis;\n     \\<And>ad al v.\n        x = NormalAction (ReadMem ad al v) \\<Longrightarrow> thesis;\n     \\<And>t. x = NormalAction (ThreadStart t) \\<Longrightarrow> thesis;\n     \\<And>t. x = NormalAction (ThreadJoin t) \\<Longrightarrow> thesis;\n     \\<And>ad. x = NormalAction (SyncLock ad) \\<Longrightarrow> thesis;\n     \\<And>ad. x = NormalAction (SyncUnlock ad) \\<Longrightarrow> thesis;\n     \\<And>t. x = NormalAction (ObsInterrupt t) \\<Longrightarrow> thesis;\n     \\<And>t. x = NormalAction (ObsInterrupted t) \\<Longrightarrow> thesis;\n     x = InitialThreadAction \\<Longrightarrow> thesis;\n     x = ThreadFinishAction \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by pat_completeness"], ["", "abbreviation w_values ::\n  \"'m prog \\<Rightarrow> (('addr \\<times> addr_loc) \\<Rightarrow> 'addr val set) \\<Rightarrow> ('addr, 'thread_id) obs_event action list\n  \\<Rightarrow> (('addr \\<times> addr_loc) \\<Rightarrow> 'addr val set)\"\nwhere \"w_values P \\<equiv> foldl (w_value P)\""], ["", "lemma in_w_valuesD:\n  assumes w: \"v \\<in> w_values P vs0 obs (ad, al)\"\n  and v: \"v \\<notin> vs0 (ad, al)\"\n  shows \"\\<exists>obs' wa obs''. obs = obs' @ wa # obs'' \\<and> is_write_action wa \\<and> (ad, al) \\<in> action_loc_aux P wa \\<and>\n            value_written_aux P wa al = v\"\n  (is \"?concl obs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       obs = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "using w"], ["proof (prove)\nusing this:\n  v \\<in> w_values P vs0 obs (ad, al)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       obs = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "proof(induction obs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> w_values P vs0 [] (ad, al) \\<Longrightarrow>\n    \\<exists>obs' wa obs''.\n       [] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v\n 2. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al) \\<Longrightarrow>\n                \\<exists>obs' wa obs''.\n                   xs = obs' @ wa # obs'' \\<and>\n                   is_write_action wa \\<and>\n                   (ad, al) \\<in> action_loc_aux P wa \\<and>\n                   value_written_aux P wa al = v;\n        v \\<in> w_values P vs0 (xs @ [x]) (ad, al)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>obs' wa obs''.\n                            xs @ [x] = obs' @ wa # obs'' \\<and>\n                            is_write_action wa \\<and>\n                            (ad, al) \\<in> action_loc_aux P wa \\<and>\n                            value_written_aux P wa al = v", "case Nil"], ["proof (state)\nthis:\n  v \\<in> w_values P vs0 [] (ad, al)\n\ngoal (2 subgoals):\n 1. v \\<in> w_values P vs0 [] (ad, al) \\<Longrightarrow>\n    \\<exists>obs' wa obs''.\n       [] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v\n 2. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al) \\<Longrightarrow>\n                \\<exists>obs' wa obs''.\n                   xs = obs' @ wa # obs'' \\<and>\n                   is_write_action wa \\<and>\n                   (ad, al) \\<in> action_loc_aux P wa \\<and>\n                   value_written_aux P wa al = v;\n        v \\<in> w_values P vs0 (xs @ [x]) (ad, al)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>obs' wa obs''.\n                            xs @ [x] = obs' @ wa # obs'' \\<and>\n                            is_write_action wa \\<and>\n                            (ad, al) \\<in> action_loc_aux P wa \\<and>\n                            value_written_aux P wa al = v", "thus ?case"], ["proof (prove)\nusing this:\n  v \\<in> w_values P vs0 [] (ad, al)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       [] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "using v"], ["proof (prove)\nusing this:\n  v \\<in> w_values P vs0 [] (ad, al)\n  v \\<notin> vs0 (ad, al)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       [] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "by simp"], ["proof (state)\nthis:\n  \\<exists>obs' wa obs''.\n     [] = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al) \\<Longrightarrow>\n                \\<exists>obs' wa obs''.\n                   xs = obs' @ wa # obs'' \\<and>\n                   is_write_action wa \\<and>\n                   (ad, al) \\<in> action_loc_aux P wa \\<and>\n                   value_written_aux P wa al = v;\n        v \\<in> w_values P vs0 (xs @ [x]) (ad, al)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>obs' wa obs''.\n                            xs @ [x] = obs' @ wa # obs'' \\<and>\n                            is_write_action wa \\<and>\n                            (ad, al) \\<in> action_loc_aux P wa \\<and>\n                            value_written_aux P wa al = v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al) \\<Longrightarrow>\n                \\<exists>obs' wa obs''.\n                   xs = obs' @ wa # obs'' \\<and>\n                   is_write_action wa \\<and>\n                   (ad, al) \\<in> action_loc_aux P wa \\<and>\n                   value_written_aux P wa al = v;\n        v \\<in> w_values P vs0 (xs @ [x]) (ad, al)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>obs' wa obs''.\n                            xs @ [x] = obs' @ wa # obs'' \\<and>\n                            is_write_action wa \\<and>\n                            (ad, al) \\<in> action_loc_aux P wa \\<and>\n                            value_written_aux P wa al = v", "case (snoc ob obs)"], ["proof (state)\nthis:\n  v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n  \\<exists>obs' wa obs''.\n     obs = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v\n  v \\<in> w_values P vs0 (obs @ [ob]) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al) \\<Longrightarrow>\n                \\<exists>obs' wa obs''.\n                   xs = obs' @ wa # obs'' \\<and>\n                   is_write_action wa \\<and>\n                   (ad, al) \\<in> action_loc_aux P wa \\<and>\n                   value_written_aux P wa al = v;\n        v \\<in> w_values P vs0 (xs @ [x]) (ad, al)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>obs' wa obs''.\n                            xs @ [x] = obs' @ wa # obs'' \\<and>\n                            is_write_action wa \\<and>\n                            (ad, al) \\<in> action_loc_aux P wa \\<and>\n                            value_written_aux P wa al = v", "from snoc.IH"], ["proof (chain)\npicking this:\n  v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n  \\<exists>obs' wa obs''.\n     obs = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n  \\<exists>obs' wa obs''.\n     obs = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       obs @ [ob] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "proof(cases \"v \\<in> w_values P vs0 obs (ad, al)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n             \\<exists>obs' wa obs''.\n                obs = obs' @ wa # obs'' \\<and>\n                is_write_action wa \\<and>\n                (ad, al) \\<in> action_loc_aux P wa \\<and>\n                value_written_aux P wa al = v;\n     v \\<in> w_values P vs0 obs (ad, al)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' wa obs''.\n                         obs @ [ob] = obs' @ wa # obs'' \\<and>\n                         is_write_action wa \\<and>\n                         (ad, al) \\<in> action_loc_aux P wa \\<and>\n                         value_written_aux P wa al = v\n 2. \\<lbrakk>v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n             \\<exists>obs' wa obs''.\n                obs = obs' @ wa # obs'' \\<and>\n                is_write_action wa \\<and>\n                (ad, al) \\<in> action_loc_aux P wa \\<and>\n                value_written_aux P wa al = v;\n     v \\<notin> w_values P vs0 obs (ad, al)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' wa obs''.\n                         obs @ [ob] = obs' @ wa # obs'' \\<and>\n                         is_write_action wa \\<and>\n                         (ad, al) \\<in> action_loc_aux P wa \\<and>\n                         value_written_aux P wa al = v", "case False"], ["proof (state)\nthis:\n  v \\<notin> w_values P vs0 obs (ad, al)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n             \\<exists>obs' wa obs''.\n                obs = obs' @ wa # obs'' \\<and>\n                is_write_action wa \\<and>\n                (ad, al) \\<in> action_loc_aux P wa \\<and>\n                value_written_aux P wa al = v;\n     v \\<in> w_values P vs0 obs (ad, al)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' wa obs''.\n                         obs @ [ob] = obs' @ wa # obs'' \\<and>\n                         is_write_action wa \\<and>\n                         (ad, al) \\<in> action_loc_aux P wa \\<and>\n                         value_written_aux P wa al = v\n 2. \\<lbrakk>v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n             \\<exists>obs' wa obs''.\n                obs = obs' @ wa # obs'' \\<and>\n                is_write_action wa \\<and>\n                (ad, al) \\<in> action_loc_aux P wa \\<and>\n                value_written_aux P wa al = v;\n     v \\<notin> w_values P vs0 obs (ad, al)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' wa obs''.\n                         obs @ [ob] = obs' @ wa # obs'' \\<and>\n                         is_write_action wa \\<and>\n                         (ad, al) \\<in> action_loc_aux P wa \\<and>\n                         value_written_aux P wa al = v", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> w_values P vs0 obs (ad, al)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       obs @ [ob] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "using \\<open>v \\<in> w_values P vs0 (obs @ [ob]) (ad, al)\\<close>"], ["proof (prove)\nusing this:\n  v \\<notin> w_values P vs0 obs (ad, al)\n  v \\<in> w_values P vs0 (obs @ [ob]) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' wa obs''.\n       obs @ [ob] = obs' @ wa # obs'' \\<and>\n       is_write_action wa \\<and>\n       (ad, al) \\<in> action_loc_aux P wa \\<and>\n       value_written_aux P wa al = v", "by(cases ob rule: w_value_cases)(auto 4 4 intro: action_loc_aux_intros split: if_split_asm simp add: addr_locs_def split: htype.split_asm)"], ["proof (state)\nthis:\n  \\<exists>obs' wa obs''.\n     obs @ [ob] = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> w_values P vs0 obs (ad, al) \\<Longrightarrow>\n             \\<exists>obs' wa obs''.\n                obs = obs' @ wa # obs'' \\<and>\n                is_write_action wa \\<and>\n                (ad, al) \\<in> action_loc_aux P wa \\<and>\n                value_written_aux P wa al = v;\n     v \\<in> w_values P vs0 obs (ad, al)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' wa obs''.\n                         obs @ [ob] = obs' @ wa # obs'' \\<and>\n                         is_write_action wa \\<and>\n                         (ad, al) \\<in> action_loc_aux P wa \\<and>\n                         value_written_aux P wa al = v", "qed fastforce"], ["proof (state)\nthis:\n  \\<exists>obs' wa obs''.\n     obs @ [ob] = obs' @ wa # obs'' \\<and>\n     is_write_action wa \\<and>\n     (ad, al) \\<in> action_loc_aux P wa \\<and> value_written_aux P wa al = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma w_values_WriteMemD:\n  assumes \"NormalAction (WriteMem ad al v) \\<in> set obs\"\n  shows \"v \\<in> w_values P vs0 obs (ad, al)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> w_values P vs0 obs (ad, al)", "using assms"], ["proof (prove)\nusing this:\n  NormalAction (WriteMem ad al v) \\<in> set obs\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P vs0 obs (ad, al)", "apply(induct obs rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. NormalAction (WriteMem ad al v) \\<in> set [] \\<Longrightarrow>\n    v \\<in> w_values P vs0 [] (ad, al)\n 2. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P vs0 (xs @ [x]) (ad, al)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P vs0 (xs @ [x]) (ad, al)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) = x \\<or>\n        NormalAction (WriteMem ad al v) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) = x\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 2. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>NormalAction (WriteMem ad al v)\n                \\<in> set xs \\<Longrightarrow>\n                v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)", "apply(case_tac x rule: w_value_cases)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x xs ada ala va.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (WriteMem ada ala va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 2. \\<And>x xs ada hT.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 3. \\<And>x xs ada M vs va.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (ExternalCall ada M vs va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 4. \\<And>x xs ada ala va.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (ReadMem ada ala va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 5. \\<And>x xs t.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (ThreadStart t)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 6. \\<And>x xs t.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (ThreadJoin t)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 7. \\<And>x xs ada.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (SyncLock ada)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 8. \\<And>x xs ada.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (SyncUnlock ada)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 9. \\<And>x xs t.\n       \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (WriteMem ad al v) \\<in> set xs;\n        x = NormalAction (ObsInterrupt t)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\n 10. \\<And>x xs t.\n        \\<lbrakk>v \\<in> w_values P vs0 xs (ad, al);\n         NormalAction (WriteMem ad al v) \\<in> set xs;\n         x = NormalAction (ObsInterrupted t)\\<rbrakk>\n        \\<Longrightarrow> v \\<in> w_value P (w_values P vs0 xs) x (ad, al)\nA total of 12 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma w_values_new_actionD:\n  assumes \"NormalAction (NewHeapElem ad hT) \\<in> set obs\" \"(ad, al) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\"\n  shows \"addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al)", "using assms"], ["proof (prove)\nusing this:\n  NormalAction (NewHeapElem ad hT) \\<in> set obs\n  (ad, al) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\n\ngoal (1 subgoal):\n 1. addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al)", "apply(induct obs rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>NormalAction (NewHeapElem ad hT) \\<in> set [];\n     (ad, al)\n     \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\\<rbrakk>\n    \\<Longrightarrow> addr_loc_default P hT al\n                      \\<in> w_values P vs0 [] (ad, al)\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>NormalAction (NewHeapElem ad hT) \\<in> set xs;\n                 (ad, al)\n                 \\<in> action_loc_aux P\n                        (NormalAction (NewHeapElem ad hT))\\<rbrakk>\n                \\<Longrightarrow> addr_loc_default P hT al\n                                  \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (NewHeapElem ad hT) \\<in> set (xs @ [x]);\n        (ad, al)\n        \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_values P vs0 (xs @ [x]) (ad, al)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>NormalAction (NewHeapElem ad hT) \\<in> set xs;\n                 (ad, al)\n                 \\<in> action_loc_aux P\n                        (NormalAction (NewHeapElem ad hT))\\<rbrakk>\n                \\<Longrightarrow> addr_loc_default P hT al\n                                  \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (NewHeapElem ad hT) \\<in> set (xs @ [x]);\n        (ad, al)\n        \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_values P vs0 (xs @ [x]) (ad, al)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set xs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 xs (ad, al);\n        NormalAction (NewHeapElem ad hT) = x \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set xs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'))\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 xs) x (ad, al)", "apply(rename_tac w' obs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w' obs.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'))\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)", "apply(case_tac w' rule: w_value_cases)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>w' obs ada ala v.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (WriteMem ada ala v)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 2. \\<And>w' obs ada hTa.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (NewHeapElem ada hTa)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 3. \\<And>w' obs ada M vs v.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (ExternalCall ada M vs v)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 4. \\<And>w' obs ada ala v.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (ReadMem ada ala v)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 5. \\<And>w' obs t.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (ThreadStart t)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 6. \\<And>w' obs t.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (ThreadJoin t)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 7. \\<And>w' obs ada.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (SyncLock ada)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 8. \\<And>w' obs ada.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (SyncUnlock ada)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 9. \\<And>w' obs t.\n       \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                \\<in> set obs \\<Longrightarrow>\n                addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n        NormalAction (NewHeapElem ad hT) = w' \\<or>\n        NormalAction (NewHeapElem ad hT) \\<in> set obs;\n        (\\<exists>D F.\n            al = CField D F \\<and>\n            (\\<exists>T fm.\n                P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n        (\\<exists>n.\n            al = ACell n \\<and>\n            (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n        w' = NormalAction (ObsInterrupt t)\\<rbrakk>\n       \\<Longrightarrow> addr_loc_default P hT al\n                         \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\n 10. \\<And>w' obs t.\n        \\<lbrakk>NormalAction (NewHeapElem ad hT)\n                 \\<in> set obs \\<Longrightarrow>\n                 addr_loc_default P hT al \\<in> w_values P vs0 obs (ad, al);\n         NormalAction (NewHeapElem ad hT) = w' \\<or>\n         NormalAction (NewHeapElem ad hT) \\<in> set obs;\n         (\\<exists>D F.\n             al = CField D F \\<and>\n             (\\<exists>T fm.\n                 P \\<turnstile> class_type_of hT has F:T (fm) in D)) \\<or>\n         (\\<exists>n.\n             al = ACell n \\<and>\n             (\\<exists>T n'. hT = Array_type T n' \\<and> n < n'));\n         w' = NormalAction (ObsInterrupted t)\\<rbrakk>\n        \\<Longrightarrow> addr_loc_default P hT al\n                          \\<in> w_value P (w_values P vs0 obs) w' (ad, al)\nA total of 12 subgoals...", "apply(auto simp add: split_beta)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma w_value_mono: \"vs0 adal \\<subseteq> w_value P vs0 ob adal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs0 adal \\<subseteq> w_value P vs0 ob adal", "by(cases ob rule: w_value_cases)(auto split: if_split_asm simp add: split_beta)"], ["", "lemma w_values_mono: \"vs0 adal \\<subseteq> w_values P vs0 obs adal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs0 adal \\<subseteq> w_values P vs0 obs adal", "by(induct obs rule: rev_induct)(auto del: subsetI intro: w_value_mono subset_trans)"], ["", "lemma w_value_greater: \"vs0 \\<le> w_value P vs0 ob\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs0 \\<le> w_value P vs0 ob", "by(rule le_funI)(rule w_value_mono)"], ["", "lemma w_values_greater: \"vs0 \\<le> w_values P vs0 obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs0 \\<le> w_values P vs0 obs", "by(rule le_funI)(rule w_values_mono)"], ["", "lemma w_values_eq_emptyD:\n  assumes \"w_values P vs0 obs adal = {}\"\n  and \"w \\<in> set obs\" and \"is_write_action w\" and \"adal \\<in> action_loc_aux P w\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms(4) assms(1-3)"], ["proof (prove)\nusing this:\n  adal \\<in> action_loc_aux P w\n  w_values P vs0 obs adal = {}\n  w \\<in> set obs\n  is_write_action w\n\ngoal (1 subgoal):\n 1. False", "apply(cases rule: action_loc_aux_cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>hT F T fm D ad.\n       \\<lbrakk>w_values P vs0 obs adal = {}; w \\<in> set obs;\n        is_write_action w; w = NormalAction (NewHeapElem ad hT);\n        adal = (ad, CField D F);\n        P \\<turnstile> class_type_of hT has F:T (fm) in D\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n n' ad T.\n       \\<lbrakk>w_values P vs0 obs adal = {}; w \\<in> set obs;\n        is_write_action w;\n        w = NormalAction (NewHeapElem ad (Array_type T n'));\n        adal = (ad, ACell n); n < n'\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad al v.\n       \\<lbrakk>w_values P vs0 obs adal = {}; w \\<in> set obs;\n        is_write_action w; w = NormalAction (WriteMem ad al v);\n        adal = (ad, al)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>ad al v.\n       \\<lbrakk>w_values P vs0 obs adal = {}; w \\<in> set obs;\n        is_write_action w; w = NormalAction (ReadMem ad al v);\n        adal = (ad, al)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto dest!: w_values_new_actionD[where ?vs0.0=vs0 and P=P] w_values_WriteMemD[where ?vs0.0=vs0 and P=P])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>hT F T fm D ad.\n       \\<lbrakk>w_values P vs0 obs (ad, CField D F) = {};\n        w = NormalAction (NewHeapElem ad hT); adal = (ad, CField D F);\n        P \\<turnstile> class_type_of hT has F:T (fm) in D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T fm.\n                            P \\<turnstile> class_type_of\n      hT has F:T (fm) in D", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Coinductive version of non-speculative prefixes\\<close>"], ["", "coinductive non_speculative :: \n  \"'m prog \\<Rightarrow> ('addr \\<times> addr_loc \\<Rightarrow> 'addr val set) \\<Rightarrow> ('addr, 'thread_id) obs_event action llist \\<Rightarrow> bool\"\nfor P :: \"'m prog\" \nwhere\n  LNil: \"non_speculative P vs LNil\"\n| LCons:\n  \"\\<lbrakk> case ob of NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al) | _ \\<Rightarrow> True;\n     non_speculative P (w_value P vs ob) obs \\<rbrakk> \n  \\<Longrightarrow> non_speculative P vs (LCons ob obs)\""], ["", "inductive_simps non_speculative_simps [simp]:\n  \"non_speculative P vs LNil\"\n  \"non_speculative P vs (LCons ob obs)\""], ["", "lemma non_speculative_lappend:\n  assumes \"lfinite obs\"\n  shows \"non_speculative P vs (lappend obs obs') \\<longleftrightarrow>\n         non_speculative P vs obs \\<and> non_speculative P (w_values P vs (list_of obs)) obs'\"\n  (is \"?concl vs obs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P vs (lappend obs obs') =\n    (non_speculative P vs obs \\<and>\n     non_speculative P (w_values P vs (list_of obs)) obs')", "using assms"], ["proof (prove)\nusing this:\n  lfinite obs\n\ngoal (1 subgoal):\n 1. non_speculative P vs (lappend obs obs') =\n    (non_speculative P vs obs \\<and>\n     non_speculative P (w_values P vs (list_of obs)) obs')", "proof(induct arbitrary: vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs.\n       non_speculative P vs (lappend LNil obs') =\n       (non_speculative P vs LNil \\<and>\n        non_speculative P (w_values P vs (list_of LNil)) obs')\n 2. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "case lfinite_LNil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>vs.\n       non_speculative P vs (lappend LNil obs') =\n       (non_speculative P vs LNil \\<and>\n        non_speculative P (w_values P vs (list_of LNil)) obs')\n 2. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P vs (lappend LNil obs') =\n    (non_speculative P vs LNil \\<and>\n     non_speculative P (w_values P vs (list_of LNil)) obs')", "by simp"], ["proof (state)\nthis:\n  non_speculative P vs (lappend LNil obs') =\n  (non_speculative P vs LNil \\<and>\n   non_speculative P (w_values P vs (list_of LNil)) obs')\n\ngoal (1 subgoal):\n 1. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "case (lfinite_LConsI obs ob)"], ["proof (state)\nthis:\n  lfinite obs\n  non_speculative P ?vs (lappend obs obs') =\n  (non_speculative P ?vs obs \\<and>\n   non_speculative P (w_values P ?vs (list_of obs)) obs')\n\ngoal (1 subgoal):\n 1. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "have \"?concl (w_value P vs ob) obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (lappend obs obs') =\n    (non_speculative P (w_value P vs ob) obs \\<and>\n     non_speculative P (w_values P (w_value P vs ob) (list_of obs)) obs')", "by fact"], ["proof (state)\nthis:\n  non_speculative P (w_value P vs ob) (lappend obs obs') =\n  (non_speculative P (w_value P vs ob) obs \\<and>\n   non_speculative P (w_values P (w_value P vs ob) (list_of obs)) obs')\n\ngoal (1 subgoal):\n 1. \\<And>xs x vs.\n       \\<lbrakk>lfinite xs;\n        \\<And>vs.\n           non_speculative P vs (lappend xs obs') =\n           (non_speculative P vs xs \\<and>\n            non_speculative P (w_values P vs (list_of xs)) obs')\\<rbrakk>\n       \\<Longrightarrow> non_speculative P vs (lappend (LCons x xs) obs') =\n                         (non_speculative P vs (LCons x xs) \\<and>\n                          non_speculative P\n                           (w_values P vs (list_of (LCons x xs))) obs')", "thus ?case"], ["proof (prove)\nusing this:\n  non_speculative P (w_value P vs ob) (lappend obs obs') =\n  (non_speculative P (w_value P vs ob) obs \\<and>\n   non_speculative P (w_values P (w_value P vs ob) (list_of obs)) obs')\n\ngoal (1 subgoal):\n 1. non_speculative P vs (lappend (LCons ob obs) obs') =\n    (non_speculative P vs (LCons ob obs) \\<and>\n     non_speculative P (w_values P vs (list_of (LCons ob obs))) obs')", "using \\<open>lfinite obs\\<close>"], ["proof (prove)\nusing this:\n  non_speculative P (w_value P vs ob) (lappend obs obs') =\n  (non_speculative P (w_value P vs ob) obs \\<and>\n   non_speculative P (w_values P (w_value P vs ob) (list_of obs)) obs')\n  lfinite obs\n\ngoal (1 subgoal):\n 1. non_speculative P vs (lappend (LCons ob obs) obs') =\n    (non_speculative P vs (LCons ob obs) \\<and>\n     non_speculative P (w_values P vs (list_of (LCons ob obs))) obs')", "by simp"], ["proof (state)\nthis:\n  non_speculative P vs (lappend (LCons ob obs) obs') =\n  (non_speculative P vs (LCons ob obs) \\<and>\n   non_speculative P (w_values P vs (list_of (LCons ob obs))) obs')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  assumes \"non_speculative P vs obs\"\n  shows non_speculative_ltake: \"non_speculative P vs (ltake n obs)\" (is ?thesis1)\n  and non_speculative_ldrop: \"non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)\" (is ?thesis2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P vs (ltake n obs) &&&\n    non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. non_speculative P vs (ltake n obs)\n 2. non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "note assms"], ["proof (state)\nthis:\n  non_speculative P vs obs\n\ngoal (2 subgoals):\n 1. non_speculative P vs (ltake n obs)\n 2. non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "also"], ["proof (state)\nthis:\n  non_speculative P vs obs\n\ngoal (2 subgoals):\n 1. non_speculative P vs (ltake n obs)\n 2. non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "have \"obs = lappend (ltake n obs) (ldrop n obs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs = lappend (ltake n obs) (ldrop n obs)", "by(simp add: lappend_ltake_ldrop)"], ["proof (state)\nthis:\n  obs = lappend (ltake n obs) (ldrop n obs)\n\ngoal (2 subgoals):\n 1. non_speculative P vs (ltake n obs)\n 2. non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "finally"], ["proof (chain)\npicking this:\n  non_speculative P vs (lappend (ltake n obs) (ldrop n obs))", "have \"?thesis1 \\<and> ?thesis2\""], ["proof (prove)\nusing this:\n  non_speculative P vs (lappend (ltake n obs) (ldrop n obs))\n\ngoal (1 subgoal):\n 1. non_speculative P vs (ltake n obs) \\<and>\n    non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "by(cases n)(simp_all add: non_speculative_lappend del: lappend_ltake_enat_ldropn)"], ["proof (state)\nthis:\n  non_speculative P vs (ltake n obs) \\<and>\n  non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)\n\ngoal (2 subgoals):\n 1. non_speculative P vs (ltake n obs)\n 2. non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "thus ?thesis1 ?thesis2"], ["proof (prove)\nusing this:\n  non_speculative P vs (ltake n obs) \\<and>\n  non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)\n\ngoal (1 subgoal):\n 1. non_speculative P vs (ltake n obs) &&&\n    non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)", "by blast+"], ["proof (state)\nthis:\n  non_speculative P vs (ltake n obs)\n  non_speculative P (w_values P vs (list_of (ltake n obs))) (ldrop n obs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma non_speculative_coinduct_append [consumes 1, case_names non_speculative, case_conclusion non_speculative LNil lappend]:\n  assumes major: \"X vs obs\"\n  and step: \"\\<And>vs obs. X vs obs \n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs''. obs = lappend obs' obs'' \\<and> obs' \\<noteq> LNil \\<and> non_speculative P vs obs' \\<and>\n                    (lfinite obs' \\<longrightarrow> (X (w_values P vs (list_of obs')) obs'' \\<or> \n                                       non_speculative P (w_values P vs (list_of obs')) obs'')))\"\n    (is \"\\<And>vs obs. _ \\<Longrightarrow> _ \\<or> ?step vs obs\")\n  shows \"non_speculative P vs obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "from major"], ["proof (chain)\npicking this:\n  X vs obs", "have \"\\<exists>obs' obs''. obs = lappend (llist_of obs') obs'' \\<and> non_speculative P vs (llist_of obs') \\<and> \n                     X (w_values P vs obs') obs''\""], ["proof (prove)\nusing this:\n  X vs obs\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''.\n       obs = lappend (llist_of obs') obs'' \\<and>\n       non_speculative P vs (llist_of obs') \\<and>\n       X (w_values P vs obs') obs''", "by(auto intro: exI[where x=\"[]\"])"], ["proof (state)\nthis:\n  \\<exists>obs' obs''.\n     obs = lappend (llist_of obs') obs'' \\<and>\n     non_speculative P vs (llist_of obs') \\<and>\n     X (w_values P vs obs') obs''\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>obs' obs''.\n     obs = lappend (llist_of obs') obs'' \\<and>\n     non_speculative P vs (llist_of obs') \\<and>\n     X (w_values P vs obs') obs''\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>obs' obs''.\n          x2 = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P x1 (llist_of obs') \\<and>\n          X (w_values P x1 obs') obs'' \\<Longrightarrow>\n       (\\<exists>vs. x1 = vs \\<and> x2 = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           x1 = vs \\<and>\n           x2 = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "case (non_speculative vs obs)"], ["proof (state)\nthis:\n  \\<exists>obs' obs''.\n     obs = lappend (llist_of obs') obs'' \\<and>\n     non_speculative P vs (llist_of obs') \\<and>\n     X (w_values P vs obs') obs''\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>obs' obs''.\n          x2 = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P x1 (llist_of obs') \\<and>\n          X (w_values P x1 obs') obs'' \\<Longrightarrow>\n       (\\<exists>vs. x1 = vs \\<and> x2 = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           x1 = vs \\<and>\n           x2 = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "then"], ["proof (chain)\npicking this:\n  \\<exists>obs' obs''.\n     obs = lappend (llist_of obs') obs'' \\<and>\n     non_speculative P vs (llist_of obs') \\<and>\n     X (w_values P vs obs') obs''", "obtain obs' obs'' \n      where obs: \"obs = lappend (llist_of obs') obs''\"\n      and sc_obs': \"non_speculative P vs (llist_of obs')\"\n      and X: \"X (w_values P vs obs') obs''\""], ["proof (prove)\nusing this:\n  \\<exists>obs' obs''.\n     obs = lappend (llist_of obs') obs'' \\<and>\n     non_speculative P vs (llist_of obs') \\<and>\n     X (w_values P vs obs') obs''\n\ngoal (1 subgoal):\n 1. (\\<And>obs' obs''.\n        \\<lbrakk>obs = lappend (llist_of obs') obs'';\n         non_speculative P vs (llist_of obs');\n         X (w_values P vs obs') obs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs = lappend (llist_of obs') obs''\n  non_speculative P vs (llist_of obs')\n  X (w_values P vs obs') obs''\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>obs' obs''.\n          x2 = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P x1 (llist_of obs') \\<and>\n          X (w_values P x1 obs') obs'' \\<Longrightarrow>\n       (\\<exists>vs. x1 = vs \\<and> x2 = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           x1 = vs \\<and>\n           x2 = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "proof(cases obs')"], ["proof (state)\ngoal (2 subgoals):\n 1. obs' = [] \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "case Nil"], ["proof (state)\nthis:\n  obs' = []\n\ngoal (2 subgoals):\n 1. obs' = [] \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "with X"], ["proof (chain)\npicking this:\n  X (w_values P vs obs') obs''\n  obs' = []", "have \"X vs obs''\""], ["proof (prove)\nusing this:\n  X (w_values P vs obs') obs''\n  obs' = []\n\ngoal (1 subgoal):\n 1. X vs obs''", "by simp"], ["proof (state)\nthis:\n  X vs obs''\n\ngoal (2 subgoals):\n 1. obs' = [] \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "from step[OF this]"], ["proof (chain)\npicking this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs' obs''a.\n      obs'' = lappend obs' obs''a \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (w_values P vs (list_of obs')) obs''a \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''a))", "show ?thesis"], ["proof (prove)\nusing this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs' obs''a.\n      obs'' = lappend obs' obs''a \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (w_values P vs (list_of obs')) obs''a \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''a))\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "assume \"obs'' = LNil\""], ["proof (state)\nthis:\n  obs'' = LNil\n\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "with Nil obs"], ["proof (chain)\npicking this:\n  obs' = []\n  obs = lappend (llist_of obs') obs''\n  obs'' = LNil", "show ?thesis"], ["proof (prove)\nusing this:\n  obs' = []\n  obs = lappend (llist_of obs') obs''\n  obs'' = LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "assume \"?step vs obs''\""], ["proof (state)\nthis:\n  \\<exists>obs' obs''a.\n     obs'' = lappend obs' obs''a \\<and>\n     obs' \\<noteq> LNil \\<and>\n     non_speculative P vs obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs''a \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "then"], ["proof (chain)\npicking this:\n  \\<exists>obs' obs''a.\n     obs'' = lappend obs' obs''a \\<and>\n     obs' \\<noteq> LNil \\<and>\n     non_speculative P vs obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs''a \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs''a)", "obtain obs''' obs'''' \n          where obs'': \"obs'' = lappend obs''' obs''''\" and \"obs''' \\<noteq> LNil\"\n          and sc_obs''': \"non_speculative P vs obs'''\" \n          and fin: \"lfinite obs''' \\<Longrightarrow> X (w_values P vs (list_of obs''')) obs'''' \\<or>\n                                      non_speculative P (w_values P vs (list_of obs''')) obs''''\""], ["proof (prove)\nusing this:\n  \\<exists>obs' obs''a.\n     obs'' = lappend obs' obs''a \\<and>\n     obs' \\<noteq> LNil \\<and>\n     non_speculative P vs obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs''a \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs''a)\n\ngoal (1 subgoal):\n 1. (\\<And>obs''' obs''''.\n        \\<lbrakk>obs'' = lappend obs''' obs''''; obs''' \\<noteq> LNil;\n         non_speculative P vs obs''';\n         lfinite obs''' \\<Longrightarrow>\n         X (w_values P vs (list_of obs''')) obs'''' \\<or>\n         non_speculative P (w_values P vs (list_of obs''')) obs''''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs'' = lappend obs''' obs''''\n  obs''' \\<noteq> LNil\n  non_speculative P vs obs'''\n  lfinite obs''' \\<Longrightarrow>\n  X (w_values P vs (list_of obs''')) obs'''' \\<or>\n  non_speculative P (w_values P vs (list_of obs''')) obs''''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "from \\<open>obs''' \\<noteq> LNil\\<close>"], ["proof (chain)\npicking this:\n  obs''' \\<noteq> LNil", "obtain ob obs''''' where obs''': \"obs''' = LCons ob obs'''''\""], ["proof (prove)\nusing this:\n  obs''' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. (\\<And>ob obs'''''.\n        obs''' = LCons ob obs''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding neq_LNil_conv"], ["proof (prove)\nusing this:\n  \\<exists>x xs'. obs''' = LCons x xs'\n\ngoal (1 subgoal):\n 1. (\\<And>ob obs'''''.\n        obs''' = LCons ob obs''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "with Nil obs'' obs"], ["proof (chain)\npicking this:\n  obs' = []\n  obs'' = lappend obs''' obs''''\n  obs = lappend (llist_of obs') obs''\n  obs''' = LCons ob obs'''''", "have concl1: \"obs = LCons ob (lappend obs''''' obs'''')\""], ["proof (prove)\nusing this:\n  obs' = []\n  obs'' = lappend obs''' obs''''\n  obs = lappend (llist_of obs') obs''\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. obs = LCons ob (lappend obs''''' obs'''')", "by simp"], ["proof (state)\nthis:\n  obs = LCons ob (lappend obs''''' obs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "have concl2: \"case ob of NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al) | _ \\<Rightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case ob of\n    NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n    | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True", "using sc_obs''' obs'''"], ["proof (prove)\nusing this:\n  non_speculative P vs obs'''\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. case ob of\n    NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n    | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True", "by simp"], ["proof (state)\nthis:\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''a.\n       obs'' = lappend obs' obs''a \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs''a \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs''a) \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "proof(cases \"lfinite obs'''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<not> lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "case False"], ["proof (state)\nthis:\n  \\<not> lfinite obs'''\n\ngoal (2 subgoals):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<not> lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "hence \"lappend obs''''' obs'''' = obs'''''\""], ["proof (prove)\nusing this:\n  \\<not> lfinite obs'''\n\ngoal (1 subgoal):\n 1. lappend obs''''' obs'''' = obs'''''", "using obs'''"], ["proof (prove)\nusing this:\n  \\<not> lfinite obs'''\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. lappend obs''''' obs'''' = obs'''''", "by(simp add: lappend_inf)"], ["proof (state)\nthis:\n  lappend obs''''' obs'''' = obs'''''\n\ngoal (2 subgoals):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<not> lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "hence \"non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\""], ["proof (prove)\nusing this:\n  lappend obs''''' obs'''' = obs'''''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')", "using sc_obs''' obs'''"], ["proof (prove)\nusing this:\n  lappend obs''''' obs'''' = obs'''''\n  non_speculative P vs obs'''\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')", "by simp"], ["proof (state)\nthis:\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\n\ngoal (2 subgoals):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<not> lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "with concl1 concl2"], ["proof (chain)\npicking this:\n  obs = LCons ob (lappend obs''''' obs'''')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')", "have ?LCons"], ["proof (prove)\nusing this:\n  obs = LCons ob (lappend obs''''' obs'''')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (2 subgoals):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<not> lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal (1 subgoal):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "case True"], ["proof (state)\nthis:\n  lfinite obs'''\n\ngoal (1 subgoal):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "with obs'''"], ["proof (chain)\npicking this:\n  obs''' = LCons ob obs'''''\n  lfinite obs'''", "obtain obs'''''' where obs''''': \"obs''''' = llist_of obs''''''\""], ["proof (prove)\nusing this:\n  obs''' = LCons ob obs'''''\n  lfinite obs'''\n\ngoal (1 subgoal):\n 1. (\\<And>obs''''''.\n        obs''''' = llist_of obs'''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp(auto simp add: lfinite_eq_range_llist_of)"], ["proof (state)\nthis:\n  obs''''' = llist_of obs''''''\n\ngoal (1 subgoal):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "from fin[OF True]"], ["proof (chain)\npicking this:\n  X (w_values P vs (list_of obs''')) obs'''' \\<or>\n  non_speculative P (w_values P vs (list_of obs''')) obs''''", "have \"?LCons\""], ["proof (prove)\nusing this:\n  X (w_values P vs (list_of obs''')) obs'''' \\<or>\n  non_speculative P (w_values P vs (list_of obs''')) obs''''\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "assume X: \"X (w_values P vs (list_of obs''')) obs''''\""], ["proof (state)\nthis:\n  X (w_values P vs (list_of obs''')) obs''''\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "hence \"X (w_values P (w_value P vs ob) obs'''''') obs''''\""], ["proof (prove)\nusing this:\n  X (w_values P vs (list_of obs''')) obs''''\n\ngoal (1 subgoal):\n 1. X (w_values P (w_value P vs ob) obs'''''') obs''''", "using obs''''' obs'''"], ["proof (prove)\nusing this:\n  X (w_values P vs (list_of obs''')) obs''''\n  obs''''' = llist_of obs''''''\n  obs''' = LCons ob obs'''''\n\ngoal (1 subgoal):\n 1. X (w_values P (w_value P vs ob) obs'''''') obs''''", "by simp"], ["proof (state)\nthis:\n  X (w_values P (w_value P vs ob) obs'''''') obs''''\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "moreover"], ["proof (state)\nthis:\n  X (w_values P (w_value P vs ob) obs'''''') obs''''\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "from obs'''''"], ["proof (chain)\npicking this:\n  obs''''' = llist_of obs''''''", "have \"lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\""], ["proof (prove)\nusing this:\n  obs''''' = llist_of obs''''''\n\ngoal (1 subgoal):\n 1. lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''", "by simp"], ["proof (state)\nthis:\n  lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "moreover"], ["proof (state)\nthis:\n  lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "have \"non_speculative P (w_value P vs ob) (llist_of obs'''''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (llist_of obs'''''')", "using sc_obs''' obs''' obs'''''"], ["proof (prove)\nusing this:\n  non_speculative P vs obs'''\n  obs''' = LCons ob obs'''''\n  obs''''' = llist_of obs''''''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (llist_of obs'''''')", "by simp"], ["proof (state)\nthis:\n  non_speculative P (w_value P vs ob) (llist_of obs'''''')\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs''')) obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)\n 2. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "ultimately"], ["proof (chain)\npicking this:\n  X (w_values P (w_value P vs ob) obs'''''') obs''''\n  lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\n  non_speculative P (w_value P vs ob) (llist_of obs'''''')", "show ?thesis"], ["proof (prove)\nusing this:\n  X (w_values P (w_value P vs ob) obs'''''') obs''''\n  lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\n  non_speculative P (w_value P vs ob) (llist_of obs'''''')\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "using concl1 concl2"], ["proof (prove)\nusing this:\n  X (w_values P (w_value P vs ob) obs'''''') obs''''\n  lappend obs''''' obs'''' = lappend (llist_of obs'''''') obs''''\n  non_speculative P (w_value P vs ob) (llist_of obs'''''')\n  obs = LCons ob (lappend obs''''' obs'''')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "assume \"non_speculative P (w_values P vs (list_of obs''')) obs''''\""], ["proof (state)\nthis:\n  non_speculative P (w_values P vs (list_of obs''')) obs''''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "with sc_obs''' obs''''' obs'''"], ["proof (chain)\npicking this:\n  non_speculative P vs obs'''\n  obs''''' = llist_of obs''''''\n  obs''' = LCons ob obs'''''\n  non_speculative P (w_values P vs (list_of obs''')) obs''''", "have \"non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\""], ["proof (prove)\nusing this:\n  non_speculative P vs obs'''\n  obs''''' = llist_of obs''''''\n  obs''' = LCons ob obs'''''\n  non_speculative P (w_values P vs (list_of obs''')) obs''''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')", "by(simp add: non_speculative_lappend)"], ["proof (state)\nthis:\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs'''))\n     obs'''' \\<Longrightarrow>\n    \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "with concl1 concl2"], ["proof (chain)\npicking this:\n  obs = LCons ob (lappend obs''''' obs'''')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')", "show ?thesis"], ["proof (prove)\nusing this:\n  obs = LCons ob (lappend obs''''' obs'''')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (lappend obs''''' obs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs' obs''.\n            obs = lappend (llist_of obs') obs'' \\<and>\n            non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n            X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n        non_speculative P (w_value P vs ob) obs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. lfinite obs''' \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs' obs''.\n          obs = lappend (llist_of obs') obs'' \\<and>\n          non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n          X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "case (Cons ob obs''')"], ["proof (state)\nthis:\n  obs' = ob # obs'''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "hence \"obs = LCons ob (lappend (llist_of obs''') obs'')\""], ["proof (prove)\nusing this:\n  obs' = ob # obs'''\n\ngoal (1 subgoal):\n 1. obs = LCons ob (lappend (llist_of obs''') obs'')", "using obs"], ["proof (prove)\nusing this:\n  obs' = ob # obs'''\n  obs = lappend (llist_of obs') obs''\n\ngoal (1 subgoal):\n 1. obs = LCons ob (lappend (llist_of obs''') obs'')", "by simp"], ["proof (state)\nthis:\n  obs = LCons ob (lappend (llist_of obs''') obs'')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "moreover"], ["proof (state)\nthis:\n  obs = LCons ob (lappend (llist_of obs''') obs'')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "from sc_obs' Cons"], ["proof (chain)\npicking this:\n  non_speculative P vs (llist_of obs')\n  obs' = ob # obs'''", "have \"case ob of NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al) | _ \\<Rightarrow> True\"\n        and \"non_speculative P (w_value P vs ob) (llist_of obs''')\""], ["proof (prove)\nusing this:\n  non_speculative P vs (llist_of obs')\n  obs' = ob # obs'''\n\ngoal (1 subgoal):\n 1. case ob of\n    NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n    | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True &&&\n    non_speculative P (w_value P vs ob) (llist_of obs''')", "by simp_all"], ["proof (state)\nthis:\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (llist_of obs''')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "moreover"], ["proof (state)\nthis:\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (llist_of obs''')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "from X Cons"], ["proof (chain)\npicking this:\n  X (w_values P vs obs') obs''\n  obs' = ob # obs'''", "have \"X (w_values P (w_value P vs ob) obs''') obs''\""], ["proof (prove)\nusing this:\n  X (w_values P vs obs') obs''\n  obs' = ob # obs'''\n\ngoal (1 subgoal):\n 1. X (w_values P (w_value P vs ob) obs''') obs''", "by simp"], ["proof (state)\nthis:\n  X (w_values P (w_value P vs ob) obs''') obs''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       obs' = a # list \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs' obs''.\n                obs = lappend (llist_of obs') obs'' \\<and>\n                non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n                X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n            non_speculative P (w_value P vs ob) obs))", "ultimately"], ["proof (chain)\npicking this:\n  obs = LCons ob (lappend (llist_of obs''') obs'')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (llist_of obs''')\n  X (w_values P (w_value P vs ob) obs''') obs''", "show ?thesis"], ["proof (prove)\nusing this:\n  obs = LCons ob (lappend (llist_of obs''') obs'')\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  non_speculative P (w_value P vs ob) (llist_of obs''')\n  X (w_values P (w_value P vs ob) obs''') obs''\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs' obs''.\n             obs = lappend (llist_of obs') obs'' \\<and>\n             non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n             X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n         non_speculative P (w_value P vs ob) obs))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs' obs''.\n           obs = lappend (llist_of obs') obs'' \\<and>\n           non_speculative P (w_value P vs ob) (llist_of obs') \\<and>\n           X (w_values P (w_value P vs ob) obs') obs'') \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_speculative P vs obs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma non_speculative_coinduct_append_wf\n  [consumes 2, case_names non_speculative, case_conclusion non_speculative LNil lappend]:\n  assumes major: \"X vs obs a\"\n  and wf: \"wf R\"\n  and step: \"\\<And>vs obs a. X vs obs a\n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'. obs = lappend obs' obs'' \\<and> non_speculative P vs obs' \\<and> (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n                        (lfinite obs' \\<longrightarrow> X (w_values P vs (list_of obs')) obs'' a' \\<or>\n                                          non_speculative P (w_values P vs (list_of obs')) obs''))\"\n    (is \"\\<And>vs obs a. _ \\<Longrightarrow> _ \\<or> ?step vs obs a\")\n  shows \"non_speculative P vs obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "fix vs obs a"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "assume \"X vs obs a\""], ["proof (state)\nthis:\n  X vs obs a\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "with wf"], ["proof (chain)\npicking this:\n  wf R\n  X vs obs a", "have \"obs = LNil \\<or> (\\<exists>obs' obs''. obs = lappend obs' obs'' \\<and> obs' \\<noteq> LNil \\<and> non_speculative P vs obs' \\<and>\n          (lfinite obs' \\<longrightarrow> (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or> \n                            non_speculative P (w_values P vs (list_of obs')) obs''))\"\n      (is \"_ \\<or> ?step_concl vs obs\")"], ["proof (prove)\nusing this:\n  wf R\n  X vs obs a\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "proof(induct a arbitrary: vs obs rule: wf_induct[consumes 1, case_names wf])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x vs obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           non_speculative P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (w_values P x (list_of obs')) obs'') \\<or>\n                            non_speculative P (w_values P x (list_of obs'))\n                             obs'')));\n        X vs obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             non_speculative P vs obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (w_values P vs (list_of obs'))\n                                   obs'') \\<or>\n                              non_speculative P\n                               (w_values P vs (list_of obs')) obs''))", "case (wf a)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, a) \\<in> R \\<longrightarrow>\n     (\\<forall>x xa.\n         X x xa y \\<longrightarrow>\n         xa = LNil \\<or>\n         (\\<exists>obs' obs''.\n             xa = lappend obs' obs'' \\<and>\n             obs' \\<noteq> LNil \\<and>\n             non_speculative P x obs' \\<and>\n             (lfinite obs' \\<longrightarrow>\n              (\\<exists>a. X (w_values P x (list_of obs')) obs'' a) \\<or>\n              non_speculative P (w_values P x (list_of obs')) obs'')))\n  X vs obs a\n\ngoal (1 subgoal):\n 1. \\<And>x vs obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           non_speculative P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (w_values P x (list_of obs')) obs'') \\<or>\n                            non_speculative P (w_values P x (list_of obs'))\n                             obs'')));\n        X vs obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             non_speculative P vs obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (w_values P vs (list_of obs'))\n                                   obs'') \\<or>\n                              non_speculative P\n                               (w_values P vs (list_of obs')) obs''))", "note IH = wf.hyps[rule_format]"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, a) \\<in> R; X ?x ?xa ?y\\<rbrakk>\n  \\<Longrightarrow> ?xa = LNil \\<or>\n                    (\\<exists>obs' obs''.\n                        ?xa = lappend obs' obs'' \\<and>\n                        obs' \\<noteq> LNil \\<and>\n                        non_speculative P ?x obs' \\<and>\n                        (lfinite obs' \\<longrightarrow>\n                         Ex (X (w_values P ?x (list_of obs')) obs'') \\<or>\n                         non_speculative P (w_values P ?x (list_of obs'))\n                          obs''))\n\ngoal (1 subgoal):\n 1. \\<And>x vs obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           non_speculative P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (w_values P x (list_of obs')) obs'') \\<or>\n                            non_speculative P (w_values P x (list_of obs'))\n                             obs'')));\n        X vs obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             non_speculative P vs obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (w_values P vs (list_of obs'))\n                                   obs'') \\<or>\n                              non_speculative P\n                               (w_values P vs (list_of obs')) obs''))", "from step[OF \\<open>X vs obs a\\<close>]"], ["proof (chain)\npicking this:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      non_speculative P vs obs' \\<and>\n      (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (w_values P vs (list_of obs')) obs'' a' \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))", "show ?case"], ["proof (prove)\nusing this:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      non_speculative P vs obs' \\<and>\n      (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (w_values P vs (list_of obs')) obs'' a' \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume \"obs = LNil\""], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume \"?step vs obs a\""], ["proof (state)\nthis:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     non_speculative P vs obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs'' a' \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs'')\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "then"], ["proof (chain)\npicking this:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     non_speculative P vs obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs'' a' \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs'')", "obtain obs' obs'' a'\n          where obs: \"obs = lappend obs' obs''\"\n          and sc_obs': \"non_speculative P vs obs'\"\n          and decr: \"obs' = LNil \\<Longrightarrow> (a', a) \\<in> R\"\n          and fin: \"lfinite obs' \\<Longrightarrow> \n                    X (w_values P vs (list_of obs')) obs'' a' \\<or>\n                    non_speculative P (w_values P vs (list_of obs')) obs''\""], ["proof (prove)\nusing this:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     non_speculative P vs obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (w_values P vs (list_of obs')) obs'' a' \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs'')\n\ngoal (1 subgoal):\n 1. (\\<And>obs' obs'' a'.\n        \\<lbrakk>obs = lappend obs' obs''; non_speculative P vs obs';\n         obs' = LNil \\<Longrightarrow> (a', a) \\<in> R;\n         lfinite obs' \\<Longrightarrow>\n         X (w_values P vs (list_of obs')) obs'' a' \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs = lappend obs' obs''\n  non_speculative P vs obs'\n  obs' = LNil \\<Longrightarrow> (a', a) \\<in> R\n  lfinite obs' \\<Longrightarrow>\n  X (w_values P vs (list_of obs')) obs'' a' \\<or>\n  non_speculative P (w_values P vs (list_of obs')) obs''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       non_speculative P vs obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (w_values P vs (list_of obs')) obs'' a' \\<or>\n        non_speculative P (w_values P vs (list_of obs'))\n         obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "proof(cases \"obs' = LNil\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "case True"], ["proof (state)\nthis:\n  obs' = LNil\n\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "hence \"lfinite obs'\""], ["proof (prove)\nusing this:\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. lfinite obs'", "by simp"], ["proof (state)\nthis:\n  lfinite obs'\n\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "from fin[OF this]"], ["proof (chain)\npicking this:\n  X (w_values P vs (list_of obs')) obs'' a' \\<or>\n  non_speculative P (w_values P vs (list_of obs')) obs''", "show ?thesis"], ["proof (prove)\nusing this:\n  X (w_values P vs (list_of obs')) obs'' a' \\<or>\n  non_speculative P (w_values P vs (list_of obs')) obs''\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs')) obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume X: \"X (w_values P vs (list_of obs')) obs'' a'\""], ["proof (state)\nthis:\n  X (w_values P vs (list_of obs')) obs'' a'\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs')) obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "from True"], ["proof (chain)\npicking this:\n  obs' = LNil", "have \"(a', a) \\<in> R\""], ["proof (prove)\nusing this:\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. (a', a) \\<in> R", "by(rule decr)"], ["proof (state)\nthis:\n  (a', a) \\<in> R\n\ngoal (2 subgoals):\n 1. X (w_values P vs (list_of obs')) obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "from IH[OF this X]"], ["proof (chain)\npicking this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs'a obs''a.\n      obs'' = lappend obs'a obs''a \\<and>\n      obs'a \\<noteq> LNil \\<and>\n      non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n      (lfinite obs'a \\<longrightarrow>\n       Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n            obs''a) \\<or>\n       non_speculative P\n        (w_values P (w_values P vs (list_of obs')) (list_of obs'a)) obs''a))", "show ?thesis"], ["proof (prove)\nusing this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs'a obs''a.\n      obs'' = lappend obs'a obs''a \\<and>\n      obs'a \\<noteq> LNil \\<and>\n      non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n      (lfinite obs'a \\<longrightarrow>\n       Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n            obs''a) \\<or>\n       non_speculative P\n        (w_values P (w_values P vs (list_of obs')) (list_of obs'a)) obs''a))\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume \"obs'' = LNil\""], ["proof (state)\nthis:\n  obs'' = LNil\n\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "with True obs"], ["proof (chain)\npicking this:\n  obs' = LNil\n  obs = lappend obs' obs''\n  obs'' = LNil", "have \"obs = LNil\""], ["proof (prove)\nusing this:\n  obs' = LNil\n  obs = lappend obs' obs''\n  obs'' = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil", "by simp"], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume \"?step_concl (w_values P vs (list_of obs')) obs''\""], ["proof (state)\nthis:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a.\n          X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n           obs''a a) \\<or>\n      non_speculative P\n       (w_values P (w_values P vs (list_of obs')) (list_of obs'a)) obs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "hence \"?step_concl vs obs\""], ["proof (prove)\nusing this:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a.\n          X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n           obs''a a) \\<or>\n      non_speculative P\n       (w_values P (w_values P vs (list_of obs')) (list_of obs'a)) obs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''.\n       obs = lappend obs' obs'' \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n        non_speculative P (w_values P vs (list_of obs')) obs'')", "using True obs"], ["proof (prove)\nusing this:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a.\n          X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n           obs''a a) \\<or>\n      non_speculative P\n       (w_values P (w_values P vs (list_of obs')) (list_of obs'a)) obs''a)\n  obs' = LNil\n  obs = lappend obs' obs''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''.\n       obs = lappend obs' obs'' \\<and>\n       obs' \\<noteq> LNil \\<and>\n       non_speculative P vs obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n        non_speculative P (w_values P vs (list_of obs')) obs'')", "by simp"], ["proof (state)\nthis:\n  \\<exists>obs' obs''.\n     obs = lappend obs' obs'' \\<and>\n     obs' \\<noteq> LNil \\<and>\n     non_speculative P vs obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs'')\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       non_speculative P (w_values P vs (list_of obs')) obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n             obs''a) \\<or>\n        non_speculative P\n         (w_values P (w_values P vs (list_of obs')) (list_of obs'a))\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>obs' obs''.\n     obs = lappend obs' obs'' \\<and>\n     obs' \\<noteq> LNil \\<and>\n     non_speculative P vs obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n      non_speculative P (w_values P vs (list_of obs')) obs'')\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "assume \"non_speculative P (w_values P vs (list_of obs')) obs''\""], ["proof (state)\nthis:\n  non_speculative P (w_values P vs (list_of obs')) obs''\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P vs (list_of obs')) obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  non_speculative P (w_values P vs (list_of obs')) obs''\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "using obs True"], ["proof (prove)\nusing this:\n  non_speculative P (w_values P vs (list_of obs')) obs''\n  obs = lappend obs' obs''\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "by cases(auto cong: action.case_cong obs_event.case_cong intro: exI[where x=\"LCons x LNil\" for x])"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "case False"], ["proof (state)\nthis:\n  obs' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "with obs sc_obs' fin"], ["proof (chain)\npicking this:\n  obs = lappend obs' obs''\n  non_speculative P vs obs'\n  lfinite obs' \\<Longrightarrow>\n  X (w_values P vs (list_of obs')) obs'' a' \\<or>\n  non_speculative P (w_values P vs (list_of obs')) obs''\n  obs' \\<noteq> LNil", "show ?thesis"], ["proof (prove)\nusing this:\n  obs = lappend obs' obs''\n  non_speculative P vs obs'\n  lfinite obs' \\<Longrightarrow>\n  X (w_values P vs (list_of obs')) obs'' a' \\<or>\n  non_speculative P (w_values P vs (list_of obs')) obs''\n  obs' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "by auto"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P vs (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "}"], ["proof (state)\nthis:\n  X ?vsa2 ?obsa2 ?aa2 \\<Longrightarrow>\n  ?obsa2 = LNil \\<or>\n  (\\<exists>obs' obs''.\n      ?obsa2 = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P ?vsa2 obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P ?vsa2 (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P ?vsa2 (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "note step' = this"], ["proof (state)\nthis:\n  X ?vsa2 ?obsa2 ?aa2 \\<Longrightarrow>\n  ?obsa2 = LNil \\<or>\n  (\\<exists>obs' obs''.\n      ?obsa2 = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P ?vsa2 obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (w_values P ?vsa2 (list_of obs')) obs'' a) \\<or>\n       non_speculative P (w_values P ?vsa2 (list_of obs')) obs''))\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "from major"], ["proof (chain)\npicking this:\n  X vs obs a", "show ?thesis"], ["proof (prove)\nusing this:\n  X vs obs a\n\ngoal (1 subgoal):\n 1. non_speculative P vs obs", "proof(coinduction arbitrary: vs obs a rule: non_speculative_coinduct_append)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vsa obsa a.\n       X vsa obsa a \\<Longrightarrow>\n       obsa = LNil \\<or>\n       (\\<exists>obs' obs''.\n           obsa = lappend obs' obs'' \\<and>\n           obs' \\<noteq> LNil \\<and>\n           non_speculative P vsa obs' \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>vs obs a.\n                w_values P vsa (list_of obs') = vs \\<and>\n                obs'' = obs \\<and> X vs obs a) \\<or>\n            non_speculative P (w_values P vsa (list_of obs')) obs''))", "case (non_speculative vs obs)"], ["proof (state)\nthis:\n  X vs obs a\n\ngoal (1 subgoal):\n 1. \\<And>vsa obsa a.\n       X vsa obsa a \\<Longrightarrow>\n       obsa = LNil \\<or>\n       (\\<exists>obs' obs''.\n           obsa = lappend obs' obs'' \\<and>\n           obs' \\<noteq> LNil \\<and>\n           non_speculative P vsa obs' \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>vs obs a.\n                w_values P vsa (list_of obs') = vs \\<and>\n                obs'' = obs \\<and> X vs obs a) \\<or>\n            non_speculative P (w_values P vsa (list_of obs')) obs''))", "thus ?case"], ["proof (prove)\nusing this:\n  X vs obs a\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        non_speculative P vs obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>vs obs a.\n             w_values P vs (list_of obs') = vs \\<and>\n             obs'' = obs \\<and> X vs obs a) \\<or>\n         non_speculative P (w_values P vs (list_of obs')) obs''))", "by simp(rule step')"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      non_speculative P vs obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>vs obs a.\n           w_values P vs (list_of obs') = vs \\<and>\n           obs'' = obs \\<and> X vs obs a) \\<or>\n       non_speculative P (w_values P vs (list_of obs')) obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_speculative P vs obs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma non_speculative_nthI:\n  \"(\\<And>i ad al v. \n    \\<lbrakk> enat i < llength obs; lnth obs i = NormalAction (ReadMem ad al v);\n      non_speculative P vs (ltake (enat i) obs) \\<rbrakk> \n    \\<Longrightarrow> v \\<in> w_values P vs (list_of (ltake (enat i) obs)) (ad, al))\n  \\<Longrightarrow> non_speculative P vs obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i ad al v.\n        \\<lbrakk>enat i < llength obs;\n         lnth obs i = NormalAction (ReadMem ad al v);\n         non_speculative P vs (ltake (enat i) obs)\\<rbrakk>\n        \\<Longrightarrow> v \\<in> w_values P vs\n                                   (list_of (ltake (enat i) obs))\n                                   (ad, al)) \\<Longrightarrow>\n    non_speculative P vs obs", "proof(coinduction arbitrary: vs obs rule: non_speculative.coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs obs.\n       \\<forall>i ad al v.\n          enat i < llength obs \\<longrightarrow>\n          lnth obs i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n          non_speculative P vs (ltake (enat i) obs) \\<longrightarrow>\n          v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                   (ad, al) \\<Longrightarrow>\n       (\\<exists>vsa. vs = vsa \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vsa obsa.\n           vs = vsa \\<and>\n           obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow>\n              v \\<in> vsa (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vs obs.\n                w_value P vsa ob = vs \\<and>\n                obsa = obs \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obs \\<longrightarrow>\n                    lnth obs i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vs\n                     (ltake (enat i) obs) \\<longrightarrow>\n                    v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vsa ob) obsa))", "case (non_speculative vs obs)"], ["proof (state)\nthis:\n  \\<forall>i ad al v.\n     enat i < llength obs \\<longrightarrow>\n     lnth obs i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n     non_speculative P vs (ltake (enat i) obs) \\<longrightarrow>\n     v \\<in> w_values P vs (list_of (ltake (enat i) obs)) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>vs obs.\n       \\<forall>i ad al v.\n          enat i < llength obs \\<longrightarrow>\n          lnth obs i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n          non_speculative P vs (ltake (enat i) obs) \\<longrightarrow>\n          v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                   (ad, al) \\<Longrightarrow>\n       (\\<exists>vsa. vs = vsa \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vsa obsa.\n           vs = vsa \\<and>\n           obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow>\n              v \\<in> vsa (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vs obs.\n                w_value P vsa ob = vs \\<and>\n                obsa = obs \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obs \\<longrightarrow>\n                    lnth obs i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vs\n                     (ltake (enat i) obs) \\<longrightarrow>\n                    v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vsa ob) obsa))", "hence nth:\n    \"\\<And>i ad al v. \\<lbrakk> enat i < llength obs; lnth obs i = NormalAction (ReadMem ad al v); \n                   non_speculative P vs (ltake (enat i) obs) \\<rbrakk> \n    \\<Longrightarrow> v \\<in> w_values P vs (list_of (ltake (enat i) obs)) (ad, al)\""], ["proof (prove)\nusing this:\n  \\<forall>i ad al v.\n     enat i < llength obs \\<longrightarrow>\n     lnth obs i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n     non_speculative P vs (ltake (enat i) obs) \\<longrightarrow>\n     v \\<in> w_values P vs (list_of (ltake (enat i) obs)) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>i ad al v.\n       \\<lbrakk>enat i < llength obs;\n        lnth obs i = NormalAction (ReadMem ad al v);\n        non_speculative P vs (ltake (enat i) obs)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P vs\n                                  (list_of (ltake (enat i) obs)) (ad, al)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>enat ?i < llength obs;\n   lnth obs ?i = NormalAction (ReadMem ?ad ?al ?v);\n   non_speculative P vs (ltake (enat ?i) obs)\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> w_values P vs (list_of (ltake (enat ?i) obs))\n                              (?ad, ?al)\n\ngoal (1 subgoal):\n 1. \\<And>vs obs.\n       \\<forall>i ad al v.\n          enat i < llength obs \\<longrightarrow>\n          lnth obs i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n          non_speculative P vs (ltake (enat i) obs) \\<longrightarrow>\n          v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                   (ad, al) \\<Longrightarrow>\n       (\\<exists>vsa. vs = vsa \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vsa obsa.\n           vs = vsa \\<and>\n           obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow>\n              v \\<in> vsa (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vs obs.\n                w_value P vsa ob = vs \\<and>\n                obsa = obs \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obs \\<longrightarrow>\n                    lnth obs i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vs\n                     (ltake (enat i) obs) \\<longrightarrow>\n                    v \\<in> w_values P vs (list_of (ltake (enat i) obs))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vsa ob) obsa))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>vsa obsa.\n             w_value P vs ob = vsa \\<and>\n             obs = obsa \\<and>\n             (\\<forall>i ad al v.\n                 enat i < llength obsa \\<longrightarrow>\n                 lnth obsa i =\n                 NormalAction (ReadMem ad al v) \\<longrightarrow>\n                 non_speculative P vsa\n                  (ltake (enat i) obsa) \\<longrightarrow>\n                 v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                          (ad, al))) \\<or>\n         non_speculative P (w_value P vs ob) obs))", "proof(cases obs)"], ["proof (state)\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>vsa obsa.\n             w_value P vs ob = vsa \\<and>\n             obs = obsa \\<and>\n             (\\<forall>i ad al v.\n                 enat i < llength obsa \\<longrightarrow>\n                 lnth obsa i =\n                 NormalAction (ReadMem ad al v) \\<longrightarrow>\n                 non_speculative P vsa\n                  (ltake (enat i) obsa) \\<longrightarrow>\n                 v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                          (ad, al))) \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "case LNil"], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>vsa obsa.\n             w_value P vs ob = vsa \\<and>\n             obs = obsa \\<and>\n             (\\<forall>i ad al v.\n                 enat i < llength obsa \\<longrightarrow>\n                 lnth obsa i =\n                 NormalAction (ReadMem ad al v) \\<longrightarrow>\n                 non_speculative P vsa\n                  (ltake (enat i) obsa) \\<longrightarrow>\n                 v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                          (ad, al))) \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>vsa obsa.\n             w_value P vs ob = vsa \\<and>\n             obs = obsa \\<and>\n             (\\<forall>i ad al v.\n                 enat i < llength obsa \\<longrightarrow>\n                 lnth obsa i =\n                 NormalAction (ReadMem ad al v) \\<longrightarrow>\n                 non_speculative P vsa\n                  (ltake (enat i) obsa) \\<longrightarrow>\n                 v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                          (ad, al))) \\<or>\n         non_speculative P (w_value P vs ob) obs))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>vsa obsa.\n           w_value P vs ob = vsa \\<and>\n           obs = obsa \\<and>\n           (\\<forall>i ad al v.\n               enat i < llength obsa \\<longrightarrow>\n               lnth obsa i =\n               NormalAction (ReadMem ad al v) \\<longrightarrow>\n               non_speculative P vsa (ltake (enat i) obsa) \\<longrightarrow>\n               v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                        (ad, al))) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "case (LCons ob obs')"], ["proof (state)\nthis:\n  obs = LCons ob obs'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "{"], ["proof (state)\nthis:\n  obs = LCons ob obs'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "fix ad al v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "assume \"ob = NormalAction (ReadMem ad al v)\""], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "with nth[of 0 ad al v] LCons"], ["proof (chain)\npicking this:\n  \\<lbrakk>enat 0 < llength obs;\n   lnth obs 0 = NormalAction (ReadMem ad al v);\n   non_speculative P vs (ltake (enat 0) obs)\\<rbrakk>\n  \\<Longrightarrow> v \\<in> w_values P vs (list_of (ltake (enat 0) obs))\n                             (ad, al)\n  obs = LCons ob obs'\n  ob = NormalAction (ReadMem ad al v)", "have \"v \\<in> vs (ad, al)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>enat 0 < llength obs;\n   lnth obs 0 = NormalAction (ReadMem ad al v);\n   non_speculative P vs (ltake (enat 0) obs)\\<rbrakk>\n  \\<Longrightarrow> v \\<in> w_values P vs (list_of (ltake (enat 0) obs))\n                             (ad, al)\n  obs = LCons ob obs'\n  ob = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. v \\<in> vs (ad, al)", "by(simp add: zero_enat_def[symmetric])"], ["proof (state)\nthis:\n  v \\<in> vs (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "}"], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "note base = this"], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "moreover"], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "{"], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "fix i ad al v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "assume \"enat i < llength obs'\" \"lnth obs' i = NormalAction (ReadMem ad al v)\"\n        and \"non_speculative P (w_value P vs ob) (ltake (enat i) obs')\""], ["proof (state)\nthis:\n  enat i < llength obs'\n  lnth obs' i = NormalAction (ReadMem ad al v)\n  non_speculative P (w_value P vs ob) (ltake (enat i) obs')\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "with LCons nth[of \"Suc i\" ad al v] base"], ["proof (chain)\npicking this:\n  obs = LCons ob obs'\n  \\<lbrakk>enat (Suc i) < llength obs;\n   lnth obs (Suc i) = NormalAction (ReadMem ad al v);\n   non_speculative P vs (ltake (enat (Suc i)) obs)\\<rbrakk>\n  \\<Longrightarrow> v \\<in> w_values P vs\n                             (list_of (ltake (enat (Suc i)) obs)) (ad, al)\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n  enat i < llength obs'\n  lnth obs' i = NormalAction (ReadMem ad al v)\n  non_speculative P (w_value P vs ob) (ltake (enat i) obs')", "have \"v \\<in> w_values P (w_value P vs ob) (list_of (ltake (enat i) obs')) (ad, al)\""], ["proof (prove)\nusing this:\n  obs = LCons ob obs'\n  \\<lbrakk>enat (Suc i) < llength obs;\n   lnth obs (Suc i) = NormalAction (ReadMem ad al v);\n   non_speculative P vs (ltake (enat (Suc i)) obs)\\<rbrakk>\n  \\<Longrightarrow> v \\<in> w_values P vs\n                             (list_of (ltake (enat (Suc i)) obs)) (ad, al)\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n  enat i < llength obs'\n  lnth obs' i = NormalAction (ReadMem ad al v)\n  non_speculative P (w_value P vs ob) (ltake (enat i) obs')\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P (w_value P vs ob) (list_of (ltake (enat i) obs'))\n             (ad, al)", "by(clarsimp simp add: eSuc_enat[symmetric] split: obs_event.split action.split)"], ["proof (state)\nthis:\n  v \\<in> w_values P (w_value P vs ob) (list_of (ltake (enat i) obs'))\n           (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>enat ?i2 < llength obs';\n   lnth obs' ?i2 = NormalAction (ReadMem ?ad2 ?al2 ?v2);\n   non_speculative P (w_value P vs ob) (ltake (enat ?i2) obs')\\<rbrakk>\n  \\<Longrightarrow> ?v2\n                    \\<in> w_values P (w_value P vs ob)\n                           (list_of (ltake (enat ?i2) obs')) (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "ultimately"], ["proof (chain)\npicking this:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n  \\<lbrakk>enat ?i2 < llength obs';\n   lnth obs' ?i2 = NormalAction (ReadMem ?ad2 ?al2 ?v2);\n   non_speculative P (w_value P vs ob) (ltake (enat ?i2) obs')\\<rbrakk>\n  \\<Longrightarrow> ?v2\n                    \\<in> w_values P (w_value P vs ob)\n                           (list_of (ltake (enat ?i2) obs')) (?ad2, ?al2)", "have ?LCons"], ["proof (prove)\nusing this:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n  \\<lbrakk>enat ?i2 < llength obs';\n   lnth obs' ?i2 = NormalAction (ReadMem ?ad2 ?al2 ?v2);\n   non_speculative P (w_value P vs ob) (ltake (enat ?i2) obs')\\<rbrakk>\n  \\<Longrightarrow> ?v2\n                    \\<in> w_values P (w_value P vs ob)\n                           (list_of (ltake (enat ?i2) obs')) (?ad2, ?al2)\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>vsa obsa.\n            w_value P vs ob = vsa \\<and>\n            obs = obsa \\<and>\n            (\\<forall>i ad al v.\n                enat i < llength obsa \\<longrightarrow>\n                lnth obsa i =\n                NormalAction (ReadMem ad al v) \\<longrightarrow>\n                non_speculative P vsa\n                 (ltake (enat i) obsa) \\<longrightarrow>\n                v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                         (ad, al))) \\<or>\n        non_speculative P (w_value P vs ob) obs)", "using LCons"], ["proof (prove)\nusing this:\n  ob = NormalAction (ReadMem ?ad2 ?al2 ?v2) \\<Longrightarrow>\n  ?v2 \\<in> vs (?ad2, ?al2)\n  \\<lbrakk>enat ?i2 < llength obs';\n   lnth obs' ?i2 = NormalAction (ReadMem ?ad2 ?al2 ?v2);\n   non_speculative P (w_value P vs ob) (ltake (enat ?i2) obs')\\<rbrakk>\n  \\<Longrightarrow> ?v2\n                    \\<in> w_values P (w_value P vs ob)\n                           (list_of (ltake (enat ?i2) obs')) (?ad2, ?al2)\n  obs = LCons ob obs'\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       vs = vs \\<and>\n       obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>vsa obsa.\n            w_value P vs ob = vsa \\<and>\n            obs = obsa \\<and>\n            (\\<forall>i ad al v.\n                enat i < llength obsa \\<longrightarrow>\n                lnth obsa i =\n                NormalAction (ReadMem ad al v) \\<longrightarrow>\n                non_speculative P vsa\n                 (ltake (enat i) obsa) \\<longrightarrow>\n                v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                         (ad, al))) \\<or>\n        non_speculative P (w_value P vs ob) obs)", "by(simp split: action.split obs_event.split)"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>vsa obsa.\n          w_value P vs ob = vsa \\<and>\n          obs = obsa \\<and>\n          (\\<forall>i ad al v.\n              enat i < llength obsa \\<longrightarrow>\n              lnth obsa i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n              non_speculative P vsa (ltake (enat i) obsa) \\<longrightarrow>\n              v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                       (ad, al))) \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       obs = LCons x21 x22 \\<Longrightarrow>\n       (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n       (\\<exists>ob vs obs.\n           vs = vs \\<and>\n           obs = LCons ob obs \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>vsa obsa.\n                w_value P vs ob = vsa \\<and>\n                obs = obsa \\<and>\n                (\\<forall>i ad al v.\n                    enat i < llength obsa \\<longrightarrow>\n                    lnth obsa i =\n                    NormalAction (ReadMem ad al v) \\<longrightarrow>\n                    non_speculative P vsa\n                     (ltake (enat i) obsa) \\<longrightarrow>\n                    v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                             (ad, al))) \\<or>\n            non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ob vs obs.\n     vs = vs \\<and>\n     obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>vsa obsa.\n          w_value P vs ob = vsa \\<and>\n          obs = obsa \\<and>\n          (\\<forall>i ad al v.\n              enat i < llength obsa \\<longrightarrow>\n              lnth obsa i = NormalAction (ReadMem ad al v) \\<longrightarrow>\n              non_speculative P vsa (ltake (enat i) obsa) \\<longrightarrow>\n              v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                       (ad, al))) \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        vs = vs \\<and>\n        obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>vsa obsa.\n             w_value P vs ob = vsa \\<and>\n             obs = obsa \\<and>\n             (\\<forall>i ad al v.\n                 enat i < llength obsa \\<longrightarrow>\n                 lnth obsa i =\n                 NormalAction (ReadMem ad al v) \\<longrightarrow>\n                 non_speculative P vsa\n                  (ltake (enat i) obsa) \\<longrightarrow>\n                 v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                          (ad, al))) \\<or>\n         non_speculative P (w_value P vs ob) obs))", ".."], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>vsa obsa.\n           w_value P vs ob = vsa \\<and>\n           obs = obsa \\<and>\n           (\\<forall>i ad al v.\n               enat i < llength obsa \\<longrightarrow>\n               lnth obsa i =\n               NormalAction (ReadMem ad al v) \\<longrightarrow>\n               non_speculative P vsa (ltake (enat i) obsa) \\<longrightarrow>\n               v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                        (ad, al))) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>vs. vs = vs \\<and> obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      vs = vs \\<and>\n      obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>vsa obsa.\n           w_value P vs ob = vsa \\<and>\n           obs = obsa \\<and>\n           (\\<forall>i ad al v.\n               enat i < llength obsa \\<longrightarrow>\n               lnth obsa i =\n               NormalAction (ReadMem ad al v) \\<longrightarrow>\n               non_speculative P vsa (ltake (enat i) obsa) \\<longrightarrow>\n               v \\<in> w_values P vsa (list_of (ltake (enat i) obsa))\n                        (ad, al))) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["", "locale executions_sc_hb =\n  executions_base \\<E> P\n  for \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\" +\n  assumes \\<E>_new_actions_for_fun:\n  \"\\<lbrakk> E \\<in> \\<E>; a \\<in> new_actions_for P E adal; a' \\<in> new_actions_for P E adal \\<rbrakk> \\<Longrightarrow> a = a'\"\n  and \\<E>_ex_new_action:\n  \"\\<lbrakk> E \\<in> \\<E>; ra \\<in> read_actions E; adal \\<in> action_loc P E ra; non_speculative P (\\<lambda>_. {}) (ltake (enat ra) (lmap snd E)) \\<rbrakk>\n  \\<Longrightarrow> \\<exists>wa. wa \\<in> new_actions_for P E adal \\<and> wa < ra\"\nbegin"], ["", "lemma \\<E>_new_same_addr_singleton:\n  assumes E: \"E \\<in> \\<E>\"\n  shows \"\\<exists>a. new_actions_for P E adal \\<subseteq> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. new_actions_for P E adal \\<subseteq> {a}", "by(blast dest: \\<E>_new_actions_for_fun[OF E])"], ["", "lemma new_action_before_read:\n  assumes E: \"E \\<in> \\<E>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and adal: \"adal \\<in> action_loc P E ra\"\n  and new: \"wa \\<in> new_actions_for P E adal\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat ra) (lmap snd E))\"\n  shows \"wa < ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wa < ra", "using \\<E>_new_same_addr_singleton[OF E, of adal] \\<E>_ex_new_action[OF E ra adal sc] new"], ["proof (prove)\nusing this:\n  \\<exists>a. new_actions_for P E adal \\<subseteq> {a}\n  \\<exists>wa. wa \\<in> new_actions_for P E adal \\<and> wa < ra\n  wa \\<in> new_actions_for P E adal\n\ngoal (1 subgoal):\n 1. wa < ra", "by auto"], ["", "lemma most_recent_write_exists:\n  assumes E: \"E \\<in> \\<E>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat ra) (lmap snd E))\"\n  shows \"\\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "from ra"], ["proof (chain)\npicking this:\n  ra \\<in> read_actions E", "obtain ad al where\n    adal: \"(ad, al) \\<in> action_loc P E ra\""], ["proof (prove)\nusing this:\n  ra \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>ad al.\n        (ad, al) \\<in> action_loc P E ra \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule read_action_action_locE)"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E ra\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "define Q where \"Q = {a. a \\<in> write_actions E \\<and> (ad, al) \\<in> action_loc P E a \\<and> E \\<turnstile> a \\<le>a ra}\""], ["proof (state)\nthis:\n  Q =\n  {a \\<in> write_actions E.\n   (ad, al) \\<in> action_loc P E a \\<and> E \\<turnstile> a \\<le>a ra}\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "let ?A = \"new_actions_for P E (ad, al)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "let ?B = \"{a. a \\<in> actions E \\<and> (\\<exists>v'. action_obs E a = NormalAction (WriteMem ad al v')) \\<and> a \\<le> ra}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "have \"Q \\<subseteq> ?A \\<union> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                  {a \\<in> actions E.\n                   (\\<exists>v'.\n                       action_obs E a =\n                       NormalAction (WriteMem ad al v')) \\<and>\n                   a \\<le> ra}", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> write_actions E.\n     (ad, al) \\<in> action_loc P E a \\<and> E \\<turnstile> a \\<le>a ra}\n    \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                {a \\<in> actions E.\n                 (\\<exists>v'.\n                     action_obs E a =\n                     NormalAction (WriteMem ad al v')) \\<and>\n                 a \\<le> ra}", "by(auto elim!: write_actions.cases action_loc_aux_cases simp add: new_actions_for_def elim: action_orderE)"], ["proof (state)\nthis:\n  Q \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                {a \\<in> actions E.\n                 (\\<exists>v'.\n                     action_obs E a =\n                     NormalAction (WriteMem ad al v')) \\<and>\n                 a \\<le> ra}\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "moreover"], ["proof (state)\nthis:\n  Q \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                {a \\<in> actions E.\n                 (\\<exists>v'.\n                     action_obs E a =\n                     NormalAction (WriteMem ad al v')) \\<and>\n                 a \\<le> ra}\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "from \\<E>_new_same_addr_singleton[OF E, of \"(ad, al)\"]"], ["proof (chain)\npicking this:\n  \\<exists>a. new_actions_for P E (ad, al) \\<subseteq> {a}", "have \"finite ?A\""], ["proof (prove)\nusing this:\n  \\<exists>a. new_actions_for P E (ad, al) \\<subseteq> {a}\n\ngoal (1 subgoal):\n 1. finite (new_actions_for P E (ad, al))", "by(blast intro: finite_subset)"], ["proof (state)\nthis:\n  finite (new_actions_for P E (ad, al))\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "moreover"], ["proof (state)\nthis:\n  finite (new_actions_for P E (ad, al))\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "have \"finite ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {a \\<in> actions E.\n      (\\<exists>v'.\n          action_obs E a = NormalAction (WriteMem ad al v')) \\<and>\n      a \\<le> ra}", "by auto"], ["proof (state)\nthis:\n  finite\n   {a \\<in> actions E.\n    (\\<exists>v'. action_obs E a = NormalAction (WriteMem ad al v')) \\<and>\n    a \\<le> ra}\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "ultimately"], ["proof (chain)\npicking this:\n  Q \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                {a \\<in> actions E.\n                 (\\<exists>v'.\n                     action_obs E a =\n                     NormalAction (WriteMem ad al v')) \\<and>\n                 a \\<le> ra}\n  finite (new_actions_for P E (ad, al))\n  finite\n   {a \\<in> actions E.\n    (\\<exists>v'. action_obs E a = NormalAction (WriteMem ad al v')) \\<and>\n    a \\<le> ra}", "have finQ: \"finite Q\""], ["proof (prove)\nusing this:\n  Q \\<subseteq> new_actions_for P E (ad, al) \\<union>\n                {a \\<in> actions E.\n                 (\\<exists>v'.\n                     action_obs E a =\n                     NormalAction (WriteMem ad al v')) \\<and>\n                 a \\<le> ra}\n  finite (new_actions_for P E (ad, al))\n  finite\n   {a \\<in> actions E.\n    (\\<exists>v'. action_obs E a = NormalAction (WriteMem ad al v')) \\<and>\n    a \\<le> ra}\n\ngoal (1 subgoal):\n 1. finite Q", "by(blast intro: finite_subset)"], ["proof (state)\nthis:\n  finite Q\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "from \\<E>_ex_new_action[OF E ra adal sc] ra"], ["proof (chain)\npicking this:\n  \\<exists>wa. wa \\<in> new_actions_for P E (ad, al) \\<and> wa < ra\n  ra \\<in> read_actions E", "obtain wa \n    where wa: \"wa \\<in> Q\""], ["proof (prove)\nusing this:\n  \\<exists>wa. wa \\<in> new_actions_for P E (ad, al) \\<and> wa < ra\n  ra \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>wa. wa \\<in> Q \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding Q_def"], ["proof (prove)\nusing this:\n  \\<exists>wa. wa \\<in> new_actions_for P E (ad, al) \\<and> wa < ra\n  ra \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>wa.\n        wa \\<in> {a \\<in> write_actions E.\n                  (ad, al) \\<in> action_loc P E a \\<and>\n                  E \\<turnstile> a \\<le>a ra} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: new_actionsE is_new_action.cases read_actions.cases intro: write_actionsI action_orderI)"], ["proof (state)\nthis:\n  wa \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "define wa' where \"wa' = Max_torder (action_order E) Q\""], ["proof (state)\nthis:\n  wa' = Max_torder (action_order E) Q\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "from wa"], ["proof (chain)\npicking this:\n  wa \\<in> Q", "have \"Q \\<noteq> {}\" \"Q \\<subseteq> actions E\""], ["proof (prove)\nusing this:\n  wa \\<in> Q\n\ngoal (1 subgoal):\n 1. Q \\<noteq> {} &&& Q \\<subseteq> actions E", "by(auto simp add: Q_def)"], ["proof (state)\nthis:\n  Q \\<noteq> {}\n  Q \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "with finQ"], ["proof (chain)\npicking this:\n  finite Q\n  Q \\<noteq> {}\n  Q \\<subseteq> actions E", "have \"wa' \\<in> Q\""], ["proof (prove)\nusing this:\n  finite Q\n  Q \\<noteq> {}\n  Q \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. wa' \\<in> Q", "unfolding wa'_def"], ["proof (prove)\nusing this:\n  finite Q\n  Q \\<noteq> {}\n  Q \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. Max_torder (action_order E) Q \\<in> Q", "by(rule Max_torder_in_set[OF torder_action_order])"], ["proof (state)\nthis:\n  wa' \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "hence \"E \\<turnstile> wa' \\<le>a ra\" \"wa' \\<in> write_actions E\"\n    and \"(ad, al) \\<in> action_loc P E wa'\""], ["proof (prove)\nusing this:\n  wa' \\<in> Q\n\ngoal (1 subgoal):\n 1. (E \\<turnstile> wa' \\<le>a ra &&& wa' \\<in> write_actions E) &&&\n    (ad, al) \\<in> action_loc P E wa'", "by(simp_all add: Q_def)"], ["proof (state)\nthis:\n  E \\<turnstile> wa' \\<le>a ra\n  wa' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa'\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "with ra adal"], ["proof (chain)\npicking this:\n  ra \\<in> read_actions E\n  (ad, al) \\<in> action_loc P E ra\n  E \\<turnstile> wa' \\<le>a ra\n  wa' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa'", "have \"P,E \\<turnstile> ra \\<leadsto>mrw wa'\""], ["proof (prove)\nusing this:\n  ra \\<in> read_actions E\n  (ad, al) \\<in> action_loc P E ra\n  E \\<turnstile> wa' \\<le>a ra\n  wa' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ra \\<leadsto>mrw wa'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>wa'a.\n       \\<lbrakk>wa'a \\<in> write_actions E;\n        (ad, al) \\<in> action_loc P E wa'a\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                         E \\<turnstile> ra \\<le>a wa'a", "fix wa''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>wa'a.\n       \\<lbrakk>wa'a \\<in> write_actions E;\n        (ad, al) \\<in> action_loc P E wa'a\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                         E \\<turnstile> ra \\<le>a wa'a", "assume wa'': \"wa'' \\<in> write_actions E\" \"(ad, al) \\<in> action_loc P E wa''\""], ["proof (state)\nthis:\n  wa'' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa''\n\ngoal (1 subgoal):\n 1. \\<And>wa'a.\n       \\<lbrakk>wa'a \\<in> write_actions E;\n        (ad, al) \\<in> action_loc P E wa'a\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                         E \\<turnstile> ra \\<le>a wa'a", "from \\<open>wa'' \\<in> write_actions E\\<close> ra"], ["proof (chain)\npicking this:\n  wa'' \\<in> write_actions E\n  ra \\<in> read_actions E", "have \"ra \\<noteq> wa''\""], ["proof (prove)\nusing this:\n  wa'' \\<in> write_actions E\n  ra \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. ra \\<noteq> wa''", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  ra \\<noteq> wa''\n\ngoal (1 subgoal):\n 1. \\<And>wa'a.\n       \\<lbrakk>wa'a \\<in> write_actions E;\n        (ad, al) \\<in> action_loc P E wa'a\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                         E \\<turnstile> ra \\<le>a wa'a", "show \"E \\<turnstile> wa'' \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<turnstile> wa'' \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa''", "proof(rule disjCI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> E \\<turnstile> ra \\<le>a wa'' \\<Longrightarrow>\n    E \\<turnstile> wa'' \\<le>a wa'", "assume \"\\<not> E \\<turnstile> ra \\<le>a wa''\""], ["proof (state)\nthis:\n  \\<not> E \\<turnstile> ra \\<le>a wa''\n\ngoal (1 subgoal):\n 1. \\<not> E \\<turnstile> ra \\<le>a wa'' \\<Longrightarrow>\n    E \\<turnstile> wa'' \\<le>a wa'", "with total_onPD[OF total_action_order, of ra E wa''] \n        \\<open>ra \\<noteq> wa''\\<close> \\<open>ra \\<in> read_actions E\\<close> \\<open>wa'' \\<in> write_actions E\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>ra \\<in> actions E; wa'' \\<in> actions E\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ra \\<le>a wa'' \\<or>\n                    ra = wa'' \\<or> E \\<turnstile> wa'' \\<le>a ra\n  ra \\<noteq> wa''\n  ra \\<in> read_actions E\n  wa'' \\<in> write_actions E\n  \\<not> E \\<turnstile> ra \\<le>a wa''", "have \"E \\<turnstile> wa'' \\<le>a ra\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ra \\<in> actions E; wa'' \\<in> actions E\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ra \\<le>a wa'' \\<or>\n                    ra = wa'' \\<or> E \\<turnstile> wa'' \\<le>a ra\n  ra \\<noteq> wa''\n  ra \\<in> read_actions E\n  wa'' \\<in> write_actions E\n  \\<not> E \\<turnstile> ra \\<le>a wa''\n\ngoal (1 subgoal):\n 1. E \\<turnstile> wa'' \\<le>a ra", "by simp"], ["proof (state)\nthis:\n  E \\<turnstile> wa'' \\<le>a ra\n\ngoal (1 subgoal):\n 1. \\<not> E \\<turnstile> ra \\<le>a wa'' \\<Longrightarrow>\n    E \\<turnstile> wa'' \\<le>a wa'", "with wa''"], ["proof (chain)\npicking this:\n  wa'' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa''\n  E \\<turnstile> wa'' \\<le>a ra", "have \"wa'' \\<in> Q\""], ["proof (prove)\nusing this:\n  wa'' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E wa''\n  E \\<turnstile> wa'' \\<le>a ra\n\ngoal (1 subgoal):\n 1. wa'' \\<in> Q", "by(simp add: Q_def)"], ["proof (state)\nthis:\n  wa'' \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<not> E \\<turnstile> ra \\<le>a wa'' \\<Longrightarrow>\n    E \\<turnstile> wa'' \\<le>a wa'", "with finQ"], ["proof (chain)\npicking this:\n  finite Q\n  wa'' \\<in> Q", "show \"E \\<turnstile> wa'' \\<le>a wa'\""], ["proof (prove)\nusing this:\n  finite Q\n  wa'' \\<in> Q\n\ngoal (1 subgoal):\n 1. E \\<turnstile> wa'' \\<le>a wa'", "using \\<open>Q \\<subseteq> actions E\\<close>"], ["proof (prove)\nusing this:\n  finite Q\n  wa'' \\<in> Q\n  Q \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. E \\<turnstile> wa'' \\<le>a wa'", "unfolding wa'_def"], ["proof (prove)\nusing this:\n  finite Q\n  wa'' \\<in> Q\n  Q \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. E \\<turnstile> wa'' \\<le>a Max_torder (action_order E) Q", "by(rule Max_torder_above[OF torder_action_order])"], ["proof (state)\nthis:\n  E \\<turnstile> wa'' \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E \\<turnstile> wa'' \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E \\<turnstile> ra \\<leadsto>mrw wa'\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", "thus ?thesis"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ra \\<leadsto>mrw wa'\n\ngoal (1 subgoal):\n 1. \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa", ".."], ["proof (state)\nthis:\n  \\<exists>wa. P,E \\<turnstile> ra \\<leadsto>mrw wa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mrw_before:\n  assumes E: \"E \\<in> \\<E>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (ltake (enat r) (lmap snd E))\"\n  shows \"w < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w < r", "using mrw read_actions_not_write_actions[of r E]"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> r \\<leadsto>mrw w\n  \\<lbrakk>r \\<in> read_actions E; r \\<in> write_actions E\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. w < r", "apply cases"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(erule action_orderE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(erule (1) new_action_before_read[OF E])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w \\<in> new_actions_for P E adal\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> non_speculative P (\\<lambda>_. {})\n                          (ltake (enat r) (lmap snd E))\n 3. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(simp add: new_actions_for_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> non_speculative P (\\<lambda>_. {})\n                          (ltake (enat r) (lmap snd E))\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(rule sc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(cases \"w = r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r; w = r\\<rbrakk>\n       \\<Longrightarrow> w < r\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r;\n        w \\<noteq> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sequentially_consistent_most_recent_write_for:\n  assumes E: \"E \\<in> \\<E>\"\n  and sc: \"non_speculative P (\\<lambda>_. {}) (lmap snd E)\"\n  shows \"sequentially_consistent P (E, \\<lambda>r. THE w. P,E \\<turnstile> r \\<leadsto>mrw w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequentially_consistent P\n     (E, \\<lambda>r. THE w. P,E \\<turnstile> r \\<leadsto>mrw w)", "proof(rule sequentially_consistentI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> r \\<leadsto>mrw THE w.\n     P,E \\<turnstile> r \\<leadsto>mrw w", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> r \\<leadsto>mrw THE w.\n     P,E \\<turnstile> r \\<leadsto>mrw w", "assume r: \"r \\<in> read_actions E\""], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> r \\<leadsto>mrw THE w.\n     P,E \\<turnstile> r \\<leadsto>mrw w", "from sc"], ["proof (chain)\npicking this:\n  non_speculative P (\\<lambda>_. {}) (lmap snd E)", "have sc': \"non_speculative P (\\<lambda>_. {}) (ltake (enat r) (lmap snd E))\""], ["proof (prove)\nusing this:\n  non_speculative P (\\<lambda>_. {}) (lmap snd E)\n\ngoal (1 subgoal):\n 1. non_speculative P (\\<lambda>_. {}) (ltake (enat r) (lmap snd E))", "by(rule non_speculative_ltake)"], ["proof (state)\nthis:\n  non_speculative P (\\<lambda>_. {}) (ltake (enat r) (lmap snd E))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> r \\<leadsto>mrw THE w.\n     P,E \\<turnstile> r \\<leadsto>mrw w", "from most_recent_write_exists[OF E r this]"], ["proof (chain)\npicking this:\n  \\<exists>wa. P,E \\<turnstile> r \\<leadsto>mrw wa", "obtain w where \"P,E \\<turnstile> r \\<leadsto>mrw w\""], ["proof (prove)\nusing this:\n  \\<exists>wa. P,E \\<turnstile> r \\<leadsto>mrw wa\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        P,E \\<turnstile> r \\<leadsto>mrw w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  P,E \\<turnstile> r \\<leadsto>mrw w\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> r \\<leadsto>mrw THE w.\n     P,E \\<turnstile> r \\<leadsto>mrw w", "thus \"P,E \\<turnstile> r \\<leadsto>mrw THE w. P,E \\<turnstile> r \\<leadsto>mrw w\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> r \\<leadsto>mrw w\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> r \\<leadsto>mrw THE w.\n  P,E \\<turnstile> r \\<leadsto>mrw w", "by(simp add: THE_most_recent_writeI)"], ["proof (state)\nthis:\n  P,E \\<turnstile> r \\<leadsto>mrw THE w. P,E \\<turnstile> r \\<leadsto>mrw w\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale jmm_multithreaded = multithreaded_base +\n  constrains final :: \"'x \\<Rightarrow> bool\" \n  and r :: \"('l, 'thread_id, 'x, 'm, 'w, ('addr, 'thread_id) obs_event action) semantics\" \n  and convert_RA :: \"'l released_locks \\<Rightarrow> ('addr, 'thread_id) obs_event action list\" \n  fixes P :: \"'md prog\""], ["", "end"]]}