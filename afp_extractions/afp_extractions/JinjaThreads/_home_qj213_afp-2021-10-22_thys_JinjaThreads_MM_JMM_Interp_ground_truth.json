{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/JMM_Interp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma jmm'_J_typesafe:\n  \"J_typesafe addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\"", "lemma jmm'_JVM_typesafe:\n  \"JVM_typesafe addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\"", "lemma jmm_typeof_addr_compP [simp]:\n  \"jmm_typeof_addr (compP f P) = jmm_typeof_addr P\"", "lemma compP2_compP1_convs:\n  \"is_type (compP2 (compP1 P)) = is_type P\"\n  \"is_class (compP2 (compP1 P)) = is_class P\"\n  \"jmm'_addr_loc_type (compP2 (compP1 P)) = jmm'_addr_loc_type P\"\n  \"jmm'_conf (compP2 (compP1 P)) = jmm'_conf P\"", "lemma jmm'_J_JVM_conf_read:\n  \"J_JVM_conf_read addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\"", "lemma jmm_J_allocated_progress:\n  \"J_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf jmm_allocated P\"", "lemma jmm'_J_allocated_progress:\n  \"J_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf jmm_allocated P\"", "lemma jmm_JVM_allocated_progress:\n  \"JVM_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf jmm_allocated P\"", "lemma jmm'_JVM_allocated_progress:\n  \"JVM_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf jmm_allocated P\""], "translations": [["", "lemma jmm'_J_typesafe:\n  \"J_typesafe addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J_typesafe (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P", "by unfold_locales"], ["", "lemma jmm'_JVM_typesafe:\n  \"JVM_typesafe addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_typesafe (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P", "by unfold_locales"], ["", "lemma jmm_typeof_addr_compP [simp]:\n  \"jmm_typeof_addr (compP f P) = jmm_typeof_addr P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jmm_typeof_addr (compP f P) = jmm_typeof_addr P", "by(simp add: jmm_typeof_addr_def fun_eq_iff)"], ["", "lemma compP2_compP1_convs:\n  \"is_type (compP2 (compP1 P)) = is_type P\"\n  \"is_class (compP2 (compP1 P)) = is_class P\"\n  \"jmm'_addr_loc_type (compP2 (compP1 P)) = jmm'_addr_loc_type P\"\n  \"jmm'_conf (compP2 (compP1 P)) = jmm'_conf P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_type (compP2 (compP1 P)) = is_type P &&&\n     is_class (compP2 (compP1 P)) = is_class P) &&&\n    jmm'_addr_loc_type (compP2 (compP1 P)) = jmm'_addr_loc_type P &&&\n    jmm'_conf (compP2 (compP1 P)) = jmm'_conf P", "by(simp_all add: compP2_def heap_base.compP_conf heap_base.compP_addr_loc_type fun_eq_iff split: addr_loc.splits)"], ["", "lemma jmm'_J_JVM_conf_read:\n  \"J_JVM_conf_read addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J_JVM_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P", "apply(rule J_JVM_conf_read.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. J1_JVM_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP1 P)", "apply(rule J1_JVM_conf_read.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP2 (compP1 P))", "apply(rule JVM_conf_read.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. heap_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP2 (compP1 P))\n 2. JVM_heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf (compP2 (compP1 P))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. JVM_heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf (compP2 (compP1 P))\n 2. heap_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP2 (compP1 P))", "apply(rule JVM_heap_conf.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. JVM_heap_conf_base' (\\<lambda>x. x) (\\<lambda>x. x) jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write (compP2 (compP1 P))\n 2. heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf (compP2 (compP1 P))\n 3. heap_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP2 (compP1 P))", "apply(rule JVM_heap_conf_base'.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. heap (\\<lambda>x. x) (\\<lambda>x. x) jmm_allocate (jmm_typeof_addr P)\n     jmm_heap_write (compP2 (compP1 P))\n 2. heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf (compP2 (compP1 P))\n 3. heap_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf\n     (compP2 (compP1 P))", "apply(unfold compP2_def compP1_def compP_heap compP_heap_conf compP_heap_conf_read jmm_typeof_addr_compP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. heap (\\<lambda>x. x) (\\<lambda>x. x) jmm_allocate (jmm_typeof_addr P)\n     jmm_heap_write P\n 2. heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf P\n 3. heap_conf_read (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf P", "apply unfold_locales"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jmm_J_allocated_progress:\n  \"J_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf jmm_allocated P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J_allocated_progress (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf\n     jmm_allocated P", "by unfold_locales"], ["", "lemma jmm'_J_allocated_progress:\n  \"J_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf jmm_allocated P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J_allocated_progress (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n     jmm_hconf jmm_allocated P", "by(unfold_locales)"], ["", "lemma jmm_JVM_allocated_progress:\n  \"JVM_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf jmm_allocated P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_allocated_progress (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write jmm_hconf\n     jmm_allocated P", "by unfold_locales"], ["", "lemma jmm'_JVM_allocated_progress:\n  \"JVM_allocated_progress addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write jmm_hconf jmm_allocated P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_allocated_progress (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n     jmm_hconf jmm_allocated P", "by(unfold_locales)"], ["", "end"]]}