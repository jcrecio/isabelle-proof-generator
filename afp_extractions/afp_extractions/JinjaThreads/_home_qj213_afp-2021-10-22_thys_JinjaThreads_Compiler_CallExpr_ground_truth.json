{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Compiler/CallExpr.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma inline_calls_map_Val_append [simp]:\n  \"inline_calls f (map Val vs @ es) = map Val vs @ inline_calls f es\"", "lemma inline_call_eq_Val_aux:\n  \"inline_call e E = Val v \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> e = Val v\"", "lemmas inline_call_eq_Val [dest] = inline_call_eq_Val_aux inline_call_eq_Val_aux[OF sym, THEN sym]", "lemma inline_calls_eq_empty [simp]: \"inline_calls e es = [] \\<longleftrightarrow> es = []\"", "lemma inline_calls_map_Val [simp]: \"inline_calls e (map Val vs) = map Val vs\"", "lemma  fixes E :: \"('a,'b, 'addr) exp\" and Es :: \"('a,'b, 'addr) exp list\"\n  shows inline_call_eq_Throw [dest]: \"inline_call e E = Throw a \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> e = Throw a \\<or> e = addr a\"", "lemma Throw_eq_inline_call_eq [dest]:\n  \"inline_call e E = Throw a \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> Throw a = e \\<or> addr a = e\"", "lemma is_vals_inline_calls [dest]:\n  \"\\<lbrakk> is_vals (inline_calls e es); calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\"", "lemma [dest]: \"\\<lbrakk> inline_calls e es = map Val vs; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\"\n              \"\\<lbrakk> map Val vs = inline_calls e es; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\"", "lemma inline_calls_eq_Val_Throw [dest]:\n  \"\\<lbrakk> inline_calls e es = map Val vs @ Throw a # es'; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> e = Throw a \\<or> is_val e\"", "lemma Val_Throw_eq_inline_calls [dest]:\n  \"\\<lbrakk> map Val vs @ Throw a # es' = inline_calls e es; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> Throw a = e \\<or> is_val e\"", "lemma call_inline_call [simp]:\n  \"call e = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> call (inline_call {v:T=vo; e'} e) = call e'\"\n  \"calls es = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> calls (inline_calls {v:T=vo;e'} es) = call e'\"", "lemma fv_inline_call: \"fv (inline_call e' e) \\<subseteq> fv e \\<union> fv e'\"\n  and fvs_inline_calls: \"fvs (inline_calls e' es) \\<subseteq> fvs es \\<union> fv e'\"", "lemma contains_insync_inline_call_conv:\n  \"contains_insync (inline_call e e') \\<longleftrightarrow> contains_insync e \\<and> call e' \\<noteq> None \\<or> contains_insync e'\"\n  and contains_insyncs_inline_calls_conv:\n  \"contains_insyncs (inline_calls e es') \\<longleftrightarrow> contains_insync e \\<and> calls es' \\<noteq> None \\<or> contains_insyncs es'\"", "lemma contains_insync_inline_call [simp]:\n  \"call e' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> contains_insync (inline_call e e') \\<longleftrightarrow> contains_insync e \\<or> contains_insync e'\"\n  and contains_insyncs_inline_calls [simp]:\n  \"calls es' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> contains_insyncs (inline_calls e es') \\<longleftrightarrow> contains_insync e \\<or> contains_insyncs es'\"", "lemma collapse_append [simp]:\n  \"collapse (e, es @ es') = collapse (collapse (e, es), es')\"", "lemma collapse_conv_foldl:\n  \"collapse (e, es) = foldl inline_call e es\"", "lemma fv_collapse: \"\\<forall>e \\<in> set es. is_call e \\<Longrightarrow> fv (collapse (e, es)) \\<subseteq> fvs (e # es)\"", "lemma final_inline_callD: \"\\<lbrakk> final (inline_call E e); is_call e \\<rbrakk> \\<Longrightarrow> final E\"", "lemma collapse_finalD: \"\\<lbrakk> final (collapse (e, es)); \\<forall>e\\<in>set es. is_call e \\<rbrakk> \\<Longrightarrow> final e\"", "lemma synthesized_call_conv:\n  \"synthesized_call P h (a, M, vs) = \n   (\\<exists>T Ts Tr D. typeof_addr h a = \\<lfloor>T\\<rfloor> \\<and> P \\<turnstile> class_type_of T sees M:Ts\\<rightarrow>Tr = Native in D)\""], "translations": [["", "lemma inline_calls_map_Val_append [simp]:\n  \"inline_calls f (map Val vs @ es) = map Val vs @ inline_calls f es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inline_calls f (map Val vs @ es) = map Val vs @ inline_calls f es", "by(induct vs, auto)"], ["", "lemma inline_call_eq_Val_aux:\n  \"inline_call e E = Val v \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> e = Val v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inline_call e E = Val v;\n     call E = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> e = Val v", "by(induct E)(auto split: if_split_asm)"], ["", "lemmas inline_call_eq_Val [dest] = inline_call_eq_Val_aux inline_call_eq_Val_aux[OF sym, THEN sym]"], ["", "lemma inline_calls_eq_empty [simp]: \"inline_calls e es = [] \\<longleftrightarrow> es = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inline_calls e es = []) = (es = [])", "by(cases es, auto)"], ["", "lemma inline_calls_map_Val [simp]: \"inline_calls e (map Val vs) = map Val vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inline_calls e (map Val vs) = map Val vs", "by(induct vs) auto"], ["", "lemma  fixes E :: \"('a,'b, 'addr) exp\" and Es :: \"('a,'b, 'addr) exp list\"\n  shows inline_call_eq_Throw [dest]: \"inline_call e E = Throw a \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> e = Throw a \\<or> e = addr a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inline_call e E = Throw a;\n     call E = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> e = Throw a \\<or> e = addr a", "by(induct E rule: exp.induct)(fastforce split:if_split_asm)+"], ["", "lemma Throw_eq_inline_call_eq [dest]:\n  \"inline_call e E = Throw a \\<Longrightarrow> call E = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> Throw a = e \\<or> addr a = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inline_call e E = Throw a;\n     call E = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Throw a = e \\<or> addr a = e", "by(auto dest: inline_call_eq_Throw[OF sym])"], ["", "lemma is_vals_inline_calls [dest]:\n  \"\\<lbrakk> is_vals (inline_calls e es); calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_vals (inline_calls e es);\n     calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> is_val e", "by(induct es, auto split: if_split_asm)"], ["", "lemma [dest]: \"\\<lbrakk> inline_calls e es = map Val vs; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\"\n              \"\\<lbrakk> map Val vs = inline_calls e es; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> is_val e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>inline_calls e es = map Val vs;\n      calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n     \\<Longrightarrow> is_val e) &&&\n    (\\<lbrakk>map Val vs = inline_calls e es;\n      calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n     \\<Longrightarrow> is_val e)", "by(fastforce intro!: is_vals_inline_calls del: is_val.intros simp add: is_vals_conv elim: sym)+"], ["", "lemma inline_calls_eq_Val_Throw [dest]:\n  \"\\<lbrakk> inline_calls e es = map Val vs @ Throw a # es'; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> e = Throw a \\<or> is_val e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inline_calls e es = map Val vs @ Throw a # es';\n     calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> e = Throw a \\<or> is_val e", "apply(induct es arbitrary: vs a es')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>vs a es'.\n       \\<lbrakk>inline_calls e [] = map Val vs @ Throw a # es';\n        calls [] = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> e = Throw a \\<or> is_val e\n 2. \\<And>a es vs aa es'.\n       \\<lbrakk>\\<And>vs a es'.\n                   \\<lbrakk>inline_calls e es = map Val vs @ Throw a # es';\n                    calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n                   \\<Longrightarrow> e = Throw a \\<or> is_val e;\n        inline_calls e (a # es) = map Val vs @ Throw aa # es';\n        calls (a # es) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> e = Throw aa \\<or> is_val e", "apply(auto simp add: Cons_eq_append_conv split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Val_Throw_eq_inline_calls [dest]:\n  \"\\<lbrakk> map Val vs @ Throw a # es' = inline_calls e es; calls es = \\<lfloor>aMvs\\<rfloor> \\<rbrakk> \\<Longrightarrow> Throw a = e \\<or> is_val e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map Val vs @ Throw a # es' = inline_calls e es;\n     calls es = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Throw a = e \\<or> is_val e", "by(auto dest: inline_calls_eq_Val_Throw[OF sym])"], ["", "declare option.split [split del] if_split_asm [split]  if_split [split del]"], ["", "lemma call_inline_call [simp]:\n  \"call e = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> call (inline_call {v:T=vo; e'} e) = call e'\"\n  \"calls es = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> calls (inline_calls {v:T=vo;e'} es) = call e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (call e = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n     call (inline_call {v:T=vo; e'} e) = call e') &&&\n    (calls es = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n     calls (inline_calls {v:T=vo; e'} es) = call e')", "apply(induct e and es rule: call.induct calls.induct)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>x.\n       call (new x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (new x)) = call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (newA x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (newA x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (Cast x1 x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (Cast x1 x2)) =\n                         call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1 instanceof x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1 instanceof x2)) =\n                         call e'\n 5. \\<And>x.\n       call (Val x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Val x)) = call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 7. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 8. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 9. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x2) = call e';\n         call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x3) = call e';\n         call (x1\\<lfloor>x2\\<rceil> := x3) =\n         \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (x1\\<lfloor>x2\\<rceil> := x3)) =\n                          call e'\nA total of 25 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (newA x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (newA x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (Cast x1 x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (Cast x1 x2)) =\n                         call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1 instanceof x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1 instanceof x2)) =\n                         call e'\n 4. \\<And>x.\n       call (Val x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Val x)) = call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 6. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 7. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 8. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 10. \\<And>x.\n        \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x) = call e';\n         call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                          call e'\nA total of 24 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (Cast x1 x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (Cast x1 x2)) =\n                         call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1 instanceof x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1 instanceof x2)) =\n                         call e'\n 3. \\<And>x.\n       call (Val x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Val x)) = call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 5. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 6. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 7. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 9. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                          call e'\nA total of 23 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1 instanceof x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1 instanceof x2)) =\n                         call e'\n 2. \\<And>x.\n       call (Val x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Val x)) = call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 4. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 5. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 6. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 8. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 10. \\<And>x1 x2 x3 x4.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x4) = call e';\n         call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (x1\\<bullet>x2{x3} := x4)) =\n                          call e'\nA total of 22 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>x.\n       call (Val x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Val x)) = call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 3. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 5. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 7. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 9. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 10. \\<And>x1 x2 x3 x4 x5.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x4) = call e';\n         call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x5) = call e';\n         call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n         \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                          call e'\nA total of 21 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1 \\<guillemotleft>x2\\<guillemotright> x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1 \\<guillemotleft>x2\\<guillemotright> x3)) =\n                         call e'\n 2. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 6. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 8. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 9. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         calls (inline_calls {v:T=vo; e'} x3) = call e';\n         call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                          call e'\nA total of 20 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>x.\n       call (Var x) = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n       call (inline_call {v:T=vo; e'} (Var x)) = call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 5. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 7. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 8. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 10. \\<And>x1 x2 x3 x4.\n        \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x4) = call e';\n         call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                          call e'\nA total of 19 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1:=x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1:=x2)) = call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 4. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 6. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 7. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 9. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x2) = call e';\n         call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x3) = call e';\n         call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n         \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                          call e'\nA total of 18 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1\\<lfloor>x2\\<rceil>) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil>)) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 3. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 6. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 8. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x3) = call e';\n         call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n         \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                          call e'\nA total of 17 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (x1\\<lfloor>x2\\<rceil> := x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<lfloor>x2\\<rceil> := x3)) =\n                         call e'\n 2. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 5. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 7. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 10. \\<And>x1 x2.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x2) = call e';\n         call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) =\n                          call e'\nA total of 16 subgoals...", "apply(clarsimp)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>x2 x3.\n       \\<lbrakk>call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        \\<not> is_val x2; call x2 = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (if is_val (inline_call {v:T=vo; e'} x2)\n                          then call x3\n                          else call (inline_call {v:T=vo; e'} x2)) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        \\<not> is_val x1; call x1 = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (if is_val (inline_call {v:T=vo; e'} x1)\n                          then if is_val x2 then call x3 else call x2\n                          else call (inline_call {v:T=vo; e'} x1)) =\n                         call e'\n 3. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 6. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 8. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x3) = call e';\n         call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n         \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                          call e'\nA total of 17 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        \\<not> is_val x1; call x1 = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (if is_val (inline_call {v:T=vo; e'} x1)\n                          then if is_val x2 then call x3 else call x2\n                          else call (inline_call {v:T=vo; e'} x1)) =\n                         call e'\n 2. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 5. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 7. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 10. \\<And>x1 x2.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x2) = call e';\n         call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) =\n                          call e'\nA total of 16 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (x\\<bullet>length) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x\\<bullet>length)) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 4. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 6. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 9. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 10. \\<And>x1 x2 x3.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x2) = call e';\n         call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x3) = call e';\n         call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                          call e'\nA total of 15 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call (x1\\<bullet>x2{x3}) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2{x3})) =\n                         call e'\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 3. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 8. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 9. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 10. \\<And>x1 x2.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x2) = call e';\n         call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                          call e'\nA total of 14 subgoals...", "apply(fastforce)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (x1\\<bullet>x2{x3} := x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>x2{x3} := x4)) =\n                         call e'\n 2. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 7. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 8. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 9. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 10. \\<And>x.\n        \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x) = call e';\n         call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) =\n                          call e'\nA total of 13 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 x3 x4 x5.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call x5 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x5) = call e';\n        call (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5)) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (x1\\<bullet>compareAndSwap(x2\\<bullet>x3, x4, x5))) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 6. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 7. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 8. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 9. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 10. \\<And>x1 x2 x3 x4.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         call (inline_call {v:T=vo; e'} x4) = call e';\n         call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> call\n                           (inline_call {v:T=vo; e'}\n                             (try x1 catch(x2 x3) x4)) =\n                          call e'\nA total of 12 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x3) = call e';\n        call (x1\\<bullet>x2(x3)) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (x1\\<bullet>x2(x3))) =\n                         call e'\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 5. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 6. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 7. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 8. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 9. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 10. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n     calls (inline_calls {v:T=vo; e'} []) = call e'\nA total of 11 subgoals...", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x4) = call e';\n        call {x1:x2=x3; x4} = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} {x1:x2=x3; x4}) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 5. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 6. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 7. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 8. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 9. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 10. \\<And>x1 x2.\n        \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                 call (inline_call {v:T=vo; e'} x1) = call e';\n         calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n         calls (inline_calls {v:T=vo; e'} x2) = call e';\n         calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                          call e'", "apply(fastforce)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (sync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (sync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 4. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 5. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 6. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 7. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 8. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 9. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x3) = call e';\n        call (insync\\<^bsub>x1\\<^esub> (x2) x3) =\n        \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (insync\\<^bsub>x1\\<^esub> (x2) x3)) =\n                         call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 3. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 5. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 6. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 7. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 8. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (x1;; x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (x1;; x2)) = call e'\n 2. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 4. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 6. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 7. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call x3 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x3) = call e';\n        call (if (x1) x2 else x3) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'} (if (x1) x2 else x3)) =\n                         call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 3. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 5. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 6. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x2) = call e';\n        call (while (x1) x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (while (x1) x2)) =\n                         call e'\n 2. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 4. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 5. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>call x = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x) = call e';\n        call (throw x) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call (inline_call {v:T=vo; e'} (throw x)) = call e'\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 3. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 4. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        call x4 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        call (inline_call {v:T=vo; e'} x4) = call e';\n        call (try x1 catch(x2 x3) x4) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> call\n                          (inline_call {v:T=vo; e'}\n                            (try x1 catch(x2 x3) x4)) =\n                         call e'\n 2. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 3. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (2 subgoals):\n 1. calls [] = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n    calls (inline_calls {v:T=vo; e'} []) = call e'\n 2. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>call x1 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n                call (inline_call {v:T=vo; e'} x1) = call e';\n        calls x2 = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n        calls (inline_calls {v:T=vo; e'} x2) = call e';\n        calls (x1 # x2) = \\<lfloor>aMvs\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> calls (inline_calls {v:T=vo; e'} (x1 # x2)) =\n                         call e'", "apply(fastforce split: if_split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare option.split [split] if_split [split] if_split_asm [split del]"], ["", "lemma fv_inline_call: \"fv (inline_call e' e) \\<subseteq> fv e \\<union> fv e'\"\n  and fvs_inline_calls: \"fvs (inline_calls e' es) \\<subseteq> fvs es \\<union> fv e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (inline_call e' e) \\<subseteq> fv e \\<union> fv e' &&&\n    fvs (inline_calls e' es) \\<subseteq> fvs es \\<union> fv e'", "by(induct e and es rule: call.induct calls.induct)(fastforce split: if_split_asm)+"], ["", "lemma contains_insync_inline_call_conv:\n  \"contains_insync (inline_call e e') \\<longleftrightarrow> contains_insync e \\<and> call e' \\<noteq> None \\<or> contains_insync e'\"\n  and contains_insyncs_inline_calls_conv:\n  \"contains_insyncs (inline_calls e es') \\<longleftrightarrow> contains_insync e \\<and> calls es' \\<noteq> None \\<or> contains_insyncs es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. contains_insync (inline_call e e') =\n    (contains_insync e \\<and> call e' \\<noteq> None \\<or>\n     contains_insync e') &&&\n    contains_insyncs (inline_calls e es') =\n    (contains_insync e \\<and> calls es' \\<noteq> None \\<or>\n     contains_insyncs es')", "by(induct e' and es' rule: call.induct calls.induct)(auto split: if_split_asm simp add: is_vals_conv)"], ["", "lemma contains_insync_inline_call [simp]:\n  \"call e' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> contains_insync (inline_call e e') \\<longleftrightarrow> contains_insync e \\<or> contains_insync e'\"\n  and contains_insyncs_inline_calls [simp]:\n  \"calls es' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow> contains_insyncs (inline_calls e es') \\<longleftrightarrow> contains_insync e \\<or> contains_insyncs es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (call e' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n     contains_insync (inline_call e e') =\n     (contains_insync e \\<or> contains_insync e')) &&&\n    (calls es' = \\<lfloor>aMvs\\<rfloor> \\<Longrightarrow>\n     contains_insyncs (inline_calls e es') =\n     (contains_insync e \\<or> contains_insyncs es'))", "by(simp_all add: contains_insync_inline_call_conv contains_insyncs_inline_calls_conv)"], ["", "lemma collapse_append [simp]:\n  \"collapse (e, es @ es') = collapse (collapse (e, es), es')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. collapse (e, es @ es') = collapse (collapse (e, es), es')", "by(induct es arbitrary: e, auto)"], ["", "lemma collapse_conv_foldl:\n  \"collapse (e, es) = foldl inline_call e es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. collapse (e, es) = foldl inline_call e es", "by(induct es arbitrary: e) simp_all"], ["", "lemma fv_collapse: \"\\<forall>e \\<in> set es. is_call e \\<Longrightarrow> fv (collapse (e, es)) \\<subseteq> fvs (e # es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>set es. is_call e \\<Longrightarrow>\n    fv (collapse (e, es)) \\<subseteq> fvs (e # es)", "apply(induct es arbitrary: e)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e.\n       Ball (set []) is_call \\<Longrightarrow>\n       fv (collapse (e, [])) \\<subseteq> fvs [e]\n 2. \\<And>a es e.\n       \\<lbrakk>\\<And>e.\n                   Ball (set es) is_call \\<Longrightarrow>\n                   fv (collapse (e, es)) \\<subseteq> fvs (e # es);\n        Ball (set (a # es)) is_call\\<rbrakk>\n       \\<Longrightarrow> fv (collapse (e, a # es))\n                         \\<subseteq> fvs (e # a # es)", "apply(insert fv_inline_call)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e.\n       \\<lbrakk>Ball (set []) is_call;\n        \\<And>e' e.\n           fv (inline_call e' e) \\<subseteq> fv e \\<union> fv e'\\<rbrakk>\n       \\<Longrightarrow> fv (collapse (e, [])) \\<subseteq> fvs [e]\n 2. \\<And>a es e.\n       \\<lbrakk>\\<And>e.\n                   Ball (set es) is_call \\<Longrightarrow>\n                   fv (collapse (e, es)) \\<subseteq> fvs (e # es);\n        Ball (set (a # es)) is_call;\n        \\<And>e' e.\n           fv (inline_call e' e) \\<subseteq> fv e \\<union> fv e'\\<rbrakk>\n       \\<Longrightarrow> fv (collapse (e, a # es))\n                         \\<subseteq> fvs (e # a # es)", "apply(fastforce dest: subsetD)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma final_inline_callD: \"\\<lbrakk> final (inline_call E e); is_call e \\<rbrakk> \\<Longrightarrow> final E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>final (inline_call E e); is_call e\\<rbrakk>\n    \\<Longrightarrow> final E", "by(induct e)(auto simp add: is_call_def split: if_split_asm)"], ["", "lemma collapse_finalD: \"\\<lbrakk> final (collapse (e, es)); \\<forall>e\\<in>set es. is_call e \\<rbrakk> \\<Longrightarrow> final e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>final (collapse (e, es));\n     \\<forall>e\\<in>set es. is_call e\\<rbrakk>\n    \\<Longrightarrow> final e", "by(induct es arbitrary: e)(auto dest: final_inline_callD)"], ["", "context heap_base begin"], ["", "definition synthesized_call :: \"'m prog \\<Rightarrow> 'heap \\<Rightarrow> ('addr \\<times> mname \\<times> 'addr val list) \\<Rightarrow> bool\"\nwhere\n  \"synthesized_call P h = \n   (\\<lambda>(a, M, vs). \\<exists>T Ts Tr D. typeof_addr h a = \\<lfloor>T\\<rfloor> \\<and> P \\<turnstile> class_type_of T sees M:Ts\\<rightarrow>Tr = Native in D)\""], ["", "lemma synthesized_call_conv:\n  \"synthesized_call P h (a, M, vs) = \n   (\\<exists>T Ts Tr D. typeof_addr h a = \\<lfloor>T\\<rfloor> \\<and> P \\<turnstile> class_type_of T sees M:Ts\\<rightarrow>Tr = Native in D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synthesized_call P h (a, M, vs) =\n    (\\<exists>T Ts Tr D.\n        typeof_addr h a = \\<lfloor>T\\<rfloor> \\<and>\n        P \\<turnstile> class_type_of\n                        T sees M: Ts\\<rightarrow>Tr = Native in D)", "by(simp add: synthesized_call_def)"], ["", "end"], ["", "end"]]}