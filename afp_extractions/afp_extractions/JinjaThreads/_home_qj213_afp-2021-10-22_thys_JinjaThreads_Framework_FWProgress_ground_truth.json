{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWProgress.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma wf_redE:\n  assumes \"s \\<in> wf_state\" \"thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\"\n  and \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x'', m''\\<rangle>\" \"\\<not> waiting (wset s t)\"\n  obtains ta' x' m'\n  where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>\" \"actions_ok' s t ta'\" \"actions_subset ta' ta\"\n  | ta' x' m' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>\" \"actions_ok s t ta'\"", "lemma wf_progressE:\n  assumes \"s \\<in> wf_state\"\n  and \"thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\" \"\\<not> final x\"\n  obtains ta x' m' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"", "lemma wf_progress_satisfiable:\n  \"\\<lbrakk> s \\<in> wf_state; thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; \\<not> final x \\<rbrakk> \n  \\<Longrightarrow> \\<exists>ta x' m' s'. t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s' t ta\"", "theorem redT_progress:\n  assumes wfs: \"s \\<in> wf_state\" \n  and ndead: \"\\<not> deadlock s\"\n  shows \"\\<exists>t' ta' s'. s -t'\\<triangleright>ta'\\<rightarrow> s'\""], "translations": [["", "lemma wf_redE:\n  assumes \"s \\<in> wf_state\" \"thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\"\n  and \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x'', m''\\<rangle>\" \"\\<not> waiting (wset s t)\"\n  obtains ta' x' m'\n  where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>\" \"actions_ok' s t ta'\" \"actions_subset ta' ta\"\n  | ta' x' m' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>\" \"actions_ok s t ta'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ta' x' m'.\n                \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n               s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>;\n                 actions_ok' s t ta'; actions_subset ta' ta\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>ta' x' m'.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         actions_ok s t ta'\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using wf_red[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>ta' x' m'.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n     (actions_ok s t ta' \\<or>\n      actions_ok' s t ta' \\<and> actions_subset ta' ta)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ta' x' m'.\n                \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n               s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>;\n                 actions_ok' s t ta'; actions_subset ta' ta\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>ta' x' m'.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         actions_ok s t ta'\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["", "lemma wf_progressE:\n  assumes \"s \\<in> wf_state\"\n  and \"thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\" \"\\<not> final x\"\n  obtains ta x' m' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ta x' m'.\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> wf_state\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  \\<not> final x\n\ngoal (1 subgoal):\n 1. (\\<And>ta x' m'.\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: wf_progress)"], ["", "lemma wf_progress_satisfiable:\n  \"\\<lbrakk> s \\<in> wf_state; thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; \\<not> final x \\<rbrakk> \n  \\<Longrightarrow> \\<exists>ta x' m' s'. t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s' t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> wf_state;\n     thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; \\<not> final x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta x' m' s'.\n                         t \\<turnstile> \\<langle>x, shr\n               s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n                         actions_ok s' t ta", "apply(frule (2) wf_progress)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> wf_state;\n     thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; \\<not> final x;\n     \\<exists>ta x' m'.\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta x' m' s'.\n                         t \\<turnstile> \\<langle>x, shr\n               s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n                         actions_ok s' t ta", "apply(blast dest: ta_satisfiable)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem redT_progress:\n  assumes wfs: \"s \\<in> wf_state\" \n  and ndead: \"\\<not> deadlock s\"\n  shows \"\\<exists>t' ta' s'. s -t'\\<triangleright>ta'\\<rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from wfs"], ["proof (chain)\npicking this:\n  s \\<in> wf_state", "have lok: \"lock_thread_ok (locks s) (thr s)\"\n    and wfin: \"wset_final_ok (wset s) (thr s)\""], ["proof (prove)\nusing this:\n  s \\<in> wf_state\n\ngoal (1 subgoal):\n 1. lock_thread_ok (locks s) (thr s) &&& wset_final_ok (wset s) (thr s)", "by(auto dest: wf_stateD)"], ["proof (state)\nthis:\n  lock_thread_ok (locks s) (thr s)\n  wset_final_ok (wset s) (thr s)\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from ndead"], ["proof (chain)\npicking this:\n  \\<not> deadlock s", "have \"\\<exists>t x ln l. thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and> \n          (wset s t = None \\<and> ln = no_wait_locks \\<and> \\<not> final x \\<and> (\\<exists>LT. t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and> (\\<forall>lt \\<in> LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n           \\<not> waiting (wset s t) \\<and> ln $ l > 0 \\<and> (\\<forall>l. ln $ l > 0 \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n          (\\<exists>w. ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>))\""], ["proof (prove)\nusing this:\n  \\<not> deadlock s\n\ngoal (1 subgoal):\n 1. \\<exists>t x ln l.\n       thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n       (wset s t = None \\<and>\n        ln = no_wait_locks \\<and>\n        \\<not> final x \\<and>\n        (\\<exists>LT.\n            t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n            (\\<forall>lt\\<in>LT.\n                \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n        \\<not> waiting (wset s t) \\<and>\n        0 < ln $ l \\<and>\n        (\\<forall>l.\n            0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n        (\\<exists>w.\n            ln = no_wait_locks \\<and>\n            wset s t = \\<lfloor>PostWS w\\<rfloor>))", "by(rule contrapos_np)(blast intro!: all_waiting_implies_deadlock[OF lok] intro: must_syncI[OF wf_progress_satisfiable[OF wfs]])"], ["proof (state)\nthis:\n  \\<exists>t x ln l.\n     thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n     (wset s t = None \\<and>\n      ln = no_wait_locks \\<and>\n      \\<not> final x \\<and>\n      (\\<exists>LT.\n          t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n          (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n      \\<not> waiting (wset s t) \\<and>\n      0 < ln $ l \\<and>\n      (\\<forall>l.\n          0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n      (\\<exists>w.\n          ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>))\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "then"], ["proof (chain)\npicking this:\n  \\<exists>t x ln l.\n     thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n     (wset s t = None \\<and>\n      ln = no_wait_locks \\<and>\n      \\<not> final x \\<and>\n      (\\<exists>LT.\n          t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n          (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n      \\<not> waiting (wset s t) \\<and>\n      0 < ln $ l \\<and>\n      (\\<forall>l.\n          0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n      (\\<exists>w.\n          ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>))", "obtain t x ln l\n    where tst: \"thr s t = \\<lfloor>(x, ln)\\<rfloor>\"\n    and a: \"wset s t = None \\<and> ln = no_wait_locks \\<and> \\<not> final x \\<and> \n              (\\<exists>LT. t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and> (\\<forall>lt \\<in> LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n            \\<not> waiting (wset s t) \\<and> ln $ l > 0 \\<and> (\\<forall>l. ln $ l > 0 \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n            (\\<exists>w. ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>)\""], ["proof (prove)\nusing this:\n  \\<exists>t x ln l.\n     thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n     (wset s t = None \\<and>\n      ln = no_wait_locks \\<and>\n      \\<not> final x \\<and>\n      (\\<exists>LT.\n          t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n          (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n      \\<not> waiting (wset s t) \\<and>\n      0 < ln $ l \\<and>\n      (\\<forall>l.\n          0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n      (\\<exists>w.\n          ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>))\n\ngoal (1 subgoal):\n 1. (\\<And>t x ln l.\n        \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n         wset s t = None \\<and>\n         ln = no_wait_locks \\<and>\n         \\<not> final x \\<and>\n         (\\<exists>LT.\n             t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n             (\\<forall>lt\\<in>LT.\n                 \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n         \\<not> waiting (wset s t) \\<and>\n         0 < ln $ l \\<and>\n         (\\<forall>l.\n             0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n         (\\<exists>w.\n             ln = no_wait_locks \\<and>\n             wset s t = \\<lfloor>PostWS w\\<rfloor>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  wset s t = None \\<and>\n  ln = no_wait_locks \\<and>\n  \\<not> final x \\<and>\n  (\\<exists>LT.\n      t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n      (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n  \\<not> waiting (wset s t) \\<and>\n  0 < ln $ l \\<and>\n  (\\<forall>l. 0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n  (\\<exists>w.\n      ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from a"], ["proof (chain)\npicking this:\n  wset s t = None \\<and>\n  ln = no_wait_locks \\<and>\n  \\<not> final x \\<and>\n  (\\<exists>LT.\n      t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n      (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n  \\<not> waiting (wset s t) \\<and>\n  0 < ln $ l \\<and>\n  (\\<forall>l. 0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n  (\\<exists>w.\n      ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>)", "have cases[case_names normal acquire wakeup]:\n    \"\\<And>thesis. \n        \\<lbrakk> \\<And>LT. \\<lbrakk> wset s t = None; ln = no_wait_locks; \\<not> final x; t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>; \n                 \\<And>lt. lt \\<in> LT \\<Longrightarrow> \\<not> must_wait s t lt (dom (thr s)) \\<rbrakk> \\<Longrightarrow> thesis;\n          \\<lbrakk> \\<not> waiting (wset s t); ln $ l > 0; \\<And>l. ln $ l > 0 \\<Longrightarrow> may_lock (locks s $ l) t \\<rbrakk> \\<Longrightarrow> thesis;\n          \\<And>w. \\<lbrakk> ln = no_wait_locks; wset s t = \\<lfloor>PostWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\""], ["proof (prove)\nusing this:\n  wset s t = None \\<and>\n  ln = no_wait_locks \\<and>\n  \\<not> final x \\<and>\n  (\\<exists>LT.\n      t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong> \\<and>\n      (\\<forall>lt\\<in>LT. \\<not> must_wait s t lt (dom (thr s)))) \\<or>\n  \\<not> waiting (wset s t) \\<and>\n  0 < ln $ l \\<and>\n  (\\<forall>l. 0 < ln $ l \\<longrightarrow> may_lock (locks s $ l) t) \\<or>\n  (\\<exists>w.\n      ln = no_wait_locks \\<and> wset s t = \\<lfloor>PostWS w\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>LT.\n                   \\<lbrakk>wset s t = None; ln = no_wait_locks;\n                    \\<not> final x;\n                    t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n                    \\<And>lt.\n                       lt \\<in> LT \\<Longrightarrow>\n                       \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n         \\<And>l.\n            0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>w.\n           \\<lbrakk>ln = no_wait_locks;\n            wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>LT.\n              \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n               t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n               \\<And>lt.\n                  lt \\<in> LT \\<Longrightarrow>\n                  \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n              \\<Longrightarrow> ?thesis14;\n   \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n    \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n   \\<Longrightarrow> ?thesis14;\n   \\<And>w.\n      \\<lbrakk>ln = no_wait_locks;\n       wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n      \\<Longrightarrow> ?thesis14\\<rbrakk>\n  \\<Longrightarrow> ?thesis14\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "proof(cases rule: cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "case (normal LT)"], ["proof (state)\nthis:\n  wset s t = None\n  ln = no_wait_locks\n  \\<not> final x\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>\n  ?lt14 \\<in> LT \\<Longrightarrow> \\<not> must_wait s t ?lt14 (dom (thr s))\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "note [simp] = \\<open>ln = no_wait_locks\\<close> \n      and nfine' = \\<open>\\<not> final x\\<close>\n      and cl' = \\<open>t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>\\<close> \n      and mw = \\<open>\\<And>lt. lt\\<in>LT \\<Longrightarrow> \\<not> must_wait s t lt (dom (thr s))\\<close>"], ["proof (state)\nthis:\n  ln = no_wait_locks\n  \\<not> final x\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>\n  ?lt \\<in> LT \\<Longrightarrow> \\<not> must_wait s t ?lt (dom (thr s))\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from tst nfine'"], ["proof (chain)\npicking this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> final x", "obtain x'' m'' ta'\n      where red: \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\""], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> final x\n\ngoal (1 subgoal):\n 1. (\\<And>ta' x'' m''.\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto intro: wf_progressE[OF wfs])"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from cl'"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>", "have \"\\<exists>ta''' x''' m'''. t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle> \\<and> \n            LT = collect_waits ta'''\""], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>\n\ngoal (1 subgoal):\n 1. \\<exists>ta''' x''' m'''.\n       t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle> \\<and>\n       LT = collect_waits ta'''", "by (fastforce elim!: can_syncE)"], ["proof (state)\nthis:\n  \\<exists>ta''' x''' m'''.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle> \\<and>\n     LT = collect_waits ta'''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "then"], ["proof (chain)\npicking this:\n  \\<exists>ta''' x''' m'''.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle> \\<and>\n     LT = collect_waits ta'''", "obtain ta''' x''' m'''\n      where red'': \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle>\"\n      and L: \"LT = collect_waits ta'''\""], ["proof (prove)\nusing this:\n  \\<exists>ta''' x''' m'''.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle> \\<and>\n     LT = collect_waits ta'''\n\ngoal (1 subgoal):\n 1. (\\<And>ta''' x''' m'''.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle>;\n         LT = collect_waits ta'''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'''\\<rightarrow> \\<langle>x''', m'''\\<rangle>\n  LT = collect_waits ta'''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from \\<open>wset s t = None\\<close>"], ["proof (chain)\npicking this:\n  wset s t = None", "have \"\\<not> waiting (wset s t)\""], ["proof (prove)\nusing this:\n  wset s t = None\n\ngoal (1 subgoal):\n 1. \\<not> waiting (wset s t)", "by(simp add: not_waiting_iff)"], ["proof (state)\nthis:\n  \\<not> waiting (wset s t)\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "with tst"], ["proof (chain)\npicking this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)", "obtain ta'' x'' m''\n      where red': \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta''\\<rightarrow> \\<langle>x'', m''\\<rangle>\"\n      and aok': \"actions_ok s t ta'' \\<or> actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\""], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n\ngoal (1 subgoal):\n 1. (\\<And>ta'' x'' m''.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta''\\<rightarrow> \\<langle>x'', m''\\<rangle>;\n         actions_ok s t ta'' \\<or>\n         actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(rule wf_redE[OF wfs _ red''], auto)"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta''\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'' \\<or>\n  actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from aok'"], ["proof (chain)\npicking this:\n  actions_ok s t ta'' \\<or>\n  actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''", "have \"actions_ok s t ta''\""], ["proof (prove)\nusing this:\n  actions_ok s t ta'' \\<or>\n  actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\n\ngoal (1 subgoal):\n 1. actions_ok s t ta''", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "assume \"actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\""], ["proof (state)\nthis:\n  actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "hence aok': \"actions_ok' s t ta''\" and aos: \"actions_subset ta'' ta'''\""], ["proof (prove)\nusing this:\n  actions_ok' s t ta'' \\<and> actions_subset ta'' ta'''\n\ngoal (1 subgoal):\n 1. actions_ok' s t ta'' &&& actions_subset ta'' ta'''", "by simp_all"], ["proof (state)\nthis:\n  actions_ok' s t ta''\n  actions_subset ta'' ta'''\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "{"], ["proof (state)\nthis:\n  actions_ok' s t ta''\n  actions_subset ta'' ta'''\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "fix l"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "assume \"Inl l \\<in> LT\""], ["proof (state)\nthis:\n  Inl l \\<in> LT\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "{"], ["proof (state)\nthis:\n  Inl l \\<in> LT\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "fix t'"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "assume \"t \\<noteq> t'\""], ["proof (state)\nthis:\n  t \\<noteq> t'\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "have \"\\<not> has_lock (locks s $ l) t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_lock (locks s $ l) t'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "assume \"has_lock (locks s $ l) t'\""], ["proof (state)\nthis:\n  has_lock (locks s $ l) t'\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  has_lock (locks s $ l) t'\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "with lok"], ["proof (chain)\npicking this:\n  lock_thread_ok (locks s) (thr s)\n  has_lock (locks s $ l) t'", "have \"thr s t' \\<noteq> None\""], ["proof (prove)\nusing this:\n  lock_thread_ok (locks s) (thr s)\n  has_lock (locks s $ l) t'\n\ngoal (1 subgoal):\n 1. thr s t' \\<noteq> None", "by(auto dest: lock_thread_okD)"], ["proof (state)\nthis:\n  thr s t' \\<noteq> None\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  has_lock (locks s $ l) t'\n  thr s t' \\<noteq> None", "have \"must_wait s t (Inl l) (dom (thr s))\""], ["proof (prove)\nusing this:\n  has_lock (locks s $ l) t'\n  thr s t' \\<noteq> None\n\ngoal (1 subgoal):\n 1. must_wait s t (Inl l) (dom (thr s))", "using \\<open>t \\<noteq> t'\\<close>"], ["proof (prove)\nusing this:\n  has_lock (locks s $ l) t'\n  thr s t' \\<noteq> None\n  t \\<noteq> t'\n\ngoal (1 subgoal):\n 1. must_wait s t (Inl l) (dom (thr s))", "by(auto)"], ["proof (state)\nthis:\n  must_wait s t (Inl l) (dom (thr s))\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  must_wait s t (Inl l) (dom (thr s))\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "from \\<open>Inl l \\<in> LT\\<close>"], ["proof (chain)\npicking this:\n  Inl l \\<in> LT", "have \"\\<not> must_wait s t (Inl l) (dom (thr s))\""], ["proof (prove)\nusing this:\n  Inl l \\<in> LT\n\ngoal (1 subgoal):\n 1. \\<not> must_wait s t (Inl l) (dom (thr s))", "by(rule mw)"], ["proof (state)\nthis:\n  \\<not> must_wait s t (Inl l) (dom (thr s))\n\ngoal (1 subgoal):\n 1. has_lock (locks s $ l) t' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  must_wait s t (Inl l) (dom (thr s))\n  \\<not> must_wait s t (Inl l) (dom (thr s))", "show False"], ["proof (prove)\nusing this:\n  must_wait s t (Inl l) (dom (thr s))\n  \\<not> must_wait s t (Inl l) (dom (thr s))\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> has_lock (locks s $ l) t'\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "}"], ["proof (state)\nthis:\n  t \\<noteq> ?t'16 \\<Longrightarrow> \\<not> has_lock (locks s $ l) ?t'16\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "hence \"may_lock (locks s $ l) t\""], ["proof (prove)\nusing this:\n  t \\<noteq> ?t'16 \\<Longrightarrow> \\<not> has_lock (locks s $ l) ?t'16\n\ngoal (1 subgoal):\n 1. may_lock (locks s $ l) t", "by-(rule classical, auto simp add: not_may_lock_conv)"], ["proof (state)\nthis:\n  may_lock (locks s $ l) t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "}"], ["proof (state)\nthis:\n  Inl ?la16 \\<in> LT \\<Longrightarrow> may_lock (locks s $ ?la16) t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "note mayl = this"], ["proof (state)\nthis:\n  Inl ?la16 \\<in> LT \\<Longrightarrow> may_lock (locks s $ ?la16) t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "{"], ["proof (state)\nthis:\n  Inl ?la16 \\<in> LT \\<Longrightarrow> may_lock (locks s $ ?la16) t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "fix t'"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "assume t'LT: \"Inr (Inl t') \\<in> LT\""], ["proof (state)\nthis:\n  Inr (Inl t') \\<in> LT\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "hence \"\\<not> not_final_thread s t' \\<and> t' \\<noteq> t\""], ["proof (prove)\nusing this:\n  Inr (Inl t') \\<in> LT\n\ngoal (1 subgoal):\n 1. \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "proof(cases \"t' = t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t\n 2. \\<lbrakk>Inr (Inl t') \\<in> LT; t' \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "case False"], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t\n 2. \\<lbrakk>Inr (Inl t') \\<in> LT; t' \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "with t'LT mw L"], ["proof (chain)\npicking this:\n  Inr (Inl t') \\<in> LT\n  ?lt \\<in> LT \\<Longrightarrow> \\<not> must_wait s t ?lt (dom (thr s))\n  LT = collect_waits ta'''\n  t' \\<noteq> t", "show ?thesis"], ["proof (prove)\nusing this:\n  Inr (Inl t') \\<in> LT\n  ?lt \\<in> LT \\<Longrightarrow> \\<not> must_wait s t ?lt (dom (thr s))\n  LT = collect_waits ta'''\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "by(fastforce)"], ["proof (state)\nthis:\n  \\<not> not_final_thread s t' \\<and> t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "case True"], ["proof (state)\nthis:\n  t' = t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "with tst mw[OF t'LT] nfine' L"], ["proof (chain)\npicking this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> must_wait s t (Inr (Inl t')) (dom (thr s))\n  \\<not> final x\n  LT = collect_waits ta'''\n  t' = t", "have False"], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> must_wait s t (Inr (Inl t')) (dom (thr s))\n  \\<not> final x\n  LT = collect_waits ta'''\n  t' = t\n\ngoal (1 subgoal):\n 1. False", "by(auto intro!: must_wait.intros simp add: not_final_thread_iff)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr (Inl t') \\<in> LT; t' = t\\<rbrakk>\n    \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> not_final_thread s t' \\<and> t' \\<noteq> t", ".."], ["proof (state)\nthis:\n  \\<not> not_final_thread s t' \\<and> t' \\<noteq> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> not_final_thread s t' \\<and> t' \\<noteq> t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "}"], ["proof (state)\nthis:\n  Inr (Inl ?t'16) \\<in> LT \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'16 \\<and> ?t'16 \\<noteq> t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "note mayj = this"], ["proof (state)\nthis:\n  Inr (Inl ?t'16) \\<in> LT \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'16 \\<and> ?t'16 \\<noteq> t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "{"], ["proof (state)\nthis:\n  Inr (Inl ?t'16) \\<in> LT \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'16 \\<and> ?t'16 \\<noteq> t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "fix t'"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "assume t': \"Inr (Inr t') \\<in> LT\""], ["proof (state)\nthis:\n  Inr (Inr t') \\<in> LT\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "from t'"], ["proof (chain)\npicking this:\n  Inr (Inr t') \\<in> LT", "have \"\\<not> must_wait s t (Inr (Inr t')) (dom (thr s))\""], ["proof (prove)\nusing this:\n  Inr (Inr t') \\<in> LT\n\ngoal (1 subgoal):\n 1. \\<not> must_wait s t (Inr (Inr t')) (dom (thr s))", "by(rule mw)"], ["proof (state)\nthis:\n  \\<not> must_wait s t (Inr (Inr t')) (dom (thr s))\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "hence \"t' \\<in> interrupts s\""], ["proof (prove)\nusing this:\n  \\<not> must_wait s t (Inr (Inr t')) (dom (thr s))\n\ngoal (1 subgoal):\n 1. t' \\<in> interrupts s", "by(rule contrapos_np)(fastforce intro: all_final_exceptI simp add: not_final_thread_iff)"], ["proof (state)\nthis:\n  t' \\<in> interrupts s\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "}"], ["proof (state)\nthis:\n  Inr (Inr ?t'16) \\<in> LT \\<Longrightarrow> ?t'16 \\<in> interrupts s\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "note interrupt = this"], ["proof (state)\nthis:\n  Inr (Inr ?t'16) \\<in> LT \\<Longrightarrow> ?t'16 \\<in> interrupts s\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "from aos L mayl"], ["proof (chain)\npicking this:\n  actions_subset ta'' ta'''\n  LT = collect_waits ta'''\n  Inl ?la16 \\<in> LT \\<Longrightarrow> may_lock (locks s $ ?la16) t", "have \"\\<And>l. l \\<in> collect_locks' \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub> \\<Longrightarrow> may_lock (locks s $ l) t\""], ["proof (prove)\nusing this:\n  actions_subset ta'' ta'''\n  LT = collect_waits ta'''\n  Inl ?la16 \\<in> LT \\<Longrightarrow> may_lock (locks s $ ?la16) t\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> collect_locks'\n                \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub> \\<Longrightarrow>\n       may_lock (locks s $ l) t", "by auto"], ["proof (state)\nthis:\n  ?l14\n  \\<in> collect_locks'\n         \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub> \\<Longrightarrow>\n  may_lock (locks s $ ?l14) t\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "with aok'"], ["proof (chain)\npicking this:\n  actions_ok' s t ta''\n  ?l14\n  \\<in> collect_locks'\n         \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub> \\<Longrightarrow>\n  may_lock (locks s $ ?l14) t", "have \"lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\""], ["proof (prove)\nusing this:\n  actions_ok' s t ta''\n  ?l14\n  \\<in> collect_locks'\n         \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub> \\<Longrightarrow>\n  may_lock (locks s $ ?l14) t\n\ngoal (1 subgoal):\n 1. lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>", "by(auto intro: lock_ok_las'_into_lock_on_las)"], ["proof (state)\nthis:\n  lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "moreover"], ["proof (state)\nthis:\n  lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "from mayj aos L"], ["proof (chain)\npicking this:\n  Inr (Inl ?t'16) \\<in> LT \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'16 \\<and> ?t'16 \\<noteq> t\n  actions_subset ta'' ta'''\n  LT = collect_waits ta'''", "have \"cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (prove)\nusing this:\n  Inr (Inl ?t'16) \\<in> LT \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'16 \\<and> ?t'16 \\<noteq> t\n  actions_subset ta'' ta'''\n  LT = collect_waits ta'''\n\ngoal (1 subgoal):\n 1. cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>", "by(fastforce intro: may_join_cond_action_oks)"], ["proof (state)\nthis:\n  cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "moreover"], ["proof (state)\nthis:\n  cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "from ta_satisfiable[OF wfs tst[simplified] red']"], ["proof (chain)\npicking this:\n  \\<exists>s'. actions_ok s' t ta''", "obtain is' where \"interrupt_actions_ok is' \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>s'. actions_ok s' t ta''\n\ngoal (1 subgoal):\n 1. (\\<And>is'.\n        interrupt_actions_ok is'\n         \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  interrupt_actions_ok is' \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "with interrupt aos aok' L"], ["proof (chain)\npicking this:\n  Inr (Inr ?t'16) \\<in> LT \\<Longrightarrow> ?t'16 \\<in> interrupts s\n  actions_subset ta'' ta'''\n  actions_ok' s t ta''\n  LT = collect_waits ta'''\n  interrupt_actions_ok is' \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>", "have \"interrupt_actions_ok (interrupts s) \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\""], ["proof (prove)\nusing this:\n  Inr (Inr ?t'16) \\<in> LT \\<Longrightarrow> ?t'16 \\<in> interrupts s\n  actions_subset ta'' ta'''\n  actions_ok' s t ta''\n  LT = collect_waits ta'''\n  interrupt_actions_ok is' \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok (interrupts s)\n     \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>", "by(auto 5 2 intro: interrupt_actions_ok'_collect_interrupts_imp_interrupt_actions_ok)"], ["proof (state)\nthis:\n  interrupt_actions_ok (interrupts s)\n   \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''\n 2. actions_ok' s t ta'' \\<and> actions_subset ta'' ta''' \\<Longrightarrow>\n    actions_ok s t ta''", "ultimately"], ["proof (chain)\npicking this:\n  lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s)\n   \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>", "show \"actions_ok s t ta''\""], ["proof (prove)\nusing this:\n  lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s)\n   \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (1 subgoal):\n 1. actions_ok s t ta''", "using aok'"], ["proof (prove)\nusing this:\n  lock_ok_las (locks s) t \\<lbrace>ta''\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta''\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s)\n   \\<lbrace>ta''\\<rbrace>\\<^bsub>i\\<^esub>\n  actions_ok' s t ta''\n\ngoal (1 subgoal):\n 1. actions_ok s t ta''", "by auto"], ["proof (state)\nthis:\n  actions_ok s t ta''\n\ngoal (1 subgoal):\n 1. actions_ok s t ta'' \\<Longrightarrow> actions_ok s t ta''", "qed"], ["proof (state)\nthis:\n  actions_ok s t ta''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "moreover"], ["proof (state)\nthis:\n  actions_ok s t ta''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "obtain ws'' where \"redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub> ws''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws''.\n        redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub>\n         ws'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using redT_updWs_total[of t \"wset s\" \"\\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub>\"]"], ["proof (prove)\nusing this:\n  \\<exists>ws'.\n     redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (1 subgoal):\n 1. (\\<And>ws''.\n        redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub>\n         ws'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub> ws''\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "then"], ["proof (chain)\npicking this:\n  redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub> ws''", "obtain s' where \"redT_upd s t ta'' x'' m'' s'\""], ["proof (prove)\nusing this:\n  redT_updWs t (wset s) \\<lbrace>ta''\\<rbrace>\\<^bsub>w\\<^esub> ws''\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        redT_upd s t ta'' x'' m'' s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  redT_upd s t ta'' x'' m'' s'\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "ultimately"], ["proof (chain)\npicking this:\n  actions_ok s t ta''\n  redT_upd s t ta'' x'' m'' s'", "have \"s -t\\<triangleright>ta''\\<rightarrow> s'\""], ["proof (prove)\nusing this:\n  actions_ok s t ta''\n  redT_upd s t ta'' x'' m'' s'\n\ngoal (1 subgoal):\n 1. s -t\\<triangleright>ta''\\<rightarrow> s'", "using red' tst \\<open>wset s t = None\\<close>"], ["proof (prove)\nusing this:\n  actions_ok s t ta''\n  redT_upd s t ta'' x'' m'' s'\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta''\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  wset s t = None\n\ngoal (1 subgoal):\n 1. s -t\\<triangleright>ta''\\<rightarrow> s'", "by(auto intro: redT_normal)"], ["proof (state)\nthis:\n  s -t\\<triangleright>ta''\\<rightarrow> s'\n\ngoal (3 subgoals):\n 1. \\<And>LT.\n       \\<lbrakk>wset s t = None; ln = no_wait_locks; \\<not> final x;\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> LT \\<wrong>;\n        \\<And>lt.\n           lt \\<in> LT \\<Longrightarrow>\n           \\<not> must_wait s t lt (dom (thr s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 3. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "thus ?thesis"], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta''\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "by blast"], ["proof (state)\nthis:\n  \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "case acquire"], ["proof (state)\nthis:\n  \\<not> waiting (wset s t)\n  0 < ln $ l\n  0 < ln $ ?l14 \\<Longrightarrow> may_lock (locks s $ ?l14) t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "hence \"may_acquire_all (locks s) t ln\""], ["proof (prove)\nusing this:\n  \\<not> waiting (wset s t)\n  0 < ln $ l\n  0 < ln $ ?l14 \\<Longrightarrow> may_lock (locks s $ ?l14) t\n\ngoal (1 subgoal):\n 1. may_acquire_all (locks s) t ln", "by(auto)"], ["proof (state)\nthis:\n  may_acquire_all (locks s) t ln\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> waiting (wset s t); 0 < ln $ l;\n     \\<And>l. 0 < ln $ l \\<Longrightarrow> may_lock (locks s $ l) t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n 2. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "with tst \\<open>\\<not> waiting (wset s t)\\<close> \\<open>0 < ln $ l\\<close>"], ["proof (chain)\npicking this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  0 < ln $ l\n  may_acquire_all (locks s) t ln", "show ?thesis"], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  0 < ln $ l\n  may_acquire_all (locks s) t ln\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "by(fastforce intro: redT_acquire)"], ["proof (state)\nthis:\n  \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "case (wakeup w)"], ["proof (state)\nthis:\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from \\<open>wset s t = \\<lfloor>PostWS w\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  wset s t = \\<lfloor>PostWS w\\<rfloor>", "have \"\\<not> waiting (wset s t)\""], ["proof (prove)\nusing this:\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<not> waiting (wset s t)", "by(simp add: not_waiting_iff)"], ["proof (state)\nthis:\n  \\<not> waiting (wset s t)\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from tst wakeup"], ["proof (chain)\npicking this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>", "have tst: \"thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from wakeup tst wfin"], ["proof (chain)\npicking this:\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  wset_final_ok (wset s) (thr s)", "have \"\\<not> final x\""], ["proof (prove)\nusing this:\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  wset_final_ok (wset s) (thr s)\n\ngoal (1 subgoal):\n 1. \\<not> final x", "by(auto dest: wset_final_okD)"], ["proof (state)\nthis:\n  \\<not> final x\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from wf_progress[OF wfs tst this]"], ["proof (chain)\npicking this:\n  \\<exists>ta x' m'.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>", "obtain ta x' m' where red: \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<exists>ta x' m'.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>ta x' m'.\n        t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from wf_red[OF wfs tst red \\<open>\\<not> waiting (wset s t)\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>ta' x' m'.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n     (actions_ok s t ta' \\<or>\n      actions_ok' s t ta' \\<and> actions_subset ta' ta)", "obtain ta' x'' m'' \n      where red': \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\"\n      and aok': \"actions_ok s t ta' \\<or> actions_ok' s t ta' \\<and> actions_subset ta' ta\""], ["proof (prove)\nusing this:\n  \\<exists>ta' x' m'.\n     t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n     (actions_ok s t ta' \\<or>\n      actions_ok' s t ta' \\<and> actions_subset ta' ta)\n\ngoal (1 subgoal):\n 1. (\\<And>ta' x'' m''.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>;\n         actions_ok s t ta' \\<or>\n         actions_ok' s t ta' \\<and> actions_subset ta' ta\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta' \\<or> actions_ok' s t ta' \\<and> actions_subset ta' ta\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "from aok'"], ["proof (chain)\npicking this:\n  actions_ok s t ta' \\<or> actions_ok' s t ta' \\<and> actions_subset ta' ta", "have \"actions_ok s t ta'\""], ["proof (prove)\nusing this:\n  actions_ok s t ta' \\<or> actions_ok' s t ta' \\<and> actions_subset ta' ta\n\ngoal (1 subgoal):\n 1. actions_ok s t ta'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "assume \"actions_ok' s t ta' \\<and> actions_subset ta' ta\""], ["proof (state)\nthis:\n  actions_ok' s t ta' \\<and> actions_subset ta' ta\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "hence aok': \"actions_ok' s t ta'\"\n        and subset: \"actions_subset ta' ta\""], ["proof (prove)\nusing this:\n  actions_ok' s t ta' \\<and> actions_subset ta' ta\n\ngoal (1 subgoal):\n 1. actions_ok' s t ta' &&& actions_subset ta' ta", "by simp_all"], ["proof (state)\nthis:\n  actions_ok' s t ta'\n  actions_subset ta' ta\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from wakeup aok'"], ["proof (chain)\npicking this:\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n  actions_ok' s t ta'", "have \"Notified \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n  actions_ok' s t ta'\n\ngoal (1 subgoal):\n 1. Notified \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n    WokenUp \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>", "by(auto simp add: wset_actions_ok_def split: if_split_asm)"], ["proof (state)\nthis:\n  Notified \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from ta_Wakeup_no_join_no_lock_no_interrupt[OF wfs tst red' this]"], ["proof (chain)\npicking this:\n  collect_waits ta' = {}", "have no_join: \"collect_cond_actions \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub> = {}\" \n        and no_lock: \"collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\" \n        and no_interrupt: \"collect_interrupts \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> = {}\""], ["proof (prove)\nusing this:\n  collect_waits ta' = {}\n\ngoal (1 subgoal):\n 1. collect_cond_actions \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub> = {} &&&\n    collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {} &&&\n    collect_interrupts \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> = {}", "by auto"], ["proof (state)\nthis:\n  collect_cond_actions \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub> = {}\n  collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\n  collect_interrupts \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> = {}\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from no_lock"], ["proof (chain)\npicking this:\n  collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}", "have no_lock': \"collect_locks' \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\""], ["proof (prove)\nusing this:\n  collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\n\ngoal (1 subgoal):\n 1. collect_locks' \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}", "using collect_locks'_subset_collect_locks[of \"\\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\"]"], ["proof (prove)\nusing this:\n  collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\n  collect_locks' \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n  \\<subseteq> collect_locks \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (1 subgoal):\n 1. collect_locks' \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}", "by auto"], ["proof (state)\nthis:\n  collect_locks' \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub> = {}\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from aok'"], ["proof (chain)\npicking this:\n  actions_ok' s t ta'", "have \"lock_ok_las' (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\""], ["proof (prove)\nusing this:\n  actions_ok' s t ta'\n\ngoal (1 subgoal):\n 1. lock_ok_las' (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>", "by auto"], ["proof (state)\nthis:\n  lock_ok_las' (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "hence \"lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\""], ["proof (prove)\nusing this:\n  lock_ok_las' (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (1 subgoal):\n 1. lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>", "by(rule lock_ok_las'_into_lock_on_las)(simp add: no_lock')"], ["proof (state)\nthis:\n  lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "moreover"], ["proof (state)\nthis:\n  lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from subset aok' no_join"], ["proof (chain)\npicking this:\n  actions_subset ta' ta\n  actions_ok' s t ta'\n  collect_cond_actions \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub> = {}", "have \"cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (prove)\nusing this:\n  actions_subset ta' ta\n  actions_ok' s t ta'\n  collect_cond_actions \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub> = {}\n\ngoal (1 subgoal):\n 1. cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>", "by(auto intro: may_join_cond_action_oks)"], ["proof (state)\nthis:\n  cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "moreover"], ["proof (state)\nthis:\n  cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "from ta_satisfiable[OF wfs tst[simplified] red']"], ["proof (chain)\npicking this:\n  \\<exists>s'. actions_ok s' t ta'", "obtain is' where \"interrupt_actions_ok is' \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>s'. actions_ok s' t ta'\n\ngoal (1 subgoal):\n 1. (\\<And>is'.\n        interrupt_actions_ok is'\n         \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  interrupt_actions_ok is' \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "with aok' no_interrupt"], ["proof (chain)\npicking this:\n  actions_ok' s t ta'\n  collect_interrupts \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> = {}\n  interrupt_actions_ok is' \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>", "have \"interrupt_actions_ok (interrupts s) \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\""], ["proof (prove)\nusing this:\n  actions_ok' s t ta'\n  collect_interrupts \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub> = {}\n  interrupt_actions_ok is' \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (1 subgoal):\n 1. interrupt_actions_ok (interrupts s)\n     \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>", "by(auto intro: interrupt_actions_ok'_collect_interrupts_imp_interrupt_actions_ok)"], ["proof (state)\nthis:\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (2 subgoals):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'\n 2. actions_ok' s t ta' \\<and> actions_subset ta' ta \\<Longrightarrow>\n    actions_ok s t ta'", "ultimately"], ["proof (chain)\npicking this:\n  lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>", "show \"actions_ok s t ta'\""], ["proof (prove)\nusing this:\n  lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\n\ngoal (1 subgoal):\n 1. actions_ok s t ta'", "using aok'"], ["proof (prove)\nusing this:\n  lock_ok_las (locks s) t \\<lbrace>ta'\\<rbrace>\\<^bsub>l\\<^esub>\n  cond_action_oks s t \\<lbrace>ta'\\<rbrace>\\<^bsub>c\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta'\\<rbrace>\\<^bsub>i\\<^esub>\n  actions_ok' s t ta'\n\ngoal (1 subgoal):\n 1. actions_ok s t ta'", "by auto"], ["proof (state)\nthis:\n  actions_ok s t ta'\n\ngoal (1 subgoal):\n 1. actions_ok s t ta' \\<Longrightarrow> actions_ok s t ta'", "qed"], ["proof (state)\nthis:\n  actions_ok s t ta'\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "moreover"], ["proof (state)\nthis:\n  actions_ok s t ta'\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "obtain ws'' where \"redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws''.\n        redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n         ws'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using redT_updWs_total[of t \"wset s\" \"\\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\"]"], ["proof (prove)\nusing this:\n  \\<exists>ws'.\n     redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (1 subgoal):\n 1. (\\<And>ws''.\n        redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n         ws'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws''\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "then"], ["proof (chain)\npicking this:\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws''", "obtain s' where \"redT_upd s t ta' x'' m'' s'\""], ["proof (prove)\nusing this:\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws''\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        redT_upd s t ta' x'' m'' s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  redT_upd s t ta' x'' m'' s'\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "ultimately"], ["proof (chain)\npicking this:\n  actions_ok s t ta'\n  redT_upd s t ta' x'' m'' s'", "have \"s -t\\<triangleright>ta'\\<rightarrow> s'\""], ["proof (prove)\nusing this:\n  actions_ok s t ta'\n  redT_upd s t ta' x'' m'' s'\n\ngoal (1 subgoal):\n 1. s -t\\<triangleright>ta'\\<rightarrow> s'", "using tst red' wakeup"], ["proof (prove)\nusing this:\n  actions_ok s t ta'\n  redT_upd s t ta' x'' m'' s'\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  ln = no_wait_locks\n  wset s t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. s -t\\<triangleright>ta'\\<rightarrow> s'", "by(auto intro: redT_normal)"], ["proof (state)\nthis:\n  s -t\\<triangleright>ta'\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>ln = no_wait_locks;\n        wset s t = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "thus ?thesis"], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta'\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')", "by blast"], ["proof (state)\nthis:\n  \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t' ta'. Ex (redT_syntax1 s t' ta')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}