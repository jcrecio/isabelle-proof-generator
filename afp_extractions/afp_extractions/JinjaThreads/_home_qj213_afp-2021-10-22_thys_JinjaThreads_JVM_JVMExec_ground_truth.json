{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/JVM/JVMExec.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma exception_step_def_raw:\n  \"exception_step = \n   (\\<lambda>P a h (stk, loc, C, M, pc) frs.\n    case match_ex_table P (cname_of h a) pc (ex_table_of P C M) of\n      None \\<Rightarrow> (\\<lfloor>a\\<rfloor>, h, frs)\n    | Some (pc', d) \\<Rightarrow> (None, h, (Addr a # drop (size stk - d) stk, loc, C, M, pc') # frs))\"", "lemma exec_1_iff:\n  \"P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>' \\<longleftrightarrow> (ta, \\<sigma>') \\<in> exec P t \\<sigma>\""], "translations": [["", "lemma exception_step_def_raw:\n  \"exception_step = \n   (\\<lambda>P a h (stk, loc, C, M, pc) frs.\n    case match_ex_table P (cname_of h a) pc (ex_table_of P C M) of\n      None \\<Rightarrow> (\\<lfloor>a\\<rfloor>, h, frs)\n    | Some (pc', d) \\<Rightarrow> (None, h, (Addr a # drop (size stk - d) stk, loc, C, M, pc') # frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exception_step =\n    (\\<lambda>P a h (stk, loc, C, M, pc) frs.\n        case match_ex_table P (cname_of h a) pc (ex_table_of P C M) of\n        None \\<Rightarrow> (\\<lfloor>a\\<rfloor>, h, frs)\n        | \\<lfloor>(pc', d)\\<rfloor> \\<Rightarrow>\n            (None, h,\n             (Addr a # drop (length stk - d) stk, loc, C, M, pc') # frs))", "by(intro ext) auto"], ["", "fun exec :: \"'addr jvm_prog \\<Rightarrow> 'thread_id \\<Rightarrow> ('addr, 'heap) jvm_state \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_ta_state set\" where\n  \"exec P t (xcp, h, []) = {}\"\n| \"exec P t (None, h, (stk, loc, C, M, pc) # frs) = exec_instr (instrs_of P C M ! pc) P t h stk loc C M pc frs\"\n| \"exec P t (\\<lfloor>a\\<rfloor>, h, fr # frs) = {(\\<epsilon>, exception_step P a h fr frs)}\""], ["", "subsection \"relational view\""], ["", "inductive exec_1 :: \n  \"'addr jvm_prog \\<Rightarrow> 'thread_id \\<Rightarrow> ('addr, 'heap) jvm_state\n  \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_thread_action \\<Rightarrow> ('addr, 'heap) jvm_state \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile>/ _ -_-jvm\\<rightarrow>/ _\" [61,0,61,0,61] 60)\n  for P :: \"'addr jvm_prog\" and t :: 'thread_id\nwhere\n  exec_1I:\n  \"(ta, \\<sigma>') \\<in> exec P t \\<sigma> \\<Longrightarrow> P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>'\""], ["", "lemma exec_1_iff:\n  \"P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>' \\<longleftrightarrow> (ta, \\<sigma>') \\<in> exec P t \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>' =\n    ((ta, \\<sigma>') \\<in> exec P t \\<sigma>)", "by(auto intro: exec_1I elim: exec_1.cases)"], ["", "end"], ["", "text \\<open>\n  The start configuration of the JVM: in the start heap, we call a \n  method \\<open>m\\<close> of class \\<open>C\\<close> in program \\<open>P\\<close> with parameters @{term \"vs\"}. The \n  \\<open>this\\<close> pointer of the frame is set to \\<open>Null\\<close> to simulate\n  a static method invokation.\n\\<close>"], ["", "abbreviation JVM_local_start ::\n  \"cname \\<Rightarrow> mname \\<Rightarrow> ty list \\<Rightarrow> ty \\<Rightarrow> 'addr jvm_method \\<Rightarrow> 'addr val list\n  \\<Rightarrow> 'addr jvm_thread_state\"\nwhere\n  \"JVM_local_start \\<equiv> \n   \\<lambda>C M Ts T (mxs, mxl0, b) vs. \n   (None, [([], Null # vs @ replicate mxl0 undefined_value, C, M, 0)])\""], ["", "context JVM_heap_base begin"], ["", "abbreviation JVM_start_state :: \n  \"'addr jvm_prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> 'addr val list \\<Rightarrow> ('addr,'thread_id,'addr jvm_thread_state,'heap,'addr) state\"\nwhere\n  \"JVM_start_state \\<equiv> start_state JVM_local_start\""], ["", "definition JVM_start_state' :: \"'addr jvm_prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> 'addr val list \\<Rightarrow> ('addr, 'heap) jvm_state\"\nwhere\n  \"JVM_start_state' P C M vs \\<equiv>\n   let (D, Ts, T, meth) = method P C M;\n       (mxs, mxl0, ins, xt) = the meth\n   in (None, start_heap, [([], Null # vs @ replicate mxl0 undefined_value, D, M, 0)])\""], ["", "end"], ["", "end"]]}