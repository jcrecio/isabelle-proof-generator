{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Basic/Set_without_equal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma insert'_code:\n  \"insert' x (set xs) = set (x # xs)\"", "lemma union'_code:\n  \"union' (set xs) (set ys) = set (xs @ ys)\""], "translations": [["", "lemma insert'_code:\n  \"insert' x (set xs) = set (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert' x (set xs) = set (x # xs)", "by (rule set_eqI) (simp add: insert'_def)"], ["", "lemma union'_code:\n  \"union' (set xs) (set ys) = set (xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. union' (set xs) (set ys) = set (xs @ ys)", "by (rule set_eqI) (simp add: union'_def fun_eq_iff)"], ["", "declare\n  insert'_code [code]\n  union'_code [code]"], ["", "text \\<open>Merge name spaces to avoid cyclic module dependencies\\<close>"], ["", "code_identifier\n  code_module Set_without_equal \\<rightharpoonup>\n    (SML) Set and (Haskell) Set and (OCaml) Set"], ["", "end"]]}