{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/BV/BVNoTypeError.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma wt_jvm_prog_states:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins, et)\\<rfloor> in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1+size Ts+mxl)\"", "theorem no_type_error:\n  assumes welltyped: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\" and conforms: \"\\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\"\n  shows \"exec_d P t \\<sigma> \\<noteq> TypeError\"", "lemma welltyped_commute:\n  \"\\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\\<rbrakk> \\<Longrightarrow> P,t \\<turnstile> Normal \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>' = P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>'\"", "lemma (in JVM_conf_read) BV_correct_d_1:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P,t \\<turnstile> Normal \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>'; \\<Phi> \\<turnstile> t:\\<sigma> \\<surd> \\<rbrakk> \\<Longrightarrow> \\<Phi> \\<turnstile> t:\\<sigma>' \\<surd>\"", "lemma not_TypeError_eq [iff]:\n  \"x \\<noteq> TypeError = (\\<exists>t. x = Normal t)\""], "translations": [["", "lemma wt_jvm_prog_states:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins, et)\\<rfloor> in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1+size Ts+mxl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                     et)\\<rfloor> in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                     et)\\<rfloor> in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (unfold wf_jvm_prog_phi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog\n              (\\<lambda>P C (M, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n                  wt_method P C Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt\n                   (\\<Phi> C M))\n              P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                     et)\\<rfloor> in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (drule (1) sees_wf_mdecl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl,\n                             ins, et)\\<rfloor> in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     wf_mdecl\n      (\\<lambda>P C (M, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n          wt_method P C Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt (\\<Phi> C M))\n      P C (M, Ts, T, \\<lfloor>(mxs, mxl, ins, et)\\<rfloor>)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (simp add: wf_mdecl_def wt_method_def check_types_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl,\n                             ins, et)\\<rfloor> in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n     is_type P T \\<and>\n     ins \\<noteq> [] \\<and>\n     length (\\<Phi> C M) = length ins \\<and>\n     OK ` set (\\<Phi> C M)\n     \\<subseteq> states P mxs (Suc (length Ts + mxl)) \\<and>\n     wt_start P C Ts mxl (\\<Phi> C M) \\<and>\n     (\\<forall>pc<length ins.\n         P,T,mxs,length\n                  ins,et \\<turnstile> ins ! pc,pc :: \\<Phi> C M)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (Suc (length Ts + mxl))", "apply (blast intro: nth_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "context JVM_heap_conf_base' begin"], ["", "declare is_IntgI [simp, intro]"], ["", "declare is_BoolI [simp, intro]"], ["", "declare is_RefI [simp]"], ["", "text \\<open>\n  The main theorem: welltyped programs do not produce type errors if they\n  are started in a conformant state.\n\\<close>"], ["", "theorem no_type_error:\n  assumes welltyped: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\" and conforms: \"\\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\"\n  shows \"exec_d P t \\<sigma> \\<noteq> TypeError\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "from welltyped"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P", "obtain mb where wf: \"wf_prog mb P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. (\\<And>mb. wf_prog mb P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fast dest: wt_jvm_progD)"], ["proof (state)\nthis:\n  wf_prog mb P\n\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "obtain xcp h frs where s [simp]: \"\\<sigma> = (xcp, h, frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xcp h frs.\n        \\<sigma> = (xcp, h, frs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \\<sigma>)"], ["proof (state)\nthis:\n  \\<sigma> = (xcp, h, frs)\n\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "have \"check P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check P \\<sigma>", "proof(cases frs)"], ["proof (state)\ngoal (2 subgoals):\n 1. frs = [] \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "case Nil"], ["proof (state)\nthis:\n  frs = []\n\ngoal (2 subgoals):\n 1. frs = [] \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "with conforms"], ["proof (chain)\npicking this:\n  \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\n  frs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\n  frs = []\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "by (unfold correct_state_def check_def) auto"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "case (Cons f frs')"], ["proof (state)\nthis:\n  frs = f # frs'\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "then"], ["proof (chain)\npicking this:\n  frs = f # frs'", "obtain stk reg C M pc where frs [simp]: \"frs = (stk,reg,C,M,pc)#frs'\"\n      and f: \"f = (stk,reg,C,M,pc)\""], ["proof (prove)\nusing this:\n  frs = f # frs'\n\ngoal (1 subgoal):\n 1. (\\<And>stk reg C M pc.\n        \\<lbrakk>frs = (stk, reg, C, M, pc) # frs';\n         f = (stk, reg, C, M, pc)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases f) fastforce"], ["proof (state)\nthis:\n  frs = (stk, reg, C, M, pc) # frs'\n  f = (stk, reg, C, M, pc)\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "from conforms"], ["proof (chain)\npicking this:\n  \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>", "obtain  ST LT Ts T mxs mxl ins xt where\n      hconf:  \"hconf h\" and\n      tconf:  \"P,h \\<turnstile> t \\<surd>t\" and\n      meth:   \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins, xt)\\<rfloor> in C\" and\n      \\<Phi>:      \"\\<Phi> C M ! pc = Some (ST,LT)\" and\n      frame:  \"conf_f P h (ST,LT) ins (stk,reg,C,M,pc)\" and\n      frames: \"conf_fs P h \\<Phi> M (size Ts) T frs'\" and\n      confxcp: \"conf_xcp P h xcp (ins ! pc)\""], ["proof (prove)\nusing this:\n  \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\n\ngoal (1 subgoal):\n 1. (\\<And>Ts T mxs mxl ins xt ST LT.\n        \\<lbrakk>hconf h; P,h \\<turnstile> t \\<surd>t;\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl,\n                         ins, xt)\\<rfloor> in C;\n         \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>;\n         conf_f P h (ST, LT) ins (stk, reg, C, M, pc);\n         conf_fs P h \\<Phi> M (length Ts) T frs';\n         conf_xcp P h xcp (ins ! pc)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp add: correct_state_def dest: sees_method_fun)"], ["proof (state)\nthis:\n  hconf h\n  P,h \\<turnstile> t \\<surd>t\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  conf_f P h (ST, LT) ins (stk, reg, C, M, pc)\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  conf_xcp P h xcp (ins ! pc)\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "from frame"], ["proof (chain)\npicking this:\n  conf_f P h (ST, LT) ins (stk, reg, C, M, pc)", "obtain\n      stk: \"P,h \\<turnstile> stk [:\\<le>] ST\" and\n      reg: \"P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\" and\n      pc:  \"pc < size ins\""], ["proof (prove)\nusing this:\n  conf_f P h (ST, LT) ins (stk, reg, C, M, pc)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      pc < length ins\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: conf_f_def)"], ["proof (state)\nthis:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  pc < length ins\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "from welltyped meth \\<Phi> pc"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  pc < length ins", "have \"OK (Some (ST, LT)) \\<in> states P mxs (1+size Ts+mxl)\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  pc < length ins\n\ngoal (1 subgoal):\n 1. OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (1 + length Ts + mxl)", "by (rule wt_jvm_prog_states)"], ["proof (state)\nthis:\n  OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (1 + length Ts + mxl)\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "hence \"size ST \\<le> mxs\""], ["proof (prove)\nusing this:\n  OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (1 + length Ts + mxl)\n\ngoal (1 subgoal):\n 1. length ST \\<le> mxs", "by (auto simp add: JVM_states_unfold listE_length)"], ["proof (state)\nthis:\n  length ST \\<le> mxs\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "with stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  length ST \\<le> mxs", "have mxs: \"size stk \\<le> mxs\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  length ST \\<le> mxs\n\ngoal (1 subgoal):\n 1. length stk \\<le> mxs", "by (auto dest: list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk \\<le> mxs\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "from welltyped meth pc"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  pc < length ins", "have \"P,T,mxs,size ins,xt \\<turnstile> ins!pc,pc :: \\<Phi> C M\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  pc < length ins\n\ngoal (1 subgoal):\n 1. P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M", "by (rule wt_jvm_prog_impl_wt_instr)"], ["proof (state)\nthis:\n  P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "hence app\\<^sub>0: \"app (ins!pc) P mxs T pc (size ins) xt (\\<Phi> C M!pc) \""], ["proof (prove)\nusing this:\n  P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M\n\ngoal (1 subgoal):\n 1. app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)", "by (simp add: wt_instr_def)"], ["proof (state)\nthis:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "with \\<Phi>"], ["proof (chain)\npicking this:\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)", "have eff: \n      \"\\<forall>(pc',s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)). pc' < size ins\""], ["proof (prove)\nusing this:\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n\ngoal (1 subgoal):\n 1. \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n       pc' < length ins", "by (unfold app_def) simp"], ["proof (state)\nthis:\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "from app\\<^sub>0 \\<Phi>"], ["proof (chain)\npicking this:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>", "have app:\n      \"xcpt_app (ins!pc) P pc mxs xt (ST,LT) \\<and> app\\<^sub>i (ins!pc, P, pc, mxs, T, (ST,LT))\""], ["proof (prove)\nusing this:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n\ngoal (1 subgoal):\n 1. xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n    app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)", "by (clarsimp simp add: app_def)"], ["proof (state)\nthis:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n\ngoal (1 subgoal):\n 1. \\<And>a list. frs = a # list \\<Longrightarrow> check P \\<sigma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check P \\<sigma>", "proof(cases xcp)"], ["proof (state)\ngoal (2 subgoals):\n 1. xcp = None \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "case None"], ["proof (state)\nthis:\n  xcp = None\n\ngoal (2 subgoals):\n 1. xcp = None \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "note xcp[simp] = this"], ["proof (state)\nthis:\n  xcp = None\n\ngoal (2 subgoals):\n 1. xcp = None \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "from app eff stk reg"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT", "have \"check_instr (ins!pc) P h stk reg C M pc frs'\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "proof (cases \"ins!pc\")"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "case ALoad"], ["proof (state)\nthis:\n  ins ! pc = ALoad\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = ALoad", "obtain T ST' where\n          ST: \"ST = Integer # T # ST'\" and\n          TNT: \"T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = ALoad\n\ngoal (1 subgoal):\n 1. (\\<And>T ST'.\n        \\<lbrakk>ST = Integer # T # ST';\n         T \\<noteq> NT \\<longrightarrow>\n         (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ST = Integer # T # ST'\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "from stk ST"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = Integer # T # ST'", "obtain i stk' ref where\n          stk': \"stk = Intg i # ref # stk'\" and\n          ref: \"P,h \\<turnstile> ref :\\<le> T\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = Integer # T # ST'\n\ngoal (1 subgoal):\n 1. (\\<And>i ref stk'.\n        \\<lbrakk>stk = Intg i # ref # stk';\n         P,h \\<turnstile> ref :\\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: conf_def list_all2_Cons2)"], ["proof (state)\nthis:\n  stk = Intg i # ref # stk'\n  P,h \\<turnstile> ref :\\<le> T\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "from ref TNT"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)", "have is_Ref: \"is_Ref ref\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n\ngoal (1 subgoal):\n 1. is_Ref ref", "by(cases ref)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "assume refN: \"ref \\<noteq> Null\""], ["proof (state)\nthis:\n  ref \\<noteq> Null\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "with ref"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null", "have \"T \\<noteq> NT\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n\ngoal (1 subgoal):\n 1. T \\<noteq> NT", "by auto"], ["proof (state)\nthis:\n  T \\<noteq> NT\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "with TNT"], ["proof (chain)\npicking this:\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n  T \\<noteq> NT", "obtain T' where T': \"T = T'\\<lfloor>\\<rceil>\""], ["proof (prove)\nusing this:\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n  T \\<noteq> NT\n\ngoal (1 subgoal):\n 1. (\\<And>T'.\n        T = T'\\<lfloor>\\<rceil> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T = T'\\<lfloor>\\<rceil>\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "with ref refN is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  T = T'\\<lfloor>\\<rceil>", "have \"\\<exists>T n. typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  T = T'\\<lfloor>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<exists>T n.\n       typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "by(cases ref)(auto simp add:conf_def widen_Array)"], ["proof (state)\nthis:\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "}"], ["proof (state)\nthis:\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALoad\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x101 x102.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 24 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "using ALoad stk'"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n  ins ! pc = ALoad\n  stk = Intg i # ref # stk'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by(auto)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "case AStore"], ["proof (state)\nthis:\n  ins ! pc = AStore\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = AStore", "obtain T U ST' where\n          ST: \"ST = T # Integer # U # ST'\" and\n          TNT: \"U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = AStore\n\ngoal (1 subgoal):\n 1. (\\<And>T U ST'.\n        \\<lbrakk>ST = T # Integer # U # ST';\n         U \\<noteq> NT \\<longrightarrow>\n         (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ST = T # Integer # U # ST'\n  U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "from stk ST"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = T # Integer # U # ST'", "obtain e i stk' ref where\n          stk': \"stk = e # Intg i # ref # stk'\" and\n          ref: \"P,h \\<turnstile> ref :\\<le> U\" and\n          e: \"P,h \\<turnstile> e :\\<le> T\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = T # Integer # U # ST'\n\ngoal (1 subgoal):\n 1. (\\<And>e i ref stk'.\n        \\<lbrakk>stk = e # Intg i # ref # stk';\n         P,h \\<turnstile> ref :\\<le> U; P,h \\<turnstile> e :\\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: conf_def list_all2_Cons2)"], ["proof (state)\nthis:\n  stk = e # Intg i # ref # stk'\n  P,h \\<turnstile> ref :\\<le> U\n  P,h \\<turnstile> e :\\<le> T\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "from ref TNT"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> U\n  U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)", "have is_Ref: \"is_Ref ref\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> U\n  U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\n\ngoal (1 subgoal):\n 1. is_Ref ref", "by(cases ref)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "assume refN: \"ref \\<noteq> Null\""], ["proof (state)\nthis:\n  ref \\<noteq> Null\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "with ref"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> U\n  ref \\<noteq> Null", "have \"U \\<noteq> NT\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> U\n  ref \\<noteq> Null\n\ngoal (1 subgoal):\n 1. U \\<noteq> NT", "by auto"], ["proof (state)\nthis:\n  U \\<noteq> NT\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "with TNT"], ["proof (chain)\npicking this:\n  U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\n  U \\<noteq> NT", "obtain T' where T': \"U = T'\\<lfloor>\\<rceil>\""], ["proof (prove)\nusing this:\n  U \\<noteq> NT \\<longrightarrow> (\\<exists>T'. U = T'\\<lfloor>\\<rceil>)\n  U \\<noteq> NT\n\ngoal (1 subgoal):\n 1. (\\<And>T'.\n        U = T'\\<lfloor>\\<rceil> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  U = T'\\<lfloor>\\<rceil>\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "with ref refN is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> U\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  U = T'\\<lfloor>\\<rceil>", "have \"\\<exists>T n. typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> U\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  U = T'\\<lfloor>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<exists>T n.\n       typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "by(cases ref)(auto simp add:conf_def widen_Array)"], ["proof (state)\nthis:\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "}"], ["proof (state)\nthis:\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = AStore\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x111 x112.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = CAS x111 x112\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 23 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "using AStore stk' e"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n  ins ! pc = AStore\n  stk = e # Intg i # ref # stk'\n  P,h \\<turnstile> e :\\<le> T\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by(auto simp add: conf_def)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "case ALength"], ["proof (state)\nthis:\n  ins ! pc = ALength\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = ALength", "obtain T ST' where\n          ST: \"ST = T # ST'\" and\n          TNT: \"T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = ALength\n\ngoal (1 subgoal):\n 1. (\\<And>T ST'.\n        \\<lbrakk>ST = T # ST';\n         T \\<noteq> NT \\<longrightarrow>\n         (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ST = T # ST'\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "from stk ST"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = T # ST'", "obtain stk' ref where\n          stk': \"stk = ref # stk'\" and\n          ref: \"P,h \\<turnstile> ref :\\<le> T\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST = T # ST'\n\ngoal (1 subgoal):\n 1. (\\<And>ref stk'.\n        \\<lbrakk>stk = ref # stk'; P,h \\<turnstile> ref :\\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: conf_def list_all2_Cons2)"], ["proof (state)\nthis:\n  stk = ref # stk'\n  P,h \\<turnstile> ref :\\<le> T\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "from ref TNT"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)", "have is_Ref: \"is_Ref ref\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n\ngoal (1 subgoal):\n 1. is_Ref ref", "by(cases ref)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "assume refN: \"ref \\<noteq> Null\""], ["proof (state)\nthis:\n  ref \\<noteq> Null\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "with ref"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null", "have \"T \\<noteq> NT\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n\ngoal (1 subgoal):\n 1. T \\<noteq> NT", "by auto"], ["proof (state)\nthis:\n  T \\<noteq> NT\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "with TNT"], ["proof (chain)\npicking this:\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n  T \\<noteq> NT", "obtain T' where T': \"T = T'\\<lfloor>\\<rceil>\""], ["proof (prove)\nusing this:\n  T \\<noteq> NT \\<longrightarrow> (\\<exists>T'. T = T'\\<lfloor>\\<rceil>)\n  T \\<noteq> NT\n\ngoal (1 subgoal):\n 1. (\\<And>T'.\n        T = T'\\<lfloor>\\<rceil> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T = T'\\<lfloor>\\<rceil>\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "with ref refN is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  T = T'\\<lfloor>\\<rceil>", "have \"\\<exists>T n. typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> T\n  ref \\<noteq> Null\n  is_Ref ref\n  wf_prog mb P\n  T = T'\\<lfloor>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<exists>T n.\n       typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "by(cases ref)(auto simp add:conf_def widen_Array)"], ["proof (state)\nthis:\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "}"], ["proof (state)\nthis:\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = ALength\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x12.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Checkcast x12\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 22 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "using ALength stk'"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>T n.\n     typeof_addr h (the_Addr ref) = \\<lfloor>Array_type T n\\<rfloor>\n  ins ! pc = ALength\n  stk = ref # stk'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by(auto)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 21 subgoals...", "case (Getfield F C)"], ["proof (state)\nthis:\n  ins ! pc = Getfield F C\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getfield F C", "obtain v vT stk' fm where\n          field: \"P \\<turnstile> C sees F:vT (fm) in C\" and\n          stk:   \"stk = v # stk'\" and\n          conf:  \"P,h \\<turnstile> v :\\<le> Class C\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getfield F C\n\ngoal (1 subgoal):\n 1. (\\<And>vT fm v stk'.\n        \\<lbrakk>P \\<turnstile> C sees F:vT (fm) in C; stk = v # stk';\n         P,h \\<turnstile> v :\\<le> Class C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: list_all2_Cons2)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F:vT (fm) in C\n  stk = v # stk'\n  P,h \\<turnstile> v :\\<le> Class C\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "from conf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C", "have is_Ref: \"is_Ref v\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n\ngoal (1 subgoal):\n 1. is_Ref v", "by(cases v)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "assume \"v \\<noteq> Null\""], ["proof (state)\nthis:\n  v \\<noteq> Null\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "with conf field is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F:vT (fm) in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null", "have \"\\<exists>U. typeof_addr h (the_Addr v) = Some U \\<and> P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F:vT (fm) in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n       P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "by (auto dest!: non_npD2)"], ["proof (state)\nthis:\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "}"], ["proof (state)\nthis:\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x91 x92.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x13.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Instanceof x13\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 21 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "using Getfield field stk"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n  ins ! pc = Getfield F C\n  P \\<turnstile> C sees F:vT (fm) in C\n  stk = v # stk'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "by auto"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs'\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 20 subgoals...", "case (Putfield F C)"], ["proof (state)\nthis:\n  ins ! pc = Putfield F C\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Putfield F C", "obtain v ref vT stk' fm where\n          field: \"P \\<turnstile> C sees F:vT (fm) in C\" and\n          stk:   \"stk = v # ref # stk'\" and\n          confv: \"P,h \\<turnstile> v :\\<le> vT\" and\n          confr: \"P,h \\<turnstile> ref :\\<le> Class C\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Putfield F C\n\ngoal (1 subgoal):\n 1. (\\<And>vT fm v ref stk'.\n        \\<lbrakk>P \\<turnstile> C sees F:vT (fm) in C; stk = v # ref # stk';\n         P,h \\<turnstile> v :\\<le> vT;\n         P,h \\<turnstile> ref :\\<le> Class C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: list_all2_Cons2)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F:vT (fm) in C\n  stk = v # ref # stk'\n  P,h \\<turnstile> v :\\<le> vT\n  P,h \\<turnstile> ref :\\<le> Class C\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "from confr"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> Class C", "have is_Ref: \"is_Ref ref\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> Class C\n\ngoal (1 subgoal):\n 1. is_Ref ref", "by(cases ref)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "assume \"ref \\<noteq> Null\""], ["proof (state)\nthis:\n  ref \\<noteq> Null\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "with confr field is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> Class C\n  P \\<turnstile> C sees F:vT (fm) in C\n  is_Ref ref\n  wf_prog mb P\n  ref \\<noteq> Null", "have \"\\<exists>U. typeof_addr h (the_Addr ref) = Some U \\<and> P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> Class C\n  P \\<turnstile> C sees F:vT (fm) in C\n  is_Ref ref\n  wf_prog mb P\n  ref \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n       P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "by (auto dest: non_npD2)"], ["proof (state)\nthis:\n  \\<exists>U.\n     typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "}"], ["proof (state)\nthis:\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x101 x102.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Putfield x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<And>x141 x142.\n        \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                 app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         \\<forall>(pc', s')\n                  \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n            pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         ins ! pc = Invoke x141 x142\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 20 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "using Putfield field stk confv"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr ref) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n  ins ! pc = Putfield F C\n  P \\<turnstile> C sees F:vT (fm) in C\n  stk = v # ref # stk'\n  P,h \\<turnstile> v :\\<le> vT\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "by auto"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs'\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 19 subgoals...", "case (CAS F C)"], ["proof (state)\nthis:\n  ins ! pc = CAS F C\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = CAS F C", "obtain v v' v'' T' stk' fm where\n          field: \"P \\<turnstile> C sees F:T' (fm) in C\" and\n          stk:   \"stk = v'' # v' # v # stk'\" and\n          confv: \"P,h \\<turnstile> v' :\\<le> T'\" \"P,h \\<turnstile> v'' :\\<le> T'\" and\n          confr: \"P,h \\<turnstile> v :\\<le> Class C\" and vol: \"volatile fm\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = CAS F C\n\ngoal (1 subgoal):\n 1. (\\<And>T' fm v'' v' v stk'.\n        \\<lbrakk>P \\<turnstile> C sees F:T' (fm) in C;\n         stk = v'' # v' # v # stk'; P,h \\<turnstile> v' :\\<le> T';\n         P,h \\<turnstile> v'' :\\<le> T'; P,h \\<turnstile> v :\\<le> Class C;\n         volatile fm\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: list_all2_Cons2)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F:T' (fm) in C\n  stk = v'' # v' # v # stk'\n  P,h \\<turnstile> v' :\\<le> T'\n  P,h \\<turnstile> v'' :\\<le> T'\n  P,h \\<turnstile> v :\\<le> Class C\n  volatile fm\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "from confr"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C", "have is_Ref: \"is_Ref v\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n\ngoal (1 subgoal):\n 1. is_Ref v", "by(cases v)(auto simp add: is_Ref_def conf_def)"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "assume \"v \\<noteq> Null\""], ["proof (state)\nthis:\n  v \\<noteq> Null\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "with confr field is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F:T' (fm) in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null", "have \"\\<exists>U. typeof_addr h (the_Addr v) = Some U \\<and> P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F:T' (fm) in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n       P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "by (auto dest: non_npD2)"], ["proof (state)\nthis:\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "}"], ["proof (state)\nthis:\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (19 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x111 x112.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = CAS x111 x112\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 19 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "using CAS field stk confv vol"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>U.\n     typeof_addr h (the_Addr v) = \\<lfloor>U\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of U \\<preceq>\\<^sup>* C\n  ins ! pc = CAS F C\n  P \\<turnstile> C sees F:T' (fm) in C\n  stk = v'' # v' # v # stk'\n  P,h \\<turnstile> v' :\\<le> T'\n  P,h \\<turnstile> v'' :\\<le> T'\n  volatile fm\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs'", "by auto"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\n              \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\n               \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "case (Invoke M' n)"], ["proof (state)\nthis:\n  ins ! pc = Invoke M' n\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "with app"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n", "have n: \"n < size ST\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n\n\ngoal (1 subgoal):\n 1. n < length ST", "by simp"], ["proof (state)\nthis:\n  n < length ST\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have [simp]: \"size stk = size ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. length stk = length ST", "by (rule list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "{"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "assume \"stk!n = Null\""], ["proof (state)\nthis:\n  stk ! n = Null\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "with n Invoke"], ["proof (chain)\npicking this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null", "have ?thesis"], ["proof (prove)\nusing this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by simp"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "}"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "moreover"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "{"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "assume \"ST!n = NT\""], ["proof (state)\nthis:\n  ST ! n = NT\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "with n stk"], ["proof (chain)\npicking this:\n  n < length ST\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST ! n = NT", "have \"stk!n = Null\""], ["proof (prove)\nusing this:\n  n < length ST\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST ! n = NT\n\ngoal (1 subgoal):\n 1. stk ! n = Null", "by (auto simp: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  stk ! n = Null\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "with n Invoke"], ["proof (chain)\npicking this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null", "have ?thesis"], ["proof (prove)\nusing this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by simp"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "}"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "moreover"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "{"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "assume Null: \"stk!n \\<noteq> Null\" and NT: \"ST!n \\<noteq> NT\""], ["proof (state)\nthis:\n  stk ! n \\<noteq> Null\n  ST ! n \\<noteq> NT\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from NT app Invoke"], ["proof (chain)\npicking this:\n  ST ! n \\<noteq> NT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n", "obtain D D' Ts T m\n            where D: \"class_type_of' (ST!n) = \\<lfloor>D\\<rfloor>\"\n            and M': \"P \\<turnstile> D sees M': Ts\\<rightarrow>T = m in D'\"\n            and Ts: \"P \\<turnstile> rev (take n ST) [\\<le>] Ts\""], ["proof (prove)\nusing this:\n  ST ! n \\<noteq> NT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n\n\ngoal (1 subgoal):\n 1. (\\<And>D Ts T m D'.\n        \\<lbrakk>class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>;\n         P \\<turnstile> D sees M': Ts\\<rightarrow>T = m in D';\n         P \\<turnstile> rev (take n ST) [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>\n  P \\<turnstile> D sees M': Ts\\<rightarrow>T = m in D'\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from stk n"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  n < length ST", "have \"P,h \\<turnstile> stk!n :\\<le> ST!n\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  n < length ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> stk ! n :\\<le> ST ! n", "by (auto simp: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  P,h \\<turnstile> stk ! n :\\<le> ST ! n\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "with Null D"], ["proof (chain)\npicking this:\n  stk ! n \\<noteq> Null\n  class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>\n  P,h \\<turnstile> stk ! n :\\<le> ST ! n", "obtain a U where \n            [simp]: \"stk!n = Addr a\" \"typeof_addr h a = Some U\" and UsubSTn: \"P \\<turnstile> ty_of_htype U \\<le> ST!n\""], ["proof (prove)\nusing this:\n  stk ! n \\<noteq> Null\n  class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>\n  P,h \\<turnstile> stk ! n :\\<le> ST ! n\n\ngoal (1 subgoal):\n 1. (\\<And>a U.\n        \\<lbrakk>stk ! n = Addr a; typeof_addr h a = \\<lfloor>U\\<rfloor>;\n         P \\<turnstile> ty_of_htype U \\<le> ST ! n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"stk ! n\")(auto simp add: conf_def widen_Class)"], ["proof (state)\nthis:\n  stk ! n = Addr a\n  typeof_addr h a = \\<lfloor>U\\<rfloor>\n  P \\<turnstile> ty_of_htype U \\<le> ST ! n\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from D UsubSTn"], ["proof (chain)\npicking this:\n  class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>\n  P \\<turnstile> ty_of_htype U \\<le> ST ! n", "obtain C'\n            where U: \"class_type_of' (ty_of_htype U) = \\<lfloor>C'\\<rfloor>\" and \"P \\<turnstile> C' \\<preceq>\\<^sup>* D\""], ["proof (prove)\nusing this:\n  class_type_of' (ST ! n) = \\<lfloor>D\\<rfloor>\n  P \\<turnstile> ty_of_htype U \\<le> ST ! n\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>class_type_of' (ty_of_htype U) = \\<lfloor>C'\\<rfloor>;\n         P \\<turnstile> C' \\<preceq>\\<^sup>* D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule widen_is_class_type_of) simp"], ["proof (state)\nthis:\n  class_type_of' (ty_of_htype U) = \\<lfloor>C'\\<rfloor>\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from \\<open>P \\<turnstile> C' \\<preceq>\\<^sup>* D\\<close> wf M'"], ["proof (chain)\npicking this:\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D\n  wf_prog mb P\n  P \\<turnstile> D sees M': Ts\\<rightarrow>T = m in D'", "obtain m' Ts' T' D'' where \n            C': \"P \\<turnstile> C' sees M': Ts'\\<rightarrow>T' = m' in D''\" and\n            Ts': \"P \\<turnstile> Ts [\\<le>] Ts'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D\n  wf_prog mb P\n  P \\<turnstile> D sees M': Ts\\<rightarrow>T = m in D'\n\ngoal (1 subgoal):\n 1. (\\<And>Ts' T' m' D''.\n        \\<lbrakk>P \\<turnstile> C' sees M': Ts'\\<rightarrow>T' = m' in D'';\n         P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: sees_method_mono)"], ["proof (state)\nthis:\n  P \\<turnstile> C' sees M': Ts'\\<rightarrow>T' = m' in D''\n  P \\<turnstile> Ts [\\<le>] Ts'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have \"P,h \\<turnstile> take n stk [:\\<le>] take n ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> take n stk [:\\<le>] take n ST", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "hence \"P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "also"], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "note Ts"], ["proof (state)\nthis:\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "also"], ["proof (state)\nthis:\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "note Ts'"], ["proof (state)\nthis:\n  P \\<turnstile> Ts [\\<le>] Ts'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "finally"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'", "have \"P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'", "."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "hence ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "using Invoke Null n C' U"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n  ins ! pc = Invoke M' n\n  stk ! n \\<noteq> Null\n  n < length ST\n  P \\<turnstile> C' sees M': Ts'\\<rightarrow>T' = m' in D''\n  class_type_of' (ty_of_htype U) = \\<lfloor>C'\\<rfloor>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by (auto simp add: is_Ref_def2 has_methodI intro: sees_wf_native[OF wf])"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "}"], ["proof (state)\nthis:\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<And>x141 x142.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Invoke x141 x142\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 18 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'", "show ?thesis"], ["proof (prove)\nusing this:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by blast"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 17 subgoals...", "case Return"], ["proof (state)\nthis:\n  ins ! pc = Return\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 17 subgoals...", "with stk app \\<Phi> meth frames"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = Return", "show ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = Return\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by (fastforce simp add: has_methodI list_all2_Cons2)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 16 subgoals...", "case ThrowExc"], ["proof (state)\nthis:\n  ins ! pc = ThrowExc\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 16 subgoals...", "with stk app \\<Phi> meth frames"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = ThrowExc", "show ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = ThrowExc\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by(auto 4 3 simp add: xcpt_app_def conf_def list_all2_Cons2 intro!: is_RefI intro: widen_trans[OF _ widen_subcls])"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 15 subgoals...", "case (BinOpInstr bop)"], ["proof (state)\nthis:\n  ins ! pc = BinOpInstr bop\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 15 subgoals...", "with stk app \\<Phi> meth frames"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = BinOpInstr bop", "show ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  conf_fs P h \\<Phi> M (length Ts) T frs'\n  ins ! pc = BinOpInstr bop\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs'", "by(auto simp add: conf_def list_all2_Cons2)(force dest: WTrt_binop_widen_mono)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 2. \\<And>x2.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 3. \\<And>x3.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 4. \\<And>x4.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 5. \\<And>x5.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 6. \\<And>x12.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Checkcast x12\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 7. \\<And>x13.\n       \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n                app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        \\<forall>(pc', s')\n                 \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n           pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        ins ! pc = Instanceof x13\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 8. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 9. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n             app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n        pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT; ins ! pc = Dup\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\n 10. \\<lbrakk>xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n              app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n         pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      ins ! pc = Swap\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs'\nA total of 14 subgoals...", "qed (auto simp add: list_all2_lengthD list_all2_Cons2)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (2 subgoals):\n 1. xcp = None \\<Longrightarrow> check P \\<sigma>\n 2. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "thus \"check P \\<sigma>\""], ["proof (prove)\nusing this:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "using meth pc mxs"], ["proof (prove)\nusing this:\n  check_instr (ins ! pc) P h stk reg C M pc frs'\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  pc < length ins\n  length stk \\<le> mxs\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "by (simp add: check_def has_methodI)"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "case (Some a)"], ["proof (state)\nthis:\n  xcp = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "with confxcp"], ["proof (chain)\npicking this:\n  conf_xcp P h xcp (ins ! pc)\n  xcp = \\<lfloor>a\\<rfloor>", "obtain D where \"typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\""], ["proof (prove)\nusing this:\n  conf_xcp P h xcp (ins ! pc)\n  xcp = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        typeof_addr h a = \\<lfloor>Class_type D\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: check_xcpt_def)"], ["proof (state)\nthis:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "moreover"], ["proof (state)\nthis:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have \"length stk = length ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. length stk = length ST", "by(rule list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (1 subgoal):\n 1. \\<And>a. xcp = \\<lfloor>a\\<rfloor> \\<Longrightarrow> check P \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n  length stk = length ST", "show ?thesis"], ["proof (prove)\nusing this:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n  length stk = length ST\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "using meth pc mxs Some confxcp app"], ["proof (prove)\nusing this:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n  length stk = length ST\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  pc < length ins\n  length stk \\<le> mxs\n  xcp = \\<lfloor>a\\<rfloor>\n  conf_xcp P h xcp (ins ! pc)\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "using match_is_relevant[of P D ins pc pc xt]"], ["proof (prove)\nusing this:\n  typeof_addr h a = \\<lfloor>Class_type D\\<rfloor>\n  length stk = length ST\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(mxs, mxl, ins,\n                  xt)\\<rfloor> in C\n  pc < length ins\n  length stk \\<le> mxs\n  xcp = \\<lfloor>a\\<rfloor>\n  conf_xcp P h xcp (ins ! pc)\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<lbrakk>\\<And>D'.\n              P \\<turnstile> D \\<preceq>\\<^sup>* D' \\<Longrightarrow>\n              is_relevant_class (ins ! pc) P D';\n   match_ex_table P D pc xt = \\<lfloor>(?pc', ?d')\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>(f, t, D', h, d)\n                             \\<in>set (relevant_entries P (ins ! pc) pc xt).\n                       (case D' of None \\<Rightarrow> True\n                        | \\<lfloor>D''\\<rfloor> \\<Rightarrow>\n                            P \\<turnstile> D \\<preceq>\\<^sup>* D'') \\<and>\n                       pc \\<in> {f..<t} \\<and> ?pc' = h \\<and> ?d' = d\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "by(auto simp add: check_def has_methodI check_xcpt_def xcpt_app_def dest: bspec)"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", "thus \"exec_d P t \\<sigma> \\<noteq> TypeError\""], ["proof (prove)\nusing this:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P t \\<sigma> \\<noteq> TypeError", ".."], ["proof (state)\nthis:\n  exec_d P t \\<sigma> \\<noteq> TypeError\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma welltyped_commute:\n  \"\\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\\<rbrakk> \\<Longrightarrow> P,t \\<turnstile> Normal \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>' = P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,t \\<turnstile> Normal\n  \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>' =\n                      P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow>\n                      \\<sigma>'", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>;\n     P,t \\<turnstile> Normal\n                       \\<sigma> -ta-jvmd\\<rightarrow> Normal\n                 \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow>\n                      \\<sigma>'\n 2. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>;\n     P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> P,t \\<turnstile> Normal\n  \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>'", "apply(erule exec_1_d.cases, simp, fastforce simp add: exec_d_def exec_1_iff split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>;\n     P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> P,t \\<turnstile> Normal\n  \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>'", "by(auto dest!: no_type_error intro!: exec_1_d.intros simp add: exec_d_def exec_1_iff split: if_split_asm)"], ["", "end"], ["", "lemma (in JVM_conf_read) BV_correct_d_1:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P,t \\<turnstile> Normal \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>'; \\<Phi> \\<turnstile> t:\\<sigma> \\<surd> \\<rbrakk> \\<Longrightarrow> \\<Phi> \\<turnstile> t:\\<sigma>' \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P,t \\<turnstile> Normal\n                       \\<sigma> -ta-jvmd\\<rightarrow> Normal \\<sigma>';\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\\<rbrakk>\n    \\<Longrightarrow> \\<Phi> \\<turnstile> t:\\<sigma>' \\<surd>", "unfolding welltyped_commute"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P,t \\<turnstile> \\<sigma> -ta-jvm\\<rightarrow> \\<sigma>';\n     \\<Phi> \\<turnstile> t:\\<sigma> \\<surd>\\<rbrakk>\n    \\<Longrightarrow> \\<Phi> \\<turnstile> t:\\<sigma>' \\<surd>", "by(rule BV_correct_1)"], ["", "lemma not_TypeError_eq [iff]:\n  \"x \\<noteq> TypeError = (\\<exists>t. x = Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> TypeError) = (\\<exists>t. x = Normal t)", "by (cases x) auto"], ["", "end"]]}