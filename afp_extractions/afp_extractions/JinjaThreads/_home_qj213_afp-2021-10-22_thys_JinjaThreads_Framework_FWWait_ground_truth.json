{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWWait.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma redT_updW_total: \"\\<exists>ws'. redT_updW t ws wa ws'\"", "lemma redT_updWs_total: \"\\<exists>ws'. redT_updWs t ws was ws'\"", "lemma redT_updWs_trans: \"\\<lbrakk> redT_updWs t ws was ws'; redT_updWs t ws' was' ws'' \\<rbrakk> \\<Longrightarrow> redT_updWs t ws (was @ was') ws''\"", "lemma redT_updW_None_implies_None:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws t = None; t \\<noteq> t' \\<rbrakk> \\<Longrightarrow> ws' t = None\"", "lemma redT_updWs_None_implies_None:\n  assumes \"redT_updWs t' ws was ws'\"\n  and \"t \\<noteq> t'\" and \"ws t = None\"\n  shows \"ws' t = None\"", "lemma redT_updW_PostWS_imp_PostWS:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws t'' = \\<lfloor>PostWS w\\<rfloor>; t'' \\<noteq> t \\<rbrakk> \\<Longrightarrow>  ws' t'' = \\<lfloor>PostWS w\\<rfloor>\"", "lemma redT_updWs_PostWS_imp_PostWS:\n  \"\\<lbrakk> redT_updWs t ws was ws'; t'' \\<noteq> t; ws t'' = \\<lfloor>PostWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> ws' t'' = \\<lfloor>PostWS w\\<rfloor>\"", "lemma redT_updW_Some_otherD:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t' \\<rbrakk> \n  \\<Longrightarrow> (case w of InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor> | _ \\<Rightarrow> ws t = \\<lfloor>w\\<rfloor> \\<or> (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>))\"", "lemma redT_updWs_Some_otherD:\n  \"\\<lbrakk> redT_updWs t' ws was ws'; ws' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t' \\<rbrakk> \n  \\<Longrightarrow> (case w of InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor> | _ \\<Rightarrow> ws t = \\<lfloor>w\\<rfloor> \\<or> (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>))\"", "lemma redT_updW_None_SomeD:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t' = \\<lfloor>w\\<rfloor>; ws t' = None \\<rbrakk> \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. w = InWS w' \\<and> wa = Suspend w')\"", "lemma redT_updWs_None_SomeD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t' = \\<lfloor>w\\<rfloor>; ws t' = None \\<rbrakk> \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)\"", "lemma redT_updW_neq_Some_SomeD:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws' t = \\<lfloor>InWS w\\<rfloor>; ws t \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> t = t' \\<and> wa = Suspend w\"", "lemma redT_updWs_neq_Some_SomeD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t' = \\<lfloor>InWS w\\<rfloor>; ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\"", "lemma redT_updW_not_Suspend_Some:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t = \\<lfloor>w'\\<rfloor>; ws t = \\<lfloor>w\\<rfloor>; \\<And>w. wa \\<noteq> Suspend w \\<rbrakk>\n  \\<Longrightarrow> w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\"", "lemma redT_updWs_not_Suspend_Some:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t = \\<lfloor>w'\\<rfloor>; ws t = \\<lfloor>w\\<rfloor>; \\<And>w. Suspend w \\<notin> set was \\<rbrakk>\n  \\<Longrightarrow> w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\"", "lemma redT_updWs_WokenUp_SuspendD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; Notified \\<in> set was \\<or> WokenUp \\<in> set was; ws' t = \\<lfloor>w\\<rfloor> \\<rbrakk> \\<Longrightarrow> \\<exists>w. Suspend w \\<in> set was\"", "lemma redT_updW_Woken_Up_same_no_Notified_Interrupted:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>; ws t = \\<lfloor>PostWS w\\<rfloor>; \\<And>w. wa \\<noteq> Suspend w \\<rbrakk>\n  \\<Longrightarrow> wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp\"", "lemma redT_updWs_Woken_Up_same_no_Notified_Interrupted:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>; ws t = \\<lfloor>PostWS w\\<rfloor>; \\<And>w. Suspend w \\<notin> set was \\<rbrakk>\n  \\<Longrightarrow> Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\"", "lemma wset_actions_ok_Nil [simp]:\n  \"wset_actions_ok ws t [] \\<longleftrightarrow> ws t = None\"", "lemma not_waiting_iff:\n  \"\\<not> waiting w \\<longleftrightarrow> w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>)\"", "lemma waiting_code [code]:\n  \"waiting None = False\"\n  \"\\<And>w. waiting \\<lfloor>PostWS w\\<rfloor> = False\"\n  \"\\<And>w. waiting \\<lfloor>InWS w\\<rfloor> = True\""], "translations": [["", "lemma redT_updW_total: \"\\<exists>ws'. redT_updW t ws wa ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ws'. redT_updW t ws wa ws'", "by(cases wa)(auto simp add: redT_updW.simps)"], ["", "lemma redT_updWs_total: \"\\<exists>ws'. redT_updWs t ws was ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ws'. redT_updWs t ws was ws'", "proof(induct was rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>ws'. redT_updWs t ws [] ws'\n 2. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>ws'. redT_updWs t ws [] ws'\n 2. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ws'. redT_updWs t ws [] ws'", "by(auto simp add: redT_updWs_def)"], ["proof (state)\nthis:\n  \\<exists>ws'. redT_updWs t ws [] ws'\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "case (snoc wa was)"], ["proof (state)\nthis:\n  \\<exists>ws'. redT_updWs t ws was ws'\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "then"], ["proof (chain)\npicking this:\n  \\<exists>ws'. redT_updWs t ws was ws'", "obtain ws' where \"redT_updWs t ws was ws'\""], ["proof (prove)\nusing this:\n  \\<exists>ws'. redT_updWs t ws was ws'\n\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        redT_updWs t ws was ws' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  redT_updWs t ws was ws'\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "also"], ["proof (state)\nthis:\n  redT_updWs t ws was ws'\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "from redT_updW_total[of t ws' wa]"], ["proof (chain)\npicking this:\n  \\<exists>ws'a. redT_updW t ws' wa ws'a", "obtain ws'' where \"redT_updW t ws' wa ws''\""], ["proof (prove)\nusing this:\n  \\<exists>ws'a. redT_updW t ws' wa ws'a\n\ngoal (1 subgoal):\n 1. (\\<And>ws''.\n        redT_updW t ws' wa ws'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  redT_updW t ws' wa ws''\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<exists>ws'. redT_updWs t ws xs ws' \\<Longrightarrow>\n       \\<exists>ws'. redT_updWs t ws (xs @ [x]) ws'", "ultimately"], ["proof (chain)\npicking this:\n  redT_updWs t ws was ws'\n  redT_updW t ws' wa ws''", "show ?case"], ["proof (prove)\nusing this:\n  redT_updWs t ws was ws'\n  redT_updW t ws' wa ws''\n\ngoal (1 subgoal):\n 1. \\<exists>ws'. redT_updWs t ws (was @ [wa]) ws'", "unfolding redT_updWs_def"], ["proof (prove)\nusing this:\n  rtrancl3p (redT_updW t) ws was ws'\n  redT_updW t ws' wa ws''\n\ngoal (1 subgoal):\n 1. \\<exists>ws'. rtrancl3p (redT_updW t) ws (was @ [wa]) ws'", "by(auto intro: rtrancl3p_step)"], ["proof (state)\nthis:\n  \\<exists>ws'. redT_updWs t ws (was @ [wa]) ws'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redT_updWs_trans: \"\\<lbrakk> redT_updWs t ws was ws'; redT_updWs t ws' was' ws'' \\<rbrakk> \\<Longrightarrow> redT_updWs t ws (was @ was') ws''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; redT_updWs t ws' was' ws''\\<rbrakk>\n    \\<Longrightarrow> redT_updWs t ws (was @ was') ws''", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     rtrancl3p (redT_updW t) ws' was' ws''\\<rbrakk>\n    \\<Longrightarrow> rtrancl3p (redT_updW t) ws (was @ was') ws''", "by(rule rtrancl3p_trans)"], ["", "lemma redT_updW_None_implies_None:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws t = None; t \\<noteq> t' \\<rbrakk> \\<Longrightarrow> ws' t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t' ws wa ws'; ws t = None; t \\<noteq> t'\\<rbrakk>\n    \\<Longrightarrow> ws' t = None", "by(auto simp add: redT_updW.simps)"], ["", "lemma redT_updWs_None_implies_None:\n  assumes \"redT_updWs t' ws was ws'\"\n  and \"t \\<noteq> t'\" and \"ws t = None\"\n  shows \"ws' t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws' t = None", "using \\<open>redT_updWs t' ws was ws'\\<close> \\<open>ws t = None\\<close>"], ["proof (prove)\nusing this:\n  redT_updWs t' ws was ws'\n  ws t = None\n\ngoal (1 subgoal):\n 1. ws' t = None", "unfolding redT_updWs_def"], ["proof (prove)\nusing this:\n  rtrancl3p (redT_updW t') ws was ws'\n  ws t = None\n\ngoal (1 subgoal):\n 1. ws' t = None", "by induct(auto intro: redT_updW_None_implies_None[OF _ _ \\<open>t \\<noteq> t'\\<close>])"], ["", "lemma redT_updW_PostWS_imp_PostWS:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws t'' = \\<lfloor>PostWS w\\<rfloor>; t'' \\<noteq> t \\<rbrakk> \\<Longrightarrow>  ws' t'' = \\<lfloor>PostWS w\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t ws wa ws'; ws t'' = \\<lfloor>PostWS w\\<rfloor>;\n     t'' \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> ws' t'' = \\<lfloor>PostWS w\\<rfloor>", "by(auto simp add: redT_updW.simps)"], ["", "lemma redT_updWs_PostWS_imp_PostWS:\n  \"\\<lbrakk> redT_updWs t ws was ws'; t'' \\<noteq> t; ws t'' = \\<lfloor>PostWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> ws' t'' = \\<lfloor>PostWS w\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; t'' \\<noteq> t;\n     ws t'' = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> ws' t'' = \\<lfloor>PostWS w\\<rfloor>", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws'; t'' \\<noteq> t;\n     ws t'' = \\<lfloor>PostWS w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> ws' t'' = \\<lfloor>PostWS w\\<rfloor>", "by(induct rule: rtrancl3p.induct)(auto dest: redT_updW_PostWS_imp_PostWS)"], ["", "lemma redT_updW_Some_otherD:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t' \\<rbrakk> \n  \\<Longrightarrow> (case w of InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor> | _ \\<Rightarrow> ws t = \\<lfloor>w\\<rfloor> \\<or> (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t' ws wa ws'; ws' t = \\<lfloor>w\\<rfloor>;\n     t \\<noteq> t'\\<rbrakk>\n    \\<Longrightarrow> case w of\n                      InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor>\n                      | PostWS wake_up_status \\<Rightarrow>\n                          ws t = \\<lfloor>w\\<rfloor> \\<or>\n                          (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>)", "by(auto simp add: redT_updW.simps split: if_split_asm wait_set_status.split)"], ["", "lemma redT_updWs_Some_otherD:\n  \"\\<lbrakk> redT_updWs t' ws was ws'; ws' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t' \\<rbrakk> \n  \\<Longrightarrow> (case w of InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor> | _ \\<Rightarrow> ws t = \\<lfloor>w\\<rfloor> \\<or> (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t' ws was ws'; ws' t = \\<lfloor>w\\<rfloor>;\n     t \\<noteq> t'\\<rbrakk>\n    \\<Longrightarrow> case w of\n                      InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor>\n                      | PostWS wake_up_status \\<Rightarrow>\n                          ws t = \\<lfloor>w\\<rfloor> \\<or>\n                          (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>)", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t') ws was ws';\n     ws' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t'\\<rbrakk>\n    \\<Longrightarrow> case w of\n                      InWS w' \\<Rightarrow> ws t = \\<lfloor>InWS w'\\<rfloor>\n                      | PostWS wake_up_status \\<Rightarrow>\n                          ws t = \\<lfloor>w\\<rfloor> \\<or>\n                          (\\<exists>w'. ws t = \\<lfloor>InWS w'\\<rfloor>)", "apply(induct arbitrary: w rule: rtrancl3p.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>a t = \\<lfloor>w\\<rfloor>; t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> case w of\n                         InWS w' \\<Rightarrow>\n                           a t = \\<lfloor>InWS w'\\<rfloor>\n                         | PostWS wake_up_status \\<Rightarrow>\n                             a t = \\<lfloor>w\\<rfloor> \\<or>\n                             (\\<exists>w'. a t = \\<lfloor>InWS w'\\<rfloor>)\n 2. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t') a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t = \\<lfloor>w\\<rfloor>; t \\<noteq> t'\\<rbrakk>\n           \\<Longrightarrow> case w of\n                             InWS w' \\<Rightarrow>\n                               a t = \\<lfloor>InWS w'\\<rfloor>\n                             | PostWS wake_up_status \\<Rightarrow>\n                                 a t = \\<lfloor>w\\<rfloor> \\<or>\n                                 (\\<exists>w'.\n                                     a t = \\<lfloor>InWS w'\\<rfloor>);\n        redT_updW t' a' b a''; a'' t = \\<lfloor>w\\<rfloor>;\n        t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> case w of\n                         InWS w' \\<Rightarrow>\n                           a t = \\<lfloor>InWS w'\\<rfloor>\n                         | PostWS wake_up_status \\<Rightarrow>\n                             a t = \\<lfloor>w\\<rfloor> \\<or>\n                             (\\<exists>w'. a t = \\<lfloor>InWS w'\\<rfloor>)", "apply(fastforce split: wait_set_status.splits dest: redT_updW_Some_otherD)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma redT_updW_None_SomeD:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t' = \\<lfloor>w\\<rfloor>; ws t' = None \\<rbrakk> \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. w = InWS w' \\<and> wa = Suspend w')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t ws wa ws'; ws' t' = \\<lfloor>w\\<rfloor>;\n     ws t' = None\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and>\n                      (\\<exists>w'. w = InWS w' \\<and> wa = Suspend w')", "by(auto simp add: redT_updW.simps split: if_split_asm)"], ["", "lemma redT_updWs_None_SomeD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t' = \\<lfloor>w\\<rfloor>; ws t' = None \\<rbrakk> \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; ws' t' = \\<lfloor>w\\<rfloor>;\n     ws t' = None\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     ws' t' = \\<lfloor>w\\<rfloor>; ws t' = None\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)", "proof(induct arbitrary: w rule: rtrancl3p.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>a t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set [])\n 2. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n           \\<Longrightarrow> t = t' \\<and>\n                             (\\<exists>w'. Suspend w' \\<in> set bs);\n        redT_updW t a' b a''; a'' t' = \\<lfloor>w\\<rfloor>;\n        a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set (bs @ [b]))", "case (rtrancl3p_refl ws)"], ["proof (state)\nthis:\n  ws t' = \\<lfloor>w\\<rfloor>\n  ws t' = None\n\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>a t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set [])\n 2. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n           \\<Longrightarrow> t = t' \\<and>\n                             (\\<exists>w'. Suspend w' \\<in> set bs);\n        redT_updW t a' b a''; a'' t' = \\<lfloor>w\\<rfloor>;\n        a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set (bs @ [b]))", "thus ?case"], ["proof (prove)\nusing this:\n  ws t' = \\<lfloor>w\\<rfloor>\n  ws t' = None\n\ngoal (1 subgoal):\n 1. t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set [])", "by simp"], ["proof (state)\nthis:\n  t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set [])\n\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n           \\<Longrightarrow> t = t' \\<and>\n                             (\\<exists>w'. Suspend w' \\<in> set bs);\n        redT_updW t a' b a''; a'' t' = \\<lfloor>w\\<rfloor>;\n        a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set (bs @ [b]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n           \\<Longrightarrow> t = t' \\<and>\n                             (\\<exists>w'. Suspend w' \\<in> set bs);\n        redT_updW t a' b a''; a'' t' = \\<lfloor>w\\<rfloor>;\n        a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set (bs @ [b]))", "case (rtrancl3p_step ws was ws' wa ws'')"], ["proof (state)\nthis:\n  rtrancl3p (redT_updW t) ws was ws'\n  \\<lbrakk>ws' t' = \\<lfloor>?w\\<rfloor>; ws t' = None\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)\n  redT_updW t ws' wa ws''\n  ws'' t' = \\<lfloor>w\\<rfloor>\n  ws t' = None\n\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<And>w.\n           \\<lbrakk>a' t' = \\<lfloor>w\\<rfloor>; a t' = None\\<rbrakk>\n           \\<Longrightarrow> t = t' \\<and>\n                             (\\<exists>w'. Suspend w' \\<in> set bs);\n        redT_updW t a' b a''; a'' t' = \\<lfloor>w\\<rfloor>;\n        a t' = None\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and>\n                         (\\<exists>w'. Suspend w' \\<in> set (bs @ [b]))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "proof(cases \"ws' t'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ws' t' = None \\<Longrightarrow>\n    t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))\n 2. \\<And>a.\n       ws' t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "case None"], ["proof (state)\nthis:\n  ws' t' = None\n\ngoal (2 subgoals):\n 1. ws' t' = None \\<Longrightarrow>\n    t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))\n 2. \\<And>a.\n       ws' t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "from redT_updW_None_SomeD[OF \\<open>redT_updW t ws' wa ws''\\<close>, OF \\<open>ws'' t' = \\<lfloor>w\\<rfloor>\\<close> this]"], ["proof (chain)\npicking this:\n  t = t' \\<and> (\\<exists>w'. w = InWS w' \\<and> wa = Suspend w')", "show ?thesis"], ["proof (prove)\nusing this:\n  t = t' \\<and> (\\<exists>w'. w = InWS w' \\<and> wa = Suspend w')\n\ngoal (1 subgoal):\n 1. t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "by auto"], ["proof (state)\nthis:\n  t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "case (Some w')"], ["proof (state)\nthis:\n  ws' t' = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "with \\<open>ws t' = None\\<close> rtrancl3p_step.hyps(2)"], ["proof (chain)\npicking this:\n  ws t' = None\n  \\<lbrakk>ws' t' = \\<lfloor>?w\\<rfloor>; ws t' = None\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)\n  ws' t' = \\<lfloor>w'\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  ws t' = None\n  \\<lbrakk>ws' t' = \\<lfloor>?w\\<rfloor>; ws t' = None\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set was)\n  ws' t' = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))", "by auto"], ["proof (state)\nthis:\n  t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t = t' \\<and> (\\<exists>w'. Suspend w' \\<in> set (was @ [wa]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redT_updW_neq_Some_SomeD:\n  \"\\<lbrakk> redT_updW t' ws wa ws'; ws' t = \\<lfloor>InWS w\\<rfloor>; ws t \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> t = t' \\<and> wa = Suspend w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t' ws wa ws'; ws' t = \\<lfloor>InWS w\\<rfloor>;\n     ws t \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and> wa = Suspend w", "by(auto simp add: redT_updW.simps split: if_split_asm)"], ["", "lemma redT_updWs_neq_Some_SomeD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t' = \\<lfloor>InWS w\\<rfloor>; ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<rbrakk> \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; ws' t' = \\<lfloor>InWS w\\<rfloor>;\n     ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     ws' t' = \\<lfloor>InWS w\\<rfloor>;\n     ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was", "proof(induct rule: rtrancl3p.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set []\n 2. \\<And>a bs a' b a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<lbrakk>a' t' = \\<lfloor>InWS w\\<rfloor>;\n         a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set bs;\n        redT_updW t a' b a''; a'' t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set (bs @ [b])", "case rtrancl3p_refl"], ["proof (state)\nthis:\n  a_ t' = \\<lfloor>InWS w\\<rfloor>\n  a_ t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set []\n 2. \\<And>a bs a' b a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<lbrakk>a' t' = \\<lfloor>InWS w\\<rfloor>;\n         a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set bs;\n        redT_updW t a' b a''; a'' t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set (bs @ [b])", "thus ?case"], ["proof (prove)\nusing this:\n  a_ t' = \\<lfloor>InWS w\\<rfloor>\n  a_ t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. t = t' \\<and> Suspend w \\<in> set []", "by simp"], ["proof (state)\nthis:\n  t = t' \\<and> Suspend w \\<in> set []\n\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<lbrakk>a' t' = \\<lfloor>InWS w\\<rfloor>;\n         a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set bs;\n        redT_updW t a' b a''; a'' t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set (bs @ [b])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<lbrakk>a' t' = \\<lfloor>InWS w\\<rfloor>;\n         a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set bs;\n        redT_updW t a' b a''; a'' t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set (bs @ [b])", "case (rtrancl3p_step ws was ws' wa ws'')"], ["proof (state)\nthis:\n  rtrancl3p (redT_updW t) ws was ws'\n  \\<lbrakk>ws' t' = \\<lfloor>InWS w\\<rfloor>;\n   ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\n  redT_updW t ws' wa ws''\n  ws'' t' = \\<lfloor>InWS w\\<rfloor>\n  ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a bs a' b a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a bs a';\n        \\<lbrakk>a' t' = \\<lfloor>InWS w\\<rfloor>;\n         a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set bs;\n        redT_updW t a' b a''; a'' t' = \\<lfloor>InWS w\\<rfloor>;\n        a t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set (bs @ [b])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "proof(cases \"ws' t' = \\<lfloor>InWS w\\<rfloor>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ws' t' = \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])\n 2. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "case True"], ["proof (state)\nthis:\n  ws' t' = \\<lfloor>InWS w\\<rfloor>\n\ngoal (2 subgoals):\n 1. ws' t' = \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])\n 2. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "with \\<open>ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<close> \\<open>\\<lbrakk>ws' t' = \\<lfloor>InWS w\\<rfloor>; ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk> \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\\<close>"], ["proof (chain)\npicking this:\n  ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n  \\<lbrakk>ws' t' = \\<lfloor>InWS w\\<rfloor>;\n   ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\n  ws' t' = \\<lfloor>InWS w\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n  \\<lbrakk>ws' t' = \\<lfloor>InWS w\\<rfloor>;\n   ws t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> t = t' \\<and> Suspend w \\<in> set was\n  ws' t' = \\<lfloor>InWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "by simp"], ["proof (state)\nthis:\n  t = t' \\<and> Suspend w \\<in> set (was @ [wa])\n\ngoal (1 subgoal):\n 1. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "case False"], ["proof (state)\nthis:\n  ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "with \\<open>redT_updW t ws' wa ws''\\<close> \\<open>ws'' t' = \\<lfloor>InWS w\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  redT_updW t ws' wa ws''\n  ws'' t' = \\<lfloor>InWS w\\<rfloor>\n  ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor>", "have \"t' = t \\<and> wa = Suspend w\""], ["proof (prove)\nusing this:\n  redT_updW t ws' wa ws''\n  ws'' t' = \\<lfloor>InWS w\\<rfloor>\n  ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. t' = t \\<and> wa = Suspend w", "by(rule redT_updW_neq_Some_SomeD)"], ["proof (state)\nthis:\n  t' = t \\<and> wa = Suspend w\n\ngoal (1 subgoal):\n 1. ws' t' \\<noteq> \\<lfloor>InWS w\\<rfloor> \\<Longrightarrow>\n    t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "thus ?thesis"], ["proof (prove)\nusing this:\n  t' = t \\<and> wa = Suspend w\n\ngoal (1 subgoal):\n 1. t = t' \\<and> Suspend w \\<in> set (was @ [wa])", "by auto"], ["proof (state)\nthis:\n  t = t' \\<and> Suspend w \\<in> set (was @ [wa])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t = t' \\<and> Suspend w \\<in> set (was @ [wa])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redT_updW_not_Suspend_Some:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t = \\<lfloor>w'\\<rfloor>; ws t = \\<lfloor>w\\<rfloor>; \\<And>w. wa \\<noteq> Suspend w \\<rbrakk>\n  \\<Longrightarrow> w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t ws wa ws'; ws' t = \\<lfloor>w'\\<rfloor>;\n     ws t = \\<lfloor>w\\<rfloor>; \\<And>w. wa \\<noteq> Suspend w\\<rbrakk>\n    \\<Longrightarrow> w' = w \\<or>\n                      (\\<exists>w'' w'''.\n                          w = InWS w'' \\<and> w' = PostWS w''')", "by(auto simp add: redT_updW.simps split: if_split_asm)"], ["", "lemma redT_updWs_not_Suspend_Some:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t = \\<lfloor>w'\\<rfloor>; ws t = \\<lfloor>w\\<rfloor>; \\<And>w. Suspend w \\<notin> set was \\<rbrakk>\n  \\<Longrightarrow> w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; ws' t = \\<lfloor>w'\\<rfloor>;\n     ws t = \\<lfloor>w\\<rfloor>;\n     \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n    \\<Longrightarrow> w' = w \\<or>\n                      (\\<exists>w'' w'''.\n                          w = InWS w'' \\<and> w' = PostWS w''')", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     ws' t = \\<lfloor>w'\\<rfloor>; ws t = \\<lfloor>w\\<rfloor>;\n     \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n    \\<Longrightarrow> w' = w \\<or>\n                      (\\<exists>w'' w'''.\n                          w = InWS w'' \\<and> w' = PostWS w''')", "proof(induct arbitrary: w rule: rtrancl3p_converse_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>a t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set []\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')\n 2. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "case refl"], ["proof (state)\nthis:\n  a_ t = \\<lfloor>w'\\<rfloor>\n  a_ t = \\<lfloor>w\\<rfloor>\n  Suspend ?w \\<notin> set []\n\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>a t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set []\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')\n 2. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "thus ?case"], ["proof (prove)\nusing this:\n  a_ t = \\<lfloor>w'\\<rfloor>\n  a_ t = \\<lfloor>w\\<rfloor>\n  Suspend ?w \\<notin> set []\n\ngoal (1 subgoal):\n 1. w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')", "by simp"], ["proof (state)\nthis:\n  w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "case (step ws wa ws' was ws'')"], ["proof (state)\nthis:\n  rtrancl3p (redT_updW t) ws' was ws''\n  redT_updW t ws wa ws'\n  \\<lbrakk>ws'' t = \\<lfloor>w'\\<rfloor>; ws' t = \\<lfloor>?w\\<rfloor>;\n   \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n  \\<Longrightarrow> w' = ?w \\<or>\n                    (\\<exists>w'' w'''.\n                        ?w = InWS w'' \\<and> w' = PostWS w''')\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws t = \\<lfloor>w\\<rfloor>\n  Suspend ?w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "note \\<open>ws'' t = \\<lfloor>w'\\<rfloor>\\<close>"], ["proof (state)\nthis:\n  ws'' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "moreover"], ["proof (state)\nthis:\n  ws'' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "have \"ws' t \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws' t \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ws' t = None \\<Longrightarrow> False", "assume \"ws' t = None\""], ["proof (state)\nthis:\n  ws' t = None\n\ngoal (1 subgoal):\n 1. ws' t = None \\<Longrightarrow> False", "with \\<open>rtrancl3p (redT_updW t) ws' was ws''\\<close> \\<open>ws'' t = \\<lfloor>w'\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  rtrancl3p (redT_updW t) ws' was ws''\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws' t = None", "obtain w' where \"Suspend w' \\<in> set was\""], ["proof (prove)\nusing this:\n  rtrancl3p (redT_updW t) ws' was ws''\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws' t = None\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        Suspend w' \\<in> set was \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding redT_updWs_def[symmetric]"], ["proof (prove)\nusing this:\n  redT_updWs t ws' was ws''\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws' t = None\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        Suspend w' \\<in> set was \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: redT_updWs_None_SomeD)"], ["proof (state)\nthis:\n  Suspend w' \\<in> set was\n\ngoal (1 subgoal):\n 1. ws' t = None \\<Longrightarrow> False", "with \\<open>Suspend w' \\<notin> set (wa # was)\\<close>"], ["proof (chain)\npicking this:\n  Suspend w' \\<notin> set (wa # was)\n  Suspend w' \\<in> set was", "show False"], ["proof (prove)\nusing this:\n  Suspend w' \\<notin> set (wa # was)\n  Suspend w' \\<in> set was\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ws' t \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "then"], ["proof (chain)\npicking this:\n  ws' t \\<noteq> None", "obtain w'' where \"ws' t = \\<lfloor>w''\\<rfloor>\""], ["proof (prove)\nusing this:\n  ws' t \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>w''.\n        ws' t = \\<lfloor>w''\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>w''\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "moreover"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>w''\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "{"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>w''\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "from \\<open>Suspend w \\<notin> set (wa # was)\\<close>"], ["proof (chain)\npicking this:\n  Suspend w \\<notin> set (wa # was)", "have \"Suspend w \\<notin> set was\""], ["proof (prove)\nusing this:\n  Suspend w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. Suspend w \\<notin> set was", "by simp"], ["proof (state)\nthis:\n  Suspend w \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "}"], ["proof (state)\nthis:\n  Suspend ?wc2 \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "ultimately"], ["proof (chain)\npicking this:\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws' t = \\<lfloor>w''\\<rfloor>\n  Suspend ?wc2 \\<notin> set was", "have \"w' = w'' \\<or> (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\""], ["proof (prove)\nusing this:\n  ws'' t = \\<lfloor>w'\\<rfloor>\n  ws' t = \\<lfloor>w''\\<rfloor>\n  Suspend ?wc2 \\<notin> set was\n\ngoal (1 subgoal):\n 1. w' = w'' \\<or>\n    (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')", "by(rule step.hyps)"], ["proof (state)\nthis:\n  w' = w'' \\<or>\n  (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "moreover"], ["proof (state)\nthis:\n  w' = w'' \\<or>\n  (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "{"], ["proof (state)\nthis:\n  w' = w'' \\<or>\n  (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "from \\<open>Suspend w \\<notin> set (wa # was)\\<close>"], ["proof (chain)\npicking this:\n  Suspend w \\<notin> set (wa # was)", "have \"wa \\<noteq> Suspend w\""], ["proof (prove)\nusing this:\n  Suspend w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. wa \\<noteq> Suspend w", "by auto"], ["proof (state)\nthis:\n  wa \\<noteq> Suspend w\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "}"], ["proof (state)\nthis:\n  wa \\<noteq> Suspend ?wc2\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "note redT_updW_not_Suspend_Some[OF \\<open>redT_updW t ws wa ws'\\<close>, OF \\<open>ws' t = \\<lfloor>w''\\<rfloor>\\<close> \\<open>ws t = \\<lfloor>w\\<rfloor>\\<close> this]"], ["proof (state)\nthis:\n  w'' = w \\<or> (\\<exists>w''a w'''. w = InWS w''a \\<and> w'' = PostWS w''')\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a'' w.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<And>w.\n           \\<lbrakk>a'' t = \\<lfloor>w'\\<rfloor>;\n            a' t = \\<lfloor>w\\<rfloor>;\n            \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n           \\<Longrightarrow> w' = w \\<or>\n                             (\\<exists>w'' w'''.\n                                 w = InWS w'' \\<and> w' = PostWS w''');\n        a'' t = \\<lfloor>w'\\<rfloor>; a t = \\<lfloor>w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> w' = w \\<or>\n                         (\\<exists>w'' w'''.\n                             w = InWS w'' \\<and> w' = PostWS w''')", "ultimately"], ["proof (chain)\npicking this:\n  w' = w'' \\<or>\n  (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\n  w'' = w \\<or> (\\<exists>w''a w'''. w = InWS w''a \\<and> w'' = PostWS w''')", "show ?case"], ["proof (prove)\nusing this:\n  w' = w'' \\<or>\n  (\\<exists>w''' w''''. w'' = InWS w''' \\<and> w' = PostWS w'''')\n  w'' = w \\<or> (\\<exists>w''a w'''. w = InWS w''a \\<and> w'' = PostWS w''')\n\ngoal (1 subgoal):\n 1. w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')", "by auto"], ["proof (state)\nthis:\n  w' = w \\<or> (\\<exists>w'' w'''. w = InWS w'' \\<and> w' = PostWS w''')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redT_updWs_WokenUp_SuspendD:\n  \"\\<lbrakk> redT_updWs t ws was ws'; Notified \\<in> set was \\<or> WokenUp \\<in> set was; ws' t = \\<lfloor>w\\<rfloor> \\<rbrakk> \\<Longrightarrow> \\<exists>w. Suspend w \\<in> set was\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws';\n     Notified \\<in> set was \\<or> WokenUp \\<in> set was;\n     ws' t = \\<lfloor>w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w. Suspend w \\<in> set was", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     Notified \\<in> set was \\<or> WokenUp \\<in> set was;\n     ws' t = \\<lfloor>w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w. Suspend w \\<in> set was", "by(induct rule: rtrancl3p_converse_induct)(auto dest: redT_updWs_None_SomeD[unfolded redT_updWs_def])"], ["", "lemma redT_updW_Woken_Up_same_no_Notified_Interrupted:\n  \"\\<lbrakk> redT_updW t ws wa ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>; ws t = \\<lfloor>PostWS w\\<rfloor>; \\<And>w. wa \\<noteq> Suspend w \\<rbrakk>\n  \\<Longrightarrow> wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updW t ws wa ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>;\n     ws t = \\<lfloor>PostWS w\\<rfloor>;\n     \\<And>w. wa \\<noteq> Suspend w\\<rbrakk>\n    \\<Longrightarrow> wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp", "by(fastforce)"], ["", "lemma redT_updWs_Woken_Up_same_no_Notified_Interrupted:\n  \"\\<lbrakk> redT_updWs t ws was ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>; ws t = \\<lfloor>PostWS w\\<rfloor>; \\<And>w. Suspend w \\<notin> set was \\<rbrakk>\n  \\<Longrightarrow> Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>redT_updWs t ws was ws'; ws' t = \\<lfloor>PostWS w\\<rfloor>;\n     ws t = \\<lfloor>PostWS w\\<rfloor>;\n     \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n    \\<Longrightarrow> Notified \\<notin> set was \\<and>\n                      WokenUp \\<notin> set was", "unfolding redT_updWs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rtrancl3p (redT_updW t) ws was ws';\n     ws' t = \\<lfloor>PostWS w\\<rfloor>; ws t = \\<lfloor>PostWS w\\<rfloor>;\n     \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n    \\<Longrightarrow> Notified \\<notin> set was \\<and>\n                      WokenUp \\<notin> set was", "proof(induct rule: rtrancl3p_converse_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set []\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set [] \\<and>\n                         WokenUp \\<notin> set []\n 2. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "case refl"], ["proof (state)\nthis:\n  a_ t = \\<lfloor>PostWS w\\<rfloor>\n  a_ t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?w \\<notin> set []\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set []\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set [] \\<and>\n                         WokenUp \\<notin> set []\n 2. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  a_ t = \\<lfloor>PostWS w\\<rfloor>\n  a_ t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?w \\<notin> set []\n\ngoal (1 subgoal):\n 1. Notified \\<notin> set [] \\<and> WokenUp \\<notin> set []", "by simp"], ["proof (state)\nthis:\n  Notified \\<notin> set [] \\<and> WokenUp \\<notin> set []\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "case (step ws wa ws' was ws'')"], ["proof (state)\nthis:\n  rtrancl3p (redT_updW t) ws' was ws''\n  redT_updW t ws wa ws'\n  \\<lbrakk>ws'' t = \\<lfloor>PostWS w\\<rfloor>;\n   ws' t = \\<lfloor>PostWS w\\<rfloor>;\n   \\<And>w. Suspend w \\<notin> set was\\<rbrakk>\n  \\<Longrightarrow> Notified \\<notin> set was \\<and>\n                    WokenUp \\<notin> set was\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "note Suspend = \\<open>\\<And>w. Suspend w \\<notin> set (wa # was)\\<close>"], ["proof (state)\nthis:\n  Suspend ?w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "note \\<open>ws'' t = \\<lfloor>PostWS w\\<rfloor>\\<close>"], ["proof (state)\nthis:\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "moreover"], ["proof (state)\nthis:\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "have \"ws' t = \\<lfloor>PostWS w\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws' t = \\<lfloor>PostWS w\\<rfloor>", "proof(cases \"ws' t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ws' t = None \\<Longrightarrow> ws' t = \\<lfloor>PostWS w\\<rfloor>\n 2. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "case None"], ["proof (state)\nthis:\n  ws' t = None\n\ngoal (2 subgoals):\n 1. ws' t = None \\<Longrightarrow> ws' t = \\<lfloor>PostWS w\\<rfloor>\n 2. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "with \\<open>rtrancl3p (redT_updW t) ws' was ws''\\<close> \\<open>ws'' t = \\<lfloor>PostWS w\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  rtrancl3p (redT_updW t) ws' was ws''\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws' t = None", "obtain w where \"Suspend w \\<in> set was\""], ["proof (prove)\nusing this:\n  rtrancl3p (redT_updW t) ws' was ws''\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws' t = None\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        Suspend w \\<in> set was \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding redT_updWs_def[symmetric]"], ["proof (prove)\nusing this:\n  redT_updWs t ws' was ws''\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws' t = None\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        Suspend w \\<in> set was \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: redT_updWs_None_SomeD)"], ["proof (state)\nthis:\n  Suspend w \\<in> set was\n\ngoal (2 subgoals):\n 1. ws' t = None \\<Longrightarrow> ws' t = \\<lfloor>PostWS w\\<rfloor>\n 2. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "with Suspend[of w]"], ["proof (chain)\npicking this:\n  Suspend w \\<notin> set (wa # was)\n  Suspend w \\<in> set was", "have False"], ["proof (prove)\nusing this:\n  Suspend w \\<notin> set (wa # was)\n  Suspend w \\<in> set was\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. ws' t = None \\<Longrightarrow> ws' t = \\<lfloor>PostWS w\\<rfloor>\n 2. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. ws' t = \\<lfloor>PostWS w\\<rfloor>", ".."], ["proof (state)\nthis:\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "case (Some w')"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       ws' t = \\<lfloor>PostWS w\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ws' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. ws' t = \\<lfloor>PostWS w\\<rfloor>", "using \\<open>ws t = \\<lfloor>PostWS w\\<rfloor>\\<close> Suspend \\<open>redT_updW t ws wa ws'\\<close>"], ["proof (prove)\nusing this:\n  ws' t = \\<lfloor>w'\\<rfloor>\n  ws t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?w \\<notin> set (wa # was)\n  redT_updW t ws wa ws'\n\ngoal (1 subgoal):\n 1. ws' t = \\<lfloor>PostWS w\\<rfloor>", "by(auto simp add: redT_updW.simps split: if_split_asm)"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "moreover"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "{"], ["proof (state)\nthis:\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "from Suspend[of w]"], ["proof (chain)\npicking this:\n  Suspend w \\<notin> set (wa # was)", "have \"Suspend w \\<notin> set was\""], ["proof (prove)\nusing this:\n  Suspend w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. Suspend w \\<notin> set was", "by simp"], ["proof (state)\nthis:\n  Suspend w \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "}"], ["proof (state)\nthis:\n  Suspend ?wb2 \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "ultimately"], ["proof (chain)\npicking this:\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?wb2 \\<notin> set was", "have \"Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\""], ["proof (prove)\nusing this:\n  ws'' t = \\<lfloor>PostWS w\\<rfloor>\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n  Suspend ?wb2 \\<notin> set was\n\ngoal (1 subgoal):\n 1. Notified \\<notin> set was \\<and> WokenUp \\<notin> set was", "by(rule step.hyps)"], ["proof (state)\nthis:\n  Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "moreover"], ["proof (state)\nthis:\n  Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "{"], ["proof (state)\nthis:\n  Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "from Suspend[of w]"], ["proof (chain)\npicking this:\n  Suspend w \\<notin> set (wa # was)", "have \"wa \\<noteq> Suspend w\""], ["proof (prove)\nusing this:\n  Suspend w \\<notin> set (wa # was)\n\ngoal (1 subgoal):\n 1. wa \\<noteq> Suspend w", "by auto"], ["proof (state)\nthis:\n  wa \\<noteq> Suspend w\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "}"], ["proof (state)\nthis:\n  wa \\<noteq> Suspend ?wb2\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "with \\<open>redT_updW t ws wa ws'\\<close> \\<open>ws' t = \\<lfloor>PostWS w\\<rfloor>\\<close> \\<open>ws t = \\<lfloor>PostWS w\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  redT_updW t ws wa ws'\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n  ws t = \\<lfloor>PostWS w\\<rfloor>\n  wa \\<noteq> Suspend ?wb2", "have \"wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp\""], ["proof (prove)\nusing this:\n  redT_updW t ws wa ws'\n  ws' t = \\<lfloor>PostWS w\\<rfloor>\n  ws t = \\<lfloor>PostWS w\\<rfloor>\n  wa \\<noteq> Suspend ?wb2\n\ngoal (1 subgoal):\n 1. wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp", "by(rule redT_updW_Woken_Up_same_no_Notified_Interrupted)"], ["proof (state)\nthis:\n  wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp\n\ngoal (1 subgoal):\n 1. \\<And>a b a' bs a''.\n       \\<lbrakk>rtrancl3p (redT_updW t) a' bs a''; redT_updW t a b a';\n        \\<lbrakk>a'' t = \\<lfloor>PostWS w\\<rfloor>;\n         a' t = \\<lfloor>PostWS w\\<rfloor>;\n         \\<And>w. Suspend w \\<notin> set bs\\<rbrakk>\n        \\<Longrightarrow> Notified \\<notin> set bs \\<and>\n                          WokenUp \\<notin> set bs;\n        a'' t = \\<lfloor>PostWS w\\<rfloor>;\n        a t = \\<lfloor>PostWS w\\<rfloor>;\n        \\<And>w. Suspend w \\<notin> set (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Notified \\<notin> set (b # bs) \\<and>\n                         WokenUp \\<notin> set (b # bs)", "ultimately"], ["proof (chain)\npicking this:\n  Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\n  wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp", "show ?case"], ["proof (prove)\nusing this:\n  Notified \\<notin> set was \\<and> WokenUp \\<notin> set was\n  wa \\<noteq> Notified \\<and> wa \\<noteq> WokenUp\n\ngoal (1 subgoal):\n 1. Notified \\<notin> set (wa # was) \\<and> WokenUp \\<notin> set (wa # was)", "by auto"], ["proof (state)\nthis:\n  Notified \\<notin> set (wa # was) \\<and> WokenUp \\<notin> set (wa # was)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Preconditions for wait set actions\\<close>"], ["", "definition wset_actions_ok :: \"('w,'t) wait_sets \\<Rightarrow> 't \\<Rightarrow> ('t,'w) wait_set_action list \\<Rightarrow> bool\"\nwhere\n  \"wset_actions_ok ws t was \\<longleftrightarrow>\n  (if Notified \\<in> set was then ws t = \\<lfloor>PostWS WSNotified\\<rfloor>\n   else if WokenUp \\<in> set was then ws t = \\<lfloor>PostWS WSWokenUp\\<rfloor>\n   else ws t = None)\""], ["", "lemma wset_actions_ok_Nil [simp]:\n  \"wset_actions_ok ws t [] \\<longleftrightarrow> ws t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset_actions_ok ws t [] = (ws t = None)", "by(simp add: wset_actions_ok_def)"], ["", "definition waiting :: \"'w wait_set_status option \\<Rightarrow> bool\"\nwhere \"waiting w \\<longleftrightarrow> (\\<exists>w'. w = \\<lfloor>InWS w'\\<rfloor>)\""], ["", "lemma not_waiting_iff:\n  \"\\<not> waiting w \\<longleftrightarrow> w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> waiting w) =\n    (w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))", "apply(cases \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. w = None \\<Longrightarrow>\n    (\\<not> waiting w) =\n    (w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))\n 2. \\<And>a.\n       w = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       (\\<not> waiting w) =\n       (w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))", "apply(case_tac [2] a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. w = None \\<Longrightarrow>\n    (\\<not> waiting w) =\n    (w = None \\<or> (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))\n 2. \\<And>a x1.\n       \\<lbrakk>w = \\<lfloor>a\\<rfloor>; a = InWS x1\\<rbrakk>\n       \\<Longrightarrow> (\\<not> waiting w) =\n                         (w = None \\<or>\n                          (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))\n 3. \\<And>a x2.\n       \\<lbrakk>w = \\<lfloor>a\\<rfloor>; a = PostWS x2\\<rbrakk>\n       \\<Longrightarrow> (\\<not> waiting w) =\n                         (w = None \\<or>\n                          (\\<exists>w'. w = \\<lfloor>PostWS w'\\<rfloor>))", "apply(auto simp add: waiting_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma waiting_code [code]:\n  \"waiting None = False\"\n  \"\\<And>w. waiting \\<lfloor>PostWS w\\<rfloor> = False\"\n  \"\\<And>w. waiting \\<lfloor>InWS w\\<rfloor> = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. waiting None = False &&&\n    (\\<And>w. waiting \\<lfloor>PostWS w\\<rfloor> = False) &&&\n    (\\<And>w. waiting \\<lfloor>InWS w\\<rfloor> = True)", "by(simp_all add: waiting_def)"], ["", "end"]]}