{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWLiftingSem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma redT_preserves_ts_inv_ok:\n  \"\\<lbrakk> s -t\\<triangleright>ta\\<rightarrow> s'; ts_inv_ok (thr s) I \\<rbrakk>\n  \\<Longrightarrow> ts_inv_ok (thr s') (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\"", "lemma RedT_preserves_ts_inv_ok:\n  \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_inv_ok (thr s) I \\<rbrakk>\n  \\<Longrightarrow> ts_inv_ok (thr s') (upd_invs I Q (concat (map (thr_a \\<circ> snd) ttas)))\"", "lemma redT_upd_inv_ext:\n  fixes I :: \"'t \\<rightharpoonup> 'i\"\n  shows \"\\<lbrakk> s -t\\<triangleright>ta\\<rightarrow> s'; ts_inv_ok (thr s) I \\<rbrakk> \\<Longrightarrow> I \\<subseteq>\\<^sub>m upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\"", "lemma RedT_upd_inv_ext:\n  fixes I :: \"'t \\<rightharpoonup> 'i\"\n  shows \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_inv_ok (thr s) I \\<rbrakk>\n         \\<Longrightarrow> I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))\"", "lemma redT_updTs_invariant:\n  fixes ln\n  assumes tsiP: \"ts_inv P I ts m\"\n  and red: \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and tao: \"thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\"\n  and tst: \"ts t = \\<lfloor>(x, ln)\\<rfloor>\"\n  shows \"ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) m'\"", "theorem redT_invariant:\n  assumes redT: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and esinvP: \"ts_inv P I (thr s) (shr s)\"\n  shows \"ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s') (shr s')\"", "theorem RedT_invariant:\n  assumes RedT: \"s -\\<triangleright>ttas\\<rightarrow>* s'\"\n  and esinvQ: \"ts_inv P I (thr s) (shr s)\"\n  shows \"ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))) (thr s') (shr s')\"", "lemma invariant3p_ts_inv: \"invariant3p redT {s. \\<exists>I. ts_inv P I (thr s) (shr s)}\"", "lemma lifting_inv: \"lifting_inv final r (\\<lambda>_ :: unit. P)\"", "lemma redT_updTs_preserves:\n  fixes ln\n  assumes esokQ: \"ts_ok P ts m\"\n  and red: \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and \"ts t = \\<lfloor>(x, ln)\\<rfloor>\"\n  and \"thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\"\n  shows \"ts_ok P (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) m'\"", "theorem redT_preserves:\n  assumes redT: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and esokQ: \"ts_ok P (thr s) (shr s)\"\n  shows \"ts_ok P (thr s') (shr s')\"", "theorem RedT_preserves:\n  \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_ok P (thr s) (shr s) \\<rbrakk> \\<Longrightarrow> ts_ok P (thr s') (shr s')\"", "lemma invariant3p_ts_ok: \"invariant3p redT {s. ts_ok P (thr s) (shr s)}\"", "lemma lifting_wf_Const [intro!]: \n  assumes \"multithreaded final r\"\n  shows \"lifting_wf final r (\\<lambda>t x m. k)\""], "translations": [["", "lemma redT_preserves_ts_inv_ok:\n  \"\\<lbrakk> s -t\\<triangleright>ta\\<rightarrow> s'; ts_inv_ok (thr s) I \\<rbrakk>\n  \\<Longrightarrow> ts_inv_ok (thr s') (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -t\\<triangleright>ta\\<rightarrow> s';\n     ts_inv_ok (thr s) I\\<rbrakk>\n    \\<Longrightarrow> ts_inv_ok (thr s')\n                       (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)", "by(erule redT.cases)(fastforce intro: ts_inv_ok_upd_invs ts_inv_ok_upd_ts redT_updTs_Some)+"], ["", "lemma RedT_preserves_ts_inv_ok:\n  \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_inv_ok (thr s) I \\<rbrakk>\n  \\<Longrightarrow> ts_inv_ok (thr s') (upd_invs I Q (concat (map (thr_a \\<circ> snd) ttas)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n     ts_inv_ok (thr s) I\\<rbrakk>\n    \\<Longrightarrow> ts_inv_ok (thr s')\n                       (upd_invs I Q\n                         (concat (map (thr_a \\<circ> snd) ttas)))", "by(induct rule: RedT_induct)(auto intro: redT_preserves_ts_inv_ok)"], ["", "lemma redT_upd_inv_ext:\n  fixes I :: \"'t \\<rightharpoonup> 'i\"\n  shows \"\\<lbrakk> s -t\\<triangleright>ta\\<rightarrow> s'; ts_inv_ok (thr s) I \\<rbrakk> \\<Longrightarrow> I \\<subseteq>\\<^sub>m upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -t\\<triangleright>ta\\<rightarrow> s';\n     ts_inv_ok (thr s) I\\<rbrakk>\n    \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                      upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "by(erule redT.cases, auto intro: ts_inv_ok_inv_ext_upd_invs)"], ["", "lemma RedT_upd_inv_ext:\n  fixes I :: \"'t \\<rightharpoonup> 'i\"\n  shows \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_inv_ok (thr s) I \\<rbrakk>\n         \\<Longrightarrow> I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n     ts_inv_ok (thr s) I\\<rbrakk>\n    \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                      upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))", "proof(induct rule: RedT_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       ts_inv_ok (thr s) I \\<Longrightarrow>\n       I \\<subseteq>\\<^sub>m\n       upd_invs I P (concat (map (thr_a \\<circ> snd) []))\n 2. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "case refl"], ["proof (state)\nthis:\n  ts_inv_ok (thr s_) I\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       ts_inv_ok (thr s) I \\<Longrightarrow>\n       I \\<subseteq>\\<^sub>m\n       upd_invs I P (concat (map (thr_a \\<circ> snd) []))\n 2. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "thus ?case"], ["proof (prove)\nusing this:\n  ts_inv_ok (thr s_) I\n\ngoal (1 subgoal):\n 1. I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) []))", "by simp"], ["proof (state)\nthis:\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) []))\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "case (step S TTAS S' T TA S'')"], ["proof (state)\nthis:\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv_ok (thr S) I \\<Longrightarrow>\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv_ok (thr S) I\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "hence \"ts_inv_ok (thr S') (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)))\""], ["proof (prove)\nusing this:\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv_ok (thr S) I \\<Longrightarrow>\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv_ok (thr S) I\n\ngoal (1 subgoal):\n 1. ts_inv_ok (thr S')\n     (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)))", "by -(rule RedT_preserves_ts_inv_ok)"], ["proof (state)\nthis:\n  ts_inv_ok (thr S') (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)))\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "hence \"upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  ts_inv_ok (thr S') (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)))\n\ngoal (1 subgoal):\n 1. upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m\n    upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n     \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>", "using step"], ["proof (prove)\nusing this:\n  ts_inv_ok (thr S') (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)))\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv_ok (thr S) I \\<Longrightarrow>\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv_ok (thr S) I\n\ngoal (1 subgoal):\n 1. upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m\n    upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n     \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>", "by -(rule redT_upd_inv_ext)"], ["proof (state)\nthis:\n  upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m\n  upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n   \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv_ok (thr s) I \\<Longrightarrow>\n        I \\<subseteq>\\<^sub>m\n        upd_invs I P (concat (map (thr_a \\<circ> snd) ttas));\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv_ok (thr s) I\\<rbrakk>\n       \\<Longrightarrow> I \\<subseteq>\\<^sub>m\n                         upd_invs I P\n                          (concat\n                            (map (thr_a \\<circ> snd) (ttas @ [(t, ta)])))", "with step"], ["proof (chain)\npicking this:\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv_ok (thr S) I \\<Longrightarrow>\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv_ok (thr S) I\n  upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m\n  upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n   \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>", "show ?case"], ["proof (prove)\nusing this:\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv_ok (thr S) I \\<Longrightarrow>\n  I \\<subseteq>\\<^sub>m upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv_ok (thr S) I\n  upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS)) \\<subseteq>\\<^sub>m\n  upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n   \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. I \\<subseteq>\\<^sub>m\n    upd_invs I P (concat (map (thr_a \\<circ> snd) (TTAS @ [(T, TA)])))", "by(auto elim!: map_le_trans simp add: comp_def)"], ["proof (state)\nthis:\n  I \\<subseteq>\\<^sub>m\n  upd_invs I P (concat (map (thr_a \\<circ> snd) (TTAS @ [(T, TA)])))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale lifting_inv = multithreaded final r convert_RA\n  for final :: \"'x \\<Rightarrow> bool\" \n  and r :: \"('l,'t,'x,'m,'w,'o) semantics\" (\"_ \\<turnstile> _ -_\\<rightarrow> _\" [50,0,0,50] 80) \n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  +\n  fixes P :: \"'i \\<Rightarrow> 't \\<Rightarrow> 'x \\<Rightarrow> 'm \\<Rightarrow> bool\"\n  assumes invariant_red: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P i t x m \\<rbrakk> \\<Longrightarrow> P i t x' m'\"\n  and invariant_NewThread: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P i t x m; NewThread t'' x'' m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<rbrakk> \n                            \\<Longrightarrow> \\<exists>i''. P i'' t'' x'' m'\"\n  and invariant_other: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P i t x m; P i'' t'' x'' m \\<rbrakk> \\<Longrightarrow> P i'' t'' x'' m'\"\nbegin"], ["", "lemma redT_updTs_invariant:\n  fixes ln\n  assumes tsiP: \"ts_inv P I ts m\"\n  and red: \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and tao: \"thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\"\n  and tst: \"ts t = \\<lfloor>(x, ln)\\<rfloor>\"\n  shows \"ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "proof(rule ts_invI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tb x ln.\n       (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n        (x', ln')))\n        tb =\n       \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> tb =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i tb x m'", "fix T X LN"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tb x ln.\n       (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n        (x', ln')))\n        tb =\n       \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> tb =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i tb x m'", "assume XLN: \"(redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) T = \\<lfloor>(X, LN)\\<rfloor>\""], ["proof (state)\nthis:\n  (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n   (x', ln')))\n   T =\n  \\<lfloor>(X, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>tb x ln.\n       (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n        (x', ln')))\n        tb =\n       \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> tb =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i tb x m'", "from tsiP \\<open>ts t = \\<lfloor>(x, ln)\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  ts_inv P I ts m\n  ts t = \\<lfloor>(x, ln)\\<rfloor>", "obtain i where \"I t = \\<lfloor>i\\<rfloor>\" \"P i t x m\""], ["proof (prove)\nusing this:\n  ts_inv P I ts m\n  ts t = \\<lfloor>(x, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>I t = \\<lfloor>i\\<rfloor>; P i t x m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: ts_invD)"], ["proof (state)\nthis:\n  I t = \\<lfloor>i\\<rfloor>\n  P i t x m\n\ngoal (1 subgoal):\n 1. \\<And>tb x ln.\n       (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n        (x', ln')))\n        tb =\n       \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> tb =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i tb x m'", "show \"\\<exists>i. upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T = \\<lfloor>i\\<rfloor> \\<and> P i T X m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "proof(cases \"T = t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. T = t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "case True"], ["proof (state)\nthis:\n  T = t\n\ngoal (2 subgoals):\n 1. T = t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "from red \\<open>P i t x m\\<close>"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m", "have \"P i t x' m'\""], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m\n\ngoal (1 subgoal):\n 1. P i t x' m'", "by(rule invariant_red)"], ["proof (state)\nthis:\n  P i t x' m'\n\ngoal (2 subgoals):\n 1. T = t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "moreover"], ["proof (state)\nthis:\n  P i t x' m'\n\ngoal (2 subgoals):\n 1. T = t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "from \\<open>I t = \\<lfloor>i\\<rfloor>\\<close> \\<open>ts t = \\<lfloor>(x, ln)\\<rfloor>\\<close> tao"], ["proof (chain)\npicking this:\n  I t = \\<lfloor>i\\<rfloor>\n  ts t = \\<lfloor>(x, ln)\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "have \"upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t = \\<lfloor>i\\<rfloor>\""], ["proof (prove)\nusing this:\n  I t = \\<lfloor>i\\<rfloor>\n  ts t = \\<lfloor>(x, ln)\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t =\n    \\<lfloor>i\\<rfloor>", "by(simp add: upd_invs_Some)"], ["proof (state)\nthis:\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t = \\<lfloor>i\\<rfloor>\n\ngoal (2 subgoals):\n 1. T = t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "ultimately"], ["proof (chain)\npicking this:\n  P i t x' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t = \\<lfloor>i\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  P i t x' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t = \\<lfloor>i\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "using True XLN"], ["proof (prove)\nusing this:\n  P i t x' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t = \\<lfloor>i\\<rfloor>\n  T = t\n  (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n   (x', ln')))\n   T =\n  \\<lfloor>(X, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "by simp"], ["proof (state)\nthis:\n  \\<exists>i.\n     upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n     \\<lfloor>i\\<rfloor> \\<and>\n     P i T X m'\n\ngoal (1 subgoal):\n 1. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "case False"], ["proof (state)\nthis:\n  T \\<noteq> t\n\ngoal (1 subgoal):\n 1. T \\<noteq> t \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "proof(cases \"ts T\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "case None"], ["proof (state)\nthis:\n  ts T = None\n\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "with XLN tao False"], ["proof (chain)\npicking this:\n  (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n   (x', ln')))\n   T =\n  \\<lfloor>(X, LN)\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  T \\<noteq> t\n  ts T = None", "have \"\\<exists>m'. NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n   (x', ln')))\n   T =\n  \\<lfloor>(X, LN)\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  T \\<noteq> t\n  ts T = None\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "by(auto dest: redT_updTs_new_thread)"], ["proof (state)\nthis:\n  \\<exists>m'.\n     NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "with red"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  \\<exists>m'.\n     NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "have nt: \"NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  \\<exists>m'.\n     NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "by(auto dest: new_thread_memory)"], ["proof (state)\nthis:\n  NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "with red \\<open>P i t x m\\<close>"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m\n  NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "have \"\\<exists>i''. P i'' T X m'\""], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m\n  NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i''. P i'' T X m'", "by(rule invariant_NewThread)"], ["proof (state)\nthis:\n  \\<exists>i''. P i'' T X m'\n\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "hence \"P (SOME i. P i T X m') T X m'\""], ["proof (prove)\nusing this:\n  \\<exists>i''. P i'' T X m'\n\ngoal (1 subgoal):\n 1. P (SOME i. P i T X m') T X m'", "by(rule someI_ex)"], ["proof (state)\nthis:\n  P (SOME i. P i T X m') T X m'\n\ngoal (2 subgoals):\n 1. ts T = None \\<Longrightarrow>\n    \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'\n 2. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "with nt tao"], ["proof (chain)\npicking this:\n  NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  P (SOME i. P i T X m') T X m'", "show ?thesis"], ["proof (prove)\nusing this:\n  NewThread T X m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  P (SOME i. P i T X m') T X m'\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "by(auto intro: SOME_new_thread_upd_invs)"], ["proof (state)\nthis:\n  \\<exists>i.\n     upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n     \\<lfloor>i\\<rfloor> \\<and>\n     P i T X m'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "case (Some a)"], ["proof (state)\nthis:\n  ts T = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "obtain X' LN' where [simp]: \"a = (X', LN')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X' LN'. a = (X', LN') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (X', LN')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "with \\<open>ts T = \\<lfloor>a\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  ts T = \\<lfloor>a\\<rfloor>\n  a = (X', LN')", "have esT: \"ts T = \\<lfloor>(X', LN')\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts T = \\<lfloor>a\\<rfloor>\n  a = (X', LN')\n\ngoal (1 subgoal):\n 1. ts T = \\<lfloor>(X', LN')\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "hence \"redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T = \\<lfloor>(X', LN')\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n\ngoal (1 subgoal):\n 1. redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n    \\<lfloor>(X', LN')\\<rfloor>", "using \\<open>thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n    \\<lfloor>(X', LN')\\<rfloor>", "by(auto intro: redT_updTs_Some)"], ["proof (state)\nthis:\n  redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>(X', LN')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "moreover"], ["proof (state)\nthis:\n  redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>(X', LN')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "from esT tsiP"], ["proof (chain)\npicking this:\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n  ts_inv P I ts m", "obtain i' where \"I T = \\<lfloor>i'\\<rfloor>\" \"P i' T X' m\""], ["proof (prove)\nusing this:\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n  ts_inv P I ts m\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>I T = \\<lfloor>i'\\<rfloor>; P i' T X' m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: ts_invD)"], ["proof (state)\nthis:\n  I T = \\<lfloor>i'\\<rfloor>\n  P i' T X' m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "from red \\<open>P i t x m\\<close> \\<open>P i' T X' m\\<close>"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m\n  P i' T X' m", "have \"P i' T X' m'\""], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  P i t x m\n  P i' T X' m\n\ngoal (1 subgoal):\n 1. P i' T X' m'", "by(rule invariant_other)"], ["proof (state)\nthis:\n  P i' T X' m'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "moreover"], ["proof (state)\nthis:\n  P i' T X' m'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "from \\<open>I T = \\<lfloor>i'\\<rfloor>\\<close> esT tao"], ["proof (chain)\npicking this:\n  I T = \\<lfloor>i'\\<rfloor>\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>", "have \"upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T = \\<lfloor>i'\\<rfloor>\""], ["proof (prove)\nusing this:\n  I T = \\<lfloor>i'\\<rfloor>\n  ts T = \\<lfloor>(X', LN')\\<rfloor>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n    \\<lfloor>i'\\<rfloor>", "by(simp add: upd_invs_Some)"], ["proof (state)\nthis:\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>i'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>i.\n          upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n          \\<lfloor>i\\<rfloor> \\<and>\n          P i T X m'", "ultimately"], ["proof (chain)\npicking this:\n  redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>(X', LN')\\<rfloor>\n  P i' T X' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>i'\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>(X', LN')\\<rfloor>\n  P i' T X' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>i'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "using XLN False"], ["proof (prove)\nusing this:\n  redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>(X', LN')\\<rfloor>\n  P i' T X' m'\n  upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n  \\<lfloor>i'\\<rfloor>\n  (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n   (x', ln')))\n   T =\n  \\<lfloor>(X, LN)\\<rfloor>\n  T \\<noteq> t\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n       \\<lfloor>i\\<rfloor> \\<and>\n       P i T X m'", "by simp"], ["proof (state)\nthis:\n  \\<exists>i.\n     upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n     \\<lfloor>i\\<rfloor> \\<and>\n     P i T X m'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i.\n     upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n     \\<lfloor>i\\<rfloor> \\<and>\n     P i T X m'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i.\n     upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> T =\n     \\<lfloor>i\\<rfloor> \\<and>\n     P i T X m'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem redT_invariant:\n  assumes redT: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and esinvP: \"ts_inv P I (thr s) (shr s)\"\n  shows \"ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s') (shr s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "using redT"], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "proof(cases rule: redT_elims)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')\n 2. \\<And>x ln n.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ta = (K$ [], [], [], [], [], convert_RA ln);\n        \\<not> waiting (wset s t); may_acquire_all (locks s) t ln;\n        0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "case acquire"], ["proof (state)\nthis:\n  thr s t = \\<lfloor>(x_, ln_)\\<rfloor>\n  ta = (K$ [], [], [], [], [], convert_RA ln_)\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln_\n  0 < ln_ $ n_\n  s' =\n  (acquire_all (locks s) t ln_,\n   (thr s(t \\<mapsto> (x_, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (2 subgoals):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')\n 2. \\<And>x ln n.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ta = (K$ [], [], [], [], [], convert_RA ln);\n        \\<not> waiting (wset s t); may_acquire_all (locks s) t ln;\n        0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "thus ?thesis"], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x_, ln_)\\<rfloor>\n  ta = (K$ [], [], [], [], [], convert_RA ln_)\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln_\n  0 < ln_ $ n_\n  s' =\n  (acquire_all (locks s) t ln_,\n   (thr s(t \\<mapsto> (x_, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "using esinvP"], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x_, ln_)\\<rfloor>\n  ta = (K$ [], [], [], [], [], convert_RA ln_)\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln_\n  0 < ln_ $ n_\n  s' =\n  (acquire_all (locks s) t ln_,\n   (thr s(t \\<mapsto> (x_, no_wait_locks)), shr s), wset s, interrupts s)\n  ts_inv P I (thr s) (shr s)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "by(auto intro!: ts_invI split: if_split_asm dest: ts_invD)"], ["proof (state)\nthis:\n  ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n   (shr s')\n\ngoal (1 subgoal):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "case (normal x x' m')"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>\n  thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>\n  wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n  redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'_\n  s' =\n  (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n    m'),\n   ws'_, redT_updIs (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "with esinvP"], ["proof (chain)\npicking this:\n  ts_inv P I (thr s) (shr s)\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>\n  thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>\n  wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n  redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'_\n  s' =\n  (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n    m'),\n   ws'_, redT_updIs (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)", "have \"ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', redT_updLns (locks s) t no_wait_locks \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>))) m'\""], ["proof (prove)\nusing this:\n  ts_inv P I (thr s) (shr s)\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>\n  thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>\n  wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n  redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'_\n  s' =\n  (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n    m'),\n   ws'_, redT_updIs (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n     (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x',\n       redT_updLns (locks s) t no_wait_locks\n        \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)))\n     m'", "by(auto intro: redT_updTs_invariant)"], ["proof (state)\nthis:\n  ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)))\n   m'\n\ngoal (1 subgoal):\n 1. \\<And>x x' m' ws'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok (interrupts s)\n         \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        s' =\n        (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \n          \\<mapsto>\n          (x',\n           redT_updLns (locks s) t no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws',\n         redT_updIs (interrupts s)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n                          (thr s') (shr s')", "thus ?thesis"], ["proof (prove)\nusing this:\n  ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)))\n   m'\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "using normal"], ["proof (prove)\nusing this:\n  ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)))\n   m'\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  lock_ok_las (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>\n  thread_oks (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  cond_action_oks s t \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>\n  wset_actions_ok (wset s) t \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  interrupt_actions_ok (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n  redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'_\n  s' =\n  (redT_updLs (locks s) t \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n   (redT_updTs (thr s) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x',\n     redT_updLns (locks s) t no_wait_locks\n      \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n    m'),\n   ws'_, redT_updIs (interrupts s) \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n     (shr s')", "by simp"], ["proof (state)\nthis:\n  ts_inv P (upd_invs I P \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s')\n   (shr s')\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RedT_invariant:\n  assumes RedT: \"s -\\<triangleright>ttas\\<rightarrow>* s'\"\n  and esinvQ: \"ts_inv P I (thr s) (shr s)\"\n  shows \"ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))) (thr s') (shr s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))) (thr s')\n     (shr s')", "using RedT esinvQ"], ["proof (prove)\nusing this:\n  s -\\<triangleright>ttas\\<rightarrow>* s'\n  ts_inv P I (thr s) (shr s)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas))) (thr s')\n     (shr s')", "proof(induct rule: RedT_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n       ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) []))) (thr s)\n        (shr s)\n 2. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "case refl"], ["proof (state)\nthis:\n  ts_inv P I (thr s_) (shr s_)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n       ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) []))) (thr s)\n        (shr s)\n 2. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "thus ?case"], ["proof (prove)\nusing this:\n  ts_inv P I (thr s_) (shr s_)\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) []))) (thr s_)\n     (shr s_)", "by(simp (no_asm))"], ["proof (state)\nthis:\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) []))) (thr s_)\n   (shr s_)\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "case (step S TTAS S' T TA S'')"], ["proof (state)\nthis:\n  S -\\<triangleright>TTAS\\<rightarrow>* S'\n  ts_inv P I (thr S) (shr S) \\<Longrightarrow>\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv P I (thr S) (shr S)\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "note IH = \\<open>ts_inv P I (thr S) (shr S) \\<Longrightarrow> ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S') (shr S')\\<close>"], ["proof (state)\nthis:\n  ts_inv P I (thr S) (shr S) \\<Longrightarrow>\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "with \\<open>ts_inv P I (thr S) (shr S)\\<close>"], ["proof (chain)\npicking this:\n  ts_inv P I (thr S) (shr S)\n  ts_inv P I (thr S) (shr S) \\<Longrightarrow>\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')", "have \"ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S') (shr S')\""], ["proof (prove)\nusing this:\n  ts_inv P I (thr S) (shr S)\n  ts_inv P I (thr S) (shr S) \\<Longrightarrow>\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')\n\ngoal (1 subgoal):\n 1. ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n     (shr S')", "by blast"], ["proof (state)\nthis:\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "with \\<open>S' -T\\<triangleright>TA\\<rightarrow> S''\\<close>"], ["proof (chain)\npicking this:\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')", "have \"ts_inv P (upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>) (thr S'') (shr S'')\""], ["proof (prove)\nusing this:\n  S' -T\\<triangleright>TA\\<rightarrow> S''\n  ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) (thr S')\n   (shr S')\n\ngoal (1 subgoal):\n 1. ts_inv P\n     (upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n       \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>)\n     (thr S'') (shr S'')", "by(rule redT_invariant)"], ["proof (state)\nthis:\n  ts_inv P\n   (upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n     \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>)\n   (thr S'') (shr S'')\n\ngoal (1 subgoal):\n 1. \\<And>s ttas s' t ta s''.\n       \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n        ts_inv P I (thr s) (shr s) \\<Longrightarrow>\n        ts_inv P (upd_invs I P (concat (map (thr_a \\<circ> snd) ttas)))\n         (thr s') (shr s');\n        s' -t\\<triangleright>ta\\<rightarrow> s'';\n        ts_inv P I (thr s) (shr s)\\<rbrakk>\n       \\<Longrightarrow> ts_inv P\n                          (upd_invs I P\n                            (concat\n                              (map (thr_a \\<circ> snd) (ttas @ [(t, ta)]))))\n                          (thr s'') (shr s'')", "thus ?case"], ["proof (prove)\nusing this:\n  ts_inv P\n   (upd_invs (upd_invs I P (concat (map (thr_a \\<circ> snd) TTAS))) P\n     \\<lbrace>TA\\<rbrace>\\<^bsub>t\\<^esub>)\n   (thr S'') (shr S'')\n\ngoal (1 subgoal):\n 1. ts_inv P\n     (upd_invs I P (concat (map (thr_a \\<circ> snd) (TTAS @ [(T, TA)]))))\n     (thr S'') (shr S'')", "by(simp add: comp_def)"], ["proof (state)\nthis:\n  ts_inv P\n   (upd_invs I P (concat (map (thr_a \\<circ> snd) (TTAS @ [(T, TA)]))))\n   (thr S'') (shr S'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invariant3p_ts_inv: \"invariant3p redT {s. \\<exists>I. ts_inv P I (thr s) (shr s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant3p redT {s. \\<exists>I. ts_inv P I (thr s) (shr s)}", "by(auto intro!: invariant3pI dest: redT_invariant)"], ["", "end"], ["", "locale lifting_wf = multithreaded final r convert_RA\n  for final :: \"'x \\<Rightarrow> bool\" \n  and r :: \"('l,'t,'x,'m,'w,'o) semantics\" (\"_ \\<turnstile> _ -_\\<rightarrow> _\" [50,0,0,50] 80) \n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  +\n  fixes P :: \"'t \\<Rightarrow> 'x \\<Rightarrow> 'm \\<Rightarrow> bool\"\n  assumes preserves_red: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P t x m \\<rbrakk> \\<Longrightarrow> P t x' m'\"\n  and preserves_NewThread: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P t x m; NewThread t'' x'' m' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<rbrakk> \n                            \\<Longrightarrow> P t'' x'' m'\"\n  and preserves_other: \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; P t x m; P t'' x'' m \\<rbrakk> \\<Longrightarrow> P t'' x'' m'\"\nbegin"], ["", "lemma lifting_inv: \"lifting_inv final r (\\<lambda>_ :: unit. P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_inv final r (\\<lambda>_. P)", "by(unfold_locales)(blast intro: preserves_red preserves_NewThread preserves_other)+"], ["", "lemma redT_updTs_preserves:\n  fixes ln\n  assumes esokQ: \"ts_ok P ts m\"\n  and red: \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and \"ts t = \\<lfloor>(x, ln)\\<rfloor>\"\n  and \"thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\"\n  shows \"ts_ok P (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "interpret lifting_inv final r convert_RA \"\\<lambda>_ :: unit. P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_inv final r (\\<lambda>_. P)", "by(rule lifting_inv)"], ["proof (state)\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "from esokQ"], ["proof (chain)\npicking this:\n  ts_ok P ts m", "obtain I :: \"'t \\<rightharpoonup> unit\" where \"ts_inv (\\<lambda>_. P) I ts m\""], ["proof (prove)\nusing this:\n  ts_ok P ts m\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        ts_inv (\\<lambda>_. P) I ts m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule ts_ok_into_ts_inv_const)"], ["proof (state)\nthis:\n  ts_inv (\\<lambda>_. P) I ts m\n\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "hence \"ts_inv (\\<lambda>_. P) (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto> (x', ln'))) m'\""], ["proof (prove)\nusing this:\n  ts_inv (\\<lambda>_. P) I ts m\n\ngoal (1 subgoal):\n 1. ts_inv (\\<lambda>_. P)\n     (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "using red \\<open>thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\\<close> \\<open>ts t = \\<lfloor>(x, ln)\\<rfloor>\\<close>"], ["proof (prove)\nusing this:\n  ts_inv (\\<lambda>_. P) I ts m\n  t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thread_oks ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>\n  ts t = \\<lfloor>(x, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. ts_inv (\\<lambda>_. P)\n     (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "by(rule redT_updTs_invariant)"], ["proof (state)\nthis:\n  ts_inv (\\<lambda>_. P)\n   (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x', ln')))\n   m'\n\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ts_inv (\\<lambda>_. P)\n   (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x', ln')))\n   m'\n\ngoal (1 subgoal):\n 1. ts_ok P\n     (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n      (x', ln')))\n     m'", "by(rule ts_inv_const_into_ts_ok)"], ["proof (state)\nthis:\n  ts_ok P\n   (redT_updTs ts \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t \\<mapsto>\n    (x', ln')))\n   m'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem redT_preserves:\n  assumes redT: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and esokQ: \"ts_ok P (thr s) (shr s)\"\n  shows \"ts_ok P (thr s') (shr s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "interpret lifting_inv final r convert_RA \"\\<lambda>_ :: unit. P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_inv final r (\\<lambda>_. P)", "by(rule lifting_inv)"], ["proof (state)\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "from esokQ"], ["proof (chain)\npicking this:\n  ts_ok P (thr s) (shr s)", "obtain I :: \"'t \\<rightharpoonup> unit\" where \"ts_inv (\\<lambda>_. P) I (thr s) (shr s)\""], ["proof (prove)\nusing this:\n  ts_ok P (thr s) (shr s)\n\ngoal (1 subgoal):\n 1. (\\<And>I.\n        ts_inv (\\<lambda>_. P) I (thr s) (shr s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule ts_ok_into_ts_inv_const)"], ["proof (state)\nthis:\n  ts_inv (\\<lambda>_. P) I (thr s) (shr s)\n\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "with redT"], ["proof (chain)\npicking this:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n  ts_inv (\\<lambda>_. P) I (thr s) (shr s)", "have \"ts_inv (\\<lambda>_. P) (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>) (thr s') (shr s')\""], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n  ts_inv (\\<lambda>_. P) I (thr s) (shr s)\n\ngoal (1 subgoal):\n 1. ts_inv (\\<lambda>_. P)\n     (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n     (thr s') (shr s')", "by(rule redT_invariant)"], ["proof (state)\nthis:\n  ts_inv (\\<lambda>_. P)\n   (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (thr s') (shr s')\n\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "thus ?thesis"], ["proof (prove)\nusing this:\n  ts_inv (\\<lambda>_. P)\n   (upd_invs I (\\<lambda>_. P) \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>)\n   (thr s') (shr s')\n\ngoal (1 subgoal):\n 1. ts_ok P (thr s') (shr s')", "by(rule ts_inv_const_into_ts_ok)"], ["proof (state)\nthis:\n  ts_ok P (thr s') (shr s')\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RedT_preserves:\n  \"\\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; ts_ok P (thr s) (shr s) \\<rbrakk> \\<Longrightarrow> ts_ok P (thr s') (shr s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n     ts_ok P (thr s) (shr s)\\<rbrakk>\n    \\<Longrightarrow> ts_ok P (thr s') (shr s')", "by(erule (1) RedT_lift_preserveD)(fastforce elim: redT_preserves)"], ["", "lemma invariant3p_ts_ok: \"invariant3p redT {s. ts_ok P (thr s) (shr s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant3p redT {s. ts_ok P (thr s) (shr s)}", "by(auto intro!: invariant3pI intro: redT_preserves)"], ["", "end"], ["", "lemma lifting_wf_Const [intro!]: \n  assumes \"multithreaded final r\"\n  shows \"lifting_wf final r (\\<lambda>t x m. k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_wf final r (\\<lambda>t x m. k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lifting_wf final r (\\<lambda>t x m. k)", "interpret multithreaded final r"], ["proof (prove)\ngoal (1 subgoal):\n 1. multithreaded final r", "using assms"], ["proof (prove)\nusing this:\n  multithreaded final r\n\ngoal (1 subgoal):\n 1. multithreaded final r", "."], ["proof (state)\ngoal (1 subgoal):\n 1. lifting_wf final r (\\<lambda>t x m. k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_wf final r (\\<lambda>t x m. k)", "by unfold_locales blast+"], ["proof (state)\nthis:\n  lifting_wf final r (\\<lambda>t x m. k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}