{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Compiler/Exception_Tables.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma pcs_subset:\n  fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows \"pcs(compxE2 e pc d) \\<subseteq> {pc..<pc+size(compE2 e)}\"\n  and \"pcs(compxEs2 es pc d) \\<subseteq> {pc..<pc+size(compEs2 es)}\"", "lemma pcs_Nil [simp]: \"pcs [] = {}\"", "lemma pcs_Cons [simp]: \"pcs (x#xt) = {fst x ..< fst(snd x)} \\<union> pcs xt\"", "lemma pcs_append [simp]: \"pcs(xt\\<^sub>1 @ xt\\<^sub>2) = pcs xt\\<^sub>1 \\<union> pcs xt\\<^sub>2\"", "lemma [simp]: \"pc < pc\\<^sub>0 \\<or> pc\\<^sub>0+size(compE2 e) \\<le> pc \\<Longrightarrow> pc \\<notin> pcs(compxE2 e pc\\<^sub>0 d)\"", "lemma [simp]: \"pc < pc0 \\<or> pc0+size(compEs2 es) \\<le> pc \\<Longrightarrow> pc \\<notin> pcs(compxEs2 es pc0 d)\"", "lemma [simp]: \"pc1 + size(compE2 e1) \\<le> pc2 \\<Longrightarrow> pcs(compxE2 e1 pc1 d1) \\<inter> pcs(compxE2 e2 pc2 d2) = {}\"", "lemma [simp]: \"pc\\<^sub>1 + size(compE2 e) \\<le> pc\\<^sub>2 \\<Longrightarrow> pcs(compxE2 e pc\\<^sub>1 d\\<^sub>1) \\<inter> pcs(compxEs2 es pc\\<^sub>2 d\\<^sub>2) = {}\"", "lemma match_ex_table_append_not_pcs [simp]:\n \"pc \\<notin> pcs xt0 \\<Longrightarrow> match_ex_table P C pc (xt0 @ xt1) = match_ex_table P C pc xt1\"", "lemma outside_pcs_not_matches_entry [simp]:\n  \"\\<lbrakk> x \\<in> set xt; pc \\<notin> pcs xt \\<rbrakk> \\<Longrightarrow> \\<not> matches_ex_entry P D pc x\"", "lemma outside_pcs_compxE2_not_matches_entry [simp]:\n  assumes xe: \"xe \\<in> set(compxE2 e pc d)\"\n  and outside: \"pc' < pc \\<or> pc+size(compE2 e) \\<le> pc'\"\n  shows \"\\<not> matches_ex_entry P C pc' xe\"", "lemma outside_pcs_compxEs2_not_matches_entry [simp]:\n  assumes xe: \"xe \\<in> set(compxEs2 es pc d)\" \n  and outside: \"pc' < pc \\<or> pc+size(compEs2 es) \\<le> pc'\"\n  shows \"\\<not> matches_ex_entry P C pc' xe\"", "lemma match_ex_table_app[simp]:\n  \"\\<forall>xte \\<in> set xt\\<^sub>1. \\<not> matches_ex_entry P D pc xte \\<Longrightarrow>\n  match_ex_table P D pc (xt\\<^sub>1 @ xt) = match_ex_table P D pc xt\"", "lemma match_ex_table_eq_NoneI [simp]:\n  \"\\<forall>x \\<in> set xtab. \\<not> matches_ex_entry P C pc x \\<Longrightarrow>\n  match_ex_table P C pc xtab = None\"", "lemma match_ex_table_not_pcs_None:\n  \"pc \\<notin> pcs xt \\<Longrightarrow> match_ex_table P C pc xt = None\"", "lemma match_ex_entry:\n  fixes start shows\n  \"matches_ex_entry P C pc (start, end, catch_type, handler) =\n  (start \\<le> pc \\<and> pc < end \\<and> (case catch_type of None \\<Rightarrow> True | \\<lfloor>C'\\<rfloor> \\<Rightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* C'))\"", "lemma pcs_compxE2D [dest]:\n  \"pc \\<in> pcs (compxE2 e pc' d) \\<Longrightarrow> pc' \\<le> pc \\<and> pc < pc' + length (compE2 e)\"", "lemma pcs_compxEs2D [dest]:\n  \"pc \\<in> pcs (compxEs2 es pc' d) \\<Longrightarrow> pc' \\<le> pc \\<and> pc < pc' + length (compEs2 es)\"", "lemma shift_0 [simp]: \"shift 0 xt = xt\"", "lemma shift_Nil [simp]: \"shift n [] = []\"", "lemma shift_Cons_tuple [simp]:\n  \"shift n ((from, to, C, handler, depth) # xt) = (from + n, to + n, C, handler + n, depth) # shift n xt\"", "lemma shift_append [simp]: \"shift n (xt\\<^sub>1 @ xt\\<^sub>2) = shift n xt\\<^sub>1 @ shift n xt\\<^sub>2\"", "lemma shift_shift [simp]: \"shift m (shift n xt) = shift (m+n) xt\"", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows shift_compxE2: \"shift pc (compxE2 e pc' d) = compxE2 e (pc' + pc) d\"\n  and  shift_compxEs2: \"shift pc (compxEs2 es pc' d) = compxEs2 es (pc' + pc) d\"", "lemma compxE2_size_convs [simp]: \"n \\<noteq> 0 \\<Longrightarrow> compxE2 e n d = shift n (compxE2 e 0 d)\"\n and compxEs2_size_convs: \"n \\<noteq> 0 \\<Longrightarrow> compxEs2 es n d = shift n (compxEs2 es 0 d)\"", "lemma pcs_shift_conv [simp]: \"pcs (shift n xt) = (+) n ` pcs xt\"", "lemma image_plus_const_conv [simp]:\n  fixes m :: nat\n  shows \"m \\<in> (+) n ` A \\<longleftrightarrow> m \\<ge> n \\<and> m - n \\<in> A\"", "lemma match_ex_table_shift_eq_None_conv [simp]:\n  \"match_ex_table P C pc (shift n xt) = None \\<longleftrightarrow> pc < n \\<or> match_ex_table P C (pc - n) xt = None\"", "lemma match_ex_table_shift_pc_None:\n  \"pc \\<ge> n \\<Longrightarrow> match_ex_table P C pc (shift n xt) = None \\<longleftrightarrow> match_ex_table P C (pc - n) xt = None\"", "lemma match_ex_table_shift_eq_Some_conv [simp]:\n  \"match_ex_table P C pc (shift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<longleftrightarrow>\n   pc \\<ge> n \\<and> pc' \\<ge> n \\<and> match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>\"", "lemma match_ex_table_shift:\n \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C (n + pc) (shift n xt) = \\<lfloor>(n + pc', d)\\<rfloor>\"", "lemma match_ex_table_shift_pcD:\n  \"match_ex_table P C pc (shift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> pc \\<ge> n \\<and> pc' \\<ge> n \\<and> match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>\"", "lemma match_ex_table_pcsD: \"match_ex_table P C pc xt = \\<lfloor>(pc', D)\\<rfloor> \\<Longrightarrow> pc \\<in> pcs xt\"", "lemma stack_xlift_0 [simp]: \"stack_xlift 0 xt = xt\"", "lemma stack_xlift_Nil [simp]: \"stack_xlift n [] = []\"", "lemma stack_xlift_Cons_tuple [simp]:\n  \"stack_xlift n ((from, to, C, handler, depth) # xt) = (from, to, C, handler, depth + n) # stack_xlift n xt\"", "lemma stack_xlift_append [simp]: \"stack_xlift n (xt @ xt') = stack_xlift n xt @ stack_xlift n xt'\"", "lemma stack_xlift_stack_xlift [simp]: \"stack_xlift n (stack_xlift m xt) = stack_xlift (n + m) xt\"", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows stack_xlift_compxE2: \"stack_xlift n (compxE2 e pc d) = compxE2 e pc (n + d)\"\n  and stack_xlift_compxEs2: \"stack_xlift n (compxEs2 es pc d) = compxEs2 es pc (n + d)\"", "lemma compxE2_stack_xlift_convs [simp]: \"d > 0 \\<Longrightarrow> compxE2 e pc d = stack_xlift d (compxE2 e pc 0)\"\n  and compxEs2_stack_xlift_convs [simp]: \"d > 0 \\<Longrightarrow> compxEs2 es pc d = stack_xlift d (compxEs2 es pc 0)\"", "lemma stack_xlift_shift [simp]: \"stack_xlift d (shift n xt) = shift n (stack_xlift d xt)\"", "lemma pcs_stack_xlift_conv [simp]: \"pcs (stack_xlift n xt) = pcs xt\"", "lemma match_ex_table_stack_xlift_eq_None_conv [simp]:\n  \"match_ex_table P C pc (stack_xlift d xt) = None \\<longleftrightarrow> match_ex_table P C pc xt = None\"", "lemma match_ex_table_stack_xlift_eq_Some_conv [simp]:\n  \"match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<longleftrightarrow> d \\<ge> n \\<and> match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>\"", "lemma match_ex_table_stack_xliftD:\n  \"match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> d \\<ge> n \\<and> match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>\"", "lemma match_ex_table_stack_xlift:\n  \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', n + d)\\<rfloor>\"", "lemma pcs_stack_xlift: \"pcs (stack_xlift n xt) = pcs xt\"", "lemma match_ex_table_None_append [simp]:\n  \"match_ex_table P C pc xt = None\n  \\<Longrightarrow> match_ex_table P C pc (xt @ xt') = match_ex_table P C pc xt'\"", "lemma match_ex_table_Some_append [simp]: \n  \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C pc (xt @ xt') = \\<lfloor>(pc', d)\\<rfloor>\"", "lemma match_ex_table_append:\n  \"match_ex_table P C pc (xt @ xt') = (case match_ex_table P C pc xt of None \\<Rightarrow> match_ex_table P C pc xt' \n                                                                  | Some pcd \\<Rightarrow> Some pcd)\"", "lemma match_ex_table_pc_length_compE2:\n  \"match_ex_table P a pc (compxE2 e pc' d) = \\<lfloor>pcd\\<rfloor> \\<Longrightarrow> pc' \\<le> pc \\<and> pc < length (compE2 e) + pc'\"\n  \n  and match_ex_table_pc_length_compEs2:\n  \"match_ex_table P a pc (compxEs2 es pc' d) = \\<lfloor>pcd\\<rfloor> \\<Longrightarrow> pc' \\<le> pc \\<and> pc < length (compEs2 es) + pc'\"", "lemma match_ex_table_compxE2_shift_conv:\n  \"f > 0 \\<Longrightarrow> match_ex_table P C pc (compxE2 e f d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> pc \\<ge> f \\<and> pc' \\<ge> f \\<and> match_ex_table P C (pc - f) (compxE2 e 0 d) = \\<lfloor>(pc' - f, d')\\<rfloor>\"", "lemma match_ex_table_compxEs2_shift_conv:\n  \"f > 0 \\<Longrightarrow> match_ex_table P C pc (compxEs2 es f d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> pc \\<ge> f \\<and> pc' \\<ge> f \\<and> match_ex_table P C (pc - f) (compxEs2 es 0 d) = \\<lfloor>(pc' - f, d')\\<rfloor>\"", "lemma match_ex_table_compxE2_stack_conv:\n  \"d > 0 \\<Longrightarrow> match_ex_table P C pc (compxE2 e 0 d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> d' \\<ge> d \\<and> match_ex_table P C pc (compxE2 e 0 0) = \\<lfloor>(pc', d' - d)\\<rfloor>\"", "lemma match_ex_table_compxEs2_stack_conv:\n  \"d > 0 \\<Longrightarrow> match_ex_table P C pc (compxEs2 es 0 d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> d' \\<ge> d \\<and> match_ex_table P C pc (compxEs2 es 0 0) = \\<lfloor>(pc', d' - d)\\<rfloor>\"", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows match_ex_table_compxE2_not_same: \"match_ex_table P C pc (compxE2 e n d) = \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow> pc \\<noteq> pc'\"\n  and match_ex_table_compxEs2_not_same:\"match_ex_table P C pc (compxEs2 es n d) = \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow> pc \\<noteq> pc'\""], "translations": [["", "lemma pcs_subset:\n  fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows \"pcs(compxE2 e pc d) \\<subseteq> {pc..<pc+size(compE2 e)}\"\n  and \"pcs(compxEs2 es pc d) \\<subseteq> {pc..<pc+size(compEs2 es)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (compxE2 e pc d) \\<subseteq> {pc..<pc + length (compE2 e)} &&&\n    pcs (compxEs2 es pc d) \\<subseteq> {pc..<pc + length (compEs2 es)}", "apply(induct e pc d and es pc d rule: compxE2_compxEs2_induct)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>C pc d.\n       pcs (compxE2 (new C) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (new C))}\n 2. \\<And>T e pc d.\n       pcs (compxE2 e pc d)\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       pcs (compxE2 (newA T\\<lfloor>e\\<rceil>) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (newA T\\<lfloor>e\\<rceil>))}\n 3. \\<And>T e pc d.\n       pcs (compxE2 e pc d)\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       pcs (compxE2 (Cast T e) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (Cast T e))}\n 4. \\<And>e T pc d.\n       pcs (compxE2 e pc d)\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       pcs (compxE2 (e instanceof T) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (e instanceof T))}\n 5. \\<And>v pc d.\n       pcs (compxE2 (Val v) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (Val v))}\n 6. \\<And>e1 bop e2 pc d.\n       \\<lbrakk>pcs (compxE2 e1 pc d)\n                \\<subseteq> {pc..<pc + length (compE2 e1)};\n        pcs (compxE2 e2 (pc + length (compE2 e1)) (d + 1))\n        \\<subseteq> {pc +\n                     length\n                      (compE2\n                        e1)..<pc + length (compE2 e1) +\n                              length (compE2 e2)}\\<rbrakk>\n       \\<Longrightarrow> pcs (compxE2\n                               (e1 \\<guillemotleft>bop\\<guillemotright> e2)\n                               pc d)\n                         \\<subseteq> {pc..<pc +\n     length (compE2 (e1 \\<guillemotleft>bop\\<guillemotright> e2))}\n 7. \\<And>i pc d.\n       pcs (compxE2 (Var i) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (Var i))}\n 8. \\<And>i e pc d.\n       pcs (compxE2 e pc d)\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       pcs (compxE2 (i:=e) pc d)\n       \\<subseteq> {pc..<pc + length (compE2 (i:=e))}\n 9. \\<And>a i pc d.\n       \\<lbrakk>pcs (compxE2 a pc d)\n                \\<subseteq> {pc..<pc + length (compE2 a)};\n        pcs (compxE2 i (pc + length (compE2 a)) (d + 1))\n        \\<subseteq> {pc +\n                     length\n                      (compE2\n                        a)..<pc + length (compE2 a) +\n                             length (compE2 i)}\\<rbrakk>\n       \\<Longrightarrow> pcs (compxE2 (a\\<lfloor>i\\<rceil>) pc d)\n                         \\<subseteq> {pc..<pc +\n     length (compE2 (a\\<lfloor>i\\<rceil>))}\n 10. \\<And>a i e pc d.\n        \\<lbrakk>pcs (compxE2 a pc d)\n                 \\<subseteq> {pc..<pc + length (compE2 a)};\n         pcs (compxE2 i (pc + length (compE2 a)) (d + 1))\n         \\<subseteq> {pc +\n                      length\n                       (compE2\n                         a)..<pc + length (compE2 a) + length (compE2 i)};\n         pcs (compxE2 e (pc + length (compE2 a) + length (compE2 i))\n               (d + 2))\n         \\<subseteq> {pc + length (compE2 a) +\n                      length\n                       (compE2\n                         i)..<pc + length (compE2 a) + length (compE2 i) +\n                              length (compE2 e)}\\<rbrakk>\n        \\<Longrightarrow> pcs (compxE2 (a\\<lfloor>i\\<rceil> := e) pc d)\n                          \\<subseteq> {pc..<pc +\n      length (compE2 (a\\<lfloor>i\\<rceil> := e))}\nA total of 25 subgoals...", "apply (simp_all add:pcs_def)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>e pc d.\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<Suc (pc + length (compE2 e))}\n 2. \\<And>e pc d.\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<Suc (pc + length (compE2 e))}\n 3. \\<And>e pc d.\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<Suc (pc + length (compE2 e))}\n 4. \\<And>e1 e2 pc d.\n       \\<lbrakk>(\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e1 pc d). {f..<t})\n                \\<subseteq> {pc..<pc + length (compE2 e1)};\n        (\\<Union>(f, t, C, h,\n            d)\\<in>set (compxE2 e2 (pc + length (compE2 e1)) (Suc d)).\n            {f..<t})\n        \\<subseteq> {pc +\n                     length\n                      (compE2\n                        e1)..<pc + length (compE2 e1) +\n                              length (compE2 e2)}\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e1 pc d).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (pc + (length (compE2 e1) + length (compE2 e2)))} \\<and>\n                         (\\<Union>(f, t, C, h,\n                             d)\\<in>set (compxE2 e2\n    (pc + length (compE2 e1)) (Suc d)).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (pc + (length (compE2 e1) + length (compE2 e2)))}\n 5. \\<And>e pc d.\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<Suc (Suc (pc + length (compE2 e)))}\n 6. \\<And>a i pc d.\n       \\<lbrakk>(\\<Union>x\\<in>set (compxE2 a pc d).\n                    case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n                \\<subseteq> {pc..<pc + length (compE2 a)};\n        (\\<Union>x\\<in>set (compxE2 i (pc + length (compE2 a)) (Suc d)).\n            case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n        \\<subseteq> {pc +\n                     length\n                      (compE2\n                        a)..<pc + length (compE2 a) +\n                             length (compE2 i)}\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 a pc d).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (pc + (length (compE2 a) + length (compE2 i)))} \\<and>\n                         (\\<Union>(f, t, C, h,\n                             d)\\<in>set (compxE2 i (pc + length (compE2 a))\n    (Suc d)).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (pc + (length (compE2 a) + length (compE2 i)))}\n 7. \\<And>a i e pc d.\n       \\<lbrakk>(\\<Union>x\\<in>set (compxE2 a pc d).\n                    case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n                \\<subseteq> {pc..<pc + length (compE2 a)};\n        (\\<Union>x\\<in>set (compxE2 i (pc + length (compE2 a)) (Suc d)).\n            case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n        \\<subseteq> {pc +\n                     length\n                      (compE2\n                        a)..<pc + length (compE2 a) + length (compE2 i)};\n        (\\<Union>x\\<in>set (compxE2 e\n                             (pc + length (compE2 a) + length (compE2 i))\n                             (Suc (Suc d))).\n            case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n        \\<subseteq> {pc + length (compE2 a) +\n                     length\n                      (compE2\n                        i)..<pc + length (compE2 a) + length (compE2 i) +\n                             length (compE2 e)}\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 a pc d).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (Suc (pc +\n            (length (compE2 a) +\n             (length (compE2 i) + length (compE2 e)))))} \\<and>\n                         (\\<Union>(f, t, C, h,\n                             d)\\<in>set (compxE2 i (pc + length (compE2 a))\n    (Suc d)).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (Suc (pc +\n            (length (compE2 a) +\n             (length (compE2 i) + length (compE2 e)))))} \\<and>\n                         (\\<Union>(f, t, C, h,\n                             d)\\<in>set (compxE2 e\n    (pc + length (compE2 a) + length (compE2 i)) (Suc (Suc d))).\n                             {f..<t})\n                         \\<subseteq> {pc..<Suc\n      (Suc (pc +\n            (length (compE2 a) + (length (compE2 i) + length (compE2 e)))))}\n 8. \\<And>a pc d.\n       (\\<Union>x\\<in>set (compxE2 a pc d).\n           case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 a)} \\<Longrightarrow>\n       (\\<Union>x\\<in>set (compxE2 a pc d).\n           case x of (f, t, C, h, d) \\<Rightarrow> {f..<t})\n       \\<subseteq> {pc..<Suc (pc + length (compE2 a))}\n 9. \\<And>e pc d.\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<pc + length (compE2 e)} \\<Longrightarrow>\n       (\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e pc d). {f..<t})\n       \\<subseteq> {pc..<Suc (pc + length (compE2 e))}\n 10. \\<And>e1 e2 pc d.\n        \\<lbrakk>(\\<Union>(f, t, C, h, d)\\<in>set (compxE2 e1 pc d).\n                     {f..<t})\n                 \\<subseteq> {pc..<pc + length (compE2 e1)};\n         (\\<Union>(f, t, C, h,\n             d)\\<in>set (compxE2 e2 (pc + length (compE2 e1)) (Suc d)).\n             {f..<t})\n         \\<subseteq> {pc +\n                      length\n                       (compE2\n                         e1)..<pc + length (compE2 e1) +\n                               length (compE2 e2)}\\<rbrakk>\n        \\<Longrightarrow> (\\<Union>(f, t, C, h,\n                              d)\\<in>set (compxE2 e1 pc d). {f..<t})\n                          \\<subseteq> {pc..<Suc\n       (Suc (pc + (length (compE2 e1) + length (compE2 e2))))} \\<and>\n                          (\\<Union>(f, t, C, h,\n                              d)\\<in>set\n(compxE2 e2 (pc + length (compE2 e1)) (Suc d)).\n                              {f..<t})\n                          \\<subseteq> {pc..<Suc\n       (Suc (pc + (length (compE2 e1) + length (compE2 e2))))}\nA total of 20 subgoals...", "apply (fastforce)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pcs_Nil [simp]: \"pcs [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs [] = {}", "by(simp add:pcs_def)"], ["", "lemma pcs_Cons [simp]: \"pcs (x#xt) = {fst x ..< fst(snd x)} \\<union> pcs xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (x # xt) = {fst x..<fst (snd x)} \\<union> pcs xt", "by(auto simp add: pcs_def)"], ["", "lemma pcs_append [simp]: \"pcs(xt\\<^sub>1 @ xt\\<^sub>2) = pcs xt\\<^sub>1 \\<union> pcs xt\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (xt\\<^sub>1 @ xt\\<^sub>2) = pcs xt\\<^sub>1 \\<union> pcs xt\\<^sub>2", "by(simp add:pcs_def)"], ["", "lemma [simp]: \"pc < pc\\<^sub>0 \\<or> pc\\<^sub>0+size(compE2 e) \\<le> pc \\<Longrightarrow> pc \\<notin> pcs(compxE2 e pc\\<^sub>0 d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < pc\\<^sub>0 \\<or>\n    pc\\<^sub>0 + length (compE2 e) \\<le> pc \\<Longrightarrow>\n    pc \\<notin> pcs (compxE2 e pc\\<^sub>0 d)", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc < pc\\<^sub>0 \\<or>\n    pc\\<^sub>0 + length (compE2 e) \\<le> pc \\<Longrightarrow>\n    pc \\<notin> pcs (compxE2 e pc\\<^sub>0 d)", "by fastforce"], ["", "lemma [simp]: \"pc < pc0 \\<or> pc0+size(compEs2 es) \\<le> pc \\<Longrightarrow> pc \\<notin> pcs(compxEs2 es pc0 d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < pc0 \\<or> pc0 + length (compEs2 es) \\<le> pc \\<Longrightarrow>\n    pc \\<notin> pcs (compxEs2 es pc0 d)", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc < pc0 \\<or> pc0 + length (compEs2 es) \\<le> pc \\<Longrightarrow>\n    pc \\<notin> pcs (compxEs2 es pc0 d)", "by fastforce"], ["", "lemma [simp]: \"pc1 + size(compE2 e1) \\<le> pc2 \\<Longrightarrow> pcs(compxE2 e1 pc1 d1) \\<inter> pcs(compxE2 e2 pc2 d2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc1 + length (compE2 e1) \\<le> pc2 \\<Longrightarrow>\n    pcs (compxE2 e1 pc1 d1) \\<inter> pcs (compxE2 e2 pc2 d2) = {}", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc1 + length (compE2 e1) \\<le> pc2 \\<Longrightarrow>\n    pcs (compxE2 e1 pc1 d1) \\<inter> pcs (compxE2 e2 pc2 d2) = {}", "by fastforce"], ["", "lemma [simp]: \"pc\\<^sub>1 + size(compE2 e) \\<le> pc\\<^sub>2 \\<Longrightarrow> pcs(compxE2 e pc\\<^sub>1 d\\<^sub>1) \\<inter> pcs(compxEs2 es pc\\<^sub>2 d\\<^sub>2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc\\<^sub>1 + length (compE2 e) \\<le> pc\\<^sub>2 \\<Longrightarrow>\n    pcs (compxE2 e pc\\<^sub>1 d\\<^sub>1) \\<inter>\n    pcs (compxEs2 es pc\\<^sub>2 d\\<^sub>2) =\n    {}", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc\\<^sub>1 + length (compE2 e) \\<le> pc\\<^sub>2 \\<Longrightarrow>\n    pcs (compxE2 e pc\\<^sub>1 d\\<^sub>1) \\<inter>\n    pcs (compxEs2 es pc\\<^sub>2 d\\<^sub>2) =\n    {}", "by fastforce"], ["", "lemma match_ex_table_append_not_pcs [simp]:\n \"pc \\<notin> pcs xt0 \\<Longrightarrow> match_ex_table P C pc (xt0 @ xt1) = match_ex_table P C pc xt1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc \\<notin> pcs xt0 \\<Longrightarrow>\n    match_ex_table P C pc (xt0 @ xt1) = match_ex_table P C pc xt1", "by (induct xt0) (auto simp: matches_ex_entry_def)"], ["", "lemma outside_pcs_not_matches_entry [simp]:\n  \"\\<lbrakk> x \\<in> set xt; pc \\<notin> pcs xt \\<rbrakk> \\<Longrightarrow> \\<not> matches_ex_entry P D pc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set xt; pc \\<notin> pcs xt\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches_ex_entry P D pc x", "by(auto simp:matches_ex_entry_def pcs_def)"], ["", "lemma outside_pcs_compxE2_not_matches_entry [simp]:\n  assumes xe: \"xe \\<in> set(compxE2 e pc d)\"\n  and outside: \"pc' < pc \\<or> pc+size(compE2 e) \\<le> pc'\"\n  shows \"\\<not> matches_ex_entry P C pc' xe\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches_ex_entry P C pc' xe", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "assume \"matches_ex_entry P C pc' xe\""], ["proof (state)\nthis:\n  matches_ex_entry P C pc' xe\n\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "with xe"], ["proof (chain)\npicking this:\n  xe \\<in> set (compxE2 e pc d)\n  matches_ex_entry P C pc' xe", "have \"pc' \\<in> pcs(compxE2 e pc d)\""], ["proof (prove)\nusing this:\n  xe \\<in> set (compxE2 e pc d)\n  matches_ex_entry P C pc' xe\n\ngoal (1 subgoal):\n 1. pc' \\<in> pcs (compxE2 e pc d)", "by(force simp add:matches_ex_entry_def pcs_def)"], ["proof (state)\nthis:\n  pc' \\<in> pcs (compxE2 e pc d)\n\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "with outside"], ["proof (chain)\npicking this:\n  pc' < pc \\<or> pc + length (compE2 e) \\<le> pc'\n  pc' \\<in> pcs (compxE2 e pc d)", "show False"], ["proof (prove)\nusing this:\n  pc' < pc \\<or> pc + length (compE2 e) \\<le> pc'\n  pc' \\<in> pcs (compxE2 e pc d)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outside_pcs_compxEs2_not_matches_entry [simp]:\n  assumes xe: \"xe \\<in> set(compxEs2 es pc d)\" \n  and outside: \"pc' < pc \\<or> pc+size(compEs2 es) \\<le> pc'\"\n  shows \"\\<not> matches_ex_entry P C pc' xe\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches_ex_entry P C pc' xe", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "assume \"matches_ex_entry P C pc' xe\""], ["proof (state)\nthis:\n  matches_ex_entry P C pc' xe\n\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "with xe"], ["proof (chain)\npicking this:\n  xe \\<in> set (compxEs2 es pc d)\n  matches_ex_entry P C pc' xe", "have \"pc' \\<in> pcs(compxEs2 es pc d)\""], ["proof (prove)\nusing this:\n  xe \\<in> set (compxEs2 es pc d)\n  matches_ex_entry P C pc' xe\n\ngoal (1 subgoal):\n 1. pc' \\<in> pcs (compxEs2 es pc d)", "by(force simp add:matches_ex_entry_def pcs_def)"], ["proof (state)\nthis:\n  pc' \\<in> pcs (compxEs2 es pc d)\n\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc' xe \\<Longrightarrow> False", "with outside"], ["proof (chain)\npicking this:\n  pc' < pc \\<or> pc + length (compEs2 es) \\<le> pc'\n  pc' \\<in> pcs (compxEs2 es pc d)", "show False"], ["proof (prove)\nusing this:\n  pc' < pc \\<or> pc + length (compEs2 es) \\<le> pc'\n  pc' \\<in> pcs (compxEs2 es pc d)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma match_ex_table_app[simp]:\n  \"\\<forall>xte \\<in> set xt\\<^sub>1. \\<not> matches_ex_entry P D pc xte \\<Longrightarrow>\n  match_ex_table P D pc (xt\\<^sub>1 @ xt) = match_ex_table P D pc xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xte\\<in>set xt\\<^sub>1.\n       \\<not> matches_ex_entry P D pc xte \\<Longrightarrow>\n    match_ex_table P D pc (xt\\<^sub>1 @ xt) = match_ex_table P D pc xt", "by(induct xt\\<^sub>1) simp_all"], ["", "lemma match_ex_table_eq_NoneI [simp]:\n  \"\\<forall>x \\<in> set xtab. \\<not> matches_ex_entry P C pc x \\<Longrightarrow>\n  match_ex_table P C pc xtab = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xtab.\n       \\<not> matches_ex_entry P C pc x \\<Longrightarrow>\n    match_ex_table P C pc xtab = None", "using match_ex_table_app[where ?xt = \"[]\"]"], ["proof (prove)\nusing this:\n  \\<forall>xte\\<in>set ?xt\\<^sub>1.\n     \\<not> matches_ex_entry ?P ?D ?pc xte \\<Longrightarrow>\n  match_ex_table ?P ?D ?pc (?xt\\<^sub>1 @ []) = match_ex_table ?P ?D ?pc []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xtab.\n       \\<not> matches_ex_entry P C pc x \\<Longrightarrow>\n    match_ex_table P C pc xtab = None", "by fastforce"], ["", "lemma match_ex_table_not_pcs_None:\n  \"pc \\<notin> pcs xt \\<Longrightarrow> match_ex_table P C pc xt = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc \\<notin> pcs xt \\<Longrightarrow> match_ex_table P C pc xt = None", "by(auto intro: match_ex_table_eq_NoneI)"], ["", "lemma match_ex_entry:\n  fixes start shows\n  \"matches_ex_entry P C pc (start, end, catch_type, handler) =\n  (start \\<le> pc \\<and> pc < end \\<and> (case catch_type of None \\<Rightarrow> True | \\<lfloor>C'\\<rfloor> \\<Rightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* C'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches_ex_entry P C pc (start, end, catch_type, handler) =\n    (start \\<le> pc \\<and>\n     pc < end \\<and>\n     (case catch_type of None \\<Rightarrow> True\n      | \\<lfloor>C'\\<rfloor> \\<Rightarrow>\n          P \\<turnstile> C \\<preceq>\\<^sup>* C'))", "by(simp add:matches_ex_entry_def)"], ["", "lemma pcs_compxE2D [dest]:\n  \"pc \\<in> pcs (compxE2 e pc' d) \\<Longrightarrow> pc' \\<le> pc \\<and> pc < pc' + length (compE2 e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc \\<in> pcs (compxE2 e pc' d) \\<Longrightarrow>\n    pc' \\<le> pc \\<and> pc < pc' + length (compE2 e)", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc \\<in> pcs (compxE2 e pc' d) \\<Longrightarrow>\n    pc' \\<le> pc \\<and> pc < pc' + length (compE2 e)", "by(fastforce)"], ["", "lemma pcs_compxEs2D [dest]:\n  \"pc \\<in> pcs (compxEs2 es pc' d) \\<Longrightarrow> pc' \\<le> pc \\<and> pc < pc' + length (compEs2 es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc \\<in> pcs (compxEs2 es pc' d) \\<Longrightarrow>\n    pc' \\<le> pc \\<and> pc < pc' + length (compEs2 es)", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. pc \\<in> pcs (compxEs2 es pc' d) \\<Longrightarrow>\n    pc' \\<le> pc \\<and> pc < pc' + length (compEs2 es)", "by(fastforce)"], ["", "definition shift :: \"nat \\<Rightarrow> ex_table \\<Rightarrow> ex_table\"\nwhere\n  \"shift n xt \\<equiv> map (\\<lambda>(from,to,C,handler,depth). (n+from,n+to,C,n+handler,depth)) xt\""], ["", "lemma shift_0 [simp]: \"shift 0 xt = xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift 0 xt = xt", "by(induct xt)(auto simp:shift_def)"], ["", "lemma shift_Nil [simp]: \"shift n [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift n [] = []", "by(simp add:shift_def)"], ["", "lemma shift_Cons_tuple [simp]:\n  \"shift n ((from, to, C, handler, depth) # xt) = (from + n, to + n, C, handler + n, depth) # shift n xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift n ((from, to, C, handler, depth) # xt) =\n    (from + n, to + n, C, handler + n, depth) # shift n xt", "by(simp add: shift_def)"], ["", "lemma shift_append [simp]: \"shift n (xt\\<^sub>1 @ xt\\<^sub>2) = shift n xt\\<^sub>1 @ shift n xt\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift n (xt\\<^sub>1 @ xt\\<^sub>2) =\n    shift n xt\\<^sub>1 @ shift n xt\\<^sub>2", "by(simp add:shift_def)"], ["", "lemma shift_shift [simp]: \"shift m (shift n xt) = shift (m+n) xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift m (shift n xt) = shift (m + n) xt", "by(simp add: shift_def split_def)"], ["", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows shift_compxE2: \"shift pc (compxE2 e pc' d) = compxE2 e (pc' + pc) d\"\n  and  shift_compxEs2: \"shift pc (compxEs2 es pc' d) = compxEs2 es (pc' + pc) d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift pc (compxE2 e pc' d) = compxE2 e (pc' + pc) d &&&\n    shift pc (compxEs2 es pc' d) = compxEs2 es (pc' + pc) d", "by(induct e and es arbitrary: pc pc' d and pc pc' d rule: compE2.induct compEs2.induct)\n  (auto simp:shift_def ac_simps)"], ["", "lemma compxE2_size_convs [simp]: \"n \\<noteq> 0 \\<Longrightarrow> compxE2 e n d = shift n (compxE2 e 0 d)\"\n and compxEs2_size_convs: \"n \\<noteq> 0 \\<Longrightarrow> compxEs2 es n d = shift n (compxEs2 es 0 d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<noteq> 0 \\<Longrightarrow>\n     compxE2 e n d = shift n (compxE2 e 0 d)) &&&\n    (n \\<noteq> 0 \\<Longrightarrow>\n     compxEs2 es n d = shift n (compxEs2 es 0 d))", "by(simp_all add:shift_compxE2 shift_compxEs2)"], ["", "lemma pcs_shift_conv [simp]: \"pcs (shift n xt) = (+) n ` pcs xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (shift n xt) = (+) n ` pcs xt", "apply(auto simp add: shift_def pcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (+) n `\n                                 (\\<Union>x\\<in>set xt.\n                                     case x of\n                                     (f, t, C, h, d) \\<Rightarrow> {f..<t})", "apply(rule_tac x=\"x-n\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x = n + (x - n)\n 2. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x - n\n                         \\<in> (\\<Union>x\\<in>set xt.\n                                   case x of\n                                   (f, t, C, h, d) \\<Rightarrow> {f..<t})", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set xt.\n                            x - n\n                            \\<in> (case xa of\n                                   (f, t, C, h, d) \\<Rightarrow> {f..<t})", "apply(rule bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x - n\n                         \\<in> (case ?x28 x a aa ab ac b of\n                                (f, t, C, h, d) \\<Rightarrow> {f..<t})\n 2. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x a aa ab ac b \\<in> set xt", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x a aa ab ac b \\<in> set xt\n 2. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x - n\n                         \\<in> (case ?x28 x a aa ab ac b of\n                                (f, t, C, h, d) \\<Rightarrow> {f..<t})", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab ac b.\n       \\<lbrakk>(a, aa, ab, ac, b) \\<in> set xt; n + a \\<le> x;\n        x < n + aa\\<rbrakk>\n       \\<Longrightarrow> x - n\n                         \\<in> (case (a, aa, ab, ac, b) of\n                                (f, t, C, h, d) \\<Rightarrow> {f..<t})", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma image_plus_const_conv [simp]:\n  fixes m :: nat\n  shows \"m \\<in> (+) n ` A \\<longleftrightarrow> m \\<ge> n \\<and> m - n \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m \\<in> (+) n ` A) = (n \\<le> m \\<and> m - n \\<in> A)", "by(force)"], ["", "lemma match_ex_table_shift_eq_None_conv [simp]:\n  \"match_ex_table P C pc (shift n xt) = None \\<longleftrightarrow> pc < n \\<or> match_ex_table P C (pc - n) xt = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P C pc (shift n xt) = None) =\n    (pc < n \\<or> match_ex_table P C (pc - n) xt = None)", "by(induct xt)(auto simp add: match_ex_entry split: if_split_asm)"], ["", "lemma match_ex_table_shift_pc_None:\n  \"pc \\<ge> n \\<Longrightarrow> match_ex_table P C pc (shift n xt) = None \\<longleftrightarrow> match_ex_table P C (pc - n) xt = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> pc \\<Longrightarrow>\n    (match_ex_table P C pc (shift n xt) = None) =\n    (match_ex_table P C (pc - n) xt = None)", "by(simp add: match_ex_table_shift_eq_None_conv)"], ["", "lemma match_ex_table_shift_eq_Some_conv [simp]:\n  \"match_ex_table P C pc (shift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<longleftrightarrow>\n   pc \\<ge> n \\<and> pc' \\<ge> n \\<and> match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P C pc (shift n xt) = \\<lfloor>(pc', d)\\<rfloor>) =\n    (n \\<le> pc \\<and>\n     n \\<le> pc' \\<and>\n     match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>)", "by(induct xt)(auto simp add: match_ex_entry split: if_split_asm)"], ["", "lemma match_ex_table_shift:\n \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C (n + pc) (shift n xt) = \\<lfloor>(n + pc', d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow>\n    match_ex_table P C (n + pc) (shift n xt) =\n    \\<lfloor>(n + pc', d)\\<rfloor>", "by(simp add: match_ex_table_shift_eq_Some_conv)"], ["", "lemma match_ex_table_shift_pcD:\n  \"match_ex_table P C pc (shift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> pc \\<ge> n \\<and> pc' \\<ge> n \\<and> match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc (shift n xt) =\n    \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow>\n    n \\<le> pc \\<and>\n    n \\<le> pc' \\<and>\n    match_ex_table P C (pc - n) xt = \\<lfloor>(pc' - n, d)\\<rfloor>", "by(simp add: match_ex_table_shift_eq_Some_conv)"], ["", "lemma match_ex_table_pcsD: \"match_ex_table P C pc xt = \\<lfloor>(pc', D)\\<rfloor> \\<Longrightarrow> pc \\<in> pcs xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc xt = \\<lfloor>(pc', D)\\<rfloor> \\<Longrightarrow>\n    pc \\<in> pcs xt", "by(induct xt)(auto split: if_split_asm simp add: match_ex_entry)"], ["", "definition stack_xlift :: \"nat \\<Rightarrow> ex_table \\<Rightarrow> ex_table\"\nwhere \"stack_xlift n xt \\<equiv> map (\\<lambda>(from,to,C,handler,depth). (from, to, C, handler, n + depth)) xt\""], ["", "lemma stack_xlift_0 [simp]: \"stack_xlift 0 xt = xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift 0 xt = xt", "by(induct xt, auto simp add: stack_xlift_def)"], ["", "lemma stack_xlift_Nil [simp]: \"stack_xlift n [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift n [] = []", "by(simp add: stack_xlift_def)"], ["", "lemma stack_xlift_Cons_tuple [simp]:\n  \"stack_xlift n ((from, to, C, handler, depth) # xt) = (from, to, C, handler, depth + n) # stack_xlift n xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift n ((from, to, C, handler, depth) # xt) =\n    (from, to, C, handler, depth + n) # stack_xlift n xt", "by(simp add: stack_xlift_def)"], ["", "lemma stack_xlift_append [simp]: \"stack_xlift n (xt @ xt') = stack_xlift n xt @ stack_xlift n xt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift n (xt @ xt') = stack_xlift n xt @ stack_xlift n xt'", "by(simp add: stack_xlift_def)"], ["", "lemma stack_xlift_stack_xlift [simp]: \"stack_xlift n (stack_xlift m xt) = stack_xlift (n + m) xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift n (stack_xlift m xt) = stack_xlift (n + m) xt", "by(simp add: stack_xlift_def split_def)"], ["", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows stack_xlift_compxE2: \"stack_xlift n (compxE2 e pc d) = compxE2 e pc (n + d)\"\n  and stack_xlift_compxEs2: \"stack_xlift n (compxEs2 es pc d) = compxEs2 es pc (n + d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift n (compxE2 e pc d) = compxE2 e pc (n + d) &&&\n    stack_xlift n (compxEs2 es pc d) = compxEs2 es pc (n + d)", "by(induct e and es arbitrary: d pc and d pc rule: compE2.induct compEs2.induct)\n  (auto simp add: shift_compxE2 simp del: compxE2_size_convs)"], ["", "lemma compxE2_stack_xlift_convs [simp]: \"d > 0 \\<Longrightarrow> compxE2 e pc d = stack_xlift d (compxE2 e pc 0)\"\n  and compxEs2_stack_xlift_convs [simp]: \"d > 0 \\<Longrightarrow> compxEs2 es pc d = stack_xlift d (compxEs2 es pc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < d \\<Longrightarrow>\n     compxE2 e pc d = stack_xlift d (compxE2 e pc 0)) &&&\n    (0 < d \\<Longrightarrow>\n     compxEs2 es pc d = stack_xlift d (compxEs2 es pc 0))", "by(simp_all add: stack_xlift_compxE2 stack_xlift_compxEs2)"], ["", "lemma stack_xlift_shift [simp]: \"stack_xlift d (shift n xt) = shift n (stack_xlift d xt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack_xlift d (shift n xt) = shift n (stack_xlift d xt)", "by(induct xt)(auto)"], ["", "lemma pcs_stack_xlift_conv [simp]: \"pcs (stack_xlift n xt) = pcs xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (stack_xlift n xt) = pcs xt", "by(auto simp add: pcs_def stack_xlift_def)"], ["", "lemma match_ex_table_stack_xlift_eq_None_conv [simp]:\n  \"match_ex_table P C pc (stack_xlift d xt) = None \\<longleftrightarrow> match_ex_table P C pc xt = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P C pc (stack_xlift d xt) = None) =\n    (match_ex_table P C pc xt = None)", "by(induct xt)(auto simp add: match_ex_entry)"], ["", "lemma match_ex_table_stack_xlift_eq_Some_conv [simp]:\n  \"match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<longleftrightarrow> d \\<ge> n \\<and> match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P C pc (stack_xlift n xt) =\n     \\<lfloor>(pc', d)\\<rfloor>) =\n    (n \\<le> d \\<and>\n     match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>)", "by(induct xt)(auto simp add: match_ex_entry)"], ["", "lemma match_ex_table_stack_xliftD:\n  \"match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> d \\<ge> n \\<and> match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc (stack_xlift n xt) =\n    \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow>\n    n \\<le> d \\<and>\n    match_ex_table P C pc xt = \\<lfloor>(pc', d - n)\\<rfloor>", "by(simp)"], ["", "lemma match_ex_table_stack_xlift:\n  \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C pc (stack_xlift n xt) = \\<lfloor>(pc', n + d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow>\n    match_ex_table P C pc (stack_xlift n xt) =\n    \\<lfloor>(pc', n + d)\\<rfloor>", "by simp"], ["", "lemma pcs_stack_xlift: \"pcs (stack_xlift n xt) = pcs xt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pcs (stack_xlift n xt) = pcs xt", "by(auto simp add: stack_xlift_def pcs_def)"], ["", "lemma match_ex_table_None_append [simp]:\n  \"match_ex_table P C pc xt = None\n  \\<Longrightarrow> match_ex_table P C pc (xt @ xt') = match_ex_table P C pc xt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc xt = None \\<Longrightarrow>\n    match_ex_table P C pc (xt @ xt') = match_ex_table P C pc xt'", "by(induct xt, auto)"], ["", "lemma match_ex_table_Some_append [simp]: \n  \"match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow> match_ex_table P C pc (xt @ xt') = \\<lfloor>(pc', d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc xt = \\<lfloor>(pc', d)\\<rfloor> \\<Longrightarrow>\n    match_ex_table P C pc (xt @ xt') = \\<lfloor>(pc', d)\\<rfloor>", "by(induct xt)(auto)"], ["", "lemma match_ex_table_append:\n  \"match_ex_table P C pc (xt @ xt') = (case match_ex_table P C pc xt of None \\<Rightarrow> match_ex_table P C pc xt' \n                                                                  | Some pcd \\<Rightarrow> Some pcd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc (xt @ xt') =\n    (case match_ex_table P C pc xt of\n     None \\<Rightarrow> match_ex_table P C pc xt'\n     | \\<lfloor>pcd\\<rfloor> \\<Rightarrow> \\<lfloor>pcd\\<rfloor>)", "by(auto)"], ["", "lemma match_ex_table_pc_length_compE2:\n  \"match_ex_table P a pc (compxE2 e pc' d) = \\<lfloor>pcd\\<rfloor> \\<Longrightarrow> pc' \\<le> pc \\<and> pc < length (compE2 e) + pc'\"\n  \n  and match_ex_table_pc_length_compEs2:\n  \"match_ex_table P a pc (compxEs2 es pc' d) = \\<lfloor>pcd\\<rfloor> \\<Longrightarrow> pc' \\<le> pc \\<and> pc < length (compEs2 es) + pc'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P a pc (compxE2 e pc' d) =\n     \\<lfloor>pcd\\<rfloor> \\<Longrightarrow>\n     pc' \\<le> pc \\<and> pc < length (compE2 e) + pc') &&&\n    (match_ex_table P a pc (compxEs2 es pc' d) =\n     \\<lfloor>pcd\\<rfloor> \\<Longrightarrow>\n     pc' \\<le> pc \\<and> pc < length (compEs2 es) + pc')", "using pcs_subset"], ["proof (prove)\nusing this:\n  pcs (compxE2 ?e ?pc ?d) \\<subseteq> {?pc..<?pc + length (compE2 ?e)}\n  pcs (compxEs2 ?es ?pc ?d) \\<subseteq> {?pc..<?pc + length (compEs2 ?es)}\n\ngoal (1 subgoal):\n 1. (match_ex_table P a pc (compxE2 e pc' d) =\n     \\<lfloor>pcd\\<rfloor> \\<Longrightarrow>\n     pc' \\<le> pc \\<and> pc < length (compE2 e) + pc') &&&\n    (match_ex_table P a pc (compxEs2 es pc' d) =\n     \\<lfloor>pcd\\<rfloor> \\<Longrightarrow>\n     pc' \\<le> pc \\<and> pc < length (compEs2 es) + pc')", "by(cases pcd, fastforce dest!: match_ex_table_pcsD)+"], ["", "lemma match_ex_table_compxE2_shift_conv:\n  \"f > 0 \\<Longrightarrow> match_ex_table P C pc (compxE2 e f d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> pc \\<ge> f \\<and> pc' \\<ge> f \\<and> match_ex_table P C (pc - f) (compxE2 e 0 d) = \\<lfloor>(pc' - f, d')\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < f \\<Longrightarrow>\n    (match_ex_table P C pc (compxE2 e f d) = \\<lfloor>(pc', d')\\<rfloor>) =\n    (f \\<le> pc \\<and>\n     f \\<le> pc' \\<and>\n     match_ex_table P C (pc - f) (compxE2 e 0 d) =\n     \\<lfloor>(pc' - f, d')\\<rfloor>)", "by simp"], ["", "lemma match_ex_table_compxEs2_shift_conv:\n  \"f > 0 \\<Longrightarrow> match_ex_table P C pc (compxEs2 es f d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> pc \\<ge> f \\<and> pc' \\<ge> f \\<and> match_ex_table P C (pc - f) (compxEs2 es 0 d) = \\<lfloor>(pc' - f, d')\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < f \\<Longrightarrow>\n    (match_ex_table P C pc (compxEs2 es f d) =\n     \\<lfloor>(pc', d')\\<rfloor>) =\n    (f \\<le> pc \\<and>\n     f \\<le> pc' \\<and>\n     match_ex_table P C (pc - f) (compxEs2 es 0 d) =\n     \\<lfloor>(pc' - f, d')\\<rfloor>)", "by(simp add: compxEs2_size_convs)"], ["", "lemma match_ex_table_compxE2_stack_conv:\n  \"d > 0 \\<Longrightarrow> match_ex_table P C pc (compxE2 e 0 d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> d' \\<ge> d \\<and> match_ex_table P C pc (compxE2 e 0 0) = \\<lfloor>(pc', d' - d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    (match_ex_table P C pc (compxE2 e 0 d) = \\<lfloor>(pc', d')\\<rfloor>) =\n    (d \\<le> d' \\<and>\n     match_ex_table P C pc (compxE2 e 0 0) =\n     \\<lfloor>(pc', d' - d)\\<rfloor>)", "by simp"], ["", "lemma match_ex_table_compxEs2_stack_conv:\n  \"d > 0 \\<Longrightarrow> match_ex_table P C pc (compxEs2 es 0 d) = \\<lfloor>(pc', d')\\<rfloor> \\<longleftrightarrow> d' \\<ge> d \\<and> match_ex_table P C pc (compxEs2 es 0 0) = \\<lfloor>(pc', d' - d)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    (match_ex_table P C pc (compxEs2 es 0 d) =\n     \\<lfloor>(pc', d')\\<rfloor>) =\n    (d \\<le> d' \\<and>\n     match_ex_table P C pc (compxEs2 es 0 0) =\n     \\<lfloor>(pc', d' - d)\\<rfloor>)", "by(simp add: compxEs2_stack_xlift_convs)"], ["", "lemma fixes e :: \"'addr expr1\" and es :: \"'addr expr1 list\"\n  shows match_ex_table_compxE2_not_same: \"match_ex_table P C pc (compxE2 e n d) = \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow> pc \\<noteq> pc'\"\n  and match_ex_table_compxEs2_not_same:\"match_ex_table P C pc (compxEs2 es n d) = \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow> pc \\<noteq> pc'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_ex_table P C pc (compxE2 e n d) =\n     \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n     pc \\<noteq> pc') &&&\n    (match_ex_table P C pc (compxEs2 es n d) =\n     \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n     pc \\<noteq> pc')", "apply(induct e n d and es n d rule: compxE2_compxEs2_induct)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>Ca pca d.\n       match_ex_table P C pc (compxE2 (new Ca) pca d) =\n       \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n       pc \\<noteq> pc'\n 2. \\<And>T e pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 e pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc (compxE2 (newA T\\<lfloor>e\\<rceil>) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 3. \\<And>T e pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 e pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc (compxE2 (Cast T e) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 4. \\<And>e T pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 e pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc (compxE2 (e instanceof T) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 5. \\<And>v pca d.\n       match_ex_table P C pc (compxE2 (Val v) pca d) =\n       \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n       pc \\<noteq> pc'\n 6. \\<And>e1 bop e2 pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 e1 pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc\n         (compxE2 e2 (pca + length (compE2 e1)) (d + 1)) =\n        \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n        pc \\<noteq> pc';\n        match_ex_table P C pc\n         (compxE2 (e1 \\<guillemotleft>bop\\<guillemotright> e2) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 7. \\<And>i pca d.\n       match_ex_table P C pc (compxE2 (Var i) pca d) =\n       \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n       pc \\<noteq> pc'\n 8. \\<And>i e pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 e pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc (compxE2 (i:=e) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 9. \\<And>a i pca d.\n       \\<lbrakk>match_ex_table P C pc (compxE2 a pca d) =\n                \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                pc \\<noteq> pc';\n        match_ex_table P C pc\n         (compxE2 i (pca + length (compE2 a)) (d + 1)) =\n        \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n        pc \\<noteq> pc';\n        match_ex_table P C pc (compxE2 (a\\<lfloor>i\\<rceil>) pca d) =\n        \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> pc \\<noteq> pc'\n 10. \\<And>a i e pca d.\n        \\<lbrakk>match_ex_table P C pc (compxE2 a pca d) =\n                 \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n                 pc \\<noteq> pc';\n         match_ex_table P C pc\n          (compxE2 i (pca + length (compE2 a)) (d + 1)) =\n         \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n         pc \\<noteq> pc';\n         match_ex_table P C pc\n          (compxE2 e (pca + length (compE2 a) + length (compE2 i))\n            (d + 2)) =\n         \\<lfloor>(pc', d')\\<rfloor> \\<Longrightarrow>\n         pc \\<noteq> pc';\n         match_ex_table P C pc (compxE2 (a\\<lfloor>i\\<rceil> := e) pca d) =\n         \\<lfloor>(pc', d')\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> pc \\<noteq> pc'\nA total of 25 subgoals...", "apply(auto simp add: match_ex_table_append match_ex_entry simp del: compxE2_size_convs compxEs2_size_convs compxE2_stack_xlift_convs compxEs2_stack_xlift_convs split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}