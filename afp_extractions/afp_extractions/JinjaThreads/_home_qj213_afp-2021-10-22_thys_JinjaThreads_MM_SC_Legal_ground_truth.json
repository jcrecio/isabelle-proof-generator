{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/SC_Legal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma commit_for_sc_correct:\n  assumes E: \"E \\<in> \\<E>\" \n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and sc: \"sequentially_consistent P (E, ws)\"\n  shows wf_action_translation_commit_for_sc: \n    \"\\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\" (is \"\\<And>n. ?thesis1 n\")\n  and commit_for_sc_in_\\<E>:\n    \"\\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\" (is \"\\<And>n. ?thesis2 n\")\n  and commit_for_sc_wf: \n    \"\\<And>n. P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n), justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\"\n    (is \"\\<And>n. ?thesis3 n\")\n  and commit_for_sc_justification:\n    \"P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)\" (is ?thesis4)", "theorem SC_is_legal:\n  assumes E: \"E \\<in> \\<E>\" \n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and sc: \"sequentially_consistent P (E, ws)\"\n  shows \"legal_execution P \\<E> (E, ws)\"", "theorem consistent:\n  assumes \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\"\n  shows \"\\<exists>E \\<in> \\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)\""], "translations": [["", "lemma commit_for_sc_correct:\n  assumes E: \"E \\<in> \\<E>\" \n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and sc: \"sequentially_consistent P (E, ws)\"\n  shows wf_action_translation_commit_for_sc: \n    \"\\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\" (is \"\\<And>n. ?thesis1 n\")\n  and commit_for_sc_in_\\<E>:\n    \"\\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\" (is \"\\<And>n. ?thesis2 n\")\n  and commit_for_sc_wf: \n    \"\\<And>n. P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n), justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\"\n    (is \"\\<And>n. ?thesis3 n\")\n  and commit_for_sc_justification:\n    \"P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)\" (is ?thesis4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)) &&&\n     (\\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>)) &&&\n    (\\<And>n.\n        P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                        justifying_ws\n                         (commit_for_sc P (E, ws) n)) \\<surd>) &&&\n    P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "let ?\\<phi> = \"commit_for_sc P (E, ws)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "note [simp] = split_beta"], ["proof (state)\nthis:\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "from wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) \\<surd>", "have tsok: \"thread_start_actions_ok E\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok E", "by simp"], ["proof (state)\nthis:\n  thread_start_actions_ok E\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "let ?P = \"\\<lambda>n (E', ws'). E' \\<in> \\<E> \\<and> P \\<turnstile> (E', ws') \\<surd> \\<and> (enat n \\<le> llength E \\<longrightarrow> enat n \\<le> llength E') \\<and>\n                         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and> \n                         (n > 0 \\<longrightarrow> action_tid E' (n - 1) = action_tid E (n - 1) \\<and> \n                                   (if n - 1 \\<in> read_actions E then sim_action else (=)) \n                                      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                                   (\\<forall>i < n - 1. i \\<in> read_actions E  \\<longrightarrow> ws' i = ws i)) \\<and> \n                         (\\<forall>r \\<in> read_actions E'. n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "define E' ws' where \"E' n = fst (Eps (?P n))\" and \"ws' n = snd (Eps (?P n))\" for n"], ["proof (state)\nthis:\n  E' ?n =\n  fst (SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n \\<le> llength E \\<longrightarrow>\n           enat ?n \\<le> llength E') \\<and>\n          ltake (enat (?n - 1)) E = ltake (enat (?n - 1)) E' \\<and>\n          (0 < ?n \\<longrightarrow>\n           action_tid E' (?n - 1) = action_tid E (?n - 1) \\<and>\n           (if ?n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n - 1)) (action_obs E (?n - 1)) \\<and>\n           (\\<forall>i<?n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r))\n  ws' ?n =\n  snd (SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n \\<le> llength E \\<longrightarrow>\n           enat ?n \\<le> llength E') \\<and>\n          ltake (enat (?n - 1)) E = ltake (enat (?n - 1)) E' \\<and>\n          (0 < ?n \\<longrightarrow>\n           action_tid E' (?n - 1) = action_tid E (?n - 1) \\<and>\n           (if ?n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n - 1)) (action_obs E (?n - 1)) \\<and>\n           (\\<forall>i<?n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r))\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "hence [simp]: \n    \"\\<And>n. commit_for_sc P (E, ws) n = \n    (if enat n \\<le> llength E\n     then \\<lparr>committed = {..<n}, justifying_exec = E' n, justifying_ws = ws' n, action_translation = id\\<rparr>\n     else \\<lparr>committed = actions E, justifying_exec = E, justifying_ws = ws, action_translation = id\\<rparr>)\""], ["proof (prove)\nusing this:\n  E' ?n =\n  fst (SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n \\<le> llength E \\<longrightarrow>\n           enat ?n \\<le> llength E') \\<and>\n          ltake (enat (?n - 1)) E = ltake (enat (?n - 1)) E' \\<and>\n          (0 < ?n \\<longrightarrow>\n           action_tid E' (?n - 1) = action_tid E (?n - 1) \\<and>\n           (if ?n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n - 1)) (action_obs E (?n - 1)) \\<and>\n           (\\<forall>i<?n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r))\n  ws' ?n =\n  snd (SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n \\<le> llength E \\<longrightarrow>\n           enat ?n \\<le> llength E') \\<and>\n          ltake (enat (?n - 1)) E = ltake (enat (?n - 1)) E' \\<and>\n          (0 < ?n \\<longrightarrow>\n           action_tid E' (?n - 1) = action_tid E (?n - 1) \\<and>\n           (if ?n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n - 1)) (action_obs E (?n - 1)) \\<and>\n           (\\<forall>i<?n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       commit_for_sc P (E, ws) n =\n       (if enat n \\<le> llength E\n        then \\<lparr>committed = {..<n}, justifying_exec = E' n,\n                justifying_ws = ws' n, action_translation = id\\<rparr>\n        else \\<lparr>committed = actions E, justifying_exec = E,\n                justifying_ws = ws, action_translation = id\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  commit_for_sc P (E, ws) ?n =\n  (if enat ?n \\<le> llength E\n   then \\<lparr>committed = {..<?n}, justifying_exec = E' ?n,\n           justifying_ws = ws' ?n, action_translation = id\\<rparr>\n   else \\<lparr>committed = actions E, justifying_exec = E,\n           justifying_ws = ws, action_translation = id\\<rparr>)\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "note [simp del] = commit_for_sc.simps"], ["proof (state)\nthis:\n  commit_for_sc P (?E, ?ws) ?n =\n  (if enat ?n \\<le> llength ?E\n   then let (E', ws') =\n              SOME (E', ws').\n                 E' \\<in> \\<E> \\<and>\n                 P \\<turnstile> (E', ws') \\<surd> \\<and>\n                 enat ?n \\<le> llength E' \\<and>\n                 ltake (enat (?n - 1)) ?E = ltake (enat (?n - 1)) E' \\<and>\n                 (0 < ?n \\<longrightarrow>\n                  action_tid E' (?n - 1) = action_tid ?E (?n - 1) \\<and>\n                  (if ?n - 1 \\<in> read_actions ?E then sim_action else (=))\n                   (action_obs E' (?n - 1)) (action_obs ?E (?n - 1)) \\<and>\n                  (\\<forall>i<?n - 1.\n                      i \\<in> read_actions ?E \\<longrightarrow>\n                      ws' i = ?ws i)) \\<and>\n                 (\\<forall>r\\<in>read_actions E'.\n                     ?n - 1 \\<le> r \\<longrightarrow>\n                     P,E' \\<turnstile> ws' r \\<le>hb r)\n        in \\<lparr>committed = {..<?n}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>\n   else \\<lparr>committed = actions ?E, justifying_exec = ?E,\n           justifying_ws = ?ws, action_translation = id\\<rparr>)\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "have \"(\\<forall>n. ?thesis1 n) \\<and> (\\<forall>n. ?thesis2 n) \\<and> (\\<forall>n. ?thesis3 n) \\<and> ?thesis4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. wf_action_translation E (commit_for_sc P (E, ws) n)) \\<and>\n    (\\<forall>n.\n        justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>) \\<and>\n    (\\<forall>n.\n        P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                        justifying_ws\n                         (commit_for_sc P (E, ws) n)) \\<surd>) \\<and>\n    P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "unfolding is_justified_by.simps is_commit_sequence_def justification_well_formed_def committed_subset_actions_def\n      happens_before_committed_def sync_order_committed_def value_written_committed_def uncommitted_reads_see_hb_def\n      committed_reads_see_committed_writes_def external_actions_committed_def wf_action_translations_def\n      write_seen_committed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. wf_action_translation E (commit_for_sc P (E, ws) n)) \\<and>\n    (\\<forall>n.\n        justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>) \\<and>\n    (\\<forall>n.\n        P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                        justifying_ws\n                         (commit_for_sc P (E, ws) n)) \\<surd>) \\<and>\n    (committed (commit_for_sc P (E, ws) 0) = {} \\<and>\n     (\\<forall>n.\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\n         \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                     committed (commit_for_sc P (E, ws) (Suc n))) \\<and>\n     actions E =\n     (\\<Union>n.\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n))) \\<and>\n    (\\<forall>n.\n        P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                        justifying_ws\n                         (commit_for_sc P (E, ws) n)) \\<surd>) \\<and>\n    (\\<forall>n.\n        committed (commit_for_sc P (E, ws) n)\n        \\<subseteq> actions\n                     (justifying_exec (commit_for_sc P (E, ws) n))) \\<and>\n    (\\<forall>n.\n        happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n) =\n        inv_imageP (happens_before P E)\n         (action_translation (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n)) \\<and>\n    (\\<forall>n.\n        sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n) =\n        inv_imageP (sync_order P E)\n         (action_translation (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n)) \\<and>\n    (\\<forall>n.\n        \\<forall>w\\<in>write_actions\n                        (justifying_exec\n                          (commit_for_sc P (E, ws) n)) \\<inter>\n                       committed (commit_for_sc P (E, ws) n).\n           let w' = action_translation (commit_for_sc P (E, ws) n) w\n           in \\<forall>adal\\<in>action_loc P E w'.\n                 value_written P\n                  (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n                 value_written P E w' adal) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n).\n           let r = action_translation (commit_for_sc P (E, ws) n) r';\n               r'' =\n                 inv_into\n                  (actions\n                    (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n                  (action_translation (commit_for_sc P (E, ws) (Suc n))) r\n           in action_translation (commit_for_sc P (E, ws) (Suc n))\n               (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r'') =\n              ws r) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) (Suc n))).\n           action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n           \\<in> action_translation (commit_for_sc P (E, ws) n) `\n                 committed (commit_for_sc P (E, ws) n) \\<or>\n           P,justifying_exec\n              (commit_for_sc P (E, ws)\n                (Suc n)) \\<turnstile> justifying_ws\n (commit_for_sc P (E, ws) (Suc n)) r' \\<le>hb r') \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                        committed (commit_for_sc P (E, ws) (Suc n)).\n           let r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n               committed_n =\n                 action_translation (commit_for_sc P (E, ws) n) `\n                 committed (commit_for_sc P (E, ws) n)\n           in r \\<in> committed_n \\<or>\n              action_translation (commit_for_sc P (E, ws) (Suc n))\n               (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n              \\<in> committed_n \\<and>\n              ws r \\<in> committed_n) \\<and>\n    (\\<forall>n.\n        \\<forall>a\\<in>external_actions\n                        (justifying_exec (commit_for_sc P (E, ws) n)).\n           \\<forall>a'\\<in>committed (commit_for_sc P (E, ws) n).\n              P,justifying_exec\n                 (commit_for_sc P (E, ws)\n                   n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n              a \\<in> committed (commit_for_sc P (E, ws) n)) \\<and>\n    (\\<forall>n. wf_action_translation E (commit_for_sc P (E, ws) n))", "proof(intro conjI strip LetI)"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. committed (commit_for_sc P (E, ws) 0) = {}\n 5. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 6. actions E =\n    (\\<Union>n.\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 8. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 9. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 10. \\<And>n.\n        sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n) =\n        inv_imageP (sync_order P E)\n         (action_translation (commit_for_sc P (E, ws) n)) |`\n        committed (commit_for_sc P (E, ws) n)\nA total of 16 subgoals...", "show \"committed (?\\<phi> 0) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. committed (commit_for_sc P (E, ws) 0) = {}", "by(auto simp add: actions_def zero_enat_def[symmetric])"], ["proof (state)\nthis:\n  committed (commit_for_sc P (E, ws) 0) = {}\n\ngoal (15 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. actions E =\n    (\\<Union>n.\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 7. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 8. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 10. \\<And>n w w' adal.\n        \\<lbrakk>w \\<in> write_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n         w' = action_translation (commit_for_sc P (E, ws) n) w;\n         adal \\<in> action_loc P E w'\\<rbrakk>\n        \\<Longrightarrow> value_written P\n                           (justifying_exec (commit_for_sc P (E, ws) n)) w\n                           adal =\n                          value_written P E w' adal\nA total of 15 subgoals...", "show actions_E: \"actions E = (\\<Union>n. action_translation (?\\<phi> n) ` committed (?\\<phi> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. actions E =\n    (\\<Union>n.\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n))", "by(auto simp add: actions_def less_le_trans[where y=\"enat n\" for n] split: if_split_asm)"], ["proof (state)\nthis:\n  actions E =\n  (\\<Union>n.\n      action_translation (commit_for_sc P (E, ws) n) `\n      committed (commit_for_sc P (E, ws) n))\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "hence committed_subset_E: \"\\<And>n. action_translation (?\\<phi> n) ` committed (?\\<phi> n) \\<subseteq> actions E\""], ["proof (prove)\nusing this:\n  actions E =\n  (\\<Union>n.\n      action_translation (commit_for_sc P (E, ws) n) `\n      committed (commit_for_sc P (E, ws) n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions E", "by fastforce"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) ?n) `\n  committed (commit_for_sc P (E, ws) ?n)\n  \\<subseteq> actions E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "{"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) ?n) `\n  committed (commit_for_sc P (E, ws) ?n)\n  \\<subseteq> actions E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "fix n"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "have \"?P n (Eps (?P n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "from \\<E>_hb_completion[OF E wf, of 0]"], ["proof (chain)\npicking this:\n  (\\<And>a.\n      \\<lbrakk>a < 0; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws\n                    a) \\<Longrightarrow>\n  \\<exists>E'\\<in>\\<E>.\n     \\<exists>ws'.\n        P \\<turnstile> (E', ws') \\<surd> \\<and>\n        ltake (enat 0) E = ltake (enat 0) E' \\<and>\n        (\\<forall>a\\<in>read_actions E'.\n            if a < 0 then ws' a = ws a\n            else P,E' \\<turnstile> ws' a \\<le>hb a) \\<and>\n        action_tid E' 0 = action_tid E 0 \\<and>\n        (if 0 \\<in> read_actions E then sim_action else (=))\n         (action_obs E' 0) (action_obs E 0) \\<and>\n        (0 \\<in> actions E \\<longrightarrow> 0 \\<in> actions E')", "have \"\\<exists>Ews. ?P 0 Ews\""], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a < 0; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws\n                    a) \\<Longrightarrow>\n  \\<exists>E'\\<in>\\<E>.\n     \\<exists>ws'.\n        P \\<turnstile> (E', ws') \\<surd> \\<and>\n        ltake (enat 0) E = ltake (enat 0) E' \\<and>\n        (\\<forall>a\\<in>read_actions E'.\n            if a < 0 then ws' a = ws a\n            else P,E' \\<turnstile> ws' a \\<le>hb a) \\<and>\n        action_tid E' 0 = action_tid E 0 \\<and>\n        (if 0 \\<in> read_actions E then sim_action else (=))\n         (action_obs E' 0) (action_obs E 0) \\<and>\n        (0 \\<in> actions E \\<longrightarrow> 0 \\<in> actions E')\n\ngoal (1 subgoal):\n 1. \\<exists>Ews.\n       case Ews of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat 0 \\<le> llength E \\<longrightarrow>\n          enat 0 \\<le> llength E') \\<and>\n         ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n         (0 < 0 \\<longrightarrow>\n          action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n          (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n          (\\<forall>i<0 - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             0 - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "by(fastforce simp add: zero_enat_def[symmetric])"], ["proof (state)\nthis:\n  \\<exists>Ews.\n     case Ews of\n     (E', ws') \\<Rightarrow>\n       E' \\<in> \\<E> \\<and>\n       P \\<turnstile> (E', ws') \\<surd> \\<and>\n       (enat 0 \\<le> llength E \\<longrightarrow>\n        enat 0 \\<le> llength E') \\<and>\n       ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n       (0 < 0 \\<longrightarrow>\n        action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n        (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n         (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n        (\\<forall>i<0 - 1.\n            i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n       (\\<forall>r\\<in>read_actions E'.\n           0 - 1 \\<le> r \\<longrightarrow>\n           P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>Ews.\n     case Ews of\n     (E', ws') \\<Rightarrow>\n       E' \\<in> \\<E> \\<and>\n       P \\<turnstile> (E', ws') \\<surd> \\<and>\n       (enat 0 \\<le> llength E \\<longrightarrow>\n        enat 0 \\<le> llength E') \\<and>\n       ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n       (0 < 0 \\<longrightarrow>\n        action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n        (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n         (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n        (\\<forall>i<0 - 1.\n            i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n       (\\<forall>r\\<in>read_actions E'.\n           0 - 1 \\<le> r \\<longrightarrow>\n           P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)", "unfolding 0"], ["proof (prove)\nusing this:\n  \\<exists>Ews.\n     case Ews of\n     (E', ws') \\<Rightarrow>\n       E' \\<in> \\<E> \\<and>\n       P \\<turnstile> (E', ws') \\<surd> \\<and>\n       (enat 0 \\<le> llength E \\<longrightarrow>\n        enat 0 \\<le> llength E') \\<and>\n       ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n       (0 < 0 \\<longrightarrow>\n        action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n        (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n         (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n        (\\<forall>i<0 - 1.\n            i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n       (\\<forall>r\\<in>read_actions E'.\n           0 - 1 \\<le> r \\<longrightarrow>\n           P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat 0 \\<le> llength E \\<longrightarrow>\n             enat 0 \\<le> llength E') \\<and>\n            ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n            (0 < 0 \\<longrightarrow>\n             action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n             (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n             (\\<forall>i<0 - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                0 - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat 0 \\<le> llength E \\<longrightarrow>\n       enat 0 \\<le> llength E') \\<and>\n      ltake (enat (0 - 1)) E = ltake (enat (0 - 1)) E' \\<and>\n      (0 < 0 \\<longrightarrow>\n       action_tid E' (0 - 1) = action_tid E (0 - 1) \\<and>\n       (if 0 - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (0 - 1)) (action_obs E (0 - 1)) \\<and>\n       (\\<forall>i<0 - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          0 - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)", "by(rule someI_ex)"], ["proof (state)\nthis:\n  case SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat n \\<le> llength E \\<longrightarrow>\n           enat n \\<le> llength E') \\<and>\n          ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n          (0 < n \\<longrightarrow>\n           action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n           (if n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n           (\\<forall>i<n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r) of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat n \\<le> llength E \\<longrightarrow>\n     enat n \\<le> llength E') \\<and>\n    ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n    (0 < n \\<longrightarrow>\n     action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n     (if n - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n     (\\<forall>i<n - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "moreover"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "from sc"], ["proof (chain)\npicking this:\n  sequentially_consistent P (E, ws)", "have sc': \"\\<And>a. \\<lbrakk> a < n'; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\""], ["proof (prove)\nusing this:\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a < n'; a \\<in> read_actions E\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a", "by(simp add: sequentially_consistent_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?a < n'; ?a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> ?a \\<leadsto>mrw ws ?a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "from \\<E>_hb_completion[OF E wf this, of n']"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < n'; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < n';\n   \\<And>a.\n      \\<lbrakk>a < n'; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>E'\\<in>\\<E>.\n                       \\<exists>ws'.\n                          P \\<turnstile> (E', ws') \\<surd> \\<and>\n                          ltake (enat n') E = ltake (enat n') E' \\<and>\n                          (\\<forall>a\\<in>read_actions E'.\n                              if a < n' then ws' a = ws a\n                              else P,E' \\<turnstile> ws' a \\<le>hb a) \\<and>\n                          action_tid E' n' = action_tid E n' \\<and>\n                          (if n' \\<in> read_actions E then sim_action\n                           else (=))\n                           (action_obs E' n') (action_obs E n') \\<and>\n                          (n' \\<in> actions E \\<longrightarrow>\n                           n' \\<in> actions E')", "obtain E' ws' where \"E' \\<in> \\<E>\" and \"P \\<turnstile> (E', ws') \\<surd>\"\n          and eq: \"ltake (enat n') E = ltake (enat n') E'\"\n          and hb: \"\\<forall>a\\<in>read_actions E'. if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\"\n          and n_sim: \"action_tid E' n' = action_tid E n'\"\n            \"(if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n') (action_obs E n')\"\n          and n: \"n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < n'; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < n';\n   \\<And>a.\n      \\<lbrakk>a < n'; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>E'\\<in>\\<E>.\n                       \\<exists>ws'.\n                          P \\<turnstile> (E', ws') \\<surd> \\<and>\n                          ltake (enat n') E = ltake (enat n') E' \\<and>\n                          (\\<forall>a\\<in>read_actions E'.\n                              if a < n' then ws' a = ws a\n                              else P,E' \\<turnstile> ws' a \\<le>hb a) \\<and>\n                          action_tid E' n' = action_tid E n' \\<and>\n                          (if n' \\<in> read_actions E then sim_action\n                           else (=))\n                           (action_obs E' n') (action_obs E n') \\<and>\n                          (n' \\<in> actions E \\<longrightarrow>\n                           n' \\<in> actions E')\n\ngoal (1 subgoal):\n 1. (\\<And>E' ws'.\n        \\<lbrakk>E' \\<in> \\<E>; P \\<turnstile> (E', ws') \\<surd>;\n         ltake (enat n') E = ltake (enat n') E';\n         \\<forall>a\\<in>read_actions E'.\n            if a < n' then ws' a = ws a\n            else P,E' \\<turnstile> ws' a \\<le>hb a;\n         action_tid E' n' = action_tid E n';\n         (if n' \\<in> read_actions E then sim_action else (=))\n          (action_obs E' n') (action_obs E n');\n         n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat n') E = ltake (enat n') E'\n  \\<forall>a\\<in>read_actions E'.\n     if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\n  action_tid E' n' = action_tid E n'\n  (if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n')\n   (action_obs E n')\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "moreover"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat n') E = ltake (enat n') E'\n  \\<forall>a\\<in>read_actions E'.\n     if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\n  action_tid E' n' = action_tid E n'\n  (if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n')\n   (action_obs E n')\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "{"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat n') E = ltake (enat n') E'\n  \\<forall>a\\<in>read_actions E'.\n     if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\n  action_tid E' n' = action_tid E n'\n  (if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n')\n   (action_obs E n')\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "assume \"enat n \\<le> llength E\""], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "with n Suc"], ["proof (chain)\npicking this:\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n  n = Suc n'\n  enat n \\<le> llength E", "have \"enat n \\<le> llength E'\""], ["proof (prove)\nusing this:\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n  n = Suc n'\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E'", "by(simp add: actions_def Suc_ile_eq)"], ["proof (state)\nthis:\n  enat n \\<le> llength E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "}"], ["proof (state)\nthis:\n  enat n \\<le> llength E \\<Longrightarrow> enat n \\<le> llength E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "moreover"], ["proof (state)\nthis:\n  enat n \\<le> llength E \\<Longrightarrow> enat n \\<le> llength E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "{"], ["proof (state)\nthis:\n  enat n \\<le> llength E \\<Longrightarrow> enat n \\<le> llength E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "assume \"i \\<in> read_actions E\""], ["proof (state)\nthis:\n  i \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "moreover"], ["proof (state)\nthis:\n  i \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "from eq"], ["proof (chain)\npicking this:\n  ltake (enat n') E = ltake (enat n') E'", "have \"ltake (enat n') E [\\<approx>] ltake (enat n') E'\""], ["proof (prove)\nusing this:\n  ltake (enat n') E = ltake (enat n') E'\n\ngoal (1 subgoal):\n 1. ltake (enat n') E [\\<approx>] ltake (enat n') E'", "by(rule eq_into_sim_actions)"], ["proof (state)\nthis:\n  ltake (enat n') E [\\<approx>] ltake (enat n') E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "moreover"], ["proof (state)\nthis:\n  ltake (enat n') E [\\<approx>] ltake (enat n') E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "assume \"i < n'\""], ["proof (state)\nthis:\n  i < n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "hence \"enat i < enat n'\""], ["proof (prove)\nusing this:\n  i < n'\n\ngoal (1 subgoal):\n 1. enat i < enat n'", "by simp"], ["proof (state)\nthis:\n  enat i < enat n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "ultimately"], ["proof (chain)\npicking this:\n  i \\<in> read_actions E\n  ltake (enat n') E [\\<approx>] ltake (enat n') E'\n  enat i < enat n'", "have \"i \\<in> read_actions E'\""], ["proof (prove)\nusing this:\n  i \\<in> read_actions E\n  ltake (enat n') E [\\<approx>] ltake (enat n') E'\n  enat i < enat n'\n\ngoal (1 subgoal):\n 1. i \\<in> read_actions E'", "by(rule read_actions_change_prefix)"], ["proof (state)\nthis:\n  i \\<in> read_actions E'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "with hb[rule_format, OF this] \\<open>i < n'\\<close>"], ["proof (chain)\npicking this:\n  if i < n' then ws' i = ws i else P,E' \\<turnstile> ws' i \\<le>hb i\n  i < n'\n  i \\<in> read_actions E'", "have \"ws' i = ws i\""], ["proof (prove)\nusing this:\n  if i < n' then ws' i = ws i else P,E' \\<turnstile> ws' i \\<le>hb i\n  i < n'\n  i \\<in> read_actions E'\n\ngoal (1 subgoal):\n 1. ws' i = ws i", "by simp"], ["proof (state)\nthis:\n  ws' i = ws i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 \\<in> read_actions E; ?i2 < n'\\<rbrakk>\n  \\<Longrightarrow> ws' ?i2 = ws ?i2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "ultimately"], ["proof (chain)\npicking this:\n  n = Suc n'\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat n') E = ltake (enat n') E'\n  \\<forall>a\\<in>read_actions E'.\n     if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\n  action_tid E' n' = action_tid E n'\n  (if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n')\n   (action_obs E n')\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n  enat n \\<le> llength E \\<Longrightarrow> enat n \\<le> llength E'\n  \\<lbrakk>?i2 \\<in> read_actions E; ?i2 < n'\\<rbrakk>\n  \\<Longrightarrow> ws' ?i2 = ws ?i2", "have \"?P n (E', ws')\""], ["proof (prove)\nusing this:\n  n = Suc n'\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat n') E = ltake (enat n') E'\n  \\<forall>a\\<in>read_actions E'.\n     if a < n' then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a\n  action_tid E' n' = action_tid E n'\n  (if n' \\<in> read_actions E then sim_action else (=)) (action_obs E' n')\n   (action_obs E n')\n  n' \\<in> actions E \\<Longrightarrow> n' \\<in> actions E'\n  enat n \\<le> llength E \\<Longrightarrow> enat n \\<le> llength E'\n  \\<lbrakk>?i2 \\<in> read_actions E; ?i2 < n'\\<rbrakk>\n  \\<Longrightarrow> ws' ?i2 = ws ?i2\n\ngoal (1 subgoal):\n 1. case (E', ws') of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)", "by simp"], ["proof (state)\nthis:\n  case (E', ws') of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat n \\<le> llength E \\<longrightarrow>\n     enat n \\<le> llength E') \\<and>\n    ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n    (0 < n \\<longrightarrow>\n     action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n     (if n - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n     (\\<forall>i<n - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       case SOME (E', ws').\n               E' \\<in> \\<E> \\<and>\n               P \\<turnstile> (E', ws') \\<surd> \\<and>\n               (enat n \\<le> llength E \\<longrightarrow>\n                enat n \\<le> llength E') \\<and>\n               ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n               (0 < n \\<longrightarrow>\n                action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n                (if n - 1 \\<in> read_actions E then sim_action else (=))\n                 (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n                (\\<forall>i<n - 1.\n                    i \\<in> read_actions E \\<longrightarrow>\n                    ws' i = ws i)) \\<and>\n               (\\<forall>r\\<in>read_actions E'.\n                   n - 1 \\<le> r \\<longrightarrow>\n                   P,E' \\<turnstile> ws' r \\<le>hb r) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  case (E', ws') of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat n \\<le> llength E \\<longrightarrow>\n     enat n \\<le> llength E') \\<and>\n    ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n    (0 < n \\<longrightarrow>\n     action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n     (if n - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n     (\\<forall>i<n - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. case SOME (E', ws').\n            E' \\<in> \\<E> \\<and>\n            P \\<turnstile> (E', ws') \\<surd> \\<and>\n            (enat n \\<le> llength E \\<longrightarrow>\n             enat n \\<le> llength E') \\<and>\n            ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n            (0 < n \\<longrightarrow>\n             action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n             (if n - 1 \\<in> read_actions E then sim_action else (=))\n              (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n             (\\<forall>i<n - 1.\n                 i \\<in> read_actions E \\<longrightarrow>\n                 ws' i = ws i)) \\<and>\n            (\\<forall>r\\<in>read_actions E'.\n                n - 1 \\<le> r \\<longrightarrow>\n                P,E' \\<turnstile> ws' r \\<le>hb r) of\n    (E', ws') \\<Rightarrow>\n      E' \\<in> \\<E> \\<and>\n      P \\<turnstile> (E', ws') \\<surd> \\<and>\n      (enat n \\<le> llength E \\<longrightarrow>\n       enat n \\<le> llength E') \\<and>\n      ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n      (0 < n \\<longrightarrow>\n       action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n       (if n - 1 \\<in> read_actions E then sim_action else (=))\n        (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n       (\\<forall>i<n - 1.\n           i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n      (\\<forall>r\\<in>read_actions E'.\n          n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)", "by(rule someI)"], ["proof (state)\nthis:\n  case SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat n \\<le> llength E \\<longrightarrow>\n           enat n \\<le> llength E') \\<and>\n          ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n          (0 < n \\<longrightarrow>\n           action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n           (if n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n           (\\<forall>i<n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r) of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat n \\<le> llength E \\<longrightarrow>\n     enat n \\<le> llength E') \\<and>\n    ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n    (0 < n \\<longrightarrow>\n     action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n     (if n - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n     (\\<forall>i<n - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat n \\<le> llength E \\<longrightarrow>\n           enat n \\<le> llength E') \\<and>\n          ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n          (0 < n \\<longrightarrow>\n           action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n           (if n - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n           (\\<forall>i<n - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              n - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r) of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat n \\<le> llength E \\<longrightarrow>\n     enat n \\<le> llength E') \\<and>\n    ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n    (0 < n \\<longrightarrow>\n     action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n     (if n - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n     (\\<forall>i<n - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        n - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "}"], ["proof (state)\nthis:\n  case SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n2 \\<le> llength E \\<longrightarrow>\n           enat ?n2 \\<le> llength E') \\<and>\n          ltake (enat (?n2 - 1)) E = ltake (enat (?n2 - 1)) E' \\<and>\n          (0 < ?n2 \\<longrightarrow>\n           action_tid E' (?n2 - 1) = action_tid E (?n2 - 1) \\<and>\n           (if ?n2 - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n2 - 1)) (action_obs E (?n2 - 1)) \\<and>\n           (\\<forall>i<?n2 - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n2 - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r) of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat ?n2 \\<le> llength E \\<longrightarrow>\n     enat ?n2 \\<le> llength E') \\<and>\n    ltake (enat (?n2 - 1)) E = ltake (enat (?n2 - 1)) E' \\<and>\n    (0 < ?n2 \\<longrightarrow>\n     action_tid E' (?n2 - 1) = action_tid E (?n2 - 1) \\<and>\n     (if ?n2 - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (?n2 - 1)) (action_obs E (?n2 - 1)) \\<and>\n     (\\<forall>i<?n2 - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        ?n2 - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "hence P [simplified]: \"\\<And>n. ?P n (E' n, ws' n)\""], ["proof (prove)\nusing this:\n  case SOME (E', ws').\n          E' \\<in> \\<E> \\<and>\n          P \\<turnstile> (E', ws') \\<surd> \\<and>\n          (enat ?n2 \\<le> llength E \\<longrightarrow>\n           enat ?n2 \\<le> llength E') \\<and>\n          ltake (enat (?n2 - 1)) E = ltake (enat (?n2 - 1)) E' \\<and>\n          (0 < ?n2 \\<longrightarrow>\n           action_tid E' (?n2 - 1) = action_tid E (?n2 - 1) \\<and>\n           (if ?n2 - 1 \\<in> read_actions E then sim_action else (=))\n            (action_obs E' (?n2 - 1)) (action_obs E (?n2 - 1)) \\<and>\n           (\\<forall>i<?n2 - 1.\n               i \\<in> read_actions E \\<longrightarrow>\n               ws' i = ws i)) \\<and>\n          (\\<forall>r\\<in>read_actions E'.\n              ?n2 - 1 \\<le> r \\<longrightarrow>\n              P,E' \\<turnstile> ws' r \\<le>hb r) of\n  (E', ws') \\<Rightarrow>\n    E' \\<in> \\<E> \\<and>\n    P \\<turnstile> (E', ws') \\<surd> \\<and>\n    (enat ?n2 \\<le> llength E \\<longrightarrow>\n     enat ?n2 \\<le> llength E') \\<and>\n    ltake (enat (?n2 - 1)) E = ltake (enat (?n2 - 1)) E' \\<and>\n    (0 < ?n2 \\<longrightarrow>\n     action_tid E' (?n2 - 1) = action_tid E (?n2 - 1) \\<and>\n     (if ?n2 - 1 \\<in> read_actions E then sim_action else (=))\n      (action_obs E' (?n2 - 1)) (action_obs E (?n2 - 1)) \\<and>\n     (\\<forall>i<?n2 - 1.\n         i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n    (\\<forall>r\\<in>read_actions E'.\n        ?n2 - 1 \\<le> r \\<longrightarrow> P,E' \\<turnstile> ws' r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       case (E' n, ws' n) of\n       (E', ws') \\<Rightarrow>\n         E' \\<in> \\<E> \\<and>\n         P \\<turnstile> (E', ws') \\<surd> \\<and>\n         (enat n \\<le> llength E \\<longrightarrow>\n          enat n \\<le> llength E') \\<and>\n         ltake (enat (n - 1)) E = ltake (enat (n - 1)) E' \\<and>\n         (0 < n \\<longrightarrow>\n          action_tid E' (n - 1) = action_tid E (n - 1) \\<and>\n          (if n - 1 \\<in> read_actions E then sim_action else (=))\n           (action_obs E' (n - 1)) (action_obs E (n - 1)) \\<and>\n          (\\<forall>i<n - 1.\n              i \\<in> read_actions E \\<longrightarrow> ws' i = ws i)) \\<and>\n         (\\<forall>r\\<in>read_actions E'.\n             n - 1 \\<le> r \\<longrightarrow>\n             P,E' \\<turnstile> ws' r \\<le>hb r)", "by(simp add: E'_def ws'_def)"], ["proof (state)\nthis:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "{"], ["proof (state)\nthis:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "fix n"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "assume n_E: \"enat n \\<le> llength E\""], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "have \"ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E", "unfolding sim_actions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a')\n     (ltake (enat n) (E' n)) (ltake (enat n) E)", "proof(rule llist_all2_all_lnthI)"], ["proof (state)\ngoal (2 subgoals):\n 1. llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)\n 2. \\<And>na.\n       enat na < llength (ltake (enat n) (E' n)) \\<Longrightarrow>\n       (case lnth (ltake (enat n) (E' n)) na of\n        (t, a) \\<Rightarrow>\n          \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n        (lnth (ltake (enat n) E) na)", "show \"llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)", "using n_E P[of n]"], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)", "by(clarsimp simp add: min_def)"], ["proof (state)\nthis:\n  llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       enat na < llength (ltake (enat n) (E' n)) \\<Longrightarrow>\n       (case lnth (ltake (enat n) (E' n)) na of\n        (t, a) \\<Rightarrow>\n          \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n        (lnth (ltake (enat n) E) na)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       enat na < llength (ltake (enat n) (E' n)) \\<Longrightarrow>\n       (case lnth (ltake (enat n) (E' n)) na of\n        (t, a) \\<Rightarrow>\n          \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n        (lnth (ltake (enat n) E) na)", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       enat na < llength (ltake (enat n) (E' n)) \\<Longrightarrow>\n       (case lnth (ltake (enat n) (E' n)) na of\n        (t, a) \\<Rightarrow>\n          \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n        (lnth (ltake (enat n) E) na)", "assume n': \"enat n' < llength (ltake (enat n) (E' n))\""], ["proof (state)\nthis:\n  enat n' < llength (ltake (enat n) (E' n))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       enat na < llength (ltake (enat n) (E' n)) \\<Longrightarrow>\n       (case lnth (ltake (enat n) (E' n)) na of\n        (t, a) \\<Rightarrow>\n          \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n        (lnth (ltake (enat n) E) na)", "show \"(\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') (lnth (ltake (enat n) (E' n)) n') (lnth (ltake (enat n) E) n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "proof(cases \"n = Suc n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')\n 2. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "case True"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (2 subgoals):\n 1. n = Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')\n 2. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "with P[of n]"], ["proof (chain)\npicking this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n  n = Suc n'", "show ?thesis"], ["proof (prove)\nusing this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "by(simp add: action_tid_def action_obs_def lnth_ltake split: if_split_asm)"], ["proof (state)\nthis:\n  (case lnth (ltake (enat n) (E' n)) n' of\n   (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n   (lnth (ltake (enat n) E) n')\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "case False"], ["proof (state)\nthis:\n  n \\<noteq> Suc n'\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "with n'"], ["proof (chain)\npicking this:\n  enat n' < llength (ltake (enat n) (E' n))\n  n \\<noteq> Suc n'", "have \"n' < n - 1\""], ["proof (prove)\nusing this:\n  enat n' < llength (ltake (enat n) (E' n))\n  n \\<noteq> Suc n'\n\ngoal (1 subgoal):\n 1. n' < n - 1", "by auto"], ["proof (state)\nthis:\n  n' < n - 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "moreover"], ["proof (state)\nthis:\n  n' < n - 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "from P[of n]"], ["proof (chain)\npicking this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)", "have \"lnth (ltake (enat (n - 1)) (E' n)) n' = lnth (ltake (enat (n - 1)) E) n'\""], ["proof (prove)\nusing this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n\ngoal (1 subgoal):\n 1. lnth (ltake (enat (n - 1)) (E' n)) n' = lnth (ltake (enat (n - 1)) E) n'", "by simp"], ["proof (state)\nthis:\n  lnth (ltake (enat (n - 1)) (E' n)) n' = lnth (ltake (enat (n - 1)) E) n'\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc n' \\<Longrightarrow>\n    (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "ultimately"], ["proof (chain)\npicking this:\n  n' < n - 1\n  lnth (ltake (enat (n - 1)) (E' n)) n' = lnth (ltake (enat (n - 1)) E) n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n' < n - 1\n  lnth (ltake (enat (n - 1)) (E' n)) n' = lnth (ltake (enat (n - 1)) E) n'\n\ngoal (1 subgoal):\n 1. (case lnth (ltake (enat n) (E' n)) n' of\n     (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n     (lnth (ltake (enat n) E) n')", "by(simp add: lnth_ltake)"], ["proof (state)\nthis:\n  (case lnth (ltake (enat n) (E' n)) n' of\n   (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n   (lnth (ltake (enat n) E) n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (case lnth (ltake (enat n) (E' n)) n' of\n   (t, a) \\<Rightarrow> \\<lambda>(t', a'). t = t' \\<and> a \\<approx> a')\n   (lnth (ltake (enat n) E) n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "}"], ["proof (state)\nthis:\n  enat ?n2 \\<le> llength E \\<Longrightarrow>\n  ltake (enat ?n2) (E' ?n2) [\\<approx>] ltake (enat ?n2) E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "note sim = this"], ["proof (state)\nthis:\n  enat ?n2 \\<le> llength E \\<Longrightarrow>\n  ltake (enat ?n2) (E' ?n2) [\\<approx>] ltake (enat ?n2) E\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "note len_eq = llist_all2_llengthD[OF this[unfolded sim_actions_def]]"], ["proof (state)\nthis:\n  enat ?n3 \\<le> llength E \\<Longrightarrow>\n  llength (ltake (enat ?n3) (E' ?n3)) = llength (ltake (enat ?n3) E)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "{"], ["proof (state)\nthis:\n  enat ?n3 \\<le> llength E \\<Longrightarrow>\n  llength (ltake (enat ?n3) (E' ?n3)) = llength (ltake (enat ?n3) E)\n\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "fix n"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 5. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 6. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 7. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 9. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 10. \\<And>n r' r r''.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) n)) \\<inter>\n                          committed (commit_for_sc P (E, ws) n);\n         r = action_translation (commit_for_sc P (E, ws) n) r';\n         r'' =\n         inv_into\n          (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n          (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r'') =\n                          ws r\nA total of 14 subgoals...", "show \"wf_action_translation E (?\\<phi> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_action_translation E (commit_for_sc P (E, ws) n)", "proof(cases \"enat n \\<le> llength E\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "case False"], ["proof (state)\nthis:\n  \\<not> enat n \\<le> llength E\n\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. wf_action_translation E (commit_for_sc P (E, ws) n)", "by(simp add: wf_action_translation_on_def)"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "case True"], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "hence \"{..<n} \\<subseteq> actions E\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. {..<n} \\<subseteq> actions E", "by(auto simp add: actions_def min_def less_le_trans[where y=\"enat n\"] split: if_split_asm)"], ["proof (state)\nthis:\n  {..<n} \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "moreover"], ["proof (state)\nthis:\n  {..<n} \\<subseteq> actions E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "from True len_eq[OF True]"], ["proof (chain)\npicking this:\n  enat n \\<le> llength E\n  llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)", "have \"{..<n} \\<subseteq> actions (E' n)\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n  llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)\n\ngoal (1 subgoal):\n 1. {..<n} \\<subseteq> actions (E' n)", "by(auto simp add: actions_def min_def less_le_trans[where y=\"enat n\"] split: if_split_asm)"], ["proof (state)\nthis:\n  {..<n} \\<subseteq> actions (E' n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "moreover"], ["proof (state)\nthis:\n  {..<n} \\<subseteq> actions (E' n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  {..<n} \\<subseteq> actions (E' n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "assume \"a < n\""], ["proof (state)\nthis:\n  a < n\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "moreover"], ["proof (state)\nthis:\n  a < n\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "from sim[OF True]"], ["proof (chain)\npicking this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E", "have \"action_tid (ltake (enat n) (E' n)) a = action_tid (ltake (enat n) E) a\"\n            \"action_obs (ltake (enat n) (E' n)) a \\<approx> action_obs (ltake (enat n) E) a\""], ["proof (prove)\nusing this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (1 subgoal):\n 1. action_tid (ltake (enat n) (E' n)) a =\n    action_tid (ltake (enat n) E) a &&&\n    action_obs (ltake (enat n) (E' n))\n     a \\<approx> action_obs (ltake (enat n) E) a", "by(rule sim_actions_action_tidD sim_actions_action_obsD)+"], ["proof (state)\nthis:\n  action_tid (ltake (enat n) (E' n)) a = action_tid (ltake (enat n) E) a\n  action_obs (ltake (enat n) (E' n))\n   a \\<approx> action_obs (ltake (enat n) E) a\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "ultimately"], ["proof (chain)\npicking this:\n  a < n\n  action_tid (ltake (enat n) (E' n)) a = action_tid (ltake (enat n) E) a\n  action_obs (ltake (enat n) (E' n))\n   a \\<approx> action_obs (ltake (enat n) E) a", "have \"action_tid (E' n) a = action_tid E a\" \"action_obs (E' n) a \\<approx> action_obs E a\""], ["proof (prove)\nusing this:\n  a < n\n  action_tid (ltake (enat n) (E' n)) a = action_tid (ltake (enat n) E) a\n  action_obs (ltake (enat n) (E' n))\n   a \\<approx> action_obs (ltake (enat n) E) a\n\ngoal (1 subgoal):\n 1. action_tid (E' n) a = action_tid E a &&&\n    action_obs (E' n) a \\<approx> action_obs E a", "by(simp_all add: action_tid_def action_obs_def lnth_ltake)"], ["proof (state)\nthis:\n  action_tid (E' n) a = action_tid E a\n  action_obs (E' n) a \\<approx> action_obs E a\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  ?a2 < n \\<Longrightarrow> action_tid (E' n) ?a2 = action_tid E ?a2\n  ?a2 < n \\<Longrightarrow> action_obs (E' n) ?a2 \\<approx> action_obs E ?a2\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    wf_action_translation E (commit_for_sc P (E, ws) n)", "ultimately"], ["proof (chain)\npicking this:\n  {..<n} \\<subseteq> actions E\n  {..<n} \\<subseteq> actions (E' n)\n  ?a2 < n \\<Longrightarrow> action_tid (E' n) ?a2 = action_tid E ?a2\n  ?a2 < n \\<Longrightarrow> action_obs (E' n) ?a2 \\<approx> action_obs E ?a2", "show ?thesis"], ["proof (prove)\nusing this:\n  {..<n} \\<subseteq> actions E\n  {..<n} \\<subseteq> actions (E' n)\n  ?a2 < n \\<Longrightarrow> action_tid (E' n) ?a2 = action_tid E ?a2\n  ?a2 < n \\<Longrightarrow> action_obs (E' n) ?a2 \\<approx> action_obs E ?a2\n\ngoal (1 subgoal):\n 1. wf_action_translation E (commit_for_sc P (E, ws) n)", "by(auto simp add: wf_action_translation_on_def del: subsetI)"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) n)\n\ngoal (13 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 13 subgoals...", "thus \"wf_action_translation E (?\\<phi> n)\""], ["proof (prove)\nusing this:\n  wf_action_translation E (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. wf_action_translation E (commit_for_sc P (E, ws) n)", "."], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) n)\n\ngoal (12 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 12 subgoals...", "}"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) ?n2)\n\ngoal (12 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 12 subgoals...", "note wfa = this"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) ?n2)\n\ngoal (12 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) ?n2)\n\ngoal (12 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 12 subgoals...", "fix n"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 4. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 5. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 6. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 8. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 9. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 10. \\<And>n r'.\n        r' \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n        action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n        \\<in> action_translation (commit_for_sc P (E, ws) n) `\n              committed (commit_for_sc P (E, ws) n) \\<or>\n        P,justifying_exec\n           (commit_for_sc P (E, ws)\n             (Suc n)) \\<turnstile> justifying_ws\n                                    (commit_for_sc P (E, ws) (Suc n))\n                                    r' \\<le>hb r'\nA total of 12 subgoals...", "from P E"], ["proof (chain)\npicking this:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n  E \\<in> \\<E>", "show \"justifying_exec (?\\<phi> n) \\<in> \\<E>\""], ["proof (prove)\nusing this:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n  E \\<in> \\<E>\n\ngoal (1 subgoal):\n 1. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>", "by(cases \"enat n \\<le> llength E\") simp_all"], ["proof (state)\nthis:\n  justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 2. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 5. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 8. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 9. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 10. \\<And>n r' r committed_n.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                          committed (commit_for_sc P (E, ws) (Suc n));\n         r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n         committed_n =\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n        \\<Longrightarrow> r \\<in> committed_n \\<or>\n                          action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n\nA total of 11 subgoals...", "}"], ["proof (state)\nthis:\n  justifying_exec (commit_for_sc P (E, ws) ?n2) \\<in> \\<E>\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 2. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 5. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 8. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 9. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 10. \\<And>n r' r committed_n.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                          committed (commit_for_sc P (E, ws) (Suc n));\n         r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n         committed_n =\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n        \\<Longrightarrow> r \\<in> committed_n \\<or>\n                          action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n\nA total of 11 subgoals...", "note En = this"], ["proof (state)\nthis:\n  justifying_exec (commit_for_sc P (E, ws) ?n2) \\<in> \\<E>\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 2. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 5. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 8. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 9. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 10. \\<And>n r' r committed_n.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                          committed (commit_for_sc P (E, ws) (Suc n));\n         r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n         committed_n =\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n        \\<Longrightarrow> r \\<in> committed_n \\<or>\n                          action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n\nA total of 11 subgoals...", "{"], ["proof (state)\nthis:\n  justifying_exec (commit_for_sc P (E, ws) ?n2) \\<in> \\<E>\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 2. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 5. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 8. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 9. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 10. \\<And>n r' r committed_n.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                          committed (commit_for_sc P (E, ws) (Suc n));\n         r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n         committed_n =\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n        \\<Longrightarrow> r \\<in> committed_n \\<or>\n                          action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n\nA total of 11 subgoals...", "fix n"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 2. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 5. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 7. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 8. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 9. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 10. \\<And>n r' r committed_n.\n        \\<lbrakk>r' \\<in> read_actions\n                           (justifying_exec\n                             (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                          committed (commit_for_sc P (E, ws) (Suc n));\n         r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n         committed_n =\n         action_translation (commit_for_sc P (E, ws) n) `\n         committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n        \\<Longrightarrow> r \\<in> committed_n \\<or>\n                          action_translation\n                           (commit_for_sc P (E, ws) (Suc n))\n                           (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                             r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n\nA total of 11 subgoals...", "from P wf"], ["proof (chain)\npicking this:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n  P \\<turnstile> (E, ws) \\<surd>", "show \"P \\<turnstile> (justifying_exec (?\\<phi> n), justifying_ws (?\\<phi> n)) \\<surd>\""], ["proof (prove)\nusing this:\n  E' ?n \\<in> \\<E> \\<and>\n  is_write_seen P (E' ?n) (ws' ?n) \\<and>\n  thread_start_actions_ok (E' ?n) \\<and>\n  (enat ?n \\<le> llength E \\<longrightarrow>\n   enat ?n \\<le> llength (E' ?n)) \\<and>\n  ltake (enat (?n - Suc 0)) E = ltake (enat (?n - Suc 0)) (E' ?n) \\<and>\n  (0 < ?n \\<longrightarrow>\n   action_tid (E' ?n) (?n - Suc 0) = action_tid E (?n - Suc 0) \\<and>\n   (if ?n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' ?n) (?n - Suc 0)) (action_obs E (?n - Suc 0)) \\<and>\n   (\\<forall>i<?n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' ?n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' ?n).\n      ?n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' ?n \\<turnstile> ws' ?n r \\<le>hb r)\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                    justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>", "by(cases \"enat n \\<le> llength E\") simp_all"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                  justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 3. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 4. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 6. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 7. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 8. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 9. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>a \\<in> external_actions\n                          (justifying_exec (commit_for_sc P (E, ws) n));\n         a' \\<in> committed (commit_for_sc P (E, ws) n);\n         P,justifying_exec\n            (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "thus \"P \\<turnstile> (justifying_exec (?\\<phi> n), justifying_ws (?\\<phi> n)) \\<surd>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                  justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                    justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>", "."], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                  justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 3. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 6. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 7. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 8. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) ?n2),\n                  justifying_ws (commit_for_sc P (E, ws) ?n2)) \\<surd>\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 3. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 6. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 7. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 8. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "note wfn = this"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) ?n2),\n                  justifying_ws (commit_for_sc P (E, ws) ?n2)) \\<surd>\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 3. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 6. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 7. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 8. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) ?n2),\n                  justifying_ws (commit_for_sc P (E, ws) ?n2)) \\<surd>\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 3. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 6. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 7. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 8. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix n"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n.\n       action_translation (commit_for_sc P (E, ws) n) `\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                   committed (commit_for_sc P (E, ws) (Suc n))\n 2. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 3. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 5. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 6. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 7. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 8. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"action_translation (?\\<phi> n) ` committed (?\\<phi> n) \\<subseteq> action_translation (?\\<phi> (Suc n)) ` committed (?\\<phi> (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) n) `\n    committed (commit_for_sc P (E, ws) n)\n    \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n                committed (commit_for_sc P (E, ws) (Suc n))", "by(auto simp add: actions_def less_le_trans[where y=\"enat n\"]) (metis Suc_ile_eq order_less_imp_le)"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n              committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) ?n2) `\n  committed (commit_for_sc P (E, ws) ?n2)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc ?n2)) `\n              committed (commit_for_sc P (E, ws) (Suc ?n2))\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "note committed_subset = this"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) ?n2) `\n  committed (commit_for_sc P (E, ws) ?n2)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc ?n2)) `\n              committed (commit_for_sc P (E, ws) (Suc ?n2))\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) ?n2) `\n  committed (commit_for_sc P (E, ws) ?n2)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc ?n2)) `\n              committed (commit_for_sc P (E, ws) (Suc ?n2))\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix n"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "from len_eq[of n]"], ["proof (chain)\npicking this:\n  enat n \\<le> llength E \\<Longrightarrow>\n  llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)", "have \"enat n \\<le> llength E \\<Longrightarrow> {..<n} \\<subseteq> actions (E' n)\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E \\<Longrightarrow>\n  llength (ltake (enat n) (E' n)) = llength (ltake (enat n) E)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    {..<n} \\<subseteq> actions (E' n)", "by(auto simp add: E'_def actions_def min_def less_le_trans[where y=\"enat n\"] split: if_split_asm)"], ["proof (state)\nthis:\n  enat n \\<le> llength E \\<Longrightarrow> {..<n} \\<subseteq> actions (E' n)\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       committed (commit_for_sc P (E, ws) n)\n       \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n 2. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 4. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 5. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 6. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 7. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 8. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "thus \"committed (?\\<phi> n) \\<subseteq> actions (justifying_exec (?\\<phi> n))\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E \\<Longrightarrow> {..<n} \\<subseteq> actions (E' n)\n\ngoal (1 subgoal):\n 1. committed (commit_for_sc P (E, ws) n)\n    \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))", "by(simp add: actions_def E'_def)"], ["proof (state)\nthis:\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) n))\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 2. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 4. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 5. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 6. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 7. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  committed (commit_for_sc P (E, ws) ?n2)\n  \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) ?n2))\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 2. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 4. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 5. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 6. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 7. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "note committed_actions = this"], ["proof (state)\nthis:\n  committed (commit_for_sc P (E, ws) ?n2)\n  \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) ?n2))\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 2. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 4. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 5. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 6. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 7. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix n"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>n.\n       happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (happens_before P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 2. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 3. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 4. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 5. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 6. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 7. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"happens_before P (justifying_exec (?\\<phi> n)) |` committed (?\\<phi> n) =\n          inv_imageP (happens_before P E) (action_translation (?\\<phi> n)) |` committed (?\\<phi> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "proof(cases \"enat n \\<le> llength E\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "case False"], ["proof (state)\nthis:\n  \\<not> enat n \\<le> llength E\n\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "by simp"], ["proof (state)\nthis:\n  happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (happens_before P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "case True"], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (happens_before P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "proof(safe intro!: ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "assume hb: \"P,justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>hb b\"\n          and a: \"a \\<in> committed (?\\<phi> n)\"\n          and b: \"b \\<in> committed (?\\<phi> n)\""], ["proof (state)\nthis:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from hb True"], ["proof (chain)\npicking this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b\n  enat n \\<le> llength E", "have \"P,E' n \\<turnstile> a \\<le>hb b\""], ["proof (prove)\nusing this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,E' n \\<turnstile> a \\<le>hb b", "by(simp add: E'_def)"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>hb b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "moreover"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>hb b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "note tsok sim[OF True]"], ["proof (state)\nthis:\n  thread_start_actions_ok E\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "moreover"], ["proof (state)\nthis:\n  thread_start_actions_ok E\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from a b True"], ["proof (chain)\npicking this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E", "have \"enat a < enat n\" \"enat b < enat n\""], ["proof (prove)\nusing this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat a < enat n &&& enat b < enat n", "by simp_all"], ["proof (state)\nthis:\n  enat a < enat n\n  enat b < enat n\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "ultimately"], ["proof (chain)\npicking this:\n  P,E' n \\<turnstile> a \\<le>hb b\n  thread_start_actions_ok E\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n  enat a < enat n\n  enat b < enat n", "have \"P,E \\<turnstile> a \\<le>hb b\""], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>hb b\n  thread_start_actions_ok E\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb b", "by(rule happens_before_change_prefix)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>hb xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>hb action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "thus \"P,E \\<turnstile> action_translation (?\\<phi> n) a \\<le>hb action_translation (?\\<phi> n) b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb b\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                      a \\<le>hb action_translation\n                                 (commit_for_sc P (E, ws) n) b", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>hb action_translation (commit_for_sc P (E, ws) n)\n                               b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "assume a: \"a \\<in> committed (?\\<phi> n)\"\n          and b: \"b \\<in> committed (?\\<phi> n)\"\n          and hb: \"P,E \\<turnstile> action_translation (?\\<phi> n) a \\<le>hb action_translation (?\\<phi> n) b\""], ["proof (state)\nthis:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>hb action_translation (commit_for_sc P (E, ws) n)\n                               b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from hb True"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>hb action_translation (commit_for_sc P (E, ws) n)\n                               b\n  enat n \\<le> llength E", "have \"P,E \\<turnstile> a \\<le>hb b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>hb action_translation (commit_for_sc P (E, ws) n)\n                               b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb b", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from wfn[of n] True"], ["proof (chain)\npicking this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                  justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n  enat n \\<le> llength E", "have \"thread_start_actions_ok (E' n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                  justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok (E' n)", "by(simp)"], ["proof (state)\nthis:\n  thread_start_actions_ok (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "moreover"], ["proof (state)\nthis:\n  thread_start_actions_ok (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from sim[OF True]"], ["proof (chain)\npicking this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E", "have \"ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\""], ["proof (prove)\nusing this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (1 subgoal):\n 1. ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)", "by(rule sim_actions_sym)"], ["proof (state)\nthis:\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "moreover"], ["proof (state)\nthis:\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "from a b True"], ["proof (chain)\npicking this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E", "have \"enat a < enat n\" \"enat b < enat n\""], ["proof (prove)\nusing this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat a < enat n &&& enat b < enat n", "by simp_all"], ["proof (state)\nthis:\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> a \\<le>hb b\n  thread_start_actions_ok (E' n)\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n  enat a < enat n\n  enat b < enat n", "have \"P,E' n \\<turnstile> a \\<le>hb b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb b\n  thread_start_actions_ok (E' n)\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. P,E' n \\<turnstile> a \\<le>hb b", "by(rule happens_before_change_prefix)"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>hb b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>hb action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>hb xa", "thus \"P,justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>hb b\""], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>hb b\n\ngoal (1 subgoal):\n 1. P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b", "using True"], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>hb b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b", "by(simp add: E'_def)"], ["proof (state)\nthis:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (happens_before P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  happens_before P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (happens_before P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (6 subgoals):\n 1. \\<And>n.\n       sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n) =\n       inv_imageP (sync_order P E)\n        (action_translation (commit_for_sc P (E, ws) n)) |`\n       committed (commit_for_sc P (E, ws) n)\n 2. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 3. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 4. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 5. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 6. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"sync_order P (justifying_exec (?\\<phi> n)) |` committed (?\\<phi> n) =\n      inv_imageP (sync_order P E) (action_translation (?\\<phi> n)) |` committed (?\\<phi> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "proof(cases \"enat n \\<le> llength E\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "case False"], ["proof (state)\nthis:\n  \\<not> enat n \\<le> llength E\n\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "by simp"], ["proof (state)\nthis:\n  sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (sync_order P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "case True"], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n) =\n    inv_imageP (sync_order P E)\n     (action_translation (commit_for_sc P (E, ws) n)) |`\n    committed (commit_for_sc P (E, ws) n)", "proof(safe intro!: ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "assume hb: \"P,justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>so b\"\n          and a: \"a \\<in> committed (?\\<phi> n)\"\n          and b: \"b \\<in> committed (?\\<phi> n)\""], ["proof (state)\nthis:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "from hb True"], ["proof (chain)\npicking this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b\n  enat n \\<le> llength E", "have \"P,E' n \\<turnstile> a \\<le>so b\""], ["proof (prove)\nusing this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,E' n \\<turnstile> a \\<le>so b", "by(simp add: E'_def)"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>so b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "moreover"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>so b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "note sim[OF True]"], ["proof (state)\nthis:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "moreover"], ["proof (state)\nthis:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "from a b True"], ["proof (chain)\npicking this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E", "have \"enat a < enat n\" \"enat b < enat n\""], ["proof (prove)\nusing this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat a < enat n &&& enat b < enat n", "by simp_all"], ["proof (state)\nthis:\n  enat a < enat n\n  enat b < enat n\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "ultimately"], ["proof (chain)\npicking this:\n  P,E' n \\<turnstile> a \\<le>so b\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n  enat a < enat n\n  enat b < enat n", "have \"P,E \\<turnstile> a \\<le>so b\""], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>so b\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>so b", "by(rule sync_order_change_prefix)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>so b\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> x \\<le>so xa;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> action_translation\n     (commit_for_sc P (E, ws) n)\n     x \\<le>so action_translation (commit_for_sc P (E, ws) n) xa\n 2. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "thus \"P,E \\<turnstile> action_translation (?\\<phi> n) a \\<le>so action_translation (?\\<phi> n) b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so b\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                      a \\<le>so action_translation\n                                 (commit_for_sc P (E, ws) n) b", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>so action_translation (commit_for_sc P (E, ws) n)\n                               b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "assume a: \"a \\<in> committed (?\\<phi> n)\"\n          and b: \"b \\<in> committed (?\\<phi> n)\"\n          and hb: \"P,E \\<turnstile> action_translation (?\\<phi> n) a \\<le>so action_translation (?\\<phi> n) b\""], ["proof (state)\nthis:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>so action_translation (commit_for_sc P (E, ws) n)\n                               b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "from hb True"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>so action_translation (commit_for_sc P (E, ws) n)\n                               b\n  enat n \\<le> llength E", "have \"P,E \\<turnstile> a \\<le>so b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                    a \\<le>so action_translation (commit_for_sc P (E, ws) n)\n                               b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>so b", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>so b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>so b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "from sim[OF True]"], ["proof (chain)\npicking this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E", "have \"ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\""], ["proof (prove)\nusing this:\n  ltake (enat n) (E' n) [\\<approx>] ltake (enat n) E\n\ngoal (1 subgoal):\n 1. ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)", "by(rule sim_actions_sym)"], ["proof (state)\nthis:\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "moreover"], ["proof (state)\nthis:\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "from a b True"], ["proof (chain)\npicking this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E", "have \"enat a < enat n\" \"enat b < enat n\""], ["proof (prove)\nusing this:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n  b \\<in> committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat a < enat n &&& enat b < enat n", "by simp_all"], ["proof (state)\nthis:\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> a \\<le>so b\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n  enat a < enat n\n  enat b < enat n", "have \"P,E' n \\<turnstile> a \\<le>so b\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so b\n  ltake (enat n) E [\\<approx>] ltake (enat n) (E' n)\n  enat a < enat n\n  enat b < enat n\n\ngoal (1 subgoal):\n 1. P,E' n \\<turnstile> a \\<le>so b", "by(rule sync_order_change_prefix)"], ["proof (state)\nthis:\n  P,E' n \\<turnstile> a \\<le>so b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>enat n \\<le> llength E;\n        x \\<in> committed (commit_for_sc P (E, ws) n);\n        xa \\<in> committed (commit_for_sc P (E, ws) n);\n        P,E \\<turnstile> action_translation (commit_for_sc P (E, ws) n)\n                          x \\<le>so action_translation\n                                     (commit_for_sc P (E, ws) n) xa\\<rbrakk>\n       \\<Longrightarrow> P,justifying_exec\n                            (commit_for_sc P (E, ws)\n                              n) \\<turnstile> x \\<le>so xa", "thus \"P,justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>so b\""], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>so b\n\ngoal (1 subgoal):\n 1. P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b", "using True"], ["proof (prove)\nusing this:\n  P,E' n \\<turnstile> a \\<le>so b\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b", "by(simp add: E'_def)"], ["proof (state)\nthis:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>so b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (sync_order P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (sync_order P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (5 subgoals):\n 1. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 2. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 3. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 4. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 5. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  sync_order P (justifying_exec (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n) =\n  inv_imageP (sync_order P E)\n   (action_translation (commit_for_sc P (E, ws) n)) |`\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (5 subgoals):\n 1. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 2. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 3. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 4. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 5. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix w w' adal"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 2. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 3. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 4. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 5. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "assume w: \"w \\<in> write_actions (justifying_exec (?\\<phi> n)) \\<inter> committed (?\\<phi> n)\"\n        and w': \"w' = action_translation (?\\<phi> n) w\"\n        and adal: \"adal \\<in> action_loc P E w'\""], ["proof (state)\nthis:\n  w \\<in> write_actions\n           (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n          committed (commit_for_sc P (E, ws) n)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  adal \\<in> action_loc P E w'\n\ngoal (5 subgoals):\n 1. \\<And>n w w' adal.\n       \\<lbrakk>w \\<in> write_actions\n                         (justifying_exec\n                           (commit_for_sc P (E, ws) n)) \\<inter>\n                        committed (commit_for_sc P (E, ws) n);\n        w' = action_translation (commit_for_sc P (E, ws) n) w;\n        adal \\<in> action_loc P E w'\\<rbrakk>\n       \\<Longrightarrow> value_written P\n                          (justifying_exec (commit_for_sc P (E, ws) n)) w\n                          adal =\n                         value_written P E w' adal\n 2. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 3. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 4. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 5. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"value_written P (justifying_exec (?\\<phi> n)) w adal = value_written P E w' adal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "proof(cases \"enat n \\<le> llength E\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "case False"], ["proof (state)\nthis:\n  \\<not> enat n \\<le> llength E\n\ngoal (2 subgoals):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal\n 2. \\<not> enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "using w'"], ["proof (prove)\nusing this:\n  \\<not> enat n \\<le> llength E\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n\ngoal (1 subgoal):\n 1. value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "by simp"], ["proof (state)\nthis:\n  value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n  value_written P E w' adal\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "case True"], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "note n_E = this"], ["proof (state)\nthis:\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "have \"action_obs E w = action_obs (E' n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_obs E w = action_obs (E' n) w", "proof(cases \"w < n - 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w\n 2. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "case True"], ["proof (state)\nthis:\n  w < n - 1\n\ngoal (2 subgoals):\n 1. w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w\n 2. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "with P[of n] w' n_E"], ["proof (chain)\npicking this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  enat n \\<le> llength E\n  w < n - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  enat n \\<le> llength E\n  w < n - 1\n\ngoal (1 subgoal):\n 1. action_obs E w = action_obs (E' n) w", "by(clarsimp simp add: action_obs_change_prefix_eq)"], ["proof (state)\nthis:\n  action_obs E w = action_obs (E' n) w\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "case False"], ["proof (state)\nthis:\n  \\<not> w < n - 1\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "with w True"], ["proof (chain)\npicking this:\n  w \\<in> write_actions\n           (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n          committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n  \\<not> w < n - 1", "have \"w = n - 1\" \"n > 0\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions\n           (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n          committed (commit_for_sc P (E, ws) n)\n  enat n \\<le> llength E\n  \\<not> w < n - 1\n\ngoal (1 subgoal):\n 1. w = n - 1 &&& 0 < n", "by auto"], ["proof (state)\nthis:\n  w = n - 1\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "moreover"], ["proof (state)\nthis:\n  w = n - 1\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "with True"], ["proof (chain)\npicking this:\n  enat n \\<le> llength E\n  w = n - 1\n  0 < n", "have \"w \\<in> actions E\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n  w = n - 1\n  0 < n\n\ngoal (1 subgoal):\n 1. w \\<in> actions E", "by(simp add: actions_def)(metis Suc_ile_eq Suc_pred)"], ["proof (state)\nthis:\n  w \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "with True w wf_action_translation_on_actionD[OF wfa, of w n] w'"], ["proof (chain)\npicking this:\n  enat n \\<le> llength E\n  w \\<in> write_actions\n           (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n          committed (commit_for_sc P (E, ws) n)\n  w \\<in> committed (commit_for_sc P (E, ws) n) \\<Longrightarrow>\n  action_tid (justifying_exec (commit_for_sc P (E, ws) n)) w =\n  action_tid E (action_translation (commit_for_sc P (E, ws) n) w) \\<and>\n  action_obs (justifying_exec (commit_for_sc P (E, ws) n))\n   w \\<approx> action_obs E\n                (action_translation (commit_for_sc P (E, ws) n) w)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  w \\<in> actions E", "have \"w' \\<in> write_actions E\""], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n  w \\<in> write_actions\n           (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n          committed (commit_for_sc P (E, ws) n)\n  w \\<in> committed (commit_for_sc P (E, ws) n) \\<Longrightarrow>\n  action_tid (justifying_exec (commit_for_sc P (E, ws) n)) w =\n  action_tid E (action_translation (commit_for_sc P (E, ws) n) w) \\<and>\n  action_obs (justifying_exec (commit_for_sc P (E, ws) n))\n   w \\<approx> action_obs E\n                (action_translation (commit_for_sc P (E, ws) n) w)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  w \\<in> actions E\n\ngoal (1 subgoal):\n 1. w' \\<in> write_actions E", "by(auto intro!: write_actions.intros elim!: write_actions.cases is_write_action.cases)"], ["proof (state)\nthis:\n  w' \\<in> write_actions E\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "hence \"w' \\<notin> read_actions E\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E\n\ngoal (1 subgoal):\n 1. w' \\<notin> read_actions E", "by(blast dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  w' \\<notin> read_actions E\n\ngoal (1 subgoal):\n 1. \\<not> w < n - 1 \\<Longrightarrow> action_obs E w = action_obs (E' n) w", "ultimately"], ["proof (chain)\npicking this:\n  w = n - 1\n  0 < n\n  w' \\<notin> read_actions E", "show ?thesis"], ["proof (prove)\nusing this:\n  w = n - 1\n  0 < n\n  w' \\<notin> read_actions E\n\ngoal (1 subgoal):\n 1. action_obs E w = action_obs (E' n) w", "using P[of n] w' True"], ["proof (prove)\nusing this:\n  w = n - 1\n  0 < n\n  w' \\<notin> read_actions E\n  E' n \\<in> \\<E> \\<and>\n  is_write_seen P (E' n) (ws' n) \\<and>\n  thread_start_actions_ok (E' n) \\<and>\n  (enat n \\<le> llength E \\<longrightarrow>\n   enat n \\<le> llength (E' n)) \\<and>\n  ltake (enat (n - Suc 0)) E = ltake (enat (n - Suc 0)) (E' n) \\<and>\n  (0 < n \\<longrightarrow>\n   action_tid (E' n) (n - Suc 0) = action_tid E (n - Suc 0) \\<and>\n   (if n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' n) (n - Suc 0)) (action_obs E (n - Suc 0)) \\<and>\n   (\\<forall>i<n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow> ws' n i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' n).\n      n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' n \\<turnstile> ws' n r \\<le>hb r)\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  enat n \\<le> llength E\n\ngoal (1 subgoal):\n 1. action_obs E w = action_obs (E' n) w", "by clarsimp"], ["proof (state)\nthis:\n  action_obs E w = action_obs (E' n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  action_obs E w = action_obs (E' n) w\n\ngoal (1 subgoal):\n 1. enat n \\<le> llength E \\<Longrightarrow>\n    value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "with True w'"], ["proof (chain)\npicking this:\n  enat n \\<le> llength E\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  action_obs E w = action_obs (E' n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  enat n \\<le> llength E\n  w' = action_translation (commit_for_sc P (E, ws) n) w\n  action_obs E w = action_obs (E' n) w\n\ngoal (1 subgoal):\n 1. value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n    value_written P E w' adal", "by(cases adal)(simp add: value_written.simps)"], ["proof (state)\nthis:\n  value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n  value_written P E w' adal\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  value_written P (justifying_exec (commit_for_sc P (E, ws) n)) w adal =\n  value_written P E w' adal\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?w2\n           \\<in> write_actions\n                  (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n                 committed (commit_for_sc P (E, ws) n);\n   ?w'2 = action_translation (commit_for_sc P (E, ws) n) ?w2;\n   ?adal2 \\<in> action_loc P E ?w'2\\<rbrakk>\n  \\<Longrightarrow> value_written P\n                     (justifying_exec (commit_for_sc P (E, ws) n)) ?w2\n                     ?adal2 =\n                    value_written P E ?w'2 ?adal2\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?w2\n           \\<in> write_actions\n                  (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n                 committed (commit_for_sc P (E, ws) n);\n   ?w'2 = action_translation (commit_for_sc P (E, ws) n) ?w2;\n   ?adal2 \\<in> action_loc P E ?w'2\\<rbrakk>\n  \\<Longrightarrow> value_written P\n                     (justifying_exec (commit_for_sc P (E, ws) n)) ?w2\n                     ?adal2 =\n                    value_written P E ?w'2 ?adal2\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix r' r r''"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "assume r': \"r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter> committed (?\\<phi> n)\"\n        and r: \"r = action_translation (?\\<phi> n) r'\"\n        and r'': \"r'' = inv_into (actions (justifying_exec (?\\<phi> (Suc n)))) (action_translation (?\\<phi> (Suc n))) r\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  r'' =\n  inv_into (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n   (action_translation (commit_for_sc P (E, ws) (Suc n))) r\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "from r' r committed_subset[of n]"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n              committed (commit_for_sc P (E, ws) (Suc n))", "have \"r \\<in> actions E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n              committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> actions E", "by(auto split: if_split_asm elim!: read_actions.cases simp add: actions_def Suc_ile_eq less_trans[where y=\"enat n\"])"], ["proof (state)\nthis:\n  r \\<in> actions E\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "with r' r"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  r \\<in> actions E", "have r_actions: \"r \\<in> read_actions E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  r \\<in> actions E\n\ngoal (1 subgoal):\n 1. r \\<in> read_actions E", "by(fastforce dest: wf_action_translation_on_actionD[OF wfa] split: if_split_asm elim!: read_actions.cases intro: read_actions.intros)"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "moreover"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "from r' committed_subset[of n] committed_actions[of \"Suc n\"]"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n              committed (commit_for_sc P (E, ws) (Suc n))\n  committed (commit_for_sc P (E, ws) (Suc n))\n  \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))", "have \"r' \\<in> actions (justifying_exec (?\\<phi> (Suc n)))\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  \\<subseteq> action_translation (commit_for_sc P (E, ws) (Suc n)) `\n              committed (commit_for_sc P (E, ws) (Suc n))\n  committed (commit_for_sc P (E, ws) (Suc n))\n  \\<subseteq> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. r' \\<in> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))", "by(auto split: if_split_asm elim: read_actions.cases)"], ["proof (state)\nthis:\n  r' \\<in> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> read_actions E\n  r' \\<in> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))", "have \"r'' = r'\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  r' \\<in> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. r'' = r'", "using r' r r''"], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  r' \\<in> actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  r'' =\n  inv_into (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n   (action_translation (commit_for_sc P (E, ws) (Suc n))) r\n\ngoal (1 subgoal):\n 1. r'' = r'", "by(cases \"enat (Suc n) \\<le> llength E\") simp_all"], ["proof (state)\nthis:\n  r'' = r'\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "moreover"], ["proof (state)\nthis:\n  r'' = r'\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)", "have \"r' < n\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. r' < n", "by(simp add: actions_def split: if_split_asm)(metis enat_ord_code(2) linorder_linear order_less_le_trans)"], ["proof (state)\nthis:\n  r' < n\n\ngoal (4 subgoals):\n 1. \\<And>n r' r r''.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) n)) \\<inter>\n                         committed (commit_for_sc P (E, ws) n);\n        r = action_translation (commit_for_sc P (E, ws) n) r';\n        r'' =\n        inv_into\n         (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n         (action_translation (commit_for_sc P (E, ws) (Suc n))) r\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r'') =\n                         ws r\n 2. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 3. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 4. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "ultimately"], ["proof (chain)\npicking this:\n  r'' = r'\n  r' < n", "show \"action_translation (?\\<phi> (Suc n)) (justifying_ws (?\\<phi> (Suc n)) r'') = ws r\""], ["proof (prove)\nusing this:\n  r'' = r'\n  r' < n\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r'') =\n    ws r", "using P[of \"Suc n\"] r' r r_actions"], ["proof (prove)\nusing this:\n  r'' = r'\n  r' < n\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n           committed (commit_for_sc P (E, ws) n)\n  r = action_translation (commit_for_sc P (E, ws) n) r'\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r'') =\n    ws r", "by(clarsimp split: if_split_asm)"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r'') =\n  ws r\n\ngoal (3 subgoals):\n 1. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 2. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 3. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r'2\n           \\<in> read_actions\n                  (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n                 committed (commit_for_sc P (E, ws) n);\n   ?r2 = action_translation (commit_for_sc P (E, ws) n) ?r'2;\n   ?r''2 =\n   inv_into (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n    (action_translation (commit_for_sc P (E, ws) (Suc n))) ?r2\\<rbrakk>\n  \\<Longrightarrow> action_translation (commit_for_sc P (E, ws) (Suc n))\n                     (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                       ?r''2) =\n                    ws ?r2\n\ngoal (3 subgoals):\n 1. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 2. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 3. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?r'2\n           \\<in> read_actions\n                  (justifying_exec (commit_for_sc P (E, ws) n)) \\<inter>\n                 committed (commit_for_sc P (E, ws) n);\n   ?r2 = action_translation (commit_for_sc P (E, ws) n) ?r'2;\n   ?r''2 =\n   inv_into (actions (justifying_exec (commit_for_sc P (E, ws) (Suc n))))\n    (action_translation (commit_for_sc P (E, ws) (Suc n))) ?r2\\<rbrakk>\n  \\<Longrightarrow> action_translation (commit_for_sc P (E, ws) (Suc n))\n                     (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                       ?r''2) =\n                    ws ?r2\n\ngoal (3 subgoals):\n 1. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 2. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 3. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix r'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 2. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 3. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "assume r': \"r' \\<in> read_actions (justifying_exec (?\\<phi> (Suc n)))\""], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (3 subgoals):\n 1. \\<And>n r'.\n       r' \\<in> read_actions\n                 (justifying_exec\n                   (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n       action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n       \\<in> action_translation (commit_for_sc P (E, ws) n) `\n             committed (commit_for_sc P (E, ws) n) \\<or>\n       P,justifying_exec\n          (commit_for_sc P (E, ws)\n            (Suc n)) \\<turnstile> justifying_ws\n                                   (commit_for_sc P (E, ws) (Suc n))\n                                   r' \\<le>hb r'\n 2. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 3. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"action_translation (?\\<phi> (Suc n)) r' \\<in> action_translation (?\\<phi> n) ` committed (?\\<phi> n) \\<or>\n            P,justifying_exec (?\\<phi> (Suc n)) \\<turnstile> justifying_ws (?\\<phi> (Suc n)) r' \\<le>hb r'\" (is \"?committed \\<or> ?hb\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "proof(cases \"r' < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'\n 2. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "case True"], ["proof (state)\nthis:\n  r' < n\n\ngoal (2 subgoals):\n 1. r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'\n 2. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "hence \"?committed\""], ["proof (prove)\nusing this:\n  r' < n\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n)", "using r'"], ["proof (prove)\nusing this:\n  r' < n\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n)", "by(auto elim!: actionsE split: if_split_asm dest!: read_actions_actions)(metis Suc_ile_eq linorder_not_le not_less_iff_gr_or_eq)"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\n\ngoal (2 subgoals):\n 1. r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'\n 2. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", ".."], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n) \\<or>\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "case False"], ["proof (state)\nthis:\n  \\<not> r' < n\n\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "hence \"r' \\<ge> n\""], ["proof (prove)\nusing this:\n  \\<not> r' < n\n\ngoal (1 subgoal):\n 1. n \\<le> r'", "by simp"], ["proof (state)\nthis:\n  n \\<le> r'\n\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "hence \"enat (Suc n) \\<le> llength E\""], ["proof (prove)\nusing this:\n  n \\<le> r'\n\ngoal (1 subgoal):\n 1. enat (Suc n) \\<le> llength E", "using False r'"], ["proof (prove)\nusing this:\n  n \\<le> r'\n  \\<not> r' < n\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. enat (Suc n) \\<le> llength E", "by(auto split: if_split_asm dest!: read_actions_actions elim!: actionsE) (metis Suc_ile_eq enat_ord_code(2) not_le_imp_less order_less_le_trans)"], ["proof (state)\nthis:\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "hence ?hb"], ["proof (prove)\nusing this:\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "using P[of \"Suc n\"] r' \\<open>r' \\<ge> n\\<close>"], ["proof (prove)\nusing this:\n  enat (Suc n) \\<le> llength E\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  n \\<le> r'\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "by simp"], ["proof (state)\nthis:\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> r' < n \\<Longrightarrow>\n    action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n    \\<in> action_translation (commit_for_sc P (E, ws) n) `\n          committed (commit_for_sc P (E, ws) n) \\<or>\n    P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> justifying_ws\n                                (commit_for_sc P (E, ws) (Suc n))\n                                r' \\<le>hb r'", ".."], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n) \\<or>\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              r' \\<le>hb r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n) \\<or>\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              r' \\<le>hb r'\n\ngoal (2 subgoals):\n 1. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 2. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n  action_translation (commit_for_sc P (E, ws) (Suc n)) ?r'2\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n) \\<or>\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (2 subgoals):\n 1. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 2. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           (commit_for_sc P (E, ws) (Suc n))) \\<Longrightarrow>\n  action_translation (commit_for_sc P (E, ws) (Suc n)) ?r'2\n  \\<in> action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n) \\<or>\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (2 subgoals):\n 1. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 2. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix r' r C_n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 2. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "assume r': \"r' \\<in> read_actions (justifying_exec (?\\<phi> (Suc n))) \\<inter> committed (?\\<phi> (Suc n))\"\n        and r: \"r = action_translation (?\\<phi> (Suc n)) r'\"\n        and C_n: \"C_n = action_translation (?\\<phi> n) ` committed (?\\<phi> n)\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n\ngoal (2 subgoals):\n 1. \\<And>n r' r committed_n.\n       \\<lbrakk>r' \\<in> read_actions\n                          (justifying_exec\n                            (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                         committed (commit_for_sc P (E, ws) (Suc n));\n        r = action_translation (commit_for_sc P (E, ws) (Suc n)) r';\n        committed_n =\n        action_translation (commit_for_sc P (E, ws) n) `\n        committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> committed_n \\<or>\n                         action_translation\n                          (commit_for_sc P (E, ws) (Suc n))\n                          (justifying_ws (commit_for_sc P (E, ws) (Suc n))\n                            r')\n                         \\<in> committed_n \\<and>\n                         ws r \\<in> committed_n\n 2. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "show \"r \\<in> C_n \\<or> action_translation (?\\<phi> (Suc n)) (justifying_ws (?\\<phi> (Suc n)) r') \\<in> C_n \\<and> ws r \\<in> C_n\"\n        (is \"_ \\<or> (?C_ws_n \\<and> ?C_ws)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "proof(cases \"r \\<in> C_n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n\n 2. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "case True"], ["proof (state)\nthis:\n  r \\<in> C_n\n\ngoal (2 subgoals):\n 1. r \\<in> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n\n 2. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", ".."], ["proof (state)\nthis:\n  r \\<in> C_n \\<or>\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n \\<and>\n  ws r \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "case False"], ["proof (state)\nthis:\n  r \\<notin> C_n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with r' r C_n"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  r \\<notin> C_n", "have [simp]: \"r' = n\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  r \\<notin> C_n\n\ngoal (1 subgoal):\n 1. r' = n", "apply(auto split: if_split_asm dest!: read_actions_actions elim!: actionsE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>r' \\<notin> actions E; enat (Suc n) \\<le> llength E; r = r';\n     \\<not> enat n \\<le> llength E; r' < Suc n; C_n = actions E;\n     enat r' < llength (E' (Suc n))\\<rbrakk>\n    \\<Longrightarrow> r' = n\n 2. \\<lbrakk>\\<not> r' < n; \\<not> enat (Suc n) \\<le> llength E; r = r';\n     enat n \\<le> llength E; C_n = {..<n}; enat r' < llength E\\<rbrakk>\n    \\<Longrightarrow> r' = n", "apply(metis enat_ord_code(1) less_SucI less_eq_Suc_le not_less_eq_eq order_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> r' < n; \\<not> enat (Suc n) \\<le> llength E; r = r';\n     enat n \\<le> llength E; C_n = {..<n}; enat r' < llength E\\<rbrakk>\n    \\<Longrightarrow> r' = n", "by (metis Suc_ile_eq enat_ord_code(1) leD leI linorder_cases)"], ["proof (state)\nthis:\n  r' = n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))", "have len_E: \"enat (Suc n) \\<le> llength E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. enat (Suc n) \\<le> llength E", "by(clarsimp simp add: actions_def Suc_ile_eq split: if_split_asm)"], ["proof (state)\nthis:\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with r' P[of \"Suc n\"]"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  enat (Suc n) \\<le> llength E", "have \"P,justifying_exec (?\\<phi> (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>hb r'", "by(simp)"], ["proof (state)\nthis:\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "hence \"justifying_exec (?\\<phi> (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'\""], ["proof (prove)\nusing this:\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. justifying_exec\n     (commit_for_sc P (E, ws) (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'", "by(rule happens_before_into_action_order)"], ["proof (state)\nthis:\n  justifying_exec\n   (commit_for_sc P (E, ws) (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  justifying_exec\n   (commit_for_sc P (E, ws) (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))", "have \"r' \\<in> read_actions (justifying_exec (?\\<phi> (Suc n)))\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions\n              (justifying_exec (commit_for_sc P (E, ws) (Suc n)))", "by simp"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "then"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))", "obtain ad al v where \"action_obs (justifying_exec (?\\<phi> (Suc n))) r' = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with wfn[of \"Suc n\"] \\<open>r' \\<in> read_actions _\\<close> len_E"], ["proof (chain)\npicking this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) (Suc n)),\n                  justifying_ws (commit_for_sc P (E, ws) (Suc n))) \\<surd>\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  enat (Suc n) \\<le> llength E\n  action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n  NormalAction (ReadMem ad al v)", "obtain adal \n          where \"ws' (Suc n) r' \\<in> write_actions (justifying_exec (?\\<phi> (Suc n)))\"\n          and \"adal \\<in> action_loc P (justifying_exec (?\\<phi> (Suc n))) r'\"\n          and \"adal \\<in> action_loc P (justifying_exec (?\\<phi> (Suc n))) (ws' (Suc n) r')\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) (Suc n)),\n                  justifying_ws (commit_for_sc P (E, ws) (Suc n))) \\<surd>\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  enat (Suc n) \\<le> llength E\n  action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (\\<And>adal.\n        \\<lbrakk>ws' (Suc n) r'\n                 \\<in> write_actions\n                        (justifying_exec (commit_for_sc P (E, ws) (Suc n)));\n         adal\n         \\<in> action_loc P\n                (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r';\n         adal\n         \\<in> action_loc P\n                (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n                (ws' (Suc n) r')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp)(auto dest: is_write_seenD)"], ["proof (state)\nthis:\n  ws' (Suc n) r'\n  \\<in> write_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r'\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n         (ws' (Suc n) r')\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  ws' (Suc n) r'\n  \\<in> write_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r'\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n         (ws' (Suc n) r')\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "{"], ["proof (state)\nthis:\n  ws' (Suc n) r'\n  \\<in> write_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r'\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n         (ws' (Suc n) r')\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from En[of \"Suc n\"] len_E"], ["proof (chain)\npicking this:\n  justifying_exec (commit_for_sc P (E, ws) (Suc n)) \\<in> \\<E>\n  enat (Suc n) \\<le> llength E", "have \"E' (Suc n) \\<in> \\<E>\""], ["proof (prove)\nusing this:\n  justifying_exec (commit_for_sc P (E, ws) (Suc n)) \\<in> \\<E>\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. E' (Suc n) \\<in> \\<E>", "by simp"], ["proof (state)\nthis:\n  E' (Suc n) \\<in> \\<E>\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  E' (Suc n) \\<in> \\<E>\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "assume \"a \\<in> read_actions (justifying_exec (?\\<phi> (Suc n)))\" and \"a < r'\""], ["proof (state)\nthis:\n  a \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  a < r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "hence \"a \\<in> read_actions (E' (Suc n))\" \"enat a < enat (Suc n)\""], ["proof (prove)\nusing this:\n  a \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  a < r'\n\ngoal (1 subgoal):\n 1. a \\<in> read_actions (E' (Suc n)) &&& enat a < enat (Suc n)", "using len_E"], ["proof (prove)\nusing this:\n  a \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  a < r'\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. a \\<in> read_actions (E' (Suc n)) &&& enat a < enat (Suc n)", "by simp_all"], ["proof (state)\nthis:\n  a \\<in> read_actions (E' (Suc n))\n  enat a < enat (Suc n)\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with sim[OF len_E]"], ["proof (chain)\npicking this:\n  ltake (enat (Suc n)) (E' (Suc n)) [\\<approx>] ltake (enat (Suc n)) E\n  a \\<in> read_actions (E' (Suc n))\n  enat a < enat (Suc n)", "have a: \"a \\<in> read_actions E\""], ["proof (prove)\nusing this:\n  ltake (enat (Suc n)) (E' (Suc n)) [\\<approx>] ltake (enat (Suc n)) E\n  a \\<in> read_actions (E' (Suc n))\n  enat a < enat (Suc n)\n\ngoal (1 subgoal):\n 1. a \\<in> read_actions E", "by -(rule read_actions_change_prefix)"], ["proof (state)\nthis:\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with \\<open>a < r'\\<close>"], ["proof (chain)\npicking this:\n  a < r'\n  a \\<in> read_actions E", "have mrw: \"P,E \\<turnstile> a \\<leadsto>mrw ws a\""], ["proof (prove)\nusing this:\n  a < r'\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<leadsto>mrw ws a", "using sc"], ["proof (prove)\nusing this:\n  a < r'\n  a \\<in> read_actions E\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<leadsto>mrw ws a", "by(simp add: sequentially_consistent_def)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<leadsto>mrw ws a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from P[of \"Suc n\"] \\<open>a < r'\\<close> a len_E"], ["proof (chain)\npicking this:\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  a < r'\n  a \\<in> read_actions E\n  enat (Suc n) \\<le> llength E", "have \"ws a = ws' (Suc n) a\""], ["proof (prove)\nusing this:\n  E' (Suc n) \\<in> \\<E> \\<and>\n  is_write_seen P (E' (Suc n)) (ws' (Suc n)) \\<and>\n  thread_start_actions_ok (E' (Suc n)) \\<and>\n  (enat (Suc n) \\<le> llength E \\<longrightarrow>\n   enat (Suc n) \\<le> llength (E' (Suc n))) \\<and>\n  ltake (enat (Suc n - Suc 0)) E =\n  ltake (enat (Suc n - Suc 0)) (E' (Suc n)) \\<and>\n  (0 < Suc n \\<longrightarrow>\n   action_tid (E' (Suc n)) (Suc n - Suc 0) =\n   action_tid E (Suc n - Suc 0) \\<and>\n   (if Suc n - Suc 0 \\<in> read_actions E then sim_action else (=))\n    (action_obs (E' (Suc n)) (Suc n - Suc 0))\n    (action_obs E (Suc n - Suc 0)) \\<and>\n   (\\<forall>i<Suc n - Suc 0.\n       i \\<in> read_actions E \\<longrightarrow>\n       ws' (Suc n) i = ws i)) \\<and>\n  (\\<forall>r\\<in>read_actions (E' (Suc n)).\n      Suc n - Suc 0 \\<le> r \\<longrightarrow>\n      P,E' (Suc n) \\<turnstile> ws' (Suc n) r \\<le>hb r)\n  a < r'\n  a \\<in> read_actions E\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. ws a = ws' (Suc n) a", "by simp"], ["proof (state)\nthis:\n  ws a = ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with mrw"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> a \\<leadsto>mrw ws a\n  ws a = ws' (Suc n) a", "have mrw': \"P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<leadsto>mrw ws a\n  ws a = ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from wfn[of \"Suc n\"] wf len_E"], ["proof (chain)\npicking this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) (Suc n)),\n                  justifying_ws (commit_for_sc P (E, ws) (Suc n))) \\<surd>\n  P \\<turnstile> (E, ws) \\<surd>\n  enat (Suc n) \\<le> llength E", "have \"thread_start_actions_ok (E' (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) (Suc n)),\n                  justifying_ws (commit_for_sc P (E, ws) (Suc n))) \\<surd>\n  P \\<turnstile> (E, ws) \\<surd>\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok (E' (Suc n))", "by(simp)"], ["proof (state)\nthis:\n  thread_start_actions_ok (E' (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  thread_start_actions_ok (E' (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "note sim[OF len_E, symmetric]"], ["proof (state)\nthis:\n  ltake (enat (Suc n)) E [\\<approx>] ltake (enat (Suc n)) (E' (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  ltake (enat (Suc n)) E [\\<approx>] ltake (enat (Suc n)) (E' (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from E wf mrw'"], ["proof (chain)\npicking this:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a", "have \"ws' (Suc n) a < a\""], ["proof (prove)\nusing this:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. ws' (Suc n) a < a", "by(rule mrw_before)(erule sequentially_consistentE[OF sc])"], ["proof (state)\nthis:\n  ws' (Suc n) a < a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with \\<open>a < r'\\<close>"], ["proof (chain)\npicking this:\n  a < r'\n  ws' (Suc n) a < a", "have \"ws' (Suc n) a < r'\""], ["proof (prove)\nusing this:\n  a < r'\n  ws' (Suc n) a < a\n\ngoal (1 subgoal):\n 1. ws' (Suc n) a < r'", "by simp"], ["proof (state)\nthis:\n  ws' (Suc n) a < r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "ultimately"], ["proof (chain)\npicking this:\n  E' (Suc n) \\<in> \\<E>\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n  thread_start_actions_ok (E' (Suc n))\n  ltake (enat (Suc n)) E [\\<approx>] ltake (enat (Suc n)) (E' (Suc n))\n  ws' (Suc n) a < r'", "have \"P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\""], ["proof (prove)\nusing this:\n  E' (Suc n) \\<in> \\<E>\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n  thread_start_actions_ok (E' (Suc n))\n  ltake (enat (Suc n)) E [\\<approx>] ltake (enat (Suc n)) (E' (Suc n))\n  ws' (Suc n) a < r'\n\ngoal (1 subgoal):\n 1. P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a", "using \\<open>a < r'\\<close>"], ["proof (prove)\nusing this:\n  E' (Suc n) \\<in> \\<E>\n  P,E \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n  thread_start_actions_ok (E' (Suc n))\n  ltake (enat (Suc n)) E [\\<approx>] ltake (enat (Suc n)) (E' (Suc n))\n  ws' (Suc n) a < r'\n  a < r'\n\ngoal (1 subgoal):\n 1. P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a", "by -(rule mrw_change_prefix, simp+)"], ["proof (state)\nthis:\n  P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "hence \"P,justifying_exec (?\\<phi> (Suc n)) \\<turnstile> a \\<leadsto>mrw justifying_ws (?\\<phi> (Suc n)) a\""], ["proof (prove)\nusing this:\n  P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> a \\<leadsto>mrw justifying_ws\n          (commit_for_sc P (E, ws) (Suc n)) a", "using len_E"], ["proof (prove)\nusing this:\n  P,E' (Suc n) \\<turnstile> a \\<leadsto>mrw ws' (Suc n) a\n  enat (Suc n) \\<le> llength E\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (commit_for_sc P (E, ws)\n         (Suc n)) \\<turnstile> a \\<leadsto>mrw justifying_ws\n          (commit_for_sc P (E, ws) (Suc n)) a", "by simp"], ["proof (state)\nthis:\n  P,justifying_exec\n     (commit_for_sc P (E, ws)\n       (Suc n)) \\<turnstile> a \\<leadsto>mrw justifying_ws\n        (commit_for_sc P (E, ws) (Suc n)) a\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2\n           \\<in> read_actions\n                  (justifying_exec (commit_for_sc P (E, ws) (Suc n)));\n   ?a2 < r'\\<rbrakk>\n  \\<Longrightarrow> P,justifying_exec\n                       (commit_for_sc P (E, ws)\n                         (Suc n)) \\<turnstile> ?a2 \\<leadsto>mrw justifying_ws\n                            (commit_for_sc P (E, ws) (Suc n)) ?a2\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "ultimately"], ["proof (chain)\npicking this:\n  justifying_exec\n   (commit_for_sc P (E, ws) (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  ws' (Suc n) r'\n  \\<in> write_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r'\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n         (ws' (Suc n) r')\n  \\<lbrakk>?a2\n           \\<in> read_actions\n                  (justifying_exec (commit_for_sc P (E, ws) (Suc n)));\n   ?a2 < r'\\<rbrakk>\n  \\<Longrightarrow> P,justifying_exec\n                       (commit_for_sc P (E, ws)\n                         (Suc n)) \\<turnstile> ?a2 \\<leadsto>mrw justifying_ws\n                            (commit_for_sc P (E, ws) (Suc n)) ?a2", "have \"ws' (Suc n) r' < r'\""], ["proof (prove)\nusing this:\n  justifying_exec\n   (commit_for_sc P (E, ws) (Suc n)) \\<turnstile> ws' (Suc n) r' \\<le>a r'\n  r' \\<in> read_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  ws' (Suc n) r'\n  \\<in> write_actions (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r'\n  adal\n  \\<in> action_loc P (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n         (ws' (Suc n) r')\n  \\<lbrakk>?a2\n           \\<in> read_actions\n                  (justifying_exec (commit_for_sc P (E, ws) (Suc n)));\n   ?a2 < r'\\<rbrakk>\n  \\<Longrightarrow> P,justifying_exec\n                       (commit_for_sc P (E, ws)\n                         (Suc n)) \\<turnstile> ?a2 \\<leadsto>mrw justifying_ws\n                            (commit_for_sc P (E, ws) (Suc n)) ?a2\n\ngoal (1 subgoal):\n 1. ws' (Suc n) r' < r'", "by(rule action_order_read_before_write[OF En wfn])"], ["proof (state)\nthis:\n  ws' (Suc n) r' < r'\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with len_E C_n"], ["proof (chain)\npicking this:\n  enat (Suc n) \\<le> llength E\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  ws' (Suc n) r' < r'", "have \"?C_ws_n\""], ["proof (prove)\nusing this:\n  enat (Suc n) \\<le> llength E\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  ws' (Suc n) r' < r'\n\ngoal (1 subgoal):\n 1. action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n", "by clarsimp (metis Suc_ile_eq linorder_le_cases order_less_irrefl order_trans)"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "moreover"], ["proof (state)\nthis:\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))", "have \"r' \\<in> committed (?\\<phi> (Suc n))\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> committed (commit_for_sc P (E, ws) (Suc n))", "by blast"], ["proof (state)\nthis:\n  r' \\<in> committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with r' r len_E wf_action_translation_on_actionD[OF wfa this] committed_subset_E[of \"Suc n\"]"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  enat (Suc n) \\<le> llength E\n  action_tid (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n  action_tid E\n   (action_translation (commit_for_sc P (E, ws) (Suc n)) r') \\<and>\n  action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n   r' \\<approx> action_obs E\n                 (action_translation (commit_for_sc P (E, ws) (Suc n)) r')\n  action_translation (commit_for_sc P (E, ws) (Suc n)) `\n  committed (commit_for_sc P (E, ws) (Suc n))\n  \\<subseteq> actions E\n  r' \\<in> committed (commit_for_sc P (E, ws) (Suc n))", "have \"r \\<in> read_actions E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n           committed (commit_for_sc P (E, ws) (Suc n))\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  enat (Suc n) \\<le> llength E\n  action_tid (justifying_exec (commit_for_sc P (E, ws) (Suc n))) r' =\n  action_tid E\n   (action_translation (commit_for_sc P (E, ws) (Suc n)) r') \\<and>\n  action_obs (justifying_exec (commit_for_sc P (E, ws) (Suc n)))\n   r' \\<approx> action_obs E\n                 (action_translation (commit_for_sc P (E, ws) (Suc n)) r')\n  action_translation (commit_for_sc P (E, ws) (Suc n)) `\n  committed (commit_for_sc P (E, ws) (Suc n))\n  \\<subseteq> actions E\n  r' \\<in> committed (commit_for_sc P (E, ws) (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> read_actions E", "by(fastforce elim!: read_actions.cases intro: read_actions.intros split: if_split_asm)"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with sc"], ["proof (chain)\npicking this:\n  sequentially_consistent P (E, ws)\n  r \\<in> read_actions E", "obtain \"P,E \\<turnstile> r \\<leadsto>mrw ws r\""], ["proof (prove)\nusing this:\n  sequentially_consistent P (E, ws)\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> r \\<leadsto>mrw ws r \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by(rule sequentially_consistentE)"], ["proof (state)\nthis:\n  P,E \\<turnstile> r \\<leadsto>mrw ws r\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with E wf"], ["proof (chain)\npicking this:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n  P,E \\<turnstile> r \\<leadsto>mrw ws r", "have \"ws r < r\""], ["proof (prove)\nusing this:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n  P,E \\<turnstile> r \\<leadsto>mrw ws r\n\ngoal (1 subgoal):\n 1. ws r < r", "by(rule mrw_before)(rule sequentially_consistentE[OF sc])"], ["proof (state)\nthis:\n  ws r < r\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "with C_n len_E r"], ["proof (chain)\npicking this:\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  enat (Suc n) \\<le> llength E\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  ws r < r", "have ?C_ws"], ["proof (prove)\nusing this:\n  C_n =\n  action_translation (commit_for_sc P (E, ws) n) `\n  committed (commit_for_sc P (E, ws) n)\n  enat (Suc n) \\<le> llength E\n  r = action_translation (commit_for_sc P (E, ws) (Suc n)) r'\n  ws r < r\n\ngoal (1 subgoal):\n 1. ws r \\<in> C_n", "by(auto simp add: Suc_ile_eq)"], ["proof (state)\nthis:\n  ws r \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<notin> C_n \\<Longrightarrow>\n    r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "ultimately"], ["proof (chain)\npicking this:\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n\n  ws r \\<in> C_n", "show ?thesis"], ["proof (prove)\nusing this:\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n\n  ws r \\<in> C_n\n\ngoal (1 subgoal):\n 1. r \\<in> C_n \\<or>\n    action_translation (commit_for_sc P (E, ws) (Suc n))\n     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n    \\<in> C_n \\<and>\n    ws r \\<in> C_n", "by simp"], ["proof (state)\nthis:\n  r \\<in> C_n \\<or>\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n \\<and>\n  ws r \\<in> C_n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<in> C_n \\<or>\n  action_translation (commit_for_sc P (E, ws) (Suc n))\n   (justifying_ws (commit_for_sc P (E, ws) (Suc n)) r')\n  \\<in> C_n \\<and>\n  ws r \\<in> C_n\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r'2\n           \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                 committed (commit_for_sc P (E, ws) (Suc n));\n   ?r2 = action_translation (commit_for_sc P (E, ws) (Suc n)) ?r'2;\n   ?C_n2 =\n   action_translation (commit_for_sc P (E, ws) n) `\n   committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n  \\<Longrightarrow> ?r2 \\<in> ?C_n2 \\<or>\n                    action_translation (commit_for_sc P (E, ws) (Suc n))\n                     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) ?r'2)\n                    \\<in> ?C_n2 \\<and>\n                    ws ?r2 \\<in> ?C_n2\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?r'2\n           \\<in> read_actions\n                  (justifying_exec\n                    (commit_for_sc P (E, ws) (Suc n))) \\<inter>\n                 committed (commit_for_sc P (E, ws) (Suc n));\n   ?r2 = action_translation (commit_for_sc P (E, ws) (Suc n)) ?r'2;\n   ?C_n2 =\n   action_translation (commit_for_sc P (E, ws) n) `\n   committed (commit_for_sc P (E, ws) n)\\<rbrakk>\n  \\<Longrightarrow> ?r2 \\<in> ?C_n2 \\<or>\n                    action_translation (commit_for_sc P (E, ws) (Suc n))\n                     (justifying_ws (commit_for_sc P (E, ws) (Suc n)) ?r'2)\n                    \\<in> ?C_n2 \\<and>\n                    ws ?r2 \\<in> ?C_n2\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "fix a a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "assume a: \"a \\<in> external_actions (justifying_exec (?\\<phi> n))\"\n        and a': \"a' \\<in> committed (?\\<phi> n)\"\n        and hb: \"P,justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>hb a'\""], ["proof (state)\nthis:\n  a \\<in> external_actions (justifying_exec (commit_for_sc P (E, ws) n))\n  a' \\<in> committed (commit_for_sc P (E, ws) n)\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "from hb"], ["proof (chain)\npicking this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'", "have \"justifying_exec (?\\<phi> n) \\<turnstile> a \\<le>a a'\""], ["proof (prove)\nusing this:\n  P,justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>a a'", "by(rule happens_before_into_action_order)"], ["proof (state)\nthis:\n  justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>a a'\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "with a"], ["proof (chain)\npicking this:\n  a \\<in> external_actions (justifying_exec (commit_for_sc P (E, ws) n))\n  justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>a a'", "have \"a \\<le> a'\""], ["proof (prove)\nusing this:\n  a \\<in> external_actions (justifying_exec (commit_for_sc P (E, ws) n))\n  justifying_exec (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>a a'\n\ngoal (1 subgoal):\n 1. a \\<le> a'", "by(auto elim!: action_orderE dest: external_actions_not_new)"], ["proof (state)\nthis:\n  a \\<le> a'\n\ngoal (1 subgoal):\n 1. \\<And>n a a'.\n       \\<lbrakk>a \\<in> external_actions\n                         (justifying_exec (commit_for_sc P (E, ws) n));\n        a' \\<in> committed (commit_for_sc P (E, ws) n);\n        P,justifying_exec\n           (commit_for_sc P (E, ws) n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed (commit_for_sc P (E, ws) n)", "with a' a"], ["proof (chain)\npicking this:\n  a' \\<in> committed (commit_for_sc P (E, ws) n)\n  a \\<in> external_actions (justifying_exec (commit_for_sc P (E, ws) n))\n  a \\<le> a'", "show \"a \\<in> committed (?\\<phi> n)\""], ["proof (prove)\nusing this:\n  a' \\<in> committed (commit_for_sc P (E, ws) n)\n  a \\<in> external_actions (justifying_exec (commit_for_sc P (E, ws) n))\n  a \\<le> a'\n\ngoal (1 subgoal):\n 1. a \\<in> committed (commit_for_sc P (E, ws) n)", "by(auto elim: external_actions.cases)"], ["proof (state)\nthis:\n  a \\<in> committed (commit_for_sc P (E, ws) n)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2\n           \\<in> external_actions\n                  (justifying_exec (commit_for_sc P (E, ws) n));\n   ?a'2 \\<in> committed (commit_for_sc P (E, ws) n);\n   P,justifying_exec\n      (commit_for_sc P (E, ws) n) \\<turnstile> ?a2 \\<le>hb ?a'2\\<rbrakk>\n  \\<Longrightarrow> ?a2 \\<in> committed (commit_for_sc P (E, ws) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>n. wf_action_translation E (commit_for_sc P (E, ws) n)) \\<and>\n  (\\<forall>n.\n      justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>) \\<and>\n  (\\<forall>n.\n      P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                      justifying_ws\n                       (commit_for_sc P (E, ws) n)) \\<surd>) \\<and>\n  P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)\n\ngoal (4 subgoals):\n 1. \\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)\n 2. \\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>\n 3. \\<And>n.\n       P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                       justifying_ws (commit_for_sc P (E, ws) n)) \\<surd>\n 4. P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "thus \"\\<And>n. ?thesis1 n\" \"\\<And>n. ?thesis2 n\" \"\\<And>n. ?thesis3 n\" \"?thesis4\""], ["proof (prove)\nusing this:\n  (\\<forall>n. wf_action_translation E (commit_for_sc P (E, ws) n)) \\<and>\n  (\\<forall>n.\n      justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>) \\<and>\n  (\\<forall>n.\n      P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                      justifying_ws\n                       (commit_for_sc P (E, ws) n)) \\<surd>) \\<and>\n  P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)\n\ngoal (1 subgoal):\n 1. ((\\<And>n. wf_action_translation E (commit_for_sc P (E, ws) n)) &&&\n     (\\<And>n. justifying_exec (commit_for_sc P (E, ws) n) \\<in> \\<E>)) &&&\n    (\\<And>n.\n        P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) n),\n                        justifying_ws\n                         (commit_for_sc P (E, ws) n)) \\<surd>) &&&\n    P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)", "by blast+"], ["proof (state)\nthis:\n  wf_action_translation E (commit_for_sc P (E, ws) ?n)\n  justifying_exec (commit_for_sc P (E, ws) ?n) \\<in> \\<E>\n  P \\<turnstile> (justifying_exec (commit_for_sc P (E, ws) ?n),\n                  justifying_ws (commit_for_sc P (E, ws) ?n)) \\<surd>\n  P \\<turnstile> (E, ws) justified_by commit_for_sc P (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem SC_is_legal:\n  assumes E: \"E \\<in> \\<E>\" \n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and sc: \"sequentially_consistent P (E, ws)\"\n  shows \"legal_execution P \\<E> (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P \\<E> (E, ws)", "using E wf"], ["proof (prove)\nusing this:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. legal_execution P \\<E> (E, ws)", "apply(rule legal_executionI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P \\<turnstile> (E, ws) justified_by ?J\n 2. range (justifying_exec \\<circ> ?J) \\<subseteq> \\<E>", "apply(rule commit_for_sc_correct[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. range (justifying_exec \\<circ> commit_for_sc P (E, ws)) \\<subseteq> \\<E>", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> UNIV \\<Longrightarrow>\n       (justifying_exec \\<circ> commit_for_sc P (E, ws)) xa \\<in> \\<E>", "apply(unfold o_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> UNIV \\<Longrightarrow>\n       justifying_exec (commit_for_sc P (E, ws) xa) \\<in> \\<E>", "apply(rule commit_for_sc_in_\\<E>[OF assms])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context jmm_consistent begin"], ["", "theorem consistent:\n  assumes \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\"\n  shows \"\\<exists>E \\<in> \\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "from \\<E>_sequential_completion[OF assms, of 0]"], ["proof (chain)\npicking this:\n  (\\<And>a.\n      \\<lbrakk>a < 0; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws\n                    a) \\<Longrightarrow>\n  \\<exists>E'\\<in>\\<E>.\n     \\<exists>ws'.\n        P \\<turnstile> (E', ws') \\<surd> \\<and>\n        ltake (enat 0) E = ltake (enat 0) E' \\<and>\n        sequentially_consistent P (E', ws') \\<and>\n        action_tid E 0 = action_tid E' 0 \\<and>\n        action_obs E 0 \\<approx> action_obs E' 0 \\<and>\n        (0 \\<in> actions E \\<longrightarrow> 0 \\<in> actions E')", "obtain E' ws' where \"E'\\<in>\\<E>\" \"P \\<turnstile> (E', ws') \\<surd>\" \"sequentially_consistent P (E', ws')\""], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a < 0; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws\n                    a) \\<Longrightarrow>\n  \\<exists>E'\\<in>\\<E>.\n     \\<exists>ws'.\n        P \\<turnstile> (E', ws') \\<surd> \\<and>\n        ltake (enat 0) E = ltake (enat 0) E' \\<and>\n        sequentially_consistent P (E', ws') \\<and>\n        action_tid E 0 = action_tid E' 0 \\<and>\n        action_obs E 0 \\<approx> action_obs E' 0 \\<and>\n        (0 \\<in> actions E \\<longrightarrow> 0 \\<in> actions E')\n\ngoal (1 subgoal):\n 1. (\\<And>E' ws'.\n        \\<lbrakk>E' \\<in> \\<E>; P \\<turnstile> (E', ws') \\<surd>;\n         sequentially_consistent P (E', ws')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "moreover"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "hence \"legal_execution P \\<E> (E', ws')\""], ["proof (prove)\nusing this:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n\ngoal (1 subgoal):\n 1. legal_execution P \\<E> (E', ws')", "by(rule SC_is_legal)"], ["proof (state)\nthis:\n  legal_execution P \\<E> (E', ws')\n\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "ultimately"], ["proof (chain)\npicking this:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  legal_execution P \\<E> (E', ws')", "show ?thesis"], ["proof (prove)\nusing this:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  legal_execution P \\<E> (E', ws')\n\ngoal (1 subgoal):\n 1. \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)", "by blast"], ["proof (state)\nthis:\n  \\<exists>E\\<in>\\<E>. \\<exists>ws. legal_execution P \\<E> (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}