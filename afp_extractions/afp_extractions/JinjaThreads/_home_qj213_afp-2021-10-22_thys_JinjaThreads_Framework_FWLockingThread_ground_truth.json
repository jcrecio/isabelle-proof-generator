{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWLockingThread.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma upd_threadRs_append [simp]:\n  \"upd_threadRs n l t (las @ las') = upd_threadRs (upd_threadRs n l t las) (upd_locks l t las) t las'\"", "lemma redT_updLns_iff [simp]:\n  \"\\<And>ln. redT_updLns ls t ln las $ l = upd_threadRs (ln $ l) (ls $ l) t (las $ l)\"", "lemma upd_threadRs_comp_empty [simp]: \"(\\<lambda>(l, n, las). upd_threadRs n l t las) \\<circ>$ ($ls, ($lns, K$ []$)$) = lns\"", "lemma redT_updLs_empty [simp]: \"redT_updLs ls t (K$ []) = ls\""], "translations": [["", "lemma upd_threadRs_append [simp]:\n  \"upd_threadRs n l t (las @ las') = upd_threadRs (upd_threadRs n l t las) (upd_locks l t las) t las'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upd_threadRs n l t (las @ las') =\n    upd_threadRs (upd_threadRs n l t las) (upd_locks l t las) t las'", "by(induct las arbitrary: n l, auto)"], ["", "definition redT_updLns :: \"('l,'t) locks \\<Rightarrow> 't \\<Rightarrow> ('l \\<Rightarrow>f nat) \\<Rightarrow> 'l lock_actions \\<Rightarrow> ('l \\<Rightarrow>f nat)\"\nwhere \"\\<And>ln. redT_updLns ls t ln las = (\\<lambda>(l, n, la). upd_threadRs n l t la) \\<circ>$ ($ls, ($ln, las$)$)\""], ["", "lemma redT_updLns_iff [simp]:\n  \"\\<And>ln. redT_updLns ls t ln las $ l = upd_threadRs (ln $ l) (ls $ l) t (las $ l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ln.\n       redT_updLns ls t ln las $ l =\n       upd_threadRs (ln $ l) (ls $ l) t (las $ l)", "by(simp add: redT_updLns_def)"], ["", "lemma upd_threadRs_comp_empty [simp]: \"(\\<lambda>(l, n, las). upd_threadRs n l t las) \\<circ>$ ($ls, ($lns, K$ []$)$) = lns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(l, n, las). upd_threadRs n l t las) \\<circ>$\n    ($ls, ($lns, K$ []$)$) =\n    lns", "by(auto intro!: finfun_ext)"], ["", "lemma redT_updLs_empty [simp]: \"redT_updLs ls t (K$ []) = ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redT_updLs ls t (K$ []) = ls", "by(simp add: redT_updLs_def)"], ["", "end"]]}