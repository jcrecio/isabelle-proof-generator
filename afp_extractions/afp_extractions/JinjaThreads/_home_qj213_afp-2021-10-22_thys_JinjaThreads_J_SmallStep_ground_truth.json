{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/J/SmallStep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma extNTA2J_iff [simp]:\n  \"extNTA2J P (C, M, a) = ({this:Class (fst (method P C M))=\\<lfloor>Addr a\\<rfloor>; snd (the (snd (snd (snd (method P C M)))))}, Map.empty)\"", "lemma extTA2J_\\<epsilon>: \"extTA2J P \\<epsilon> = \\<epsilon>\"", "lemma [iff]:\n  \"\\<not> extTA,P,t \\<turnstile> \\<langle>Val v, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"", "lemma red_no_val [dest]:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -tas\\<rightarrow> \\<langle>e', s'\\<rangle>; is_val e \\<rbrakk> \\<Longrightarrow> False\"", "lemma [iff]: \"\\<not> extTA,P,t \\<turnstile> \\<langle>Throw a, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"", "lemma reds_map_Val_Throw:\n  \"extTA,P,t \\<turnstile> \\<langle>map Val vs @ Throw a # es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<longleftrightarrow> False\"", "lemma reds_preserves_len:\n  \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> length es' = length es\"", "lemma red_lcl_incr: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\"\n  and reds_lcl_incr: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\"", "lemma red_lcl_add_aux:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow> \\<langle>e', (hp s', l0 ++ lcl s')\\<rangle>\"\n  and reds_lcl_add_aux:\n  \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (hp s, l0 ++ lcl s)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (hp s', l0 ++ lcl s')\\<rangle>\"", "lemma red_lcl_add: \"extTA,P,t \\<turnstile> \\<langle>e, (h, l)\\<rangle> -ta\\<rightarrow> \\<langle>e', (h', l')\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (h, l0 ++ l)\\<rangle> -ta\\<rightarrow> \\<langle>e', (h', l0 ++ l')\\<rangle>\"\n  and reds_lcl_add: \"extTA,P,t \\<turnstile> \\<langle>es, (h, l)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (h', l')\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (h, l0 ++ l)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (h', l0 ++ l')\\<rangle>\"", "lemma reds_no_val [dest]:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; is_vals es \\<rbrakk> \\<Longrightarrow> False\"", "lemma red_no_Throw [dest!]:\n  \"extTA,P,t \\<turnstile> \\<langle>Throw a, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> False\"", "lemma red_lcl_sub:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; fv e \\<subseteq> W \\<rbrakk> \n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (hp s, (lcl s)|`W)\\<rangle> -ta\\<rightarrow> \\<langle>e', (hp s', (lcl s')|`W)\\<rangle>\"\n\n  and reds_lcl_sub:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; fvs es \\<subseteq> W \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (hp s, (lcl s)|`W)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (hp s', (lcl s')|`W)\\<rangle>\"", "lemma red_notfree_unchanged: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; V \\<notin> fv e \\<rbrakk> \\<Longrightarrow> lcl s' V = lcl s V\"\n  and reds_notfree_unchanged: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; V \\<notin> fvs es \\<rbrakk> \\<Longrightarrow> lcl s' V = lcl s V\"", "lemma red_dom_lcl: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\"\n  and reds_dom_lcl: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fvs es\"", "lemma red_Suspend_is_call:\n  \"\\<lbrakk> convert_extTA extNTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a vs hT Ts Tr D. call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and> typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and> P \\<turnstile> class_type_of hT sees wait:Ts\\<rightarrow>Tr = Native in D\"\n  and reds_Suspend_is_calls:\n  \"\\<lbrakk> convert_extTA extNTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a vs hT Ts Tr D. calls es' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and> typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and> P \\<turnstile> class_type_of hT sees wait:Ts\\<rightarrow>Tr = Native in D\"", "lemma red_hext_incr: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> hp s \\<unlhd> hp s'\"\n  and reds_hext_incr: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> hp s \\<unlhd> hp s'\"", "lemma red_preserves_tconf: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; P,hp s \\<turnstile> t \\<surd>t \\<rbrakk> \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t\"", "lemma reds_preserves_tconf: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; P,hp s \\<turnstile> t \\<surd>t \\<rbrakk> \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t\"", "lemma RedCall_code:\n  \"\\<lbrakk> is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = \\<lfloor>(pns,body)\\<rfloor> in D; \n    size es = size pns; size Ts = size pns \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>blocks (this # pns) (Class D # Ts) (Addr a # map the_Val es) body, s\\<rangle>\"\n\n  and RedCallExternal_code:\n  \"\\<lbrakk> is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = Native in D;\n     P,t \\<turnstile> \\<langle>a\\<bullet>M(map the_Val es), hp s\\<rangle> -ta\\<rightarrow>ext \\<langle>va, h'\\<rangle> \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(es), s\\<rangle> -extTA ta\\<rightarrow> \\<langle>extRet2J ((addr a)\\<bullet>M(es)) va, (h', lcl s)\\<rangle>\"\n\n  and RedCallNull_code:\n  \"is_vals es \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>null\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n  \n  and CallThrowParams_code:\n  \"is_Throws es \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val v)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>hd (dropWhile is_val es), s\\<rangle>\"", "lemmas [code_pred_intro] = \n  J_heap_base.RedNew[folded Predicate_Compile.contains_def] J_heap_base.RedNewFail J_heap_base.NewArrayRed \n  J_heap_base.RedNewArray[folded Predicate_Compile.contains_def]\n  J_heap_base.RedNewArrayNegative J_heap_base.RedNewArrayFail\n  J_heap_base.CastRed J_heap_base.RedCast J_heap_base.RedCastFail J_heap_base.InstanceOfRed\n  J_heap_base.RedInstanceOf J_heap_base.BinOpRed1 J_heap_base.BinOpRed2 J_heap_base.RedBinOp J_heap_base.RedBinOpFail \n  J_heap_base.RedVar J_heap_base.LAssRed J_heap_base.RedLAss\n  J_heap_base.AAccRed1 J_heap_base.AAccRed2 J_heap_base.RedAAccNull\n  J_heap_base.RedAAccBounds J_heap_base.RedAAcc J_heap_base.AAssRed1 J_heap_base.AAssRed2 J_heap_base.AAssRed3\n  J_heap_base.RedAAssNull J_heap_base.RedAAssBounds J_heap_base.RedAAssStore J_heap_base.RedAAss J_heap_base.ALengthRed\n  J_heap_base.RedALength J_heap_base.RedALengthNull J_heap_base.FAccRed J_heap_base.RedFAcc J_heap_base.RedFAccNull\n  J_heap_base.FAssRed1 J_heap_base.FAssRed2 J_heap_base.RedFAss J_heap_base.RedFAssNull\n  J_heap_base.CASRed1 J_heap_base.CASRed2 J_heap_base.CASRed3 J_heap_base.CASNull J_heap_base.RedCASSucceed J_heap_base.RedCASFail\n  J_heap_base.CallObj J_heap_base.CallParams", "lemmas [code_pred_intro] =\n  J_heap_base.BlockRed J_heap_base.RedBlock J_heap_base.SynchronizedRed1 J_heap_base.SynchronizedNull\n  J_heap_base.LockSynchronized J_heap_base.SynchronizedRed2 J_heap_base.UnlockSynchronized\n  J_heap_base.SeqRed J_heap_base.RedSeq J_heap_base.CondRed J_heap_base.RedCondT J_heap_base.RedCondF J_heap_base.RedWhile\n  J_heap_base.ThrowRed", "lemmas [code_pred_intro] =\n  J_heap_base.TryRed J_heap_base.RedTry J_heap_base.RedTryCatch\n  J_heap_base.RedTryFail J_heap_base.ListRed1 J_heap_base.ListRed2\n  J_heap_base.NewArrayThrow J_heap_base.CastThrow J_heap_base.InstanceOfThrow J_heap_base.BinOpThrow1 J_heap_base.BinOpThrow2\n  J_heap_base.LAssThrow J_heap_base.AAccThrow1 J_heap_base.AAccThrow2 J_heap_base.AAssThrow1 J_heap_base.AAssThrow2\n  J_heap_base.AAssThrow3 J_heap_base.ALengthThrow J_heap_base.FAccThrow J_heap_base.FAssThrow1 J_heap_base.FAssThrow2\n  J_heap_base.CASThrow J_heap_base.CASThrow2 J_heap_base.CASThrow3\n  J_heap_base.CallThrowObj", "lemmas [code_pred_intro] =\n  J_heap_base.BlockThrow J_heap_base.SynchronizedThrow1 J_heap_base.SynchronizedThrow2 J_heap_base.SeqThrow\n  J_heap_base.CondThrow"], "translations": [["", "lemma extNTA2J_iff [simp]:\n  \"extNTA2J P (C, M, a) = ({this:Class (fst (method P C M))=\\<lfloor>Addr a\\<rfloor>; snd (the (snd (snd (snd (method P C M)))))}, Map.empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extNTA2J P (C, M, a) =\n    ({this:Class\n            (fst (method P C\n                   M))=\\<lfloor>Addr\n                                 a\\<rfloor>; snd\n        (the (snd (snd (snd (method P C M)))))},\n     Map.empty)", "by(simp add: extNTA2J_def split_beta)"], ["", "abbreviation extTA2J :: \n  \"'addr J_prog \\<Rightarrow> ('addr, 'thread_id, 'heap) external_thread_action \\<Rightarrow> ('addr, 'thread_id, 'heap) J_thread_action\"\nwhere \"extTA2J P \\<equiv> convert_extTA (extNTA2J P)\""], ["", "lemma extTA2J_\\<epsilon>: \"extTA2J P \\<epsilon> = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA2J P \\<lbrace>\\<rbrace> = \\<lbrace>\\<rbrace>", "by(simp)"], ["", "text\\<open>Locking mechanism:\n  The expression on which the thread is synchronized is evaluated first to a value.\n  If this expression evaluates to null, a null pointer expression is thrown.\n  If this expression evaluates to an address, a lock must be obtained on this address, the\n  sync expression is rewritten to insync.\n  For insync expressions, the body expression may be evaluated.\n  If the body expression is only a value or a thrown exception, the lock is released and\n  the synchronized expression reduces to the body's expression. This is the normal Java semantics,\n  not the one as presented in LNCS 1523, Cenciarelli/Knapp/Reus/Wirsing. There\n  the expression on which the thread synchronized is evaluated except for the last step.\n  If the thread can obtain the lock on the object immediately after the last evaluation step, the evaluation is\n  done and the lock acquired. If the lock cannot be obtained, the evaluation step is discarded. If another thread\n  changes the evaluation result of this last step, the thread then will try to synchronize on the new object.\\<close>"], ["", "context J_heap_base begin"], ["", "inductive red :: \n  \"(('addr, 'thread_id, 'heap) external_thread_action \\<Rightarrow> ('addr, 'thread_id, 'x,'heap) Jinja_thread_action)\n   \\<Rightarrow> 'addr J_prog \\<Rightarrow> 'thread_id\n   \\<Rightarrow> 'addr expr \\<Rightarrow> ('addr, 'heap) Jstate\n   \\<Rightarrow> ('addr, 'thread_id, 'x,'heap) Jinja_thread_action\n   \\<Rightarrow> 'addr expr \\<Rightarrow> ('addr, 'heap) Jstate \\<Rightarrow> bool\"\n  (\"_,_,_ \\<turnstile> ((1\\<langle>_,/_\\<rangle>) -_\\<rightarrow>/ (1\\<langle>_,/_\\<rangle>))\" [51,51,0,0,0,0,0,0] 81)\n and reds ::\n  \"(('addr, 'thread_id, 'heap) external_thread_action \\<Rightarrow> ('addr, 'thread_id, 'x,'heap) Jinja_thread_action)\n   \\<Rightarrow> 'addr J_prog \\<Rightarrow> 'thread_id \n   \\<Rightarrow> 'addr expr list \\<Rightarrow> ('addr, 'heap) Jstate \n   \\<Rightarrow> ('addr, 'thread_id, 'x,'heap) Jinja_thread_action\n   \\<Rightarrow> 'addr expr list \\<Rightarrow> ('addr, 'heap) Jstate \\<Rightarrow> bool\"\n               (\"_,_,_ \\<turnstile> ((1\\<langle>_,/_\\<rangle>) [-_\\<rightarrow>]/ (1\\<langle>_,/_\\<rangle>))\" [51,51,0,0,0,0,0,0] 81)\nfor extTA :: \"('addr, 'thread_id, 'heap) external_thread_action \\<Rightarrow> ('addr, 'thread_id, 'x, 'heap) Jinja_thread_action\"\nand P :: \"'addr J_prog\" and t :: 'thread_id\nwhere\n  RedNew:\n  \"(h', a) \\<in> allocate h (Class_type C)\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C, (h, l)\\<rangle> -\\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>\\<rightarrow> \\<langle>addr a, (h', l)\\<rangle>\"\n\n| RedNewFail:\n  \"allocate h (Class_type C) = {}\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C, (h, l)\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW OutOfMemory, (h, l)\\<rangle>\"\n\n| NewArrayRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>, s\\<rangle> -ta\\<rightarrow> \\<langle>newA T\\<lfloor>e'\\<rceil>, s'\\<rangle>\"\n\n| RedNewArray:\n  \"\\<lbrakk> 0 <=s i; (h', a) \\<in> allocate h (Array_type T (nat (sint i))) \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>, (h, l)\\<rangle> -\\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow> \\<langle>addr a, (h', l)\\<rangle>\"\n\n| RedNewArrayNegative:\n  \"i <s 0 \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NegativeArraySize, s\\<rangle>\"\n\n| RedNewArrayFail:\n  \"\\<lbrakk> 0 <=s i; allocate h (Array_type T (nat (sint i))) = {} \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>, (h, l)\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW OutOfMemory, (h, l)\\<rangle>\"\n\n| CastRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e, s\\<rangle> -ta\\<rightarrow> \\<langle>Cast C e', s'\\<rangle>\"\n\n| RedCast:\n \"\\<lbrakk> typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>; P \\<turnstile> U \\<le> T \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val v, s\\<rangle>\"\n\n| RedCastFail:\n  \"\\<lbrakk> typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>; \\<not> P \\<turnstile> U \\<le> T \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW ClassCast, s\\<rangle>\"\n\n| InstanceOfRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T, s\\<rangle> -ta\\<rightarrow> \\<langle>e' instanceof T, s'\\<rangle>\"\n\n| RedInstanceOf:\n  \"\\<lbrakk> typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>; b \\<longleftrightarrow> v \\<noteq> Null \\<and> P \\<turnstile> U \\<le> T \\<rbrakk>\n   \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val v) instanceof T, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val (Bool b), s\\<rangle>\"\n\n| BinOpRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e \\<guillemotleft>bop\\<guillemotright> e2, s\\<rangle> -ta\\<rightarrow> \\<langle>e' \\<guillemotleft>bop\\<guillemotright> e2, s'\\<rangle>\"\n\n| BinOpRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val v) \\<guillemotleft>bop\\<guillemotright> e, s\\<rangle> -ta\\<rightarrow> \\<langle>(Val v) \\<guillemotleft>bop\\<guillemotright> e', s'\\<rangle>\"\n\n| RedBinOp:\n  \"binop bop v1 v2 = Some (Inl v) \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>(Val v1) \\<guillemotleft>bop\\<guillemotright> (Val v2), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val v, s\\<rangle>\"\n\n| RedBinOpFail:\n  \"binop bop v1 v2 = Some (Inr a) \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>(Val v1) \\<guillemotleft>bop\\<guillemotright> (Val v2), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n\n| RedVar:\n  \"lcl s V = Some v \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>Var V, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val v, s\\<rangle>\"\n\n| LAssRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>V:=e, s\\<rangle> -ta\\<rightarrow> \\<langle>V:=e', s'\\<rangle>\"\n\n| RedLAss:\n  \"extTA,P,t \\<turnstile> \\<langle>V:=(Val v), (h, l)\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>unit, (h, l(V \\<mapsto> v))\\<rangle>\"\n\n| AAccRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>a, s\\<rangle> -ta\\<rightarrow> \\<langle>a', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>a\\<lfloor>i\\<rceil>, s\\<rangle> -ta\\<rightarrow> \\<langle>a'\\<lfloor>i\\<rceil>, s'\\<rangle>\"\n\n| AAccRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>i, s\\<rangle> -ta\\<rightarrow> \\<langle>i', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val a)\\<lfloor>i\\<rceil>, s\\<rangle> -ta\\<rightarrow> \\<langle>(Val a)\\<lfloor>i'\\<rceil>, s'\\<rangle>\"\n\n| RedAAccNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<lfloor>Val i\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| RedAAccBounds:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>Array_type T n\\<rfloor>; i <s 0 \\<or> sint i \\<ge> int n \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<lfloor>Val (Intg i)\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW ArrayIndexOutOfBounds, s\\<rangle>\"\n\n| RedAAcc:\n  \"\\<lbrakk> typeof_addr h a = \\<lfloor>Array_type T n\\<rfloor>; 0 <=s i; sint i < int n;\n     heap_read h a (ACell (nat (sint i))) v \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<lfloor>Val (Intg i)\\<rceil>, (h, l)\\<rangle> -\\<lbrace>ReadMem a (ACell (nat (sint i))) v\\<rbrace>\\<rightarrow> \\<langle>Val v, (h, l)\\<rangle>\"\n\n| AAssRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>a, s\\<rangle> -ta\\<rightarrow> \\<langle>a', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>a\\<lfloor>i\\<rceil> := e, s\\<rangle> -ta\\<rightarrow> \\<langle>a'\\<lfloor>i\\<rceil> := e, s'\\<rangle>\"\n\n| AAssRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>i, s\\<rangle> -ta\\<rightarrow> \\<langle>i', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val a)\\<lfloor>i\\<rceil> := e, s\\<rangle> -ta\\<rightarrow> \\<langle>(Val a)\\<lfloor>i'\\<rceil> := e, s'\\<rangle>\"\n\n| AAssRed3:\n  \"extTA,P,t \\<turnstile> \\<langle>(e::'addr expr), s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val a)\\<lfloor>Val i\\<rceil> := e, s\\<rangle> -ta\\<rightarrow> \\<langle>(Val a)\\<lfloor>Val i\\<rceil> := e', s'\\<rangle>\"\n\n| RedAAssNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<lfloor>Val i\\<rceil> := (Val e::'addr expr), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| RedAAssBounds:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>Array_type T n\\<rfloor>; i <s 0 \\<or> sint i \\<ge> int n \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<lfloor>Val (Intg i)\\<rceil> := (Val e::'addr expr), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW ArrayIndexOutOfBounds, s\\<rangle>\"\n\n| RedAAssStore:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>Array_type T n\\<rfloor>; 0 <=s i; sint i < int n;\n     typeof\\<^bsub>hp s\\<^esub> w = \\<lfloor>U\\<rfloor>; \\<not> (P \\<turnstile> U \\<le> T) \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<lfloor>Val (Intg i)\\<rceil> := (Val w::'addr expr), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW ArrayStore, s\\<rangle>\"\n\n| RedAAss:\n  \"\\<lbrakk> typeof_addr h a = \\<lfloor>Array_type T n\\<rfloor>; 0 <=s i; sint i < int n; typeof\\<^bsub>h\\<^esub> w = Some U; P \\<turnstile> U \\<le> T;\n     heap_write h a (ACell (nat (sint i))) w h' \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<lfloor>Val (Intg i)\\<rceil> := Val w::'addr expr, (h, l)\\<rangle> -\\<lbrace>WriteMem a (ACell (nat (sint i))) w\\<rbrace>\\<rightarrow> \\<langle>unit, (h', l)\\<rangle>\"\n\n| ALengthRed:\n  \"extTA,P,t \\<turnstile> \\<langle>a, s\\<rangle> -ta\\<rightarrow> \\<langle>a', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>a\\<bullet>length, s\\<rangle> -ta\\<rightarrow> \\<langle>a'\\<bullet>length, s'\\<rangle>\"\n\n| RedALength:\n  \"typeof_addr h a = \\<lfloor>Array_type T n\\<rfloor> \n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>addr a\\<bullet>length, (h, l)\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val (Intg (word_of_nat n)), (h, l)\\<rangle>\"\n\n| RedALengthNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<bullet>length, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| FAccRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e\\<bullet>F{D}, s\\<rangle> -ta\\<rightarrow> \\<langle>e'\\<bullet>F{D}, s'\\<rangle>\"\n\n| RedFAcc:\n  \"heap_read h a (CField D F) v\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>F{D}, (h, l)\\<rangle> -\\<lbrace>ReadMem a (CField D F) v\\<rbrace>\\<rightarrow> \\<langle>Val v, (h, l)\\<rangle>\"\n\n| RedFAccNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<bullet>F{D}, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| FAssRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e\\<bullet>F{D}:=e2, s\\<rangle> -ta\\<rightarrow> \\<langle>e'\\<bullet>F{D}:=e2, s'\\<rangle>\"\n\n| FAssRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>(e::'addr expr), s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>F{D}:=e, s\\<rangle> -ta\\<rightarrow> \\<langle>Val v\\<bullet>F{D}:=e', s'\\<rangle>\"\n\n| RedFAss:\n  \"heap_write h a (CField D F) v h' \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>F{D}:= Val v, (h, l)\\<rangle> -\\<lbrace>WriteMem a (CField D F) v\\<rbrace>\\<rightarrow> \\<langle>unit, (h', l)\\<rangle>\"\n\n| RedFAssNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<bullet>F{D}:=Val v::'addr expr, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| CASRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>e\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3), s\\<rangle> -ta\\<rightarrow> \\<langle>e'\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3), s'\\<rangle>\"\n\n| CASRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, e, e3), s\\<rangle> -ta\\<rightarrow> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, e', e3), s'\\<rangle>\"\n\n| CASRed3:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, Val v', e), s\\<rangle> -ta\\<rightarrow> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, Val v', e'), s'\\<rangle>\"\n\n| CASNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<bullet>compareAndSwap(D\\<bullet>F, Val v, Val v'), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| RedCASSucceed:\n  \"\\<lbrakk> heap_read h a (CField D F) v; heap_write h a (CField D F) v' h' \\<rbrakk> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>addr a\\<bullet>compareAndSwap(D\\<bullet>F, Val v, Val v'), (h, l)\\<rangle> \n  -\\<lbrace>ReadMem a (CField D F) v, WriteMem a (CField D F) v'\\<rbrace>\\<rightarrow> \n  \\<langle>true, (h', l)\\<rangle>\"\n\n| RedCASFail:\n  \"\\<lbrakk> heap_read h a (CField D F) v''; v \\<noteq> v'' \\<rbrakk> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>addr a\\<bullet>compareAndSwap(D\\<bullet>F, Val v, Val v'), (h, l)\\<rangle> \n  -\\<lbrace>ReadMem a (CField D F) v''\\<rbrace>\\<rightarrow> \n  \\<langle>false, (h, l)\\<rangle>\"\n\n| CallObj:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e\\<bullet>M(es), s\\<rangle> -ta\\<rightarrow> \\<langle>e'\\<bullet>M(es), s'\\<rangle>\"\n\n| CallParams:\n  \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>(Val v)\\<bullet>M(es),s\\<rangle> -ta\\<rightarrow> \\<langle>(Val v)\\<bullet>M(es'),s'\\<rangle>\"\n\n| RedCall:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = \\<lfloor>(pns,body)\\<rfloor> in D; \n    size vs = size pns; size Ts = size pns \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(map Val vs), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>blocks (this # pns) (Class D # Ts) (Addr a # vs) body, s\\<rangle>\"\n\n| RedCallExternal:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = Native in D;\n     P,t \\<turnstile> \\<langle>a\\<bullet>M(vs), hp s\\<rangle> -ta\\<rightarrow>ext \\<langle>va, h'\\<rangle>;\n     ta' = extTA ta; e' = extRet2J ((addr a)\\<bullet>M(map Val vs)) va; s' = (h', lcl s) \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(map Val vs), s\\<rangle> -ta'\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n\n| RedCallNull:\n  \"extTA,P,t \\<turnstile> \\<langle>null\\<bullet>M(map Val vs), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| BlockRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, (h, l(V:=vo))\\<rangle> -ta\\<rightarrow> \\<langle>e', (h', l')\\<rangle>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e}, (h, l)\\<rangle> -ta\\<rightarrow> \\<langle>{V:T=l' V; e'}, (h', l'(V := l V))\\<rangle>\"\n\n| RedBlock:\n  \"extTA,P,t \\<turnstile> \\<langle>{V:T=vo; Val u}, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val u, s\\<rangle>\"\n\n| SynchronizedRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>o', s\\<rangle> -ta\\<rightarrow> \\<langle>o'', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>sync(o') e, s\\<rangle> -ta\\<rightarrow> \\<langle>sync(o'') e, s'\\<rangle>\"\n\n| SynchronizedNull:\n  \"extTA,P,t \\<turnstile> \\<langle>sync(null) e, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| LockSynchronized:\n  \"extTA,P,t \\<turnstile> \\<langle>sync(addr a) e, s\\<rangle> -\\<lbrace>Lock\\<rightarrow>a, SyncLock a\\<rbrace>\\<rightarrow> \\<langle>insync(a) e, s\\<rangle>\"\n\n| SynchronizedRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>insync(a) e, s\\<rangle> -ta\\<rightarrow> \\<langle>insync(a) e', s'\\<rangle>\"\n\n| UnlockSynchronized:\n  \"extTA,P,t \\<turnstile> \\<langle>insync(a) (Val v), s\\<rangle> -\\<lbrace>Unlock\\<rightarrow>a, SyncUnlock a\\<rbrace>\\<rightarrow> \\<langle>Val v, s\\<rangle>\"\n\n| SeqRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e;;e2, s\\<rangle> -ta\\<rightarrow> \\<langle>e';;e2, s'\\<rangle>\"\n\n| RedSeq:\n  \"extTA,P,t \\<turnstile> \\<langle>(Val v);;e, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>e, s\\<rangle>\"\n\n| CondRed:\n  \"extTA,P,t \\<turnstile> \\<langle>b, s\\<rangle> -ta\\<rightarrow> \\<langle>b', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>if (b) e1 else e2, s\\<rangle> -ta\\<rightarrow> \\<langle>if (b') e1 else e2, s'\\<rangle>\"\n\n| RedCondT:\n  \"extTA,P,t \\<turnstile> \\<langle>if (true) e1 else e2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>e1, s\\<rangle>\"\n\n| RedCondF:\n  \"extTA,P,t \\<turnstile> \\<langle>if (false) e1 else e2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>e2, s\\<rangle>\"\n\n| RedWhile:\n  \"extTA,P,t \\<turnstile> \\<langle>while(b) c, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>if (b) (c;;while(b) c) else unit, s\\<rangle>\"\n\n| ThrowRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>throw e, s\\<rangle> -ta\\<rightarrow> \\<langle>throw e', s'\\<rangle>\"\n\n| RedThrowNull:\n  \"extTA,P,t \\<turnstile> \\<langle>throw null, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n\n| TryRed:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>try e catch(C V) e2, s\\<rangle> -ta\\<rightarrow> \\<langle>try e' catch(C V) e2, s'\\<rangle>\"\n\n| RedTry:\n  \"extTA,P,t \\<turnstile> \\<langle>try (Val v) catch(C V) e2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Val v, s\\<rangle>\"\n\n| RedTryCatch:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>Class_type D\\<rfloor>; P \\<turnstile> D \\<preceq>\\<^sup>* C \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>try (Throw a) catch(C V) e2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>{V:Class C=\\<lfloor>Addr a\\<rfloor>; e2}, s\\<rangle>\"\n\n| RedTryFail:\n  \"\\<lbrakk> typeof_addr (hp s) a = \\<lfloor>Class_type D\\<rfloor>; \\<not> P \\<turnstile> D \\<preceq>\\<^sup>* C \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>try (Throw a) catch(C V) e2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n\n| ListRed1:\n  \"extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow> \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>e#es,s\\<rangle> [-ta\\<rightarrow>] \\<langle>e'#es,s'\\<rangle>\"\n\n| ListRed2:\n  \"extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>Val v # es,s\\<rangle> [-ta\\<rightarrow>] \\<langle>Val v # es',s'\\<rangle>\"\n\n\\<comment> \\<open>Exception propagation\\<close>\n\n| NewArrayThrow: \"extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Throw a\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CastThrow: \"extTA,P,t \\<turnstile> \\<langle>Cast C (Throw a), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| InstanceOfThrow: \"extTA,P,t \\<turnstile> \\<langle>(Throw a) instanceof T, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| BinOpThrow1: \"extTA,P,t \\<turnstile> \\<langle>(Throw a) \\<guillemotleft>bop\\<guillemotright> e\\<^sub>2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| BinOpThrow2: \"extTA,P,t \\<turnstile> \\<langle>(Val v\\<^sub>1) \\<guillemotleft>bop\\<guillemotright> (Throw a), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| LAssThrow: \"extTA,P,t \\<turnstile> \\<langle>V:=(Throw a), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| AAccThrow1: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<lfloor>i\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| AAccThrow2: \"extTA,P,t \\<turnstile> \\<langle>(Val v)\\<lfloor>Throw a\\<rceil>, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| AAssThrow1: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<lfloor>i\\<rceil> := e, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| AAssThrow2: \"extTA,P,t \\<turnstile> \\<langle>(Val v)\\<lfloor>Throw a\\<rceil> := e, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| AAssThrow3: \"extTA,P,t \\<turnstile> \\<langle>(Val v)\\<lfloor>Val i\\<rceil> := Throw a :: 'addr expr, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| ALengthThrow: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<bullet>length, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| FAccThrow: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<bullet>F{D}, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| FAssThrow1: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<bullet>F{D}:=e\\<^sub>2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| FAssThrow2: \"extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>F{D}:=(Throw a::'addr expr), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CASThrow: \"extTA,P,t \\<turnstile> \\<langle>Throw a\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CASThrow2: \"extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, Throw a, e3), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CASThrow3: \"extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>compareAndSwap(D\\<bullet>F, Val v', Throw a), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CallThrowObj: \"extTA,P,t \\<turnstile> \\<langle>(Throw a)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CallThrowParams: \"\\<lbrakk> es = map Val vs @ Throw a # es' \\<rbrakk> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val v)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| BlockThrow: \"extTA,P,t \\<turnstile> \\<langle>{V:T=vo; Throw a}, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| SynchronizedThrow1: \"extTA,P,t \\<turnstile> \\<langle>sync(Throw a) e, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| SynchronizedThrow2: \"extTA,P,t \\<turnstile> \\<langle>insync(a) Throw ad, s\\<rangle> -\\<lbrace>Unlock\\<rightarrow>a, SyncUnlock a\\<rbrace>\\<rightarrow> \\<langle>Throw ad, s\\<rangle>\"\n| SeqThrow: \"extTA,P,t \\<turnstile> \\<langle>(Throw a);;e\\<^sub>2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| CondThrow: \"extTA,P,t \\<turnstile> \\<langle>if (Throw a) e\\<^sub>1 else e\\<^sub>2, s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\"\n| ThrowThrow: \"extTA,P,t \\<turnstile> \\<langle>throw(Throw a), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>Throw a, s\\<rangle>\""], ["", "inductive_cases red_cases:\n  \"extTA,P,t \\<turnstile> \\<langle>new C, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>Cast T e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e instanceof T, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e \\<guillemotleft>bop\\<guillemotright> e', s\\<rangle> -ta\\<rightarrow> \\<langle>e'', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>Var V, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>V:=e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>a\\<lfloor>i\\<rceil>, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>a\\<lfloor>i\\<rceil> := e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>a\\<bullet>length, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e\\<bullet>F{D}, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e\\<bullet>F{D} := e', s\\<rangle> -ta\\<rightarrow> \\<langle>e'', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e\\<bullet>compareAndSwap(D\\<bullet>F, e', e''), s\\<rangle> -ta\\<rightarrow> \\<langle>e''', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e\\<bullet>M(es), s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e}, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>sync(o') e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>insync(a) e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>e;;e', s\\<rangle> -ta\\<rightarrow> \\<langle>e'', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>if (b) e1 else e2, s \\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>while (b) e, s \\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>throw e, s \\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\"\n  \"extTA,P,t \\<turnstile> \\<langle>try e catch(C V) e', s\\<rangle> -ta\\<rightarrow> \\<langle>e'', s'\\<rangle>\""], ["", "inductive_cases reds_cases:\n  \"extTA,P,t \\<turnstile> \\<langle>e # es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>\""], ["", "abbreviation red' ::\n  \"'addr J_prog \\<Rightarrow> 'thread_id \\<Rightarrow> 'addr expr \\<Rightarrow> ('heap \\<times> 'addr locals) \n  \\<Rightarrow> ('addr, 'thread_id, 'heap) J_thread_action \\<Rightarrow> 'addr expr \\<Rightarrow> ('heap \\<times> 'addr locals) \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> ((1\\<langle>_,/_\\<rangle>) -_\\<rightarrow>/ (1\\<langle>_,/_\\<rangle>))\" [51,0,0,0,0,0,0] 81)\nwhere \"red' P \\<equiv> red (extTA2J P) P\""], ["", "abbreviation reds' :: \n  \"'addr J_prog \\<Rightarrow> 'thread_id \\<Rightarrow> 'addr expr list \\<Rightarrow> ('heap \\<times> 'addr locals)\n  \\<Rightarrow> ('addr, 'thread_id, 'heap) J_thread_action \\<Rightarrow> 'addr expr list \\<Rightarrow> ('heap \\<times> 'addr locals) \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> ((1\\<langle>_,/_\\<rangle>) [-_\\<rightarrow>]/ (1\\<langle>_,/_\\<rangle>))\" [51,0,0,0,0,0,0] 81)\nwhere \"reds' P \\<equiv> reds (extTA2J P) P\""], ["", "subsection\\<open>Some easy lemmas\\<close>"], ["", "lemma [iff]:\n  \"\\<not> extTA,P,t \\<turnstile> \\<langle>Val v, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> extTA,P,t \\<turnstile> \\<langle>Val v,s\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',s'\\<rangle>", "by(fastforce elim:red.cases)"], ["", "lemma red_no_val [dest]:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -tas\\<rightarrow> \\<langle>e', s'\\<rangle>; is_val e \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -tas\\<rightarrow>\n                                    \\<langle>e',s'\\<rangle>;\n     is_val e\\<rbrakk>\n    \\<Longrightarrow> False", "by(auto)"], ["", "lemma [iff]: \"\\<not> extTA,P,t \\<turnstile> \\<langle>Throw a, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> extTA,P,t \\<turnstile> \\<langle>Throw a,\n                                   s\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',s'\\<rangle>", "by(fastforce elim: red_cases)"], ["", "lemma reds_map_Val_Throw:\n  \"extTA,P,t \\<turnstile> \\<langle>map Val vs @ Throw a # es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>map Val vs @ Throw a # es,\n                            s\\<rangle> [-ta\\<rightarrow>]\n                           \\<langle>es',s'\\<rangle> =\n    False", "by(induct vs arbitrary: es')(auto elim!: reds_cases)"], ["", "lemma reds_preserves_len:\n  \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> length es' = length es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>]\n                           \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n    length es' = length es", "by(induct es arbitrary: es')(auto elim: reds.cases)"], ["", "lemma red_lcl_incr: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\"\n  and reds_lcl_incr: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     dom (lcl s) \\<subseteq> dom (lcl s')) &&&\n    (extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     dom (lcl s) \\<subseteq> dom (lcl s'))", "apply(induct rule:red_reds.inducts)"], ["proof (prove)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       dom (lcl (h, l)) \\<subseteq> dom (lcl (h', l))\n 2. \\<And>h C l.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       dom (lcl (h, l)) \\<subseteq> dom (lcl (h, l))\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s) \\<subseteq> dom (lcl s')\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h, l)) \\<subseteq> dom (lcl (h', l))\n 5. \\<And>i T s.\n       i <s 0 \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s)\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h, l)) \\<subseteq> dom (lcl (h, l))\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s) \\<subseteq> dom (lcl s')\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s)\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s)\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         dom (lcl s) \\<subseteq> dom (lcl s')\\<rbrakk>\n        \\<Longrightarrow> dom (lcl s) \\<subseteq> dom (lcl s')\nA total of 98 subgoals...", "apply(auto simp del: fun_upd_apply split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma red_lcl_add_aux:\n  \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow> \\<langle>e', (hp s', l0 ++ lcl s')\\<rangle>\"\n  and reds_lcl_add_aux:\n  \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (hp s, l0 ++ lcl s)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (hp s', l0 ++ lcl s')\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>e,\n                             (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',(hp s', l0 ++ lcl s')\\<rangle>) &&&\n    (extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>es,\n                             (hp s, l0 ++ lcl s)\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',(hp s', l0 ++ lcl s')\\<rangle>)", "proof (induct arbitrary: l0 and l0 rule:red_reds.inducts)"], ["proof (state)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "case (BlockRed e h x V vo ta e' h' x' T)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           ?l0.18 ++\n                           lcl (h, x(V := vo)))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), ?l0.18 ++ lcl (h', x'))\\<rangle>\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "note IH = \\<open>\\<And>l0. extTA,P,t \\<turnstile> \\<langle>e,(hp (h, x(V := vo)), l0 ++ lcl (h, x(V := vo)))\\<rangle> -ta\\<rightarrow> \\<langle>e',(hp (h', x'), l0 ++ lcl (h', x'))\\<rangle>\\<close>[simplified]"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, ?l0.0 ++ x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', ?l0.0 ++ x')\\<rangle>\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "have lrew: \"\\<And>x x'. x(V := vo) ++ x'(V := vo) = (x ++ x')(V := vo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'. x(V := vo) ++ x'(V := vo) = (x ++ x')(V := vo)", "by(simp add:fun_eq_iff map_add_def)"], ["proof (state)\nthis:\n  ?x18(V := vo) ++ ?x'18(V := vo) = (?x18 ++ ?x'18)(V := vo)\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "have lrew1: \"\\<And>X X' X'' vo. (X(V := vo) ++ X')(V := (X ++ X'') V) = X ++ X'(V := X'' V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X X' X'' vo.\n       (X(V := vo) ++ X')(V := (X ++ X'') V) = X ++ X'(V := X'' V)", "by(simp add: fun_eq_iff map_add_def)"], ["proof (state)\nthis:\n  (?X18(V := ?vo18) ++ ?X'18)(V := (?X18 ++ ?X''18) V) =\n  ?X18 ++ ?X'18(V := ?X''18 V)\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "have lrew2: \"\\<And>X X'. (X(V := None) ++ X') V = X' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X X'. (X(V := None) ++ X') V = X' V", "by(simp add: map_add_def)"], ["proof (state)\nthis:\n  (?X19(V := None) ++ ?X'19) V = ?X'19 V\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 98 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "proof(cases vo)"], ["proof (state)\ngoal (2 subgoals):\n 1. vo = None \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             l0 ++ lcl (h', x'(V := x V)))\\<rangle>\n 2. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "case None"], ["proof (state)\nthis:\n  vo = None\n\ngoal (2 subgoals):\n 1. vo = None \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             l0 ++ lcl (h', x'(V := x V)))\\<rangle>\n 2. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "from IH[of \"l0(V := vo)\"]"], ["proof (chain)\npicking this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, l0(V := vo) ++ x\n                              (V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', l0(V := vo) ++ x')\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, l0(V := vo) ++ x\n                              (V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', l0(V := vo) ++ x')\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "apply(simp del: fun_upd_apply add: lrew)"], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>e,\n                            (h, (l0 ++ x)\n                             (V := vo))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>e',\n                            (h',\n                             l0(V := vo) ++ x')\\<rangle> \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (h', l0 ++ x'(V := x V))\\<rangle>", "apply(drule red_reds.BlockRed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:?T1=vo; e},\n                            (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:?T1=(l0(V := vo) ++ x') V; e'},\n                            (h', (l0(V := vo) ++ x')\n                             (V := (l0 ++ x) V))\\<rangle> \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (h', l0 ++ x'(V := x V))\\<rangle>", "by(simp only: lrew1 None lrew2)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           l0 ++ lcl (h', x'(V := x V)))\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "case (Some v)"], ["proof (state)\nthis:\n  vo = \\<lfloor>v\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "with \\<open>extTA,P,t \\<turnstile> \\<langle>e,(h, x(V := vo))\\<rangle> -ta\\<rightarrow> \\<langle>e',(h', x')\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  vo = \\<lfloor>v\\<rfloor>", "have \"x' V \\<noteq> None\""], ["proof (prove)\nusing this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  vo = \\<lfloor>v\\<rfloor>\n\ngoal (1 subgoal):\n 1. x' V \\<noteq> None", "by -(drule red_lcl_incr, auto split: if_split_asm)"], ["proof (state)\nthis:\n  x' V \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       vo = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                               (hp (h, x),\n                                l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                              \\<langle>{V:T=x' V; e'},\n                               (hp (h', x'(V := x V)),\n                                l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "with IH[of \"l0(V := vo)\"]"], ["proof (chain)\npicking this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, l0(V := vo) ++ x\n                              (V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', l0(V := vo) ++ x')\\<rangle>\n  x' V \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, l0(V := vo) ++ x\n                              (V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', l0(V := vo) ++ x')\\<rangle>\n  x' V \\<noteq> None\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             l0 ++ lcl (h', x'(V := x V)))\\<rangle>", "apply(clarsimp simp del: fun_upd_apply simp add: lrew)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  (h, (l0 ++ x)(V := vo))\\<rangle> -ta\\<rightarrow>\n \\<langle>e',(h', l0(V := vo) ++ x')\\<rangle>;\n        x' V = \\<lfloor>y\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n           (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n          \\<langle>{V:T=\\<lfloor>y\\<rfloor>; e'},\n           (h', l0 ++ x'(V := x V))\\<rangle>", "apply(drule red_reds.BlockRed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>x' V = \\<lfloor>y\\<rfloor>;\n        extTA,P,t \\<turnstile> \\<langle>{V:?T3 y=vo; e},\n                                (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n                               \\<langle>{V:?T3 y=(l0(V := vo) ++ x') V; e'},\n                                (h', (l0(V := vo) ++ x')\n                                 (V := (l0 ++ x) V))\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n           (h, l0 ++ x)\\<rangle> -ta\\<rightarrow>\n          \\<langle>{V:T=\\<lfloor>y\\<rfloor>; e'},\n           (h', l0 ++ x'(V := x V))\\<rangle>", "by(simp add: lrew1 Some del: fun_upd_apply)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           l0 ++ lcl (h', x'(V := x V)))\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           l0 ++ lcl (h, x))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           l0 ++ lcl (h', x'(V := x V)))\\<rangle>\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 97 subgoals...", "next"], ["proof (state)\ngoal (97 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 97 subgoals...", "case RedTryFail"], ["proof (state)\nthis:\n  typeof_addr (hp s_) a_ = \\<lfloor>Class_type D_\\<rfloor>\n  \\<not> P \\<turnstile> D_ \\<preceq>\\<^sup>* C_\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 97 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  typeof_addr (hp s_) a_ = \\<lfloor>Class_type D_\\<rfloor>\n  \\<not> P \\<turnstile> D_ \\<preceq>\\<^sup>* C_\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>try Throw a_ catch(C_ V_) e2_,\n                            (hp s_,\n                             l0 ++\n                             lcl s_)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                           \\<langle>Throw a_,(hp s_, l0 ++ lcl s_)\\<rangle>", "by(auto intro: red_reds.RedTryFail)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>try Throw a_ catch(C_ V_) e2_,\n                          (hp s_,\n                           l0 ++\n                           lcl s_)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>Throw a_,(hp s_, l0 ++ lcl s_)\\<rangle>\n\ngoal (96 subgoals):\n 1. \\<And>h' a h C l l0.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n                          (Class_type C)\\<rbrace>\\<rightarrow>\n                              \\<langle>addr a,\n                               (hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 2. \\<And>h C l l0.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>new C,\n                               (hp (h, l),\n                                l0 ++\n                                lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n                               (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 3. \\<And>e s ta e' s' T l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', l0 ++ lcl s')\\<rangle>\n 4. \\<And>i h' a h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++\n            lcl (h, l))\\<rangle> -\\<lbrace>NewHeapElem a\n      (Array_type T (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), l0 ++ lcl (h', l))\\<rangle>\n 5. \\<And>i T s l0.\n       i <s 0 \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val (Intg i)\\<rceil>,\n                               (hp s,\n                                l0 ++\n                                lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>Throw\n  (addr_of_sys_xcpt NegativeArraySize),\n                               (hp s, l0 ++ lcl s)\\<rangle>\n 6. \\<And>i h T l l0.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            l0 ++ lcl (h, l))\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), l0 ++ lcl (h, l))\\<rangle>\n 7. \\<And>e s ta e' s' C l0.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>l0.\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',\n                                   (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', l0 ++ lcl s')\\<rangle>\n 8. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, l0 ++ lcl s)\\<rangle>\n 9. \\<And>s v U T l0.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, l0 ++ lcl s)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, l0 ++ lcl s)\\<rangle>\n 10. \\<And>e s ta e' s' T l0.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>l0.\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', l0 ++ lcl s')\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, l0 ++ lcl s)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', l0 ++ lcl s')\\<rangle>\nA total of 96 subgoals...", "qed(fastforce intro:red_reds.intros simp del: fun_upd_apply)+"], ["", "lemma red_lcl_add: \"extTA,P,t \\<turnstile> \\<langle>e, (h, l)\\<rangle> -ta\\<rightarrow> \\<langle>e', (h', l')\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (h, l0 ++ l)\\<rangle> -ta\\<rightarrow> \\<langle>e', (h', l0 ++ l')\\<rangle>\"\n  and reds_lcl_add: \"extTA,P,t \\<turnstile> \\<langle>es, (h, l)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (h', l')\\<rangle> \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (h, l0 ++ l)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (h', l0 ++ l')\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (extTA,P,t \\<turnstile> \\<langle>e,(h, l)\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',(h', l')\\<rangle> \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>e,\n                             (h, l0 ++ l)\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',(h', l0 ++ l')\\<rangle>) &&&\n    (extTA,P,t \\<turnstile> \\<langle>es,(h, l)\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',(h', l')\\<rangle> \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>es,\n                             (h, l0 ++ l)\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',(h', l0 ++ l')\\<rangle>)", "by(auto dest:red_lcl_add_aux reds_lcl_add_aux)"], ["", "lemma reds_no_val [dest]:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; is_vals es \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n                                     s\\<rangle> [-ta\\<rightarrow>]\n                                    \\<langle>es',s'\\<rangle>;\n     is_vals es\\<rbrakk>\n    \\<Longrightarrow> False", "apply(induct es arbitrary: s ta es' s')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ta es' s'.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>[],\n  s\\<rangle> [-ta\\<rightarrow>]\n \\<langle>es',s'\\<rangle>;\n        is_vals []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a es s ta es' s'.\n       \\<lbrakk>\\<And>s ta es' s'.\n                   \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n              s\\<rangle> [-ta\\<rightarrow>]\n             \\<langle>es',s'\\<rangle>;\n                    is_vals es\\<rbrakk>\n                   \\<Longrightarrow> False;\n        extTA,P,t \\<turnstile> \\<langle>a # es,s\\<rangle> [-ta\\<rightarrow>]\n                               \\<langle>es',s'\\<rangle>;\n        is_vals (a # es)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(blast elim: reds.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es s ta es' s'.\n       \\<lbrakk>\\<And>s ta es' s'.\n                   \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n              s\\<rangle> [-ta\\<rightarrow>]\n             \\<langle>es',s'\\<rangle>;\n                    is_vals es\\<rbrakk>\n                   \\<Longrightarrow> False;\n        extTA,P,t \\<turnstile> \\<langle>a # es,s\\<rangle> [-ta\\<rightarrow>]\n                               \\<langle>es',s'\\<rangle>;\n        is_vals (a # es)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule reds.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a es s ta es' s' e sa taa e' s'a esa.\n       \\<lbrakk>\\<And>s ta es' s'.\n                   \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n              s\\<rangle> [-ta\\<rightarrow>]\n             \\<langle>es',s'\\<rangle>;\n                    is_vals es\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_vals (a # es); a # es = e # esa; s = sa; ta = taa;\n        es' = e' # esa; s' = s'a;\n        extTA,P,t \\<turnstile> \\<langle>e,sa\\<rangle> -taa\\<rightarrow>\n                               \\<langle>e',s'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a es s ta es' s' esa sa taa es'a s'a v.\n       \\<lbrakk>\\<And>s ta es' s'.\n                   \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n              s\\<rangle> [-ta\\<rightarrow>]\n             \\<langle>es',s'\\<rangle>;\n                    is_vals es\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_vals (a # es); a # es = Val v # esa; s = sa; ta = taa;\n        es' = Val v # es'a; s' = s'a;\n        extTA,P,t \\<turnstile> \\<langle>esa,sa\\<rangle> [-taa\\<rightarrow>]\n                               \\<langle>es'a,s'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma red_no_Throw [dest!]:\n  \"extTA,P,t \\<turnstile> \\<langle>Throw a, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>Throw a,s\\<rangle> -ta\\<rightarrow>\n                           \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n    False", "by(auto elim!: red_cases)"], ["", "lemma red_lcl_sub:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; fv e \\<subseteq> W \\<rbrakk> \n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e, (hp s, (lcl s)|`W)\\<rangle> -ta\\<rightarrow> \\<langle>e', (hp s', (lcl s')|`W)\\<rangle>\"\n\n  and reds_lcl_sub:\n  \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; fvs es \\<subseteq> W \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es, (hp s, (lcl s)|`W)\\<rangle> [-ta\\<rightarrow>] \\<langle>es', (hp s', (lcl s')|`W)\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                                     \\<langle>e',s'\\<rangle>;\n      fv e \\<subseteq> W\\<rbrakk>\n     \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e,\n         (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n        \\<langle>e',(hp s', lcl s' |` W)\\<rangle>) &&&\n    (\\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\ns\\<rangle> [-ta\\<rightarrow>]\n                                     \\<langle>es',s'\\<rangle>;\n      fvs es \\<subseteq> W\\<rbrakk>\n     \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>es,\n         (hp s, lcl s |` W)\\<rangle> [-ta\\<rightarrow>]\n        \\<langle>es',(hp s', lcl s' |` W)\\<rangle>)", "proof(induct arbitrary: W and W rule: red_reds.inducts)"], ["proof (state)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 98 subgoals...", "case (RedLAss V v h l W)"], ["proof (state)\nthis:\n  fv (V:=Val v) \\<subseteq> W\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 98 subgoals...", "have \"extTA,P,t \\<turnstile> \\<langle>V:=Val v,(h, l |` W)\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>unit,(h, (l |`W)(V \\<mapsto> v))\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                            (h, l |`\n                                W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                           \\<langle>unit,\n                            (h, (l |` W)(V \\<mapsto> v))\\<rangle>", "by(rule red_reds.RedLAss)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                          (h, l |`\n                              W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>unit,(h, (l |` W)(V \\<mapsto> v))\\<rangle>\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 98 subgoals...", "with RedLAss"], ["proof (chain)\npicking this:\n  fv (V:=Val v) \\<subseteq> W\n  extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                          (h, l |`\n                              W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>unit,(h, (l |` W)(V \\<mapsto> v))\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  fv (V:=Val v) \\<subseteq> W\n  extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                          (h, l |`\n                              W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>unit,(h, (l |` W)(V \\<mapsto> v))\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                            (hp (h, l),\n                             lcl (h, l) |`\n                             W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                           \\<langle>unit,\n                            (hp (h, l(V \\<mapsto> v)),\n                             lcl (h, l(V \\<mapsto> v)) |` W)\\<rangle>", "by(simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>V:=Val v,\n                          (hp (h, l),\n                           lcl (h, l) |`\n                           W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>unit,\n                          (hp (h, l(V \\<mapsto> v)),\n                           lcl (h, l(V \\<mapsto> v)) |` W)\\<rangle>\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 97 subgoals...", "next"], ["proof (state)\ngoal (97 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 97 subgoals...", "case (BlockRed e h x V vo ta e' h' x' T)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  fv e \\<subseteq> ?W18 \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           ?W18)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` ?W18)\\<rangle>\n  fv {V:T=vo; e} \\<subseteq> W\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 97 subgoals...", "have IH: \"\\<And>W. fv e \\<subseteq> W \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e,(hp (h, x(V := vo)), lcl (h, x(V := vo)) |` W)\\<rangle> -ta\\<rightarrow> \\<langle>e',(hp (h', x'), lcl (h', x') |` W)\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       fv e \\<subseteq> W \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>e,\n                               (hp (h, x(V := vo)),\n                                lcl (h, x(V := vo)) |`\n                                W)\\<rangle> -ta\\<rightarrow>\n                              \\<langle>e',\n                               (hp (h', x'), lcl (h', x') |` W)\\<rangle>", "by fact"], ["proof (state)\nthis:\n  fv e \\<subseteq> ?W18 \\<Longrightarrow>\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           ?W18)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` ?W18)\\<rangle>\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 97 subgoals...", "from \\<open>fv {V:T=vo; e} \\<subseteq> W\\<close>"], ["proof (chain)\npicking this:\n  fv {V:T=vo; e} \\<subseteq> W", "have fve: \"fv e \\<subseteq> insert V W\""], ["proof (prove)\nusing this:\n  fv {V:T=vo; e} \\<subseteq> W\n\ngoal (1 subgoal):\n 1. fv e \\<subseteq> insert V W", "by auto"], ["proof (state)\nthis:\n  fv e \\<subseteq> insert V W\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 97 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "proof(cases \"V \\<in> W\")"], ["proof (state)\ngoal (2 subgoals):\n 1. V \\<in> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>\n 2. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "case True"], ["proof (state)\nthis:\n  V \\<in> W\n\ngoal (2 subgoals):\n 1. V \\<in> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>\n 2. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with fve"], ["proof (chain)\npicking this:\n  fv e \\<subseteq> insert V W\n  V \\<in> W", "have \"fv e \\<subseteq> W\""], ["proof (prove)\nusing this:\n  fv e \\<subseteq> insert V W\n  V \\<in> W\n\ngoal (1 subgoal):\n 1. fv e \\<subseteq> W", "by auto"], ["proof (state)\nthis:\n  fv e \\<subseteq> W\n\ngoal (2 subgoals):\n 1. V \\<in> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>\n 2. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "from True IH[OF this]"], ["proof (chain)\npicking this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` W)\\<rangle>", "have \"extTA,P,t \\<turnstile> \\<langle>e,(h, (x |` W )(V := vo))\\<rangle> -ta\\<rightarrow> \\<langle>e',(h', x' |` W)\\<rangle>\""], ["proof (prove)\nusing this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` W)\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>e,\n                            (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>e',(h', x' |` W)\\<rangle>", "by(simp)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` W)\\<rangle>\n\ngoal (2 subgoals):\n 1. V \\<in> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>\n 2. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with True"], ["proof (chain)\npicking this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` W)\\<rangle>", "have \"extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},(h, x |` W)\\<rangle> -ta\\<rightarrow> \\<langle>{V:T=x' V; e'},(h', (x' |` W)(V := x V))\\<rangle>\""], ["proof (prove)\nusing this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` W)\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (h', (x' |` W)(V := x V))\\<rangle>", "by -(drule red_reds.BlockRed[where T=T], simp)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (h', (x' |` W)(V := x V))\\<rangle>\n\ngoal (2 subgoals):\n 1. V \\<in> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>\n 2. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with True"], ["proof (chain)\npicking this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (h', (x' |` W)(V := x V))\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  V \\<in> W\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (h', (x' |` W)(V := x V))\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "by(simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           lcl (h', x'(V := x V)) |` W)\\<rangle>\n\ngoal (1 subgoal):\n 1. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "case False"], ["proof (state)\nthis:\n  V \\<notin> W\n\ngoal (1 subgoal):\n 1. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with IH[OF fve]"], ["proof (chain)\npicking this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           insert V W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` insert V W)\\<rangle>\n  V \\<notin> W", "have \"extTA,P,t \\<turnstile> \\<langle>e,(h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow> \\<langle>e',(h', x' |` insert V W)\\<rangle>\""], ["proof (prove)\nusing this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (hp (h, x(V := vo)),\n                           lcl (h, x(V := vo)) |`\n                           insert V W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',\n                          (hp (h', x'), lcl (h', x') |` insert V W)\\<rangle>\n  V \\<notin> W\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>e,\n                            (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                           \\<langle>e',(h', x' |` insert V W)\\<rangle>", "by(simp)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` insert V W)\\<rangle>\n\ngoal (1 subgoal):\n 1. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with False"], ["proof (chain)\npicking this:\n  V \\<notin> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` insert V W)\\<rangle>", "have \"extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},(h, x |` W)\\<rangle> -ta\\<rightarrow> \\<langle>{V:T=x' V; e'},(h', (x' |` W))\\<rangle>\""], ["proof (prove)\nusing this:\n  V \\<notin> W\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, (x |` W)(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x' |` insert V W)\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},(h', x' |` W)\\<rangle>", "by -(drule red_reds.BlockRed[where T=T],simp)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},(h', x' |` W)\\<rangle>\n\ngoal (1 subgoal):\n 1. V \\<notin> W \\<Longrightarrow>\n    extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "with False"], ["proof (chain)\npicking this:\n  V \\<notin> W\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},(h', x' |` W)\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  V \\<notin> W\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (h, x |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},(h', x' |` W)\\<rangle>\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                            (hp (h, x),\n                             lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                           \\<langle>{V:T=x' V; e'},\n                            (hp (h', x'(V := x V)),\n                             lcl (h', x'(V := x V)) |` W)\\<rangle>", "by(simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           lcl (h', x'(V := x V)) |` W)\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>{V:T=vo; e},\n                          (hp (h, x),\n                           lcl (h, x) |` W)\\<rangle> -ta\\<rightarrow>\n                         \\<langle>{V:T=x' V; e'},\n                          (hp (h', x'(V := x V)),\n                           lcl (h', x'(V := x V)) |` W)\\<rangle>\n\ngoal (96 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 96 subgoals...", "next"], ["proof (state)\ngoal (96 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 96 subgoals...", "case RedTryFail"], ["proof (state)\nthis:\n  typeof_addr (hp s_) a_ = \\<lfloor>Class_type D_\\<rfloor>\n  \\<not> P \\<turnstile> D_ \\<preceq>\\<^sup>* C_\n  fv (try Throw a_ catch(C_ V_) e2_) \\<subseteq> W\n\ngoal (96 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 96 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  typeof_addr (hp s_) a_ = \\<lfloor>Class_type D_\\<rfloor>\n  \\<not> P \\<turnstile> D_ \\<preceq>\\<^sup>* C_\n  fv (try Throw a_ catch(C_ V_) e2_) \\<subseteq> W\n\ngoal (1 subgoal):\n 1. extTA,P,t \\<turnstile> \\<langle>try Throw a_ catch(C_ V_) e2_,\n                            (hp s_,\n                             lcl s_ |`\n                             W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                           \\<langle>Throw a_,(hp s_, lcl s_ |` W)\\<rangle>", "by(auto intro: red_reds.RedTryFail)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>try Throw a_ catch(C_ V_) e2_,\n                          (hp s_,\n                           lcl s_ |`\n                           W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                         \\<langle>Throw a_,(hp s_, lcl s_ |` W)\\<rangle>\n\ngoal (95 subgoals):\n 1. \\<And>h' a h C l W.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Class_type C)\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 2. \\<And>h C l W.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        fv (new C) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>new C,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 3. \\<And>e s ta e' s' T W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>e\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>newA T\\<lfloor>e'\\<rceil>,(hp s', lcl s' |` W)\\<rangle>\n 4. \\<And>i h' a h T l W.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |`\n            W)\\<rangle> -\\<lbrace>NewHeapElem a\n                                   (Array_type T\n                                     (nat (sint i)))\\<rbrace>\\<rightarrow>\n          \\<langle>addr a,(hp (h', l), lcl (h', l) |` W)\\<rangle>\n 5. \\<And>i T s W.\n       \\<lbrakk>i <s 0;\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt NegativeArraySize),\n           (hp s, lcl s |` W)\\<rangle>\n 6. \\<And>i h T l W.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        fv (newA T\\<lfloor>Val (Intg i)\\<rceil>) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>newA T\\<lfloor>Val\n                                   (Intg i)\\<rceil>,\n           (hp (h, l),\n            lcl (h, l) |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt OutOfMemory),\n           (hp (h, l), lcl (h, l) |` W)\\<rangle>\n 7. \\<And>e s ta e' s' C W.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        \\<And>W.\n           fv e \\<subseteq> W \\<Longrightarrow>\n           extTA,P,t \\<turnstile> \\<langle>e,\n                                   (hp s,\n                                    lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                  \\<langle>e',(hp s', lcl s' |` W)\\<rangle>;\n        fv (Cast C e) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast C e,\n           (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n          \\<langle>Cast C e',(hp s', lcl s' |` W)\\<rangle>\n 8. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Val v,(hp s, lcl s |` W)\\<rangle>\n 9. \\<And>s v U T W.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        fv (Cast T (Val v)) \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>Cast T (Val v),\n           (hp s, lcl s |` W)\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n          \\<langle>Throw (addr_of_sys_xcpt ClassCast),\n           (hp s, lcl s |` W)\\<rangle>\n 10. \\<And>e s ta e' s' T W.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         \\<And>W.\n            fv e \\<subseteq> W \\<Longrightarrow>\n            extTA,P,t \\<turnstile> \\<langle>e,\n                                    (hp s,\n                                     lcl s |` W)\\<rangle> -ta\\<rightarrow>\n                                   \\<langle>e',\n                                    (hp s', lcl s' |` W)\\<rangle>;\n         fv (e instanceof T) \\<subseteq> W\\<rbrakk>\n        \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>e instanceof T,\n            (hp s, lcl s |` W)\\<rangle> -ta\\<rightarrow>\n           \\<langle>e' instanceof T,(hp s', lcl s' |` W)\\<rangle>\nA total of 95 subgoals...", "qed(fastforce intro: red_reds.intros)+"], ["", "lemma red_notfree_unchanged: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; V \\<notin> fv e \\<rbrakk> \\<Longrightarrow> lcl s' V = lcl s V\"\n  and reds_notfree_unchanged: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; V \\<notin> fvs es \\<rbrakk> \\<Longrightarrow> lcl s' V = lcl s V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                                     \\<langle>e',s'\\<rangle>;\n      V \\<notin> fv e\\<rbrakk>\n     \\<Longrightarrow> lcl s' V = lcl s V) &&&\n    (\\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\ns\\<rangle> [-ta\\<rightarrow>]\n                                     \\<langle>es',s'\\<rangle>;\n      V \\<notin> fvs es\\<rbrakk>\n     \\<Longrightarrow> lcl s' V = lcl s V)", "apply(induct rule: red_reds.inducts)"], ["proof (prove)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        V \\<notin> fv (new C)\\<rbrakk>\n       \\<Longrightarrow> lcl (h', l) V = lcl (h, l) V\n 2. \\<And>h C l.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        V \\<notin> fv (new C)\\<rbrakk>\n       \\<Longrightarrow> lcl (h, l) V = lcl (h, l) V\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        V \\<notin> fv e \\<Longrightarrow> lcl s' V = lcl s V;\n        V \\<notin> fv (newA T\\<lfloor>e\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> lcl s' V = lcl s V\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        V \\<notin> fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> lcl (h', l) V = lcl (h, l) V\n 5. \\<And>i T s.\n       \\<lbrakk>i <s 0;\n        V \\<notin> fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> lcl s V = lcl s V\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        V \\<notin> fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> lcl (h, l) V = lcl (h, l) V\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        V \\<notin> fv e \\<Longrightarrow> lcl s' V = lcl s V;\n        V \\<notin> fv (Cast C e)\\<rbrakk>\n       \\<Longrightarrow> lcl s' V = lcl s V\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T; V \\<notin> fv (Cast T (Val v))\\<rbrakk>\n       \\<Longrightarrow> lcl s V = lcl s V\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        V \\<notin> fv (Cast T (Val v))\\<rbrakk>\n       \\<Longrightarrow> lcl s V = lcl s V\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         V \\<notin> fv e \\<Longrightarrow> lcl s' V = lcl s V;\n         V \\<notin> fv (e instanceof T)\\<rbrakk>\n        \\<Longrightarrow> lcl s' V = lcl s V\nA total of 98 subgoals...", "apply(fastforce)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma red_dom_lcl: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\"\n  and reds_dom_lcl: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fvs es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e) &&&\n    (extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fvs es)", "proof (induct rule:red_reds.inducts)"], ["proof (state)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       dom (lcl (h', l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 2. \\<And>h C l.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       dom (lcl (h, l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (newA T\\<lfloor>e\\<rceil>)\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h', l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 5. \\<And>i T s.\n       i <s 0 \\<Longrightarrow>\n       dom (lcl s)\n       \\<subseteq> dom (lcl s) \\<union>\n                   fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h, l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union> fv (Cast C e)\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n        \\<Longrightarrow> dom (lcl s')\n                          \\<subseteq> dom (lcl s) \\<union>\nfv (e instanceof T)\nA total of 98 subgoals...", "case (BlockRed e h x V vo ta e' h' x' T)"], ["proof (state)\nthis:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  dom (lcl (h', x')) \\<subseteq> dom (lcl (h, x(V := vo))) \\<union> fv e\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       dom (lcl (h', l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 2. \\<And>h C l.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       dom (lcl (h, l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (newA T\\<lfloor>e\\<rceil>)\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h', l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 5. \\<And>i T s.\n       i <s 0 \\<Longrightarrow>\n       dom (lcl s)\n       \\<subseteq> dom (lcl s) \\<union>\n                   fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h, l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union> fv (Cast C e)\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n        \\<Longrightarrow> dom (lcl s')\n                          \\<subseteq> dom (lcl s) \\<union>\nfv (e instanceof T)\nA total of 98 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  extTA,P,t \\<turnstile> \\<langle>e,\n                          (h, x(V := vo))\\<rangle> -ta\\<rightarrow>\n                         \\<langle>e',(h', x')\\<rangle>\n  dom (lcl (h', x')) \\<subseteq> dom (lcl (h, x(V := vo))) \\<union> fv e\n\ngoal (1 subgoal):\n 1. dom (lcl (h', x'(V := x V)))\n    \\<subseteq> dom (lcl (h, x)) \\<union> fv {V:T=vo; e}", "by(clarsimp)(fastforce split:if_split_asm)"], ["proof (state)\nthis:\n  dom (lcl (h', x'(V := x V)))\n  \\<subseteq> dom (lcl (h, x)) \\<union> fv {V:T=vo; e}\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l.\n       (h', a) \\<in> allocate h (Class_type C) \\<Longrightarrow>\n       dom (lcl (h', l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 2. \\<And>h C l.\n       allocate h (Class_type C) = {} \\<Longrightarrow>\n       dom (lcl (h, l)) \\<subseteq> dom (lcl (h, l)) \\<union> fv (new C)\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (newA T\\<lfloor>e\\<rceil>)\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h', l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 5. \\<And>i T s.\n       i <s 0 \\<Longrightarrow>\n       dom (lcl s)\n       \\<subseteq> dom (lcl s) \\<union>\n                   fv (newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i;\n        allocate h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> dom (lcl (h, l))\n                         \\<subseteq> dom (lcl (h, l)) \\<union>\n                                     fv\n(newA T\\<lfloor>Val (Intg i)\\<rceil>)\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n        dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s')\n                         \\<subseteq> dom (lcl s) \\<union> fv (Cast C e)\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> dom (lcl s)\n                         \\<subseteq> dom (lcl s) \\<union>\n                                     fv (Cast T (Val v))\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,\n   s\\<rangle> -ta\\<rightarrow>\n  \\<langle>e',s'\\<rangle>;\n         dom (lcl s') \\<subseteq> dom (lcl s) \\<union> fv e\\<rbrakk>\n        \\<Longrightarrow> dom (lcl s')\n                          \\<subseteq> dom (lcl s) \\<union>\nfv (e instanceof T)\nA total of 97 subgoals...", "qed auto"], ["", "lemma red_Suspend_is_call:\n  \"\\<lbrakk> convert_extTA extNTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a vs hT Ts Tr D. call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and> typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and> P \\<turnstile> class_type_of hT sees wait:Ts\\<rightarrow>Tr = Native in D\"\n  and reds_Suspend_is_calls:\n  \"\\<lbrakk> convert_extTA extNTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a vs hT Ts Tr D. calls es' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and> typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and> P \\<turnstile> class_type_of hT sees wait:Ts\\<rightarrow>Tr = Native in D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>convert_extTA\n               extNTA,P,t \\<turnstile> \\<langle>e,\n  s\\<rangle> -ta\\<rightarrow>\n \\<langle>e',s'\\<rangle>;\n      Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n     \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                          call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                          typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n                          P \\<turnstile> class_type_of\n    hT sees wait: Ts\\<rightarrow>Tr = Native in D) &&&\n    (\\<lbrakk>convert_extTA\n               extNTA,P,t \\<turnstile> \\<langle>es,\n  s\\<rangle> [-ta\\<rightarrow>]\n \\<langle>es',s'\\<rangle>;\n      Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n     \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                          calls es' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                          typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n                          P \\<turnstile> class_type_of\n    hT sees wait: Ts\\<rightarrow>Tr = Native in D)", "proof(induct rule: red_reds.inducts)"], ["proof (state)\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Class_type\n C)\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 2. \\<And>h C l.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (newA T\\<lfloor>e'\\<rceil>) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Array_type T\n (nat (sint i)))\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 5. \\<And>i T s.\n       \\<lbrakk>i <s 0;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call\n                             (Throw (addr_of_sys_xcpt NegativeArraySize)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Cast C e') =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Val v) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt ClassCast)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>convert_extTA\n                  extNTA,P,t \\<turnstile> \\<langle>e,\n     s\\<rangle> -ta\\<rightarrow>\n    \\<langle>e',s'\\<rangle>;\n         Suspend w\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n         \\<exists>a vs hT Ts Tr D.\n            call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n            typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n            P \\<turnstile> class_type_of\n                            hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n         Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                             call (e' instanceof T) =\n                             \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                             typeof_addr (hp s) a =\n                             \\<lfloor>hT\\<rfloor> \\<and>\n                             P \\<turnstile> class_type_of\n       hT sees wait: Ts\\<rightarrow>Tr = Native in D\nA total of 98 subgoals...", "case RedCallExternal"], ["proof (state)\nthis:\n  typeof_addr (hp s_) a_ = \\<lfloor>hU_\\<rfloor>\n  P \\<turnstile> class_type_of\n                  hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_\n  P,t \\<turnstile> \\<langle>a_\\<bullet>M_(vs_),\n                   hp s_\\<rangle> -ta_\\<rightarrow>ext \\<langle>va_,\n                 h'_\\<rangle>\n  ta'_ = convert_extTA extNTA ta_\n  e'_ = extRet2J (addr a_\\<bullet>M_(map Val vs_)) va_\n  s'_ = (h'_, lcl s_)\n  Suspend w \\<in> set \\<lbrace>ta'_\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (98 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Class_type\n C)\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 2. \\<And>h C l.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (newA T\\<lfloor>e'\\<rceil>) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Array_type T\n (nat (sint i)))\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 5. \\<And>i T s.\n       \\<lbrakk>i <s 0;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call\n                             (Throw (addr_of_sys_xcpt NegativeArraySize)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Cast C e') =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Val v) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt ClassCast)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>convert_extTA\n                  extNTA,P,t \\<turnstile> \\<langle>e,\n     s\\<rangle> -ta\\<rightarrow>\n    \\<langle>e',s'\\<rangle>;\n         Suspend w\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n         \\<exists>a vs hT Ts Tr D.\n            call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n            typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n            P \\<turnstile> class_type_of\n                            hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n         Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                             call (e' instanceof T) =\n                             \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                             typeof_addr (hp s) a =\n                             \\<lfloor>hT\\<rfloor> \\<and>\n                             P \\<turnstile> class_type_of\n       hT sees wait: Ts\\<rightarrow>Tr = Native in D\nA total of 98 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  typeof_addr (hp s_) a_ = \\<lfloor>hU_\\<rfloor>\n  P \\<turnstile> class_type_of\n                  hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_\n  P,t \\<turnstile> \\<langle>a_\\<bullet>M_(vs_),\n                   hp s_\\<rangle> -ta_\\<rightarrow>ext \\<langle>va_,\n                 h'_\\<rangle>\n  ta'_ = convert_extTA extNTA ta_\n  e'_ = extRet2J (addr a_\\<bullet>M_(map Val vs_)) va_\n  s'_ = (h'_, lcl s_)\n  Suspend w \\<in> set \\<lbrace>ta'_\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>a vs hT Ts Tr D.\n       call e'_ = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n       typeof_addr (hp s_) a = \\<lfloor>hT\\<rfloor> \\<and>\n       P \\<turnstile> class_type_of\n                       hT sees wait: Ts\\<rightarrow>Tr = Native in D", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typeof_addr (hp s_) a_ = \\<lfloor>hU_\\<rfloor>;\n     P \\<turnstile> class_type_of\n                     hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_;\n     P,t \\<turnstile> \\<langle>a_\\<bullet>M_(vs_),\n                      hp s_\\<rangle> -ta_\\<rightarrow>ext \\<langle>va_,\n                    h'_\\<rangle>;\n     ta'_ = convert_extTA extNTA ta_;\n     e'_ = extRet2J (addr a_\\<bullet>M_(map Val vs_)) va_;\n     s'_ = (h'_, lcl s_);\n     Suspend w \\<in> set \\<lbrace>ta_\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa.\n                         (\\<exists>vsa.\n                             call\n                              (extRet2J (addr a_\\<bullet>M_(map Val vs_))\n                                va_) =\n                             \\<lfloor>(aa, wait, vsa)\\<rfloor>) \\<and>\n                         (\\<exists>hT.\n                             typeof_addr (hp s_) aa =\n                             \\<lfloor>hT\\<rfloor> \\<and>\n                             (\\<exists>Ts Tr.\n                                 Ex (Method_native P (class_type_of hT) wait\nTs Tr)))", "apply(frule red_external_Suspend_StaySame, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typeof_addr (hp s_) a_ = \\<lfloor>hU_\\<rfloor>;\n     P \\<turnstile> class_type_of\n                     hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_;\n     P,t \\<turnstile> \\<langle>a_\\<bullet>M_(vs_),\n                      hp s_\\<rangle> -ta_\\<rightarrow>ext \\<langle>va_,\n                    h'_\\<rangle>;\n     ta'_ = convert_extTA extNTA ta_;\n     e'_ = extRet2J (addr a_\\<bullet>M_(map Val vs_)) va_;\n     s'_ = (h'_, lcl s_);\n     Suspend w \\<in> set \\<lbrace>ta_\\<rbrace>\\<^bsub>w\\<^esub>;\n     va_ = RetStaySame\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa.\n                         (\\<exists>vsa.\n                             call\n                              (extRet2J (addr a_\\<bullet>M_(map Val vs_))\n                                va_) =\n                             \\<lfloor>(aa, wait, vsa)\\<rfloor>) \\<and>\n                         (\\<exists>hT.\n                             typeof_addr (hp s_) aa =\n                             \\<lfloor>hT\\<rfloor> \\<and>\n                             (\\<exists>Ts Tr.\n                                 Ex (Method_native P (class_type_of hT) wait\nTs Tr)))", "apply(drule red_external_Suspend_waitD, fastforce+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>a vs hT Ts Tr D.\n     call e'_ = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n     typeof_addr (hp s_) a = \\<lfloor>hT\\<rfloor> \\<and>\n     P \\<turnstile> class_type_of\n                     hT sees wait: Ts\\<rightarrow>Tr = Native in D\n\ngoal (97 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>(h', a) \\<in> allocate h (Class_type C);\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Class_type\n C)\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 2. \\<And>h C l.\n       \\<lbrakk>allocate h (Class_type C) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (newA T\\<lfloor>e'\\<rceil>) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>0 \\<le>s i;\n        (h', a) \\<in> allocate h (Array_type T (nat (sint i)));\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>NewHeapElem a\n                                     (Array_type T\n (nat (sint i)))\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa vs hT Ts Tr D.\n                            call (addr a) =\n                            \\<lfloor>(aa, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) aa =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 5. \\<And>i T s.\n       \\<lbrakk>i <s 0;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call\n                             (Throw (addr_of_sys_xcpt NegativeArraySize)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 6. \\<And>i h T l.\n       \\<lbrakk>0 \\<le>s i; allocate h (Array_type T (nat (sint i))) = {};\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt OutOfMemory)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp (h, l)) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>convert_extTA\n                 extNTA,P,t \\<turnstile> \\<langle>e,\n    s\\<rangle> -ta\\<rightarrow>\n   \\<langle>e',s'\\<rangle>;\n        Suspend w\n        \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        \\<exists>a vs hT Ts Tr D.\n           call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n           typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n           P \\<turnstile> class_type_of\n                           hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n        Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Cast C e') =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 8. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Val v) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 9. \\<And>s v U T.\n       \\<lbrakk>typeof\\<^bsub>hp s\\<^esub> v = \\<lfloor>U\\<rfloor>;\n        \\<not> P \\<turnstile> U \\<le> T;\n        Suspend w\n        \\<in> set \\<lbrace>\\<lbrace>\\<rbrace>\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                            call (Throw (addr_of_sys_xcpt ClassCast)) =\n                            \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                            typeof_addr (hp s) a =\n                            \\<lfloor>hT\\<rfloor> \\<and>\n                            P \\<turnstile> class_type_of\n      hT sees wait: Ts\\<rightarrow>Tr = Native in D\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>convert_extTA\n                  extNTA,P,t \\<turnstile> \\<langle>e,\n     s\\<rangle> -ta\\<rightarrow>\n    \\<langle>e',s'\\<rangle>;\n         Suspend w\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n         \\<exists>a vs hT Ts Tr D.\n            call e' = \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n            typeof_addr (hp s) a = \\<lfloor>hT\\<rfloor> \\<and>\n            P \\<turnstile> class_type_of\n                            hT sees wait: Ts\\<rightarrow>Tr = Native in D;\n         Suspend w \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>a vs hT Ts Tr D.\n                             call (e' instanceof T) =\n                             \\<lfloor>(a, wait, vs)\\<rfloor> \\<and>\n                             typeof_addr (hp s) a =\n                             \\<lfloor>hT\\<rfloor> \\<and>\n                             P \\<turnstile> class_type_of\n       hT sees wait: Ts\\<rightarrow>Tr = Native in D\nA total of 97 subgoals...", "qed auto"], ["", "end"], ["", "context J_heap begin"], ["", "lemma red_hext_incr: \"extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle> \\<Longrightarrow> hp s \\<unlhd> hp s'\"\n  and reds_hext_incr: \"extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle> \\<Longrightarrow> hp s \\<unlhd> hp s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     hp s \\<unlhd> hp s') &&&\n    (extTA,P,t \\<turnstile> \\<langle>es,s\\<rangle> [-ta\\<rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     hp s \\<unlhd> hp s')", "by(induct rule:red_reds.inducts)(auto intro: hext_heap_ops red_external_hext)"], ["", "lemma red_preserves_tconf: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>e, s\\<rangle> -ta\\<rightarrow> \\<langle>e', s'\\<rangle>; P,hp s \\<turnstile> t \\<surd>t \\<rbrakk> \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>e,s\\<rangle> -ta\\<rightarrow>\n                                    \\<langle>e',s'\\<rangle>;\n     P,hp s \\<turnstile> t \\<surd>t\\<rbrakk>\n    \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t", "by(drule red_hext_incr)(rule tconf_hext_mono)"], ["", "lemma reds_preserves_tconf: \"\\<lbrakk> extTA,P,t \\<turnstile> \\<langle>es, s\\<rangle> [-ta\\<rightarrow>] \\<langle>es', s'\\<rangle>; P,hp s \\<turnstile> t \\<surd>t \\<rbrakk> \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extTA,P,t \\<turnstile> \\<langle>es,\n                                     s\\<rangle> [-ta\\<rightarrow>]\n                                    \\<langle>es',s'\\<rangle>;\n     P,hp s \\<turnstile> t \\<surd>t\\<rbrakk>\n    \\<Longrightarrow> P,hp s' \\<turnstile> t \\<surd>t", "by(drule reds_hext_incr)(rule tconf_hext_mono)"], ["", "end"], ["", "subsection \\<open>Code generation\\<close>"], ["", "context J_heap_base begin"], ["", "lemma RedCall_code:\n  \"\\<lbrakk> is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = \\<lfloor>(pns,body)\\<rfloor> in D; \n    size es = size pns; size Ts = size pns \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>blocks (this # pns) (Class D # Ts) (Addr a # map the_Val es) body, s\\<rangle>\"\n\n  and RedCallExternal_code:\n  \"\\<lbrakk> is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>; P \\<turnstile> class_type_of hU sees M:Ts\\<rightarrow>T = Native in D;\n     P,t \\<turnstile> \\<langle>a\\<bullet>M(map the_Val es), hp s\\<rangle> -ta\\<rightarrow>ext \\<langle>va, h'\\<rangle> \\<rbrakk>\n  \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(addr a)\\<bullet>M(es), s\\<rangle> -extTA ta\\<rightarrow> \\<langle>extRet2J ((addr a)\\<bullet>M(es)) va, (h', lcl s)\\<rangle>\"\n\n  and RedCallNull_code:\n  \"is_vals es \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>null\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>THROW NullPointer, s\\<rangle>\"\n  \n  and CallThrowParams_code:\n  \"is_Throws es \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>(Val v)\\<bullet>M(es), s\\<rangle> -\\<epsilon>\\<rightarrow> \\<langle>hd (dropWhile is_val es), s\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>;\n       P \\<turnstile> class_type_of\n                       hU sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                         body)\\<rfloor> in D;\n       length es = length pns; length Ts = length pns\\<rbrakk>\n      \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>addr\n                   a\\<bullet>M(es),\n          s\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n         \\<langle>blocks (this # pns) (Class D # Ts)\n                   (Addr a # map the_Val es) body,\n          s\\<rangle>) &&&\n     (\\<lbrakk>is_vals es; typeof_addr (hp s) a = \\<lfloor>hU\\<rfloor>;\n       P \\<turnstile> class_type_of\n                       hU sees M: Ts\\<rightarrow>T = Native in D;\n       P,t \\<turnstile> \\<langle>a\\<bullet>M(map the_Val es),\n                        hp s\\<rangle> -ta\\<rightarrow>ext \\<langle>va,\n                    h'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> extTA,P,t \\<turnstile> \\<langle>addr\n                   a\\<bullet>M(es),\n          s\\<rangle> -extTA ta\\<rightarrow>\n         \\<langle>extRet2J (addr a\\<bullet>M(es)) va,\n          (h', lcl s)\\<rangle>)) &&&\n    (is_vals es \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>null\\<bullet>M(es),\n                             s\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                            \\<langle>Throw (addr_of_sys_xcpt NullPointer),\n                             s\\<rangle>) &&&\n    (is_Throws es \\<Longrightarrow>\n     extTA,P,t \\<turnstile> \\<langle>Val v\\<bullet>M(es),\n                             s\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                            \\<langle>hd (dropWhile is_val es),s\\<rangle>)", "apply(auto simp add: is_vals_conv is_Throws_conv o_def intro: RedCall RedCallExternal RedCallNull simp del: blocks.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vs a es'.\n       es = map Val vs @ Throw a # es' \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>Val\n  v\\<bullet>M(map Val vs @ Throw a # es'),\n                               s\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>hd\n  (dropWhile is_val (map Val vs @ Throw a # es')),\n                               s\\<rangle>", "apply(subst dropWhile_append2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>vs a es' x.\n       \\<lbrakk>es = map Val vs @ Throw a # es';\n        x \\<in> set (map Val vs)\\<rbrakk>\n       \\<Longrightarrow> is_val x\n 2. \\<And>vs a es'.\n       es = map Val vs @ Throw a # es' \\<Longrightarrow>\n       extTA,P,t \\<turnstile> \\<langle>Val\n  v\\<bullet>M(map Val vs @ Throw a # es'),\n                               s\\<rangle> -\\<lbrace>\\<rbrace>\\<rightarrow>\n                              \\<langle>hd\n  (dropWhile is_val (Throw a # es')),\n                               s\\<rangle>", "apply(auto intro: CallThrowParams)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemmas [code_pred_intro] = \n  J_heap_base.RedNew[folded Predicate_Compile.contains_def] J_heap_base.RedNewFail J_heap_base.NewArrayRed \n  J_heap_base.RedNewArray[folded Predicate_Compile.contains_def]\n  J_heap_base.RedNewArrayNegative J_heap_base.RedNewArrayFail\n  J_heap_base.CastRed J_heap_base.RedCast J_heap_base.RedCastFail J_heap_base.InstanceOfRed\n  J_heap_base.RedInstanceOf J_heap_base.BinOpRed1 J_heap_base.BinOpRed2 J_heap_base.RedBinOp J_heap_base.RedBinOpFail \n  J_heap_base.RedVar J_heap_base.LAssRed J_heap_base.RedLAss\n  J_heap_base.AAccRed1 J_heap_base.AAccRed2 J_heap_base.RedAAccNull\n  J_heap_base.RedAAccBounds J_heap_base.RedAAcc J_heap_base.AAssRed1 J_heap_base.AAssRed2 J_heap_base.AAssRed3\n  J_heap_base.RedAAssNull J_heap_base.RedAAssBounds J_heap_base.RedAAssStore J_heap_base.RedAAss J_heap_base.ALengthRed\n  J_heap_base.RedALength J_heap_base.RedALengthNull J_heap_base.FAccRed J_heap_base.RedFAcc J_heap_base.RedFAccNull\n  J_heap_base.FAssRed1 J_heap_base.FAssRed2 J_heap_base.RedFAss J_heap_base.RedFAssNull\n  J_heap_base.CASRed1 J_heap_base.CASRed2 J_heap_base.CASRed3 J_heap_base.CASNull J_heap_base.RedCASSucceed J_heap_base.RedCASFail\n  J_heap_base.CallObj J_heap_base.CallParams"], ["", "declare\n  J_heap_base.RedCall_code[code_pred_intro RedCall_code]\n  J_heap_base.RedCallExternal_code[code_pred_intro RedCallExternal_code]\n  J_heap_base.RedCallNull_code[code_pred_intro RedCallNull_code]"], ["", "lemmas [code_pred_intro] =\n  J_heap_base.BlockRed J_heap_base.RedBlock J_heap_base.SynchronizedRed1 J_heap_base.SynchronizedNull\n  J_heap_base.LockSynchronized J_heap_base.SynchronizedRed2 J_heap_base.UnlockSynchronized\n  J_heap_base.SeqRed J_heap_base.RedSeq J_heap_base.CondRed J_heap_base.RedCondT J_heap_base.RedCondF J_heap_base.RedWhile\n  J_heap_base.ThrowRed"], ["", "declare\n  J_heap_base.RedThrowNull[code_pred_intro RedThrowNull']"], ["", "lemmas [code_pred_intro] =\n  J_heap_base.TryRed J_heap_base.RedTry J_heap_base.RedTryCatch\n  J_heap_base.RedTryFail J_heap_base.ListRed1 J_heap_base.ListRed2\n  J_heap_base.NewArrayThrow J_heap_base.CastThrow J_heap_base.InstanceOfThrow J_heap_base.BinOpThrow1 J_heap_base.BinOpThrow2\n  J_heap_base.LAssThrow J_heap_base.AAccThrow1 J_heap_base.AAccThrow2 J_heap_base.AAssThrow1 J_heap_base.AAssThrow2\n  J_heap_base.AAssThrow3 J_heap_base.ALengthThrow J_heap_base.FAccThrow J_heap_base.FAssThrow1 J_heap_base.FAssThrow2\n  J_heap_base.CASThrow J_heap_base.CASThrow2 J_heap_base.CASThrow3\n  J_heap_base.CallThrowObj"], ["", "declare\n  J_heap_base.CallThrowParams_code[code_pred_intro CallThrowParams_code]"], ["", "lemmas [code_pred_intro] =\n  J_heap_base.BlockThrow J_heap_base.SynchronizedThrow1 J_heap_base.SynchronizedThrow2 J_heap_base.SeqThrow\n  J_heap_base.CondThrow"], ["", "declare\n  J_heap_base.ThrowThrow[code_pred_intro ThrowThrow']"], ["", "code_pred\n  (modes:\n    J_heap_base.red: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> (i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> (i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> o \\<Rightarrow> o \\<Rightarrow> bool \n   and\n    J_heap_base.reds: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> (i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> (i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> o \\<Rightarrow> o \\<Rightarrow> bool)\n  [detect_switches, skip_proof] \\<comment> \\<open>proofs are possible, but take veeerry long\\<close>\n  J_heap_base.red"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n               (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n      \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n         allocate typeof_addr heap_read heap_write extTA P t C h l a h'.\n         \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n          xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n          xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n          xi = P; xj = t; xk = new C; (xl, xm) = (h, l);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n          xt = addr a; (xu, xv) = (h', l);\n          Predicate_Compile.contains (allocate h (Class_type C))\n           (h', a)\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ Ca_ ha_ la_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = new Ca_; (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n          (xu, xv) = (ha_, la_);\n          allocatea_ ha_ (Class_type Ca_) = {}\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>e_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = newA T_\\<lfloor>e'_\\<rceil>; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ i_ ha_ la_ aa_ h'a_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>NewHeapElem aa_ (Array_type T_ (nat (sint i_)))\\<rbrace>;\n          xt = addr aa_; (xu, xv) = (h'a_, la_); 0 \\<le>s i_;\n          Predicate_Compile.contains\n           (allocatea_ ha_ (Array_type T_ (nat (sint i_))))\n           (h'a_, aa_)\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ i_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n             NegativeArraySize);\n          (xu, xv) = s_; i_ <s 0\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ i_ ha_ la_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n          (xu, xv) = (ha_, la_); 0 \\<le>s i_;\n          allocatea_ ha_ (Array_type T_ (nat (sint i_))) = {}\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ Cb_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Cast Cb_ e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = Cast Cb_ e'_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ v_ s_ U_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n          (xu, xv) = s_;\n          heap_base.typeof_h typeof_addra_ (hp s_) v_ =\n          \\<lfloor>U_\\<rfloor>;\n          Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ v_ s_ U_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ClassCast);\n          (xu, xv) = s_;\n          heap_base.typeof_h typeof_addra_ (hp s_) v_ =\n          \\<lfloor>U_\\<rfloor>;\n          \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ T_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = e_ instanceof T_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_ instanceof T_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ T_ s_ b_ U_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_ instanceof T_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val (Bool b_);\n          (xu, xv) = s_;\n          heap_base.typeof_h typeof_addra_ (hp s_) v_ =\n          \\<lfloor>U_\\<rfloor>;\n          b_ =\n          (v_ \\<noteq> Null \\<and> Pa_ \\<turnstile> U_ \\<le> T_)\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ bop_ e2_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = e_ \\<guillemotleft>bop_\\<guillemotright> e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = e'_ \\<guillemotleft>bop_\\<guillemotright> e2_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ bop_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v_ \\<guillemotleft>bop_\\<guillemotright> e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val v_ \\<guillemotleft>bop_\\<guillemotright> e'_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v1_ bop_ v2_ s_ v_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Val v_; (xu, xv) = s_;\n          heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n          \\<lfloor>Inl v_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v1_ bop_ v2_ s_ aa_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_;\n          heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n          \\<lfloor>Inr aa_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ s_ v_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Var V_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n          (xu, xv) = s_; lcl s_ V_ = \\<lfloor>v_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = V_:=e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = V_:=e'_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ v_ ha_ la_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = V_:=Val v_; (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = unit;\n          (xu, xv) = (ha_, la_(V_ \\<mapsto> v_))\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ab_ ia_ s_ taa_ a'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil>; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<lfloor>ia_\\<rceil>;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ac_ ia_ s_ taa_ i'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val ac_\\<lfloor>i'_\\<rceil>; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ib_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ i_ s_ T_ n_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n             ArrayIndexOutOfBounds);\n          (xu, xv) = s_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n          i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ i_ ha_ la_ v_ T_ n_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>ReadMem aa_ (ACell (nat (sint i_))) v_\\<rbrace>;\n          xt = Val v_; (xu, xv) = (ha_, la_);\n          typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n          0 \\<le>s i_; sint i_ < int n_;\n          heap_read ha_ aa_ (ACell (nat (sint i_))) v_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ab_ ia_ e_ s_ taa_ a'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil> := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = a'_\\<lfloor>ia_\\<rceil> := e_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ac_ ia_ e_ s_ taa_ i'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil> := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val ac_\\<lfloor>i'_\\<rceil> := e_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ac_ ib_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>Val ib_\\<rceil> := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val ac_\\<lfloor>Val ib_\\<rceil> := e'_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ib_ ea_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil> := Val ea_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ i_ ea_ s_ T_ n_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val ea_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n             ArrayIndexOutOfBounds);\n          (xu, xv) = s_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n          i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ i_ w_ s_ T_ n_ U_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ArrayStore);\n          (xu, xv) = s_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n          0 \\<le>s i_; sint i_ < int n_;\n          heap_base.typeof_h typeof_addra_ (hp s_) w_ =\n          \\<lfloor>U_\\<rfloor>;\n          \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ i_ w_ ha_ la_ h'a_ T_ n_ U_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>WriteMem aa_ (ACell (nat (sint i_))) w_\\<rbrace>;\n          xt = unit; (xu, xv) = (h'a_, la_);\n          typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n          0 \\<le>s i_; sint i_ < int n_;\n          heap_base.typeof_h typeof_addra_ ha_ w_ = \\<lfloor>U_\\<rfloor>;\n          Pa_ \\<turnstile> U_ \\<le> T_;\n          heap_write ha_ aa_ (ACell (nat (sint i_))) w_ h'a_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ab_ s_ taa_ a'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = ab_\\<bullet>length; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<bullet>length;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ ha_ la_ n_ T_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>length;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Val (Intg (word_of_nat n_)); (xu, xv) = (ha_, la_);\n          typeof_addra_ ha_ aa_ =\n          \\<lfloor>Array_type T_ n_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<bullet>length; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ F_ D_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_}; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_};\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ F_ D_ ha_ la_ v_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_};\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>ReadMem aa_ (CField D_ F_) v_\\<rbrace>;\n          xt = Val v_; (xu, xv) = (ha_, la_);\n          heap_read ha_ aa_ (CField D_ F_) v_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ F_ D_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_}; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ F_ D_ e2_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_} := e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_} := e2_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ F_ D_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val v_\\<bullet>F_{D_} := e'_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ F_ D_ v_ ha_ la_ h'a_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_} := Val v_;\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>WriteMem aa_ (CField D_ F_) v_\\<rbrace>;\n          xt = unit; (xu, xv) = (h'a_, la_);\n          heap_write ha_ aa_ (CField D_ F_) v_ h'a_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ F_ D_ v_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_} := Val v_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ D_ F_ e2_ e3_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = e_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = e'_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ D_ F_ e_ e3_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e_, e3_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e'_, e3_);\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ D_ F_ v'_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n          xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e'_);\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ D_ F_ v_ v'_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = null\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ D_ F_ v_ v'_ ha_ la_ h'a_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk =\n          addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>ReadMem aa_ (CField D_ F_) v_,\n          WriteMem aa_ (CField D_ F_) v'_\\<rbrace>;\n          xt = true; (xu, xv) = (h'a_, la_);\n          heap_read ha_ aa_ (CField D_ F_) v_;\n          heap_write ha_ aa_ (CField D_ F_) v'_ h'a_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ D_ F_ v_ v'_ ha_ la_ v''_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk =\n          addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n          (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) =\n          \\<lbrace>ReadMem aa_ (CField D_ F_) v''_\\<rbrace>;\n          xt = false; (xu, xv) = (ha_, la_);\n          heap_read ha_ aa_ (CField D_ F_) v''_; v_ \\<noteq> v''_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ M_ es_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = e_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>M_(es_);\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ M_ es_ s_ taa_ es'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_\\<bullet>M_(es'_);\n          (xu, xv) = s'_;\n          J_heap_base.reds addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ es_ s_ taa_ es'_\n           s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ M_ es_ s_ pns_ D_ Ts_ body_ hU_ T_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          blocks (this # pns_) (Class D_ # Ts_) (Addr aa_ # map the_Val es_)\n           body_;\n          (xu, xv) = s_; is_vals es_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n          Pa_ \\<turnstile> class_type_of\n                            hU_ sees M_: Ts_\\<rightarrow>T_ = \\<lfloor>(pns_,\n                                  body_)\\<rfloor> in D_;\n          length es_ = length pns_; length Ts_ = length pns_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ M_ es_ s_ tab_ va_ h'a_ hU_ Ts_ T_ D_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = extTAa_ tab_;\n          xt = extRet2J (addr aa_\\<bullet>M_(es_)) va_;\n          (xu, xv) = (h'a_, lcl s_); is_vals es_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n          Pa_ \\<turnstile> class_type_of\n                            hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_;\n          heap_base.red_external addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write Pa_ ta_ (hp s_) aa_ M_ (map the_Val es_)\n           tab_ va_ h'a_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ M_ es_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = null\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_; is_vals es_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ T_ vo_ e_ ha_ la_ taa_ l'_ e'_ h'a_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = {V_:T_=vo_; e_}; (xl, xm) = (ha_, la_);\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = {V_:T_=l'_ V_; e'_};\n          (xu, xv) = (h'a_, l'_(V_ := la_ V_));\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ (ha_, la_(V_ := vo_))\n           taa_ e'_ (h'a_, l'_)\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ T_ vo_ u_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Val u_}; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val u_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ o'_ e_ s_ taa_ o''_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = sync(o'_) e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = sync(o''_) e_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ o'_ s_ taa_ o''_\n           s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = sync(null) e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = sync(addr aa_) e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Lock, aa_),\n          SyncLock aa_\\<rbrace>;\n          xt = insync(aa_) e_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = insync(aa_) e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = insync(aa_) e'_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ v_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = insync(aa_) Val v_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n          SyncUnlock aa_\\<rbrace>;\n          xt = Val v_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ e2_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = e_;; e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_;; e2_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_;; e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ba_ e1_ e2_ s_ taa_ b'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = if (ba_) e1_ else e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = if (b'_) e1_ else e2_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ ba_ s_ taa_ b'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e1_ e2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = if (true) e1_ else e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e1_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e1_ e2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = if (false) e1_ else e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e2_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ ba_ c_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = while (ba_) c_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = if (ba_) (c_;; while (ba_) c_) else unit;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = throw e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = throw e'_; (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = throw null; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt =\n          Throw\n           (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ e_ Ca_ V_ e2_ s_ taa_ e'_ s'_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = try e_ catch(Ca_ V_) e2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = try e'_ catch(Ca_ V_) e2_;\n          (xu, xv) = s'_;\n          J_heap_base.red addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ Ca_ V_ e2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = try Val v_ catch(Ca_ V_) e2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Val v_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ Ca_ V_ e2_ s_ D_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = {V_:Class Ca_=\\<lfloor>Addr aa_\\<rfloor>; e2_};\n          (xu, xv) = s_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n          Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ Ca_ V_ e2_ s_ D_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_;\n          typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n          \\<not> Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ T_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Throw aa_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ Cb_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Cast Cb_ (Throw aa_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ T_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_ instanceof T_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ bop_ e\\<^sub>2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Throw aa_ \\<guillemotleft>bop_\\<guillemotright> e\\<^sub>2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v\\<^sub>1_ bop_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk =\n          Val v\\<^sub>1_ \\<guillemotleft>bop_\\<guillemotright> Throw aa_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = V_:=Throw aa_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ ia_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil>;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ ia_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil> := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ aa_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil> := e_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ ib_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v_\\<lfloor>Val ib_\\<rceil> := Throw aa_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>length; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ F_ D_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_}; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ F_ D_ e\\<^sub>2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_} := e\\<^sub>2_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ F_ D_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := Throw aa_;\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ D_ F_ e2_ e3_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Throw aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ D_ F_ aa_ e3_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Throw aa_, e3_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ D_ F_ v'_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk =\n          Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, Throw aa_);\n          (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ M_ es_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ v_ M_ es_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n          xt = hd (dropWhile is_val es_); (xu, xv) = s_;\n          is_Throws es_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ V_ T_ vo_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Throw aa_}; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ e_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = sync(Throw aa_) e_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ ad_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = insync(aa_) Throw ad_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n          SyncUnlock aa_\\<rbrace>;\n          xt = Throw ad_; (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ e\\<^sub>2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = Throw aa_;; e\\<^sub>2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ e\\<^sub>1_ e\\<^sub>2_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_;\n          xk = if (Throw aa_) e\\<^sub>1_ else e\\<^sub>2_; (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ ta_ aa_ s_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = ta_; xk = throw (Throw aa_); (xl, xm) = s_;\n          (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n          (xu, xv) = s_\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis) &&&\n    (\\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n               (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n      \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n         allocate typeof_addr heap_read heap_write extTA P t e es s ta e'\n         s'.\n         \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n          xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n          xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n          xi = P; xj = t; xk = e # es; (xl, xm) = s;\n          (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n          J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n           empty_heap allocate typeof_addr heap_read heap_write extTA P t e\n           s ta e' s'\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_\n         empty_heapa_ allocatea_ typeof_addra_ heap_read heap_write extTAa_\n         Pa_ tb_ v_ esa_ sa_ taa_ es'_ s'a_.\n         \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n          xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n          xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n          xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n          (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n          (xu, xv) = s'a_;\n          J_heap_base.reds addr2thread_ida_ thread_id2addra_\n           spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_\n           heap_read heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_\n           s'a_\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t C h l a h'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = new C; (xl, xm) = (h, l);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n         xt = addr a; (xu, xv) = (h', l);\n         Predicate_Compile.contains (allocate h (Class_type C))\n          (h', a)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Ca_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = new Ca_; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n         (xu, xv) = (ha_, la_);\n         allocatea_ ha_ (Class_type Ca_) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>e_\\<rceil>; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = newA T_\\<lfloor>e'_\\<rceil>;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        ha_ la_ aa_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>NewHeapElem aa_ (Array_type T_ (nat (sint i_)))\\<rbrace>;\n         xt = addr aa_; (xu, xv) = (h'a_, la_); 0 \\<le>s i_;\n         Predicate_Compile.contains\n          (allocatea_ ha_ (Array_type T_ (nat (sint i_))))\n          (h'a_, aa_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            NegativeArraySize);\n         (xu, xv) = s_; i_ <s 0\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n         (xu, xv) = (ha_, la_); 0 \\<le>s i_;\n         allocatea_ ha_ (Array_type T_ (nat (sint i_))) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Cb_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast Cb_ e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Cast Cb_ e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ v_\n        s_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ v_\n        s_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ClassCast);\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ T_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_ instanceof T_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ T_\n        s_ b_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val (Bool b_);\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         b_ =\n         (v_ \\<noteq> Null \\<and> Pa_ \\<turnstile> U_ \\<le> T_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_\n        bop_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = e_ \\<guillemotleft>bop_\\<guillemotright> e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = e'_ \\<guillemotleft>bop_\\<guillemotright> e2_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_\n        bop_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_ \\<guillemotleft>bop_\\<guillemotright> e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_ \\<guillemotleft>bop_\\<guillemotright> e'_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v1_\n        bop_ v2_ s_ v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_;\n         heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n         \\<lfloor>Inl v_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v1_\n        bop_ v2_ s_ aa_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_;\n         heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n         \\<lfloor>Inr aa_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ s_\n        v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Var V_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n         (xu, xv) = s_; lcl s_ V_ = \\<lfloor>v_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = V_:=e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ v_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=Val v_; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = unit;\n         (xu, xv) = (ha_, la_(V_ \\<mapsto> v_))\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_\n        ia_ s_ taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil>; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<lfloor>ia_\\<rceil>;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ia_ s_ taa_ i'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>i'_\\<rceil>; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ib_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        s_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            ArrayIndexOutOfBounds);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        ha_ la_ v_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (ACell (nat (sint i_))) v_\\<rbrace>;\n         xt = Val v_; (xu, xv) = (ha_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_read ha_ aa_ (ACell (nat (sint i_))) v_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_\n        ia_ e_ s_ taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = a'_\\<lfloor>ia_\\<rceil> := e_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ia_ e_ s_ taa_ i'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>i'_\\<rceil> := e_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ib_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>Val ib_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>Val ib_\\<rceil> := e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ib_\n        ea_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil> := Val ea_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        ea_ s_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val ea_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            ArrayIndexOutOfBounds);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        w_ s_ T_ n_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ArrayStore);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_base.typeof_h typeof_addra_ (hp s_) w_ = \\<lfloor>U_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        w_ ha_ la_ h'a_ T_ n_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>WriteMem aa_ (ACell (nat (sint i_))) w_\\<rbrace>;\n         xt = unit; (xu, xv) = (h'a_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_base.typeof_h typeof_addra_ ha_ w_ = \\<lfloor>U_\\<rfloor>;\n         Pa_ \\<turnstile> U_ \\<le> T_;\n         heap_write ha_ aa_ (ACell (nat (sint i_))) w_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_ s_\n        taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<bullet>length;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ha_ la_ n_ T_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>length;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val (Intg (word_of_nat n_)); (xu, xv) = (ha_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ F_\n        D_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_};\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ ha_ la_ v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_};\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (CField D_ F_) v_\\<rbrace>;\n         xt = Val v_; (xu, xv) = (ha_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ F_ D_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ F_\n        D_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_} := e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_} := e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ F_\n        D_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>F_{D_} := e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ v_ ha_ la_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_} := Val v_;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>WriteMem aa_ (CField D_ F_) v_\\<rbrace>;\n         xt = unit; (xu, xv) = (h'a_, la_);\n         heap_write ha_ aa_ (CField D_ F_) v_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ F_ D_\n        v_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_} := Val v_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ D_\n        F_ e2_ e3_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = e_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = e'_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ e_ e3_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e'_, e3_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ v'_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e'_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ D_ F_\n        v_ v'_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = null\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ v_ v'_ ha_ la_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>ReadMem aa_ (CField D_ F_) v_,\n         WriteMem aa_ (CField D_ F_) v'_\\<rbrace>;\n         xt = true; (xu, xv) = (h'a_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v_;\n         heap_write ha_ aa_ (CField D_ F_) v'_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ v_ v'_ ha_ la_ v''_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (CField D_ F_) v''_\\<rbrace>;\n         xt = false; (xu, xv) = (ha_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v''_; v_ \\<noteq> v''_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ M_\n        es_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>M_(es_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ M_\n        es_ s_ taa_ es'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_\\<bullet>M_(es'_);\n         (xu, xv) = s'_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ es_ s_ taa_ es'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_ pns_ D_ Ts_ body_ hU_ T_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         blocks (this # pns_) (Class D_ # Ts_) (Addr aa_ # map the_Val es_)\n          body_;\n         (xu, xv) = s_; is_vals es_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n         Pa_ \\<turnstile> class_type_of\n                           hU_ sees M_: Ts_\\<rightarrow>T_ = \\<lfloor>(pns_,\n                                 body_)\\<rfloor> in D_;\n         length es_ = length pns_; length Ts_ = length pns_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_ tab_ va_ h'a_ hU_ Ts_ T_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = extTAa_ tab_;\n         xt = extRet2J (addr aa_\\<bullet>M_(es_)) va_;\n         (xu, xv) = (h'a_, lcl s_); is_vals es_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n         Pa_ \\<turnstile> class_type_of\n                           hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_;\n         heap_base.red_external addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write Pa_ ta_ (hp s_) aa_ M_ (map the_Val es_) tab_ va_\n          h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ M_ es_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_; is_vals es_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ e_ ha_ la_ taa_ l'_ e'_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; e_}; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = {V_:T_=l'_ V_; e'_};\n         (xu, xv) = (h'a_, l'_(V_ := la_ V_));\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ (ha_, la_(V_ := vo_)) taa_ e'_\n          (h'a_, l'_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ u_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Val u_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val u_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ o'_ e_\n        s_ taa_ o''_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(o'_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = sync(o''_) e_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ o'_ s_ taa_ o''_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(null) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(addr aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Lock, aa_),\n         SyncLock aa_\\<rbrace>;\n         xt = insync(aa_) e_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = insync(aa_) e'_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ v_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) Val v_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n         SyncUnlock aa_\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ e2_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_;; e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_;; e2_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_;; e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ba_\n        e1_ e2_ s_ taa_ b'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (ba_) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = if (b'_) e1_ else e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ba_ s_ taa_ b'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e1_\n        e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (true) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e1_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e1_\n        e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (false) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e2_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ba_ c_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = while (ba_) c_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = if (ba_) (c_;; while (ba_) c_) else unit;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ s_\n        taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = throw e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw null; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ Ca_\n        V_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try e_ catch(Ca_ V_) e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = try e'_ catch(Ca_ V_) e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ Ca_\n        V_ e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Val v_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        Ca_ V_ e2_ s_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = {V_:Class Ca_=\\<lfloor>Addr aa_\\<rfloor>; e2_}; (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n         Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        Ca_ V_ e2_ s_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Throw aa_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Cb_\n        aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast Cb_ (Throw aa_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ T_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        bop_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Throw aa_ \\<guillemotleft>bop_\\<guillemotright> e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_\n        v\\<^sub>1_ bop_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         Val v\\<^sub>1_ \\<guillemotleft>bop_\\<guillemotright> Throw aa_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=Throw aa_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ia_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ia_ e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ aa_\n        e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ ib_\n        aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<lfloor>Val ib_\\<rceil> := Throw aa_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_} := e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ F_\n        D_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := Throw aa_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ e2_ e3_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Throw aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ aa_ e3_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Throw aa_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ v'_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, Throw aa_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ M_\n        es_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = hd (dropWhile is_val es_); (xu, xv) = s_;\n         is_Throws es_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Throw aa_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(Throw aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ad_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) Throw ad_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n         SyncUnlock aa_\\<rbrace>;\n         xt = Throw ad_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_;; e\\<^sub>2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        e\\<^sub>1_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (Throw aa_) e\\<^sub>1_ else e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw (Throw aa_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t e es s ta e' s'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = e # es; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n         J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n          empty_heap allocate typeof_addr heap_read heap_write extTA P t e s\n          ta e' s'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ tb_ v_\n        esa_ sa_ taa_ es'_ s'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n         (xu, xv) = s'a_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_ s'a_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case red"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?addr2thread_id; xa = ?thread_id2addr;\n   xb = ?spurious_wakeups; xc = ?empty_heap; xd = ?allocate;\n   xe = ?typeof_addr; xf = ?heap_read; xg = ?heap_write; xh = ?extTA;\n   xi = ?P; xj = ?t; xk = new ?C; (xl, xm) = (?h, ?l);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>NewHeapElem ?a (Class_type ?C)\\<rbrace>;\n   xt = addr ?a; (xu, xv) = (?h', ?l);\n   Predicate_Compile.contains (?allocate ?h (Class_type ?C))\n    (?h', ?a)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = new ?Ca; (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea OutOfMemory);\n   (xu, xv) = (?ha, ?la); ?allocatea ?ha (Class_type ?Ca) = {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = newA ?T\\<lfloor>?e\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = newA ?T\\<lfloor>?e'\\<rceil>;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = newA ?T\\<lfloor>Val (Intg ?i)\\<rceil>;\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>NewHeapElem ?aa (Array_type ?T (nat (sint ?i)))\\<rbrace>;\n   xt = addr ?aa; (xu, xv) = (?h'a, ?la); 0 \\<le>s ?i;\n   Predicate_Compile.contains\n    (?allocatea ?ha (Array_type ?T (nat (sint ?i)))) (?h'a, ?aa)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = newA ?T\\<lfloor>Val (Intg ?i)\\<rceil>;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw\n    (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NegativeArraySize);\n   (xu, xv) = ?s; ?i <s 0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = newA ?T\\<lfloor>Val (Intg ?i)\\<rceil>;\n   (xl, xm) = (?ha, ?la); (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea OutOfMemory);\n   (xu, xv) = (?ha, ?la); 0 \\<le>s ?i;\n   ?allocatea ?ha (Array_type ?T (nat (sint ?i))) = {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Cast ?Cb ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = Cast ?Cb ?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Cast ?T (Val ?v); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val ?v;\n   (xu, xv) = ?s;\n   heap_base.typeof_h ?typeof_addra (hp ?s) ?v = \\<lfloor>?U\\<rfloor>;\n   ?Pa \\<turnstile> ?U \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Cast ?T (Val ?v); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea ClassCast);\n   (xu, xv) = ?s;\n   heap_base.typeof_h ?typeof_addra (hp ?s) ?v = \\<lfloor>?U\\<rfloor>;\n   \\<not> ?Pa \\<turnstile> ?U \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e instanceof ?T; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?e' instanceof ?T; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v instanceof ?T; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val (Bool ?b);\n   (xu, xv) = ?s;\n   heap_base.typeof_h ?typeof_addra (hp ?s) ?v = \\<lfloor>?U\\<rfloor>;\n   ?b = (?v \\<noteq> Null \\<and> ?Pa \\<turnstile> ?U \\<le> ?T)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e \\<guillemotleft>?bop\\<guillemotright> ?e2.0;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = ?e' \\<guillemotleft>?bop\\<guillemotright> ?e2.0; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v \\<guillemotleft>?bop\\<guillemotright> ?e;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = Val ?v \\<guillemotleft>?bop\\<guillemotright> ?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v1.0 \\<guillemotleft>?bop\\<guillemotright> Val ?v2.0;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Val ?v; (xu, xv) = ?s;\n   heap_base.binop ?empty_heapa ?allocatea ?bop ?v1.0 ?v2.0 =\n   \\<lfloor>Inl ?v\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v1.0 \\<guillemotleft>?bop\\<guillemotright> Val ?v2.0;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s;\n   heap_base.binop ?empty_heapa ?allocatea ?bop ?v1.0 ?v2.0 =\n   \\<lfloor>Inr ?aa\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Var ?V; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val ?v;\n   (xu, xv) = ?s; lcl ?s ?V = \\<lfloor>?v\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?V:=?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?V:=?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?V:=Val ?v; (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = unit;\n   (xu, xv) = (?ha, ?la(?V \\<mapsto> ?v))\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?ab\\<lfloor>?ia\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?a'\\<lfloor>?ia\\<rceil>;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ab ?s ?taa ?a' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?ac\\<lfloor>?ia\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = Val ?ac\\<lfloor>?i'\\<rceil>;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ia ?s ?taa ?i' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<lfloor>Val ?ib\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<lfloor>Val (Intg ?i)\\<rceil>;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw\n    (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea\n      ArrayIndexOutOfBounds);\n   (xu, xv) = ?s;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>;\n   ?i <s 0 \\<or> int ?n \\<le> sint ?i\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<lfloor>Val (Intg ?i)\\<rceil>;\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>ReadMem ?aa (ACell (nat (sint ?i))) ?v\\<rbrace>;\n   xt = Val ?v; (xu, xv) = (?ha, ?la);\n   ?typeof_addra ?ha ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>; 0 \\<le>s ?i;\n   sint ?i < int ?n; ?heap_read ?ha ?aa (ACell (nat (sint ?i))) ?v\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?ab\\<lfloor>?ia\\<rceil> := ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?a'\\<lfloor>?ia\\<rceil> := ?e;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ab ?s ?taa ?a' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?ac\\<lfloor>?ia\\<rceil> := ?e;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = Val ?ac\\<lfloor>?i'\\<rceil> := ?e; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ia ?s ?taa ?i' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?ac\\<lfloor>Val ?ib\\<rceil> := ?e;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = Val ?ac\\<lfloor>Val ?ib\\<rceil> := ?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<lfloor>Val ?ib\\<rceil> := Val ?ea;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = addr ?aa\\<lfloor>Val (Intg ?i)\\<rceil> := Val ?ea; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw\n    (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea\n      ArrayIndexOutOfBounds);\n   (xu, xv) = ?s;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>;\n   ?i <s 0 \\<or> int ?n \\<le> sint ?i\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = addr ?aa\\<lfloor>Val (Intg ?i)\\<rceil> := Val ?w; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea ArrayStore);\n   (xu, xv) = ?s;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>;\n   0 \\<le>s ?i; sint ?i < int ?n;\n   heap_base.typeof_h ?typeof_addra (hp ?s) ?w = \\<lfloor>?U\\<rfloor>;\n   \\<not> ?Pa \\<turnstile> ?U \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = addr ?aa\\<lfloor>Val (Intg ?i)\\<rceil> := Val ?w;\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>WriteMem ?aa (ACell (nat (sint ?i))) ?w\\<rbrace>;\n   xt = unit; (xu, xv) = (?h'a, ?la);\n   ?typeof_addra ?ha ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>; 0 \\<le>s ?i;\n   sint ?i < int ?n;\n   heap_base.typeof_h ?typeof_addra ?ha ?w = \\<lfloor>?U\\<rfloor>;\n   ?Pa \\<turnstile> ?U \\<le> ?T;\n   ?heap_write ?ha ?aa (ACell (nat (sint ?i))) ?w ?h'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?ab\\<bullet>length; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?a'\\<bullet>length; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ab ?s ?taa ?a' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>length; (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Val (Intg (word_of_nat ?n)); (xu, xv) = (?ha, ?la);\n   ?typeof_addra ?ha ?aa = \\<lfloor>Array_type ?T ?n\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<bullet>length; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e\\<bullet>?F{?D}; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?e'\\<bullet>?F{?D}; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?F{?D}; (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>ReadMem ?aa (CField ?D ?F) ?v\\<rbrace>;\n   xt = Val ?v; (xu, xv) = (?ha, ?la);\n   ?heap_read ?ha ?aa (CField ?D ?F) ?v\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<bullet>?F{?D}; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e\\<bullet>?F{?D} := ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?e'\\<bullet>?F{?D} := ?e2.0;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<bullet>?F{?D} := ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = Val ?v\\<bullet>?F{?D} := ?e';\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?F{?D} := Val ?v;\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>WriteMem ?aa (CField ?D ?F) ?v\\<rbrace>;\n   xt = unit; (xu, xv) = (?h'a, ?la);\n   ?heap_write ?ha ?aa (CField ?D ?F) ?v ?h'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<bullet>?F{?D} := Val ?v; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = ?e\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e2.0, ?e3.0);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = ?e'\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e2.0, ?e3.0);\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e, ?e3.0);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e', ?e3.0);\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v', ?e);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = ?taa;\n   xt = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v', ?e');\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = null\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v, Val ?v');\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = addr ?aa\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v, Val ?v');\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>ReadMem ?aa (CField ?D ?F) ?v,\n   WriteMem ?aa (CField ?D ?F) ?v'\\<rbrace>;\n   xt = true; (xu, xv) = (?h'a, ?la); ?heap_read ?ha ?aa (CField ?D ?F) ?v;\n   ?heap_write ?ha ?aa (CField ?D ?F) ?v' ?h'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = addr ?aa\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v, Val ?v');\n   (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) =\n   \\<lbrace>ReadMem ?aa (CField ?D ?F) ?v''\\<rbrace>;\n   xt = false; (xu, xv) = (?ha, ?la);\n   ?heap_read ?ha ?aa (CField ?D ?F) ?v''; ?v \\<noteq> ?v''\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?e'\\<bullet>?M(?es);\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = Val ?v\\<bullet>?M(?es');\n   (xu, xv) = ?s';\n   J_heap_base.reds ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?es ?s ?taa ?es' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   blocks (this # ?pns) (Class ?D # ?Ts) (Addr ?aa # map the_Val ?es) ?body;\n   (xu, xv) = ?s; is_vals ?es;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>?hU\\<rfloor>;\n   ?Pa \\<turnstile> class_type_of\n                     ?hU sees ?M: ?Ts\\<rightarrow>?T = \\<lfloor>(?pns,\n                           ?body)\\<rfloor> in ?D;\n   length ?es = length ?pns; length ?Ts = length ?pns\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?extTAa ?tab;\n   xt = extRet2J (addr ?aa\\<bullet>?M(?es)) ?va; (xu, xv) = (?h'a, lcl ?s);\n   is_vals ?es; ?typeof_addra (hp ?s) ?aa = \\<lfloor>?hU\\<rfloor>;\n   ?Pa \\<turnstile> class_type_of\n                     ?hU sees ?M: ?Ts\\<rightarrow>?T = Native in ?D;\n   heap_base.red_external ?addr2thread_ida ?thread_id2addra\n    ?spurious_wakeupsa ?empty_heapa ?allocatea ?typeof_addra ?heap_read\n    ?heap_write ?Pa ?ta (hp ?s) ?aa ?M (map the_Val ?es) ?tab ?va\n    ?h'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s; is_vals ?es\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = {?V:?T=?vo; ?e}; (xl, xm) = (?ha, ?la);\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = {?V:?T=?l' ?V; ?e'};\n   (xu, xv) = (?h'a, ?l'(?V := ?la ?V));\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e (?ha, ?la(?V := ?vo)) ?taa ?e' (?h'a, ?l')\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = {?V:?T=?vo; Val ?u}; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val ?u;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = sync(?o') ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = sync(?o'') ?e; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?o' ?s ?taa ?o'' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = sync(null) ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = sync(addr ?aa) ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Lock, ?aa), SyncLock ?aa\\<rbrace>;\n   xt = insync(?aa) ?e; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = insync(?aa) ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = insync(?aa) ?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = insync(?aa) Val ?v; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, ?aa),\n   SyncUnlock ?aa\\<rbrace>;\n   xt = Val ?v; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?e;; ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = ?e';; ?e2.0; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v;; ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = ?e;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = if (?ba) ?e1.0 else ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = if (?b') ?e1.0 else ?e2.0;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?ba ?s ?taa ?b' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = if (true) ?e1.0 else ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = ?e1.0;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = if (false) ?e1.0 else ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = ?e2.0;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = while (?ba) ?c; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = if (?ba) (?c;; while (?ba) ?c) else unit; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = throw ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = throw ?e'; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = throw null; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = try ?e catch(?Ca ?V) ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = try ?e' catch(?Ca ?V) ?e2.0;\n   (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?ta ?e ?s ?taa ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = try Val ?v catch(?Ca ?V) ?e2.0; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val ?v;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = try Throw ?aa catch(?Ca ?V) ?e2.0;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = {?V:Class ?Ca=\\<lfloor>Addr ?aa\\<rfloor>; ?e2.0}; (xu, xv) = ?s;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>Class_type ?D\\<rfloor>;\n   ?Pa \\<turnstile> ?D \\<preceq>\\<^sup>* ?Ca\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = try Throw ?aa catch(?Ca ?V) ?e2.0;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>Class_type ?D\\<rfloor>;\n   \\<not> ?Pa \\<turnstile> ?D \\<preceq>\\<^sup>* ?Ca\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = newA ?T\\<lfloor>Throw ?aa\\<rceil>;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Cast ?Cb (Throw ?aa); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa instanceof ?T; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Throw ?aa \\<guillemotleft>?bop\\<guillemotright> ?e\\<^sub>2;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v\\<^sub>1 \\<guillemotleft>?bop\\<guillemotright> Throw ?aa;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = ?V:=Throw ?aa; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<lfloor>?ia\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<lfloor>Throw ?aa\\<rceil>; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<lfloor>?ia\\<rceil> := ?e;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<lfloor>Throw ?aa\\<rceil> := ?e;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<lfloor>Val ?ib\\<rceil> := Throw ?aa;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<bullet>length; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<bullet>?F{?D}; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<bullet>?F{?D} := ?e\\<^sub>2;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<bullet>?F{?D} := Throw ?aa;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Throw ?aa\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e2.0, ?e3.0);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, Throw ?aa, ?e3.0);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta;\n   xk = Val ?v\\<bullet>compareAndSwap(?D\\<bullet>?F, Val ?v', Throw ?aa);\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = hd (dropWhile is_val ?es); (xu, xv) = ?s; is_Throws ?es\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = {?V:?T=?vo; Throw ?aa}; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = sync(Throw ?aa) ?e; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = insync(?aa) Throw ?ad; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, ?aa),\n   SyncUnlock ?aa\\<rbrace>;\n   xt = Throw ?ad; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Throw ?aa;; ?e\\<^sub>2; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = if (Throw ?aa) ?e\\<^sub>1 else ?e\\<^sub>2;\n   (xl, xm) = ?s; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw ?aa; (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = throw (Throw ?aa); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   blocks (this # ?pns) (Class ?D # ?Ts) (Addr ?aa # map the_Val ?es) ?body;\n   (xu, xv) = ?s; is_vals ?es;\n   ?typeof_addra (hp ?s) ?aa = \\<lfloor>?hU\\<rfloor>;\n   ?Pa \\<turnstile> class_type_of\n                     ?hU sees ?M: ?Ts\\<rightarrow>?T = \\<lfloor>(?pns,\n                           ?body)\\<rfloor> in ?D;\n   length ?es = length ?pns; length ?Ts = length ?pns\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = addr ?aa\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?extTAa ?tab;\n   xt = extRet2J (addr ?aa\\<bullet>?M(?es)) ?va; (xu, xv) = (?h'a, lcl ?s);\n   is_vals ?es; ?typeof_addra (hp ?s) ?aa = \\<lfloor>?hU\\<rfloor>;\n   ?Pa \\<turnstile> class_type_of\n                     ?hU sees ?M: ?Ts\\<rightarrow>?T = Native in ?D;\n   heap_base.red_external ?addr2thread_ida ?thread_id2addra\n    ?spurious_wakeupsa ?empty_heapa ?allocatea ?typeof_addra ?heap_read\n    ?heap_write ?Pa ?ta (hp ?s) ?aa ?M (map the_Val ?es) ?tab ?va\n    ?h'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = null\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s; is_vals ?es\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = throw null; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   Throw (heap_base.addr_of_sys_xcpt ?empty_heapa ?allocatea NullPointer);\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = Val ?v\\<bullet>?M(?es); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = hd (dropWhile is_val ?es); (xu, xv) = ?s; is_Throws ?es\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?ta; xk = throw (Throw ?aa); (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw ?aa;\n   (xu, xv) = ?s\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t C h l a h'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = new C; (xl, xm) = (h, l);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n         xt = addr a; (xu, xv) = (h', l);\n         Predicate_Compile.contains (allocate h (Class_type C))\n          (h', a)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Ca_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = new Ca_; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n         (xu, xv) = (ha_, la_);\n         allocatea_ ha_ (Class_type Ca_) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>e_\\<rceil>; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = newA T_\\<lfloor>e'_\\<rceil>;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        ha_ la_ aa_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>NewHeapElem aa_ (Array_type T_ (nat (sint i_)))\\<rbrace>;\n         xt = addr aa_; (xu, xv) = (h'a_, la_); 0 \\<le>s i_;\n         Predicate_Compile.contains\n          (allocatea_ ha_ (Array_type T_ (nat (sint i_))))\n          (h'a_, aa_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            NegativeArraySize);\n         (xu, xv) = s_; i_ <s 0\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ i_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ OutOfMemory);\n         (xu, xv) = (ha_, la_); 0 \\<le>s i_;\n         allocatea_ ha_ (Array_type T_ (nat (sint i_))) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Cb_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast Cb_ e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Cast Cb_ e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ v_\n        s_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ v_\n        s_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast T_ (Val v_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ClassCast);\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ T_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_ instanceof T_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ T_\n        s_ b_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val (Bool b_);\n         (xu, xv) = s_;\n         heap_base.typeof_h typeof_addra_ (hp s_) v_ = \\<lfloor>U_\\<rfloor>;\n         b_ =\n         (v_ \\<noteq> Null \\<and> Pa_ \\<turnstile> U_ \\<le> T_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_\n        bop_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = e_ \\<guillemotleft>bop_\\<guillemotright> e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = e'_ \\<guillemotleft>bop_\\<guillemotright> e2_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_\n        bop_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_ \\<guillemotleft>bop_\\<guillemotright> e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_ \\<guillemotleft>bop_\\<guillemotright> e'_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v1_\n        bop_ v2_ s_ v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_;\n         heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n         \\<lfloor>Inl v_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v1_\n        bop_ v2_ s_ aa_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v1_ \\<guillemotleft>bop_\\<guillemotright> Val v2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_;\n         heap_base.binop empty_heapa_ allocatea_ bop_ v1_ v2_ =\n         \\<lfloor>Inr aa_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ s_\n        v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Var V_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v_;\n         (xu, xv) = s_; lcl s_ V_ = \\<lfloor>v_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = V_:=e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ v_\n        ha_ la_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=Val v_; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = unit;\n         (xu, xv) = (ha_, la_(V_ \\<mapsto> v_))\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_\n        ia_ s_ taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil>; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<lfloor>ia_\\<rceil>;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ia_ s_ taa_ i'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>i'_\\<rceil>; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ib_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        s_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            ArrayIndexOutOfBounds);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        ha_ la_ v_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil>;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (ACell (nat (sint i_))) v_\\<rbrace>;\n         xt = Val v_; (xu, xv) = (ha_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_read ha_ aa_ (ACell (nat (sint i_))) v_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_\n        ia_ e_ s_ taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = a'_\\<lfloor>ia_\\<rceil> := e_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ia_ e_ s_ taa_ i'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>i'_\\<rceil> := e_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ia_ s_ taa_ i'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ac_\n        ib_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val ac_\\<lfloor>Val ib_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val ac_\\<lfloor>Val ib_\\<rceil> := e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ib_\n        ea_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<lfloor>Val ib_\\<rceil> := Val ea_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        ea_ s_ T_ n_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val ea_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_\n            ArrayIndexOutOfBounds);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         i_ <s 0 \\<or> int n_ \\<le> sint i_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        w_ s_ T_ n_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ ArrayStore);\n         (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_base.typeof_h typeof_addra_ (hp s_) w_ = \\<lfloor>U_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> U_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ i_\n        w_ ha_ la_ h'a_ T_ n_ U_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = addr aa_\\<lfloor>Val (Intg i_)\\<rceil> := Val w_;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>WriteMem aa_ (ACell (nat (sint i_))) w_\\<rbrace>;\n         xt = unit; (xu, xv) = (h'a_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>;\n         0 \\<le>s i_; sint i_ < int n_;\n         heap_base.typeof_h typeof_addra_ ha_ w_ = \\<lfloor>U_\\<rfloor>;\n         Pa_ \\<turnstile> U_ \\<le> T_;\n         heap_write ha_ aa_ (ACell (nat (sint i_))) w_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ab_ s_\n        taa_ a'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = ab_\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = a'_\\<bullet>length;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ab_ s_ taa_ a'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ha_ la_ n_ T_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>length;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val (Intg (word_of_nat n_)); (xu, xv) = (ha_, la_);\n         typeof_addra_ ha_ aa_ = \\<lfloor>Array_type T_ n_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ F_\n        D_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_};\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ ha_ la_ v_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_};\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (CField D_ F_) v_\\<rbrace>;\n         xt = Val v_; (xu, xv) = (ha_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ F_ D_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ F_\n        D_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>F_{D_} := e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>F_{D_} := e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ F_\n        D_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>F_{D_} := e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ v_ ha_ la_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>F_{D_} := Val v_;\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>WriteMem aa_ (CField D_ F_) v_\\<rbrace>;\n         xt = unit; (xu, xv) = (h'a_, la_);\n         heap_write ha_ aa_ (CField D_ F_) v_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ F_ D_\n        v_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>F_{D_} := Val v_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ D_\n        F_ e2_ e3_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = e_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = e'_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ e_ e3_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, e'_, e3_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ v'_ e_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = taa_;\n         xt = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, e'_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ D_ F_\n        v_ v'_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = null\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ v_ v'_ ha_ la_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>ReadMem aa_ (CField D_ F_) v_,\n         WriteMem aa_ (CField D_ F_) v'_\\<rbrace>;\n         xt = true; (xu, xv) = (h'a_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v_;\n         heap_write ha_ aa_ (CField D_ F_) v'_ h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ v_ v'_ ha_ la_ v''_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         addr aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v_, Val v'_);\n         (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) =\n         \\<lbrace>ReadMem aa_ (CField D_ F_) v''_\\<rbrace>;\n         xt = false; (xu, xv) = (ha_, la_);\n         heap_read ha_ aa_ (CField D_ F_) v''_; v_ \\<noteq> v''_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ M_\n        es_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_\\<bullet>M_(es_);\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ M_\n        es_ s_ taa_ es'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_\\<bullet>M_(es'_);\n         (xu, xv) = s'_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ es_ s_ taa_ es'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_ pns_ D_ Ts_ body_ hU_ T_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         blocks (this # pns_) (Class D_ # Ts_) (Addr aa_ # map the_Val es_)\n          body_;\n         (xu, xv) = s_; is_vals es_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n         Pa_ \\<turnstile> class_type_of\n                           hU_ sees M_: Ts_\\<rightarrow>T_ = \\<lfloor>(pns_,\n                                 body_)\\<rfloor> in D_;\n         length es_ = length pns_; length Ts_ = length pns_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_ tab_ va_ h'a_ hU_ Ts_ T_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = addr aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = extTAa_ tab_;\n         xt = extRet2J (addr aa_\\<bullet>M_(es_)) va_;\n         (xu, xv) = (h'a_, lcl s_); is_vals es_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>hU_\\<rfloor>;\n         Pa_ \\<turnstile> class_type_of\n                           hU_ sees M_: Ts_\\<rightarrow>T_ = Native in D_;\n         heap_base.red_external addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write Pa_ ta_ (hp s_) aa_ M_ (map the_Val es_) tab_ va_\n          h'a_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ M_ es_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = null\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_; is_vals es_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ e_ ha_ la_ taa_ l'_ e'_ h'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; e_}; (xl, xm) = (ha_, la_);\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = {V_:T_=l'_ V_; e'_};\n         (xu, xv) = (h'a_, l'_(V_ := la_ V_));\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ (ha_, la_(V_ := vo_)) taa_ e'_\n          (h'a_, l'_)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ u_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Val u_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val u_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ o'_ e_\n        s_ taa_ o''_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(o'_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = sync(o''_) e_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ o'_ s_ taa_ o''_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(null) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(addr aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Lock, aa_),\n         SyncLock aa_\\<rbrace>;\n         xt = insync(aa_) e_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = insync(aa_) e'_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ v_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) Val v_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n         SyncUnlock aa_\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ e2_\n        s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = e_;; e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = e'_;; e2_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_;; e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ba_\n        e1_ e2_ s_ taa_ b'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (ba_) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = if (b'_) e1_ else e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ ba_ s_ taa_ b'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e1_\n        e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (true) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e1_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e1_\n        e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (false) e1_ else e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = e2_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ ba_ c_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = while (ba_) c_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = if (ba_) (c_;; while (ba_) c_) else unit;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ s_\n        taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = throw e'_; (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw null; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt =\n         Throw\n          (heap_base.addr_of_sys_xcpt empty_heapa_ allocatea_ NullPointer);\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ e_ Ca_\n        V_ e2_ s_ taa_ e'_ s'_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try e_ catch(Ca_ V_) e2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = try e'_ catch(Ca_ V_) e2_;\n         (xu, xv) = s'_;\n         J_heap_base.red addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ ta_ e_ s_ taa_ e'_ s'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ Ca_\n        V_ e2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Val v_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Val v_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        Ca_ V_ e2_ s_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = {V_:Class Ca_=\\<lfloor>Addr aa_\\<rfloor>; e2_}; (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n         Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        Ca_ V_ e2_ s_ D_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = try Throw aa_ catch(Ca_ V_) e2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_;\n         typeof_addra_ (hp s_) aa_ = \\<lfloor>Class_type D_\\<rfloor>;\n         \\<not> Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ T_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = newA T_\\<lfloor>Throw aa_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ Cb_\n        aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Cast Cb_ (Throw aa_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ T_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_ instanceof T_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        bop_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Throw aa_ \\<guillemotleft>bop_\\<guillemotright> e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_\n        v\\<^sub>1_ bop_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         Val v\\<^sub>1_ \\<guillemotleft>bop_\\<guillemotright> Throw aa_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = V_:=Throw aa_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ia_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil>;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ia_ e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<lfloor>ia_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ aa_\n        e_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<lfloor>Throw aa_\\<rceil> := e_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ ib_\n        aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<lfloor>Val ib_\\<rceil> := Throw aa_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>length; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ F_\n        D_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>F_{D_} := e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ F_\n        D_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>F_{D_} := Throw aa_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ D_\n        F_ e2_ e3_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Throw aa_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ aa_ e3_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk = Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Throw aa_, e3_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ D_\n        F_ v'_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_;\n         xk =\n         Val v_\\<bullet>compareAndSwap(D_\\<bullet>F_, Val v'_, Throw aa_);\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ M_\n        es_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ v_ M_\n        es_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Val v_\\<bullet>M_(es_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = hd (dropWhile is_val es_); (xu, xv) = s_;\n         is_Throws es_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ V_ T_\n        vo_ aa_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = {V_:T_=vo_; Throw aa_}; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_ e_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = sync(Throw aa_) e_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        ad_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = insync(aa_) Throw ad_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>(Unlock, aa_),\n         SyncUnlock aa_\\<rbrace>;\n         xt = Throw ad_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = Throw aa_;; e\\<^sub>2_; (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        e\\<^sub>1_ e\\<^sub>2_ s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = if (Throw aa_) e\\<^sub>1_ else e\\<^sub>2_;\n         (xl, xm) = s_; (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n         xt = Throw aa_; (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ ta_ aa_\n        s_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = ta_; xk = throw (Throw aa_); (xl, xm) = s_;\n         (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Throw aa_;\n         (xu, xv) = s_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t e es s ta e' s'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = e # es; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n         J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n          empty_heap allocate typeof_addr heap_read heap_write extTA P t e s\n          ta e' s'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ tb_ v_\n        esa_ sa_ taa_ es'_ s'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n         (xu, xv) = s'a_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_ s'a_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from red.prems"], ["proof (chain)\npicking this:\n  J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)", "show thesis"], ["proof (prove)\nusing this:\n  J_heap_base.red x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)\n\ngoal (1 subgoal):\n 1. thesis", "proof(cases rule: J_heap_base.red.cases[consumes 1, case_names\n    RedNew RedNewFail NewArrayRed RedNewArray RedNewArrayNegative RedNewArrayFail CastRed RedCast RedCastFail InstanceOfRed\n    RedInstanceOf BinOpRed1 BinOpRed2 RedBinOp RedBinOpFail RedVar LAssRed RedLAss\n    AAccRed1 AAccRed2 RedAAccNull RedAAccBounds RedAAcc\n    AAssRed1 AAssRed2 AAssRed3 RedAAssNull RedAAssBounds RedAAssStore RedAAss ALengthRed RedALength RedALengthNull FAccRed\n    RedFAcc RedFAccNull FAssRed1 FAssRed2 RedFAss RedFAssNull CASRed1 CASRed2 CASRed3 RedCASNull RedCASSucceed RedCASFail \n    CallObj CallParams RedCall RedCallExternal RedCallNull\n    BlockRed RedBlock SynchronizedRed1 SynchronizedNull LockSynchronized SynchronizedRed2 UnlockSynchronized SeqRed\n    RedSeq CondRed RedCondT RedCondF RedWhile ThrowRed RedThrowNull TryRed RedTry RedTryCatch RedTryFail\n    NewArrayThrow CastThrow InstanceOfThrow BinOpThrow1 BinOpThrow2 LAssThrow AAccThrow1 AAccThrow2 AAssThrow1 AAssThrow2\n    AAssThrow3 ALengthThrow FAccThrow FAssThrow1 FAssThrow2 CASThrow CASThrow2 CASThrow3 \n    CallThrowObj CallThrowParams BlockThrow SynchronizedThrow1 \n    SynchronizedThrow2 SeqThrow CondThrow ThrowThrow])"], ["proof (state)\ngoal (96 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 96 subgoals...", "case (RedCall s a U M Ts T pns body D vs)"], ["proof (state)\nthis:\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = blocks (this # pns) (Class D # Ts) (Addr a # vs) body\n  (xu, xv) = s\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of\n                   U sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                    body)\\<rfloor> in D\n  length vs = length pns\n  length Ts = length pns\n\ngoal (96 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 96 subgoals...", "with red.RedCall_code[OF refl refl refl refl refl refl refl refl refl refl refl, of a M \"map Val vs\" s pns D Ts body U T]"], ["proof (chain)\npicking this:\n  \\<lbrakk>xk = addr a\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   blocks (this # pns) (Class D # Ts) (Addr a # map the_Val (map Val vs))\n    body;\n   (xu, xv) = s; is_vals (map Val vs); xe (hp s) a = \\<lfloor>U\\<rfloor>;\n   xi \\<turnstile> class_type_of\n                    U sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                     body)\\<rfloor> in D;\n   length (map Val vs) = length pns; length Ts = length pns\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = blocks (this # pns) (Class D # Ts) (Addr a # vs) body\n  (xu, xv) = s\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of\n                   U sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                    body)\\<rfloor> in D\n  length vs = length pns\n  length Ts = length pns", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>xk = addr a\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt =\n   blocks (this # pns) (Class D # Ts) (Addr a # map the_Val (map Val vs))\n    body;\n   (xu, xv) = s; is_vals (map Val vs); xe (hp s) a = \\<lfloor>U\\<rfloor>;\n   xi \\<turnstile> class_type_of\n                    U sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                     body)\\<rfloor> in D;\n   length (map Val vs) = length pns; length Ts = length pns\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = blocks (this # pns) (Class D # Ts) (Addr a # vs) body\n  (xu, xv) = s\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of\n                   U sees M: Ts\\<rightarrow>T = \\<lfloor>(pns,\n                    body)\\<rfloor> in D\n  length vs = length pns\n  length Ts = length pns\n\ngoal (1 subgoal):\n 1. thesis", "by(simp add: o_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (95 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 95 subgoals...", "next"], ["proof (state)\ngoal (95 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 95 subgoals...", "case (RedCallExternal s a U M Ts T D vs ta va h' ta' e' s')"], ["proof (state)\nthis:\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = ta'\n  xt = e'\n  (xu, xv) = s'\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of U sees M: Ts\\<rightarrow>T = Native in D\n  heap_base.red_external x xa xb xc xd xe xf xg xi xj (hp s) a M vs ta va h'\n  ta' = xh ta\n  e' = extRet2J (addr a\\<bullet>M(map Val vs)) va\n  s' = (h', lcl s)\n\ngoal (95 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 95 subgoals...", "with red.RedCallExternal_code[OF refl refl refl refl refl refl refl refl refl refl refl, of a M \"map Val vs\" s ta va h' U Ts T D]"], ["proof (chain)\npicking this:\n  \\<lbrakk>xk = addr a\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = xh ta;\n   xt = extRet2J (addr a\\<bullet>M(map Val vs)) va; (xu, xv) = (h', lcl s);\n   is_vals (map Val vs); xe (hp s) a = \\<lfloor>U\\<rfloor>;\n   xi \\<turnstile> class_type_of U sees M: Ts\\<rightarrow>T = Native in D;\n   heap_base.red_external x xa xb xc xd xe xf xg xi xj (hp s) a M\n    (map the_Val (map Val vs)) ta va h'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = ta'\n  xt = e'\n  (xu, xv) = s'\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of U sees M: Ts\\<rightarrow>T = Native in D\n  heap_base.red_external x xa xb xc xd xe xf xg xi xj (hp s) a M vs ta va h'\n  ta' = xh ta\n  e' = extRet2J (addr a\\<bullet>M(map Val vs)) va\n  s' = (h', lcl s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>xk = addr a\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = xh ta;\n   xt = extRet2J (addr a\\<bullet>M(map Val vs)) va; (xu, xv) = (h', lcl s);\n   is_vals (map Val vs); xe (hp s) a = \\<lfloor>U\\<rfloor>;\n   xi \\<turnstile> class_type_of U sees M: Ts\\<rightarrow>T = Native in D;\n   heap_base.red_external x xa xb xc xd xe xf xg xi xj (hp s) a M\n    (map the_Val (map Val vs)) ta va h'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = addr a\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = ta'\n  xt = e'\n  (xu, xv) = s'\n  xe (hp s) a = \\<lfloor>U\\<rfloor>\n  xi \\<turnstile> class_type_of U sees M: Ts\\<rightarrow>T = Native in D\n  heap_base.red_external x xa xb xc xd xe xf xg xi xj (hp s) a M vs ta va h'\n  ta' = xh ta\n  e' = extRet2J (addr a\\<bullet>M(map Val vs)) va\n  s' = (h', lcl s)\n\ngoal (1 subgoal):\n 1. thesis", "by(simp add: o_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (94 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 94 subgoals...", "next"], ["proof (state)\ngoal (94 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 94 subgoals...", "case (RedCallNull M vs s)"], ["proof (state)\nthis:\n  xk = null\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer)\n  (xu, xv) = s\n\ngoal (94 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 94 subgoals...", "with red.RedCallNull_code[OF refl refl refl refl refl refl refl refl refl refl refl, of M \"map Val vs\" s]"], ["proof (chain)\npicking this:\n  \\<lbrakk>xk = null\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer); (xu, xv) = s;\n   is_vals (map Val vs)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = null\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer)\n  (xu, xv) = s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>xk = null\\<bullet>M(map Val vs); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer); (xu, xv) = s;\n   is_vals (map Val vs)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = null\\<bullet>M(map Val vs)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer)\n  (xu, xv) = s\n\ngoal (1 subgoal):\n 1. thesis", "by(simp add: o_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (93 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 93 subgoals...", "next"], ["proof (state)\ngoal (93 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 93 subgoals...", "case (CallThrowParams es vs a es' v M s)"], ["proof (state)\nthis:\n  xk = Val v\\<bullet>M(es)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw a\n  (xu, xv) = s\n  es = map Val vs @ Throw a # es'\n\ngoal (93 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 93 subgoals...", "with red.CallThrowParams_code[OF refl refl refl refl refl refl refl refl refl refl refl, of v M \"map Val vs @ Throw a # es'\" s]"], ["proof (chain)\npicking this:\n  \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = hd (dropWhile is_val (map Val vs @ Throw a # es')); (xu, xv) = s;\n   is_Throws (map Val vs @ Throw a # es')\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = Val v\\<bullet>M(es)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw a\n  (xu, xv) = s\n  es = map Val vs @ Throw a # es'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); (xl, xm) = s;\n   (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n   xt = hd (dropWhile is_val (map Val vs @ Throw a # es')); (xu, xv) = s;\n   is_Throws (map Val vs @ Throw a # es')\\<rbrakk>\n  \\<Longrightarrow> thesis\n  xk = Val v\\<bullet>M(es)\n  (xl, xm) = s\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw a\n  (xu, xv) = s\n  es = map Val vs @ Throw a # es'\n\ngoal (1 subgoal):\n 1. thesis", "apply(auto simp add: is_Throws_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>Throw a =\n                      hd (dropWhile is_val (map Val vs @ Throw a # es'));\n              \\<exists>vsa aa es'a.\n                 map Val vs @ Throw a # es' =\n                 map Val vsa @ Throw aa # es'a\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); xt = Throw a;\n     es = map Val vs @ Throw a # es'; s = (xl, xm); xn = (K$ []); xu = xl;\n     xv = xm; xo = []; xp = []; xq = []; xr = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule meta_impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); xt = Throw a;\n     es = map Val vs @ Throw a # es'; s = (xl, xm); xn = (K$ []); xu = xl;\n     xv = xm; xo = []; xp = []; xq = []; xr = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> Throw a =\n                      hd (dropWhile is_val (map Val vs @ Throw a # es'))\n 2. \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); xt = Throw a;\n     es = map Val vs @ Throw a # es'; s = (xl, xm); xn = (K$ []); xu = xl;\n     xv = xm; xo = []; xp = []; xq = []; xr = []; xs = [];\n     \\<exists>vsa aa es'a.\n        map Val vs @ Throw a # es' =\n        map Val vsa @ Throw aa # es'a \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(subst dropWhile_append2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es');\n        xt = Throw a; es = map Val vs @ Throw a # es'; s = (xl, xm);\n        xn = (K$ []); xu = xl; xv = xm; xo = []; xp = []; xq = []; xr = [];\n        xs = []; x \\<in> set (map Val vs)\\<rbrakk>\n       \\<Longrightarrow> is_val x\n 2. \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); xt = Throw a;\n     es = map Val vs @ Throw a # es'; s = (xl, xm); xn = (K$ []); xu = xl;\n     xv = xm; xo = []; xp = []; xq = []; xr = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> Throw a = hd (dropWhile is_val (Throw a # es'))\n 3. \\<lbrakk>xk = Val v\\<bullet>M(map Val vs @ Throw a # es'); xt = Throw a;\n     es = map Val vs @ Throw a # es'; s = (xl, xm); xn = (K$ []); xu = xl;\n     xv = xm; xo = []; xp = []; xq = []; xr = []; xs = [];\n     \\<exists>vsa aa es'a.\n        map Val vs @ Throw a # es' =\n        map Val vsa @ Throw aa # es'a \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  thesis\n\ngoal (92 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 92 subgoals...", "next"], ["proof (state)\ngoal (92 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 92 subgoals...", "case RedThrowNull"], ["proof (state)\nthis:\n  xk = throw null\n  (xl, xm) = s_\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer)\n  (xu, xv) = s_\n\ngoal (92 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 92 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  xk = throw null\n  (xl, xm) = s_\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw (heap_base.addr_of_sys_xcpt xc xd NullPointer)\n  (xu, xv) = s_\n\ngoal (1 subgoal):\n 1. thesis", "by-(erule (4) red.RedThrowNull'[OF refl refl refl refl refl refl refl refl refl refl refl])"], ["proof (state)\nthis:\n  thesis\n\ngoal (91 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 91 subgoals...", "next"], ["proof (state)\ngoal (91 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 91 subgoals...", "case ThrowThrow"], ["proof (state)\nthis:\n  xk = throw (Throw a_)\n  (xl, xm) = s_\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw a_\n  (xu, xv) = s_\n\ngoal (91 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 91 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  xk = throw (Throw a_)\n  (xl, xm) = s_\n  (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>\n  xt = Throw a_\n  (xu, xv) = s_\n\ngoal (1 subgoal):\n 1. thesis", "by-(erule (4) red.ThrowThrow'[OF refl refl refl refl refl refl refl refl refl refl refl])"], ["proof (state)\nthis:\n  thesis\n\ngoal (90 subgoals):\n 1. \\<And>h' a h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l);\n        (h', a) \\<in> xd h (Class_type C)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>h C l.\n       \\<lbrakk>xk = new C; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); xd h (Class_type C) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e s ta e' s' T.\n       \\<lbrakk>xk = newA T\\<lfloor>e\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = ta; xt = newA T\\<lfloor>e'\\<rceil>;\n        (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>i h' a h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) =\n        \\<lbrace>NewHeapElem a (Array_type T (nat (sint i)))\\<rbrace>;\n        xt = addr a; (xu, xv) = (h', l); 0 \\<le>s i;\n        (h', a) \\<in> xd h (Array_type T (nat (sint i)))\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>i T s.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd NegativeArraySize);\n        (xu, xv) = s; i <s 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>i h T l.\n       \\<lbrakk>xk = newA T\\<lfloor>Val (Intg i)\\<rceil>; (xl, xm) = (h, l);\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd OutOfMemory);\n        (xu, xv) = (h, l); 0 \\<le>s i;\n        xd h (Array_type T (nat (sint i))) = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e s ta e' s' C.\n       \\<lbrakk>xk = Cast C e; (xl, xm) = s; (xn, xo, xp, xq, xr, xs) = ta;\n        xt = Cast C e'; (xu, xv) = s';\n        J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n         s'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>; xt = Val v;\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>s v U T.\n       \\<lbrakk>xk = Cast T (Val v); (xl, xm) = s;\n        (xn, xo, xp, xq, xr, xs) = \\<lbrace>\\<rbrace>;\n        xt = Throw (heap_base.addr_of_sys_xcpt xc xd ClassCast);\n        (xu, xv) = s; heap_base.typeof_h xe (hp s) v = \\<lfloor>U\\<rfloor>;\n        \\<not> xi \\<turnstile> U \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>e s ta e' s' T.\n        \\<lbrakk>xk = e instanceof T; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' instanceof T; (xu, xv) = s';\n         J_heap_base.red x xa xb xc xd xe xf xg xh xi xj e s ta e'\n          s'\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 90 subgoals...", "qed(assumption|erule (4) red.that[unfolded Predicate_Compile.contains_def, OF refl refl refl refl refl refl refl refl refl refl refl])+"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t e es s ta e' s'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = e # es; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n         J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n          empty_heap allocate typeof_addr heap_read heap_write extTA P t e s\n          ta e' s'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ tb_ v_\n        esa_ sa_ taa_ es'_ s'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n         (xu, xv) = s'a_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_ s'a_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t e es s ta e' s'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = e # es; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n         J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n          empty_heap allocate typeof_addr heap_read heap_write extTA P t e s\n          ta e' s'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ tb_ v_\n        esa_ sa_ taa_ es'_ s'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n         (xu, xv) = s'a_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_ s'a_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case reds"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?addr2thread_id; xa = ?thread_id2addr;\n   xb = ?spurious_wakeups; xc = ?empty_heap; xd = ?allocate;\n   xe = ?typeof_addr; xf = ?heap_read; xg = ?heap_write; xh = ?extTA;\n   xi = ?P; xj = ?t; xk = ?e # ?es; (xl, xm) = ?s;\n   (xn, xo, xp, xq, xr, xs) = ?ta; xt = ?e' # ?es; (xu, xv) = ?s';\n   J_heap_base.red ?addr2thread_id ?thread_id2addr ?spurious_wakeups\n    ?empty_heap ?allocate ?typeof_addr ?heap_read ?heap_write ?extTA ?P ?t\n    ?e ?s ?ta ?e' ?s'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?addr2thread_ida; xa = ?thread_id2addra;\n   xb = ?spurious_wakeupsa; xc = ?empty_heapa; xd = ?allocatea;\n   xe = ?typeof_addra; xf = ?heap_read; xg = ?heap_write; xh = ?extTAa;\n   xi = ?Pa; xj = ?tb; xk = Val ?v # ?esa; (xl, xm) = ?sa;\n   (xn, xo, xp, xq, xr, xs) = ?taa; xt = Val ?v # ?es'; (xu, xv) = ?s'a;\n   J_heap_base.reds ?addr2thread_ida ?thread_id2addra ?spurious_wakeupsa\n    ?empty_heapa ?allocatea ?typeof_addra ?heap_read ?heap_write ?extTAa ?Pa\n    ?tb ?esa ?sa ?taa ?es' ?s'a\\<rbrakk>\n  \\<Longrightarrow> thesis\n  J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n              (xn, xo, xp, xq, xr, xs) xt (xu, xv);\n     \\<And>addr2thread_id thread_id2addr spurious_wakeups empty_heap\n        allocate typeof_addr heap_read heap_write extTA P t e es s ta e' s'.\n        \\<lbrakk>x = addr2thread_id; xa = thread_id2addr;\n         xb = spurious_wakeups; xc = empty_heap; xd = allocate;\n         xe = typeof_addr; xf = heap_read; xg = heap_write; xh = extTA;\n         xi = P; xj = t; xk = e # es; (xl, xm) = s;\n         (xn, xo, xp, xq, xr, xs) = ta; xt = e' # es; (xu, xv) = s';\n         J_heap_base.red addr2thread_id thread_id2addr spurious_wakeups\n          empty_heap allocate typeof_addr heap_read heap_write extTA P t e s\n          ta e' s'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>addr2thread_ida_ thread_id2addra_ spurious_wakeupsa_ empty_heapa_\n        allocatea_ typeof_addra_ heap_read heap_write extTAa_ Pa_ tb_ v_\n        esa_ sa_ taa_ es'_ s'a_.\n        \\<lbrakk>x = addr2thread_ida_; xa = thread_id2addra_;\n         xb = spurious_wakeupsa_; xc = empty_heapa_; xd = allocatea_;\n         xe = typeof_addra_; xf = heap_read; xg = heap_write; xh = extTAa_;\n         xi = Pa_; xj = tb_; xk = Val v_ # esa_; (xl, xm) = sa_;\n         (xn, xo, xp, xq, xr, xs) = taa_; xt = Val v_ # es'_;\n         (xu, xv) = s'a_;\n         J_heap_base.reds addr2thread_ida_ thread_id2addra_\n          spurious_wakeupsa_ empty_heapa_ allocatea_ typeof_addra_ heap_read\n          heap_write extTAa_ Pa_ tb_ esa_ sa_ taa_ es'_ s'a_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from reds.prems"], ["proof (chain)\npicking this:\n  J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)", "show thesis"], ["proof (prove)\nusing this:\n  J_heap_base.reds x xa xb xc xd xe xf xg xh xi xj xk (xl, xm)\n   (xn, xo, xp, xq, xr, xs) xt (xu, xv)\n\ngoal (1 subgoal):\n 1. thesis", "by(rule J_heap_base.reds.cases)(assumption|erule (4) reds.that[OF refl refl refl refl refl refl refl refl refl refl refl])+"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}