{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/J/WellType.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma WTs_conv_list_all2: \n  fixes is_lub \n  shows \"is_lub,P,E \\<turnstile> es [::] Ts = list_all2 (WT is_lub P E) es Ts\"", "lemma WTs_append [iff]: \"\\<And>is_lub Ts. (is_lub,P,E \\<turnstile> es\\<^sub>1 @ es\\<^sub>2 [::] Ts) =\n  (\\<exists>Ts\\<^sub>1 Ts\\<^sub>2. Ts = Ts\\<^sub>1 @ Ts\\<^sub>2 \\<and> is_lub,P,E \\<turnstile> es\\<^sub>1 [::] Ts\\<^sub>1 \\<and> is_lub,P,E \\<turnstile> es\\<^sub>2[::]Ts\\<^sub>2)\"", "lemma fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_unique: \"\\<And>T1 T2 T3 T4. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; \\<turnstile> lub(T1, T2) = T4 \\<rbrakk> \\<Longrightarrow> T3 = T4\"\n  shows WT_unique: \"\\<lbrakk> is_lub,P,E \\<turnstile> e :: T; is_lub,P,E \\<turnstile> e :: T' \\<rbrakk> \\<Longrightarrow> T = T'\"\n  and WTs_unique: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [::] Ts; is_lub,P,E \\<turnstile> es [::] Ts' \\<rbrakk> \\<Longrightarrow> Ts = Ts'\"", "lemma fixes is_lub\n  shows wt_env_mono: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> (\\<And>E'. E \\<subseteq>\\<^sub>m E' \\<Longrightarrow> is_lub,P,E' \\<turnstile> e :: T)\"\n  and wts_env_mono: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> (\\<And>E'. E \\<subseteq>\\<^sub>m E' \\<Longrightarrow> is_lub,P,E' \\<turnstile> es [::] Ts)\"", "lemma fixes is_lub\n  shows WT_fv: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> fv e \\<subseteq> dom E\"\n  and WT_fvs: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> fvs es \\<subseteq> dom E\"", "lemma fixes is_lub\n  shows WT_expr_locks: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> expr_locks e = (\\<lambda>ad. 0)\"\n  and WTs_expr_lockss: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> expr_lockss es = (\\<lambda>ad. 0)\"", "lemma\n  fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  and wf: \"wf_prog wf_md P\"\n  shows WT_is_type: \"\\<lbrakk> is_lub,P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_type P T\"\n  and WTs_is_type: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> set Ts \\<subseteq> types P\"", "lemma\n  fixes is_lub1 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>1 lub'((_,/ _)') = _\" [51,51,51] 50)\n  and is_lub2 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>2 lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes wf: \"wf_prog wf_md P\"\n  and is_lub1_into_is_lub2: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>1 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> \\<turnstile>2 lub(T1, T2) = T3\"\n  and is_lub2_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>2 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  shows WT_change_is_lub: \"\\<lbrakk> is_lub1,P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> e :: T\"\n  and WTs_change_is_lub: \"\\<lbrakk> is_lub1,P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [::] Ts\"", "lemma WTBlock_code:\n  \"\\<And>is_lub. \\<lbrakk> is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'; \n     case vo of None \\<Rightarrow> True | \\<lfloor>v\\<rfloor> \\<Rightarrow> case typeof v of None \\<Rightarrow> False | Some T' \\<Rightarrow> P \\<turnstile> T' \\<le> T \\<rbrakk>\n  \\<Longrightarrow>  is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'\"", "lemmas [code_pred_intro] =\n  WTNew WTNewArray WTCast WTInstanceOf WTVal WTVar WTBinOp WTLAss WTAAcc WTAAss WTALength WTFAcc WTFAss WTCAS WTCall", "lemmas [code_pred_intro] =\n  WTSynchronized WTSeq WTCond WTWhile WTThrow WTTry\n  WTNil WTCons", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows WT_code_into_WT: \n  \"\\<lbrakk> P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e :: T\"\n\n  and WTs_code_into_WTs:\n  \"\\<lbrakk> P,E \\<turnstile> es [::'] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [::] Ts\"", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows WT_into_WT_code: \n  \"\\<lbrakk> P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e ::' T\"\n\n  and WT_into_WTs_code_OK:\n  \"\\<lbrakk> P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts\"", "theorem WT_eq_WT_code:\n  assumes \"wf_prog wf_md P\"\n  and \"ran E \\<subseteq> types P\"\n  shows \"P,E \\<turnstile> e :: T \\<longleftrightarrow> P,E \\<turnstile> e ::' T\""], "translations": [["", "lemma WTs_conv_list_all2: \n  fixes is_lub \n  shows \"is_lub,P,E \\<turnstile> es [::] Ts = list_all2 (WT is_lub P E) es Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> es [::] Ts) = list_all2 (WT is_lub P E) es Ts", "by(induct es arbitrary: Ts)(auto simp add: list_all2_Cons1 elim: WTs.cases)"], ["", "lemma WTs_append [iff]: \"\\<And>is_lub Ts. (is_lub,P,E \\<turnstile> es\\<^sub>1 @ es\\<^sub>2 [::] Ts) =\n  (\\<exists>Ts\\<^sub>1 Ts\\<^sub>2. Ts = Ts\\<^sub>1 @ Ts\\<^sub>2 \\<and> is_lub,P,E \\<turnstile> es\\<^sub>1 [::] Ts\\<^sub>1 \\<and> is_lub,P,E \\<turnstile> es\\<^sub>2[::]Ts\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>is_lub Ts.\n       (is_lub,P,E \\<turnstile> es\\<^sub>1 @ es\\<^sub>2 [::] Ts) =\n       (\\<exists>Ts\\<^sub>1 Ts\\<^sub>2.\n           Ts = Ts\\<^sub>1 @ Ts\\<^sub>2 \\<and>\n           is_lub,P,E \\<turnstile> es\\<^sub>1 [::] Ts\\<^sub>1 \\<and>\n           is_lub,P,E \\<turnstile> es\\<^sub>2 [::] Ts\\<^sub>2)", "by(auto simp add: WTs_conv_list_all2 list_all2_append1 dest: list_all2_lengthD[symmetric])"], ["", "inductive_simps WT_iffs [iff]:\n  \"is_lub',P,E \\<turnstile> Val v :: T\"\n  \"is_lub',P,E \\<turnstile> Var V :: T\"\n  \"is_lub',P,E \\<turnstile> e\\<^sub>1;;e\\<^sub>2 :: T\\<^sub>2\"\n  \"is_lub',P,E \\<turnstile> {V:T=vo; e} :: T'\""], ["", "inductive_cases WT_elim_cases[elim!]:\n  \"is_lub',P,E \\<turnstile> V :=e :: T\"\n  \"is_lub',P,E \\<turnstile> sync(o') e :: T\"\n  \"is_lub',P,E \\<turnstile> if (e) e\\<^sub>1 else e\\<^sub>2 :: T\"\n  \"is_lub',P,E \\<turnstile> while (e) c :: T\"\n  \"is_lub',P,E \\<turnstile> throw e :: T\"\n  \"is_lub',P,E \\<turnstile> try e\\<^sub>1 catch(C V) e\\<^sub>2 :: T\"\n  \"is_lub',P,E \\<turnstile> Cast D e :: T\"\n  \"is_lub',P,E \\<turnstile> e instanceof U :: T\"\n  \"is_lub',P,E \\<turnstile> a\\<bullet>F{D} :: T\"\n  \"is_lub',P,E \\<turnstile> a\\<bullet>F{D} := v :: T\"\n  \"is_lub',P,E \\<turnstile> e\\<bullet>compareAndSwap(D\\<bullet>F, e', e'') :: T\"\n  \"is_lub',P,E \\<turnstile> e\\<^sub>1 \\<guillemotleft>bop\\<guillemotright> e\\<^sub>2 :: T\"\n  \"is_lub',P,E \\<turnstile> new C :: T\"\n  \"is_lub',P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T'\"\n  \"is_lub',P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T\"\n  \"is_lub',P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\"\n  \"is_lub',P,E \\<turnstile> a\\<bullet>length :: T\"\n  \"is_lub',P,E \\<turnstile> e\\<bullet>M(ps) :: T\"\n  \"is_lub',P,E \\<turnstile> sync(o') e :: T\"\n  \"is_lub',P,E \\<turnstile> insync(a) e :: T\""], ["", "lemma fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_unique: \"\\<And>T1 T2 T3 T4. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; \\<turnstile> lub(T1, T2) = T4 \\<rbrakk> \\<Longrightarrow> T3 = T4\"\n  shows WT_unique: \"\\<lbrakk> is_lub,P,E \\<turnstile> e :: T; is_lub,P,E \\<turnstile> e :: T' \\<rbrakk> \\<Longrightarrow> T = T'\"\n  and WTs_unique: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [::] Ts; is_lub,P,E \\<turnstile> es [::] Ts' \\<rbrakk> \\<Longrightarrow> Ts = Ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n      is_lub,P,E \\<turnstile> e :: T'\\<rbrakk>\n     \\<Longrightarrow> T = T') &&&\n    (\\<lbrakk>is_lub,P,E \\<turnstile> es [::] Ts;\n      is_lub,P,E \\<turnstile> es [::] Ts'\\<rbrakk>\n     \\<Longrightarrow> Ts = Ts')", "apply(induct arbitrary: T' and Ts' rule: WT_WTs.inducts)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>C E T'.\n       \\<lbrakk>is_class P C; is_lub,P,E \\<turnstile> new C :: T'\\<rbrakk>\n       \\<Longrightarrow> Class C = T'\n 2. \\<And>E e T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Integer = T';\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<lfloor>\\<rceil> = T'\n 3. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_lub,P,E \\<turnstile> Cast U e :: T'\\<rbrakk>\n       \\<Longrightarrow> U = T'\n 4. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U;\n        is_lub,P,E \\<turnstile> e instanceof U :: T'\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'\n 5. \\<And>v T E T'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Val v :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 9. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 10. \\<And>E a T i e T' T'a.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n            T\\<lfloor>\\<rceil> = T';\n         is_lub,P,E \\<turnstile> i :: Integer;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n         is_lub,P,E \\<turnstile> e :: T';\n         \\<And>T'a.\n            is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n         P \\<turnstile> T' \\<le> T;\n         is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n        \\<Longrightarrow> Void = T'a\nA total of 24 subgoals...", "apply blast"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>E e T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Integer = T';\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<lfloor>\\<rceil> = T'\n 2. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_lub,P,E \\<turnstile> Cast U e :: T'\\<rbrakk>\n       \\<Longrightarrow> U = T'\n 3. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U;\n        is_lub,P,E \\<turnstile> e instanceof U :: T'\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'\n 4. \\<And>v T E T'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Val v :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 8. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 9. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 10. \\<And>E a T T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n            T\\<lfloor>\\<rceil> = T';\n         is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n        \\<Longrightarrow> Integer = T'\nA total of 23 subgoals...", "apply blast"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_lub,P,E \\<turnstile> Cast U e :: T'\\<rbrakk>\n       \\<Longrightarrow> U = T'\n 2. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U;\n        is_lub,P,E \\<turnstile> e instanceof U :: T'\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'\n 3. \\<And>v T E T'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Val v :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 7. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 9. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 10. \\<And>E e U C F T fm D T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n        \\<Longrightarrow> T = T'\nA total of 22 subgoals...", "apply blast"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>E e T U T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U;\n        is_lub,P,E \\<turnstile> e instanceof U :: T'\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'\n 2. \\<And>v T E T'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Val v :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 6. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 8. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 9. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 10. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n            U = T';\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n         \\<And>T'a.\n            is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n            T' = T'a;\n         P \\<turnstile> T' \\<le> T;\n         is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n        \\<Longrightarrow> Void = T'a\nA total of 21 subgoals...", "apply blast"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>v T E T'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Val v :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 5. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 7. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 8. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 9. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 10. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n         is_lub,P,E \\<turnstile> e2 :: T';\n         \\<And>T'a.\n            is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n         P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n         P \\<turnstile> T'' \\<le> T;\n         is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n        \\<Longrightarrow> Boolean = T'a\nA total of 20 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>E V T T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        is_lub,P,E \\<turnstile> Var V :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 4. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 6. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 7. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 9. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 10. \\<And>E e U C M Ts T meth D es Ts' T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n         is_lub,P,E \\<turnstile> es [::] Ts';\n         \\<And>Ts'a.\n            is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n            Ts' = Ts'a;\n         P \\<turnstile> Ts' [\\<le>] Ts;\n         is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n        \\<Longrightarrow> T = T'\nA total of 19 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>E e1 T1 e2 T2 bop T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> T1 = T';\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e2 :: T' \\<Longrightarrow> T2 = T';\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 3. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 5. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 6. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 8. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 9. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 10. \\<And>T E V e T' vo T'a.\n        \\<lbrakk>is_type P T;\n         is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n         \\<And>T'a.\n            is_lub,P,E(V \\<mapsto>\n            T) \\<turnstile> e :: T'a \\<Longrightarrow>\n            T' = T'a;\n         case vo of None \\<Rightarrow> True\n         | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n             \\<exists>T'.\n                typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n                P \\<turnstile> T' \\<le> T;\n         is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n        \\<Longrightarrow> T' = T'a\nA total of 18 subgoals...", "apply(fastforce dest: WT_binop_fun)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>E V T e T' T'a.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        is_lub,P,E \\<turnstile> V:=e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 2. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 4. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 5. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 7. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 8. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 9. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 10. \\<And>E o' T e T' T'a.\n        \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n         is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n         \\<And>T'a.\n            is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n         is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n        \\<Longrightarrow> T' = T'a\nA total of 17 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>E a T i T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 3. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 4. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 6. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 7. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 9. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 10. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n            T\\<^sub>1 = T';\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n            T\\<^sub>2 = T';\n         is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n        \\<Longrightarrow> T\\<^sub>2 = T'\nA total of 16 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>E a T i e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> i :: T' \\<Longrightarrow> Integer = T';\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 2. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 3. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 5. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 6. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 8. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 9. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 10. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n         is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n            T\\<^sub>1 = T';\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n            T\\<^sub>2 = T';\n         \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n         is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n         else e\\<^sub>2 :: T'\\<rbrakk>\n        \\<Longrightarrow> T = T'\nA total of 15 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>E a T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> a :: T' \\<Longrightarrow>\n           T\\<lfloor>\\<rceil> = T';\n        is_lub,P,E \\<turnstile> a\\<bullet>length :: T'\\<rbrakk>\n       \\<Longrightarrow> Integer = T'\n 2. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 4. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 5. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 7. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 8. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 9. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 10. \\<And>E e c T T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n         is_lub,P,E \\<turnstile> c :: T;\n         \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n         is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n        \\<Longrightarrow> Void = T'\nA total of 14 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>E e U C F T fm D T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<bullet>F{D} :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 3. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 4. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 6. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 7. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 8. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 9. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 10. \\<And>E e C T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n        \\<Longrightarrow> Void = T'\nA total of 13 subgoals...", "apply(fastforce dest: sees_field_fun)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T'a \\<Longrightarrow>\n           T' = T'a;\n        P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: T'a\\<rbrakk>\n       \\<Longrightarrow> Void = T'a\n 2. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 3. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 5. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 6. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 7. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 9. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 10. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n         \\<And>T'.\n            is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n            T = T';\n         is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n         \\<And>T'.\n            is_lub,P,E(V \\<mapsto>\n            Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n            T = T';\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         is_lub,P,E \\<turnstile> try e\\<^sub>1\n         catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n        \\<Longrightarrow> T = T'\nA total of 12 subgoals...", "apply(fastforce dest: sees_field_fun)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>E e1 U C F T fm D e2 T' e3 T'' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e1 :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e2 :: T'a \\<Longrightarrow> T' = T'a;\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e3 :: T' \\<Longrightarrow> T'' = T';\n        P \\<turnstile> T'' \\<le> T;\n        is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: T'a\\<rbrakk>\n       \\<Longrightarrow> Boolean = T'a\n 2. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 4. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 6. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 8. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 9. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 10. \\<And>E Ts'.\n        is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\nA total of 11 subgoals...", "apply blast"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>E e U C M Ts T meth D es Ts' T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> U = T';\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>Ts'a.\n           is_lub,P,E \\<turnstile> es [::] Ts'a \\<Longrightarrow>\n           Ts' = Ts'a;\n        P \\<turnstile> Ts' [\\<le>] Ts;\n        is_lub,P,E \\<turnstile> e\\<bullet>M(es) :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 3. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 4. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 5. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 7. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 8. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 9. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 10. \\<And>E e T es Ts Ts'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n         \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n         is_lub,P,E \\<turnstile> es [::] Ts;\n         \\<And>Ts'.\n            is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n         is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n        \\<Longrightarrow> T # Ts = Ts'", "apply(fastforce dest: sees_method_fun)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>T E V e T' vo T'a.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'a \\<Longrightarrow>\n           T' = T'a;\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 2. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 3. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 4. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 6. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 7. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 8. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 9. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>E o' T e T' T'a.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> o' :: T' \\<Longrightarrow> T = T';\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>T'a.\n           is_lub,P,E \\<turnstile> e :: T'a \\<Longrightarrow> T' = T'a;\n        is_lub,P,E \\<turnstile> sync(o') e :: T'a\\<rbrakk>\n       \\<Longrightarrow> T' = T'a\n 2. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 3. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 5. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 6. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 7. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 8. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1;; e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T\\<^sub>2 = T'\n 2. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 4. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 5. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 6. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 7. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow>\n           T\\<^sub>1 = T';\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T\\<^sub>2 = T';\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        is_lub,P,E \\<turnstile> if (e) e\\<^sub>1\n        else e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 3. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 4. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 5. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 6. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply(blast dest: is_lub_unique)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>E e c T T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Boolean = T';\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> c :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> while (e) c :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 2. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 3. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 4. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 5. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>E e C T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> Class C = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> throw e :: T'\\<rbrakk>\n       \\<Longrightarrow> Void = T'\n 2. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 3. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 4. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>T'.\n           is_lub,P,E \\<turnstile> e\\<^sub>1 :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>T'.\n           is_lub,P,E(V \\<mapsto>\n           Class C) \\<turnstile> e\\<^sub>2 :: T' \\<Longrightarrow>\n           T = T';\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        is_lub,P,E \\<turnstile> try e\\<^sub>1\n        catch(C V) e\\<^sub>2 :: T'\\<rbrakk>\n       \\<Longrightarrow> T = T'\n 2. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 3. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>E Ts'.\n       is_lub,P,E \\<turnstile> [] [::] Ts' \\<Longrightarrow> [] = Ts'\n 2. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E e T es Ts Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>T'. is_lub,P,E \\<turnstile> e :: T' \\<Longrightarrow> T = T';\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>Ts'.\n           is_lub,P,E \\<turnstile> es [::] Ts' \\<Longrightarrow> Ts = Ts';\n        is_lub,P,E \\<turnstile> e # es [::] Ts'\\<rbrakk>\n       \\<Longrightarrow> T # Ts = Ts'", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes is_lub\n  shows wt_env_mono: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> (\\<And>E'. E \\<subseteq>\\<^sub>m E' \\<Longrightarrow> is_lub,P,E' \\<turnstile> e :: T)\"\n  and wts_env_mono: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> (\\<And>E'. E \\<subseteq>\\<^sub>m E' \\<Longrightarrow> is_lub,P,E' \\<turnstile> es [::] Ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow>\n     (\\<And>E'.\n         E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n         is_lub,P,E' \\<turnstile> e :: T)) &&&\n    (is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow>\n     (\\<And>E'.\n         E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n         is_lub,P,E' \\<turnstile> es [::] Ts))", "apply(induct rule: WT_WTs.inducts)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>C E E'.\n       \\<lbrakk>is_class P C; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> new C :: Class C\n 2. \\<And>E e T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E E'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Val v :: T\n 6. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T' E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub,P,E \\<turnstile> i :: Integer;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> i :: Integer;\n         is_lub,P,E \\<turnstile> e :: T';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 24 subgoals...", "apply(simp add: WTNew)"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>E e T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 2. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Cast U e :: U\n 3. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e instanceof U :: Boolean\n 4. \\<And>v T E E'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Val v :: T\n 5. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 6. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 7. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 8. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 9. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 10. \\<And>E a T E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\nA total of 23 subgoals...", "apply(simp add: WTNewArray)"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Cast U e :: U\n 2. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e instanceof U :: Boolean\n 3. \\<And>v T E E'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Val v :: T\n 4. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 5. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 6. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 7. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 8. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 9. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 10. \\<And>E e U C F T fm D E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\nA total of 22 subgoals...", "apply(fastforce simp: WTCast)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>E e T U E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e instanceof U :: Boolean\n 2. \\<And>v T E E'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Val v :: T\n 3. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 4. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 5. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 6. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 7. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 8. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 9. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 10. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n         P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\nA total of 21 subgoals...", "apply(fastforce simp: WTInstanceOf)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>v T E E'.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Val v :: T\n 2. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 3. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 4. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 5. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 6. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 7. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 8. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 9. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 10. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e1 :: U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n         is_lub,P,E \\<turnstile> e2 :: T';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e2 :: T';\n         P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e3 :: T'';\n         P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\nA total of 20 subgoals...", "apply(fastforce simp: WTVal)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>E V T E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> Var V :: T\n 2. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 3. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 4. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 5. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 6. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 7. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 8. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 9. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 10. \\<And>E e U C M Ts T meth D es Ts' E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n         is_lub,P,E \\<turnstile> es [::] Ts';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> es [::] Ts';\n         P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\nA total of 19 subgoals...", "apply(simp add: WTVar map_le_def dom_def)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>E e1 T1 e2 T2 bop T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 2. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 3. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 4. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 5. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 6. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 7. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 8. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 9. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 10. \\<And>T E V e T' vo E'.\n        \\<lbrakk>is_type P T;\n         is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n         \\<And>E'.\n            E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: T';\n         case vo of None \\<Rightarrow> True\n         | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n             \\<exists>T'.\n                typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n                P \\<turnstile> T' \\<le> T;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\nA total of 18 subgoals...", "apply(fastforce simp: WTBinOp)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>E V T e T' E'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> V:=e :: Void\n 2. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 3. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 4. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 5. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 6. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 7. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 8. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 9. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 10. \\<And>E o' T e T' E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> o' :: T;\n         is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: T';\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\nA total of 17 subgoals...", "apply(force simp:map_le_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>E a T i E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 2. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 3. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 4. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 5. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 6. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 7. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 8. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 9. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 10. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                          e\\<^sub>2 :: T\\<^sub>2\nA total of 16 subgoals...", "apply(simp add: WTAAcc)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>E a T i e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> i :: Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\n 2. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 3. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 4. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 5. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 6. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 7. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 8. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 9. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 10. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: Boolean;\n         is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                          else e\\<^sub>2 :: T\nA total of 15 subgoals...", "apply(simp add: WTAAss, fastforce)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>E a T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> a\\<bullet>length :: Integer\n 2. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 3. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 4. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 5. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 6. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 7. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 8. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 9. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 10. \\<And>E e c T E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: Boolean;\n         is_lub,P,E \\<turnstile> c :: T;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> c :: T;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\nA total of 14 subgoals...", "apply(simp add: WTALength, fastforce)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>E e U C F T fm D E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>F{D} :: T\n 2. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 3. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 4. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 5. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 6. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 7. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 8. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 9. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 10. \\<And>E e C E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: Class C;\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\nA total of 13 subgoals...", "apply(fastforce simp: WTFAcc)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T';\n        P \\<turnstile> T' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2 :: Void\n 2. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 3. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 4. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 5. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 6. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 7. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 8. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 9. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 10. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n         is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n         \\<And>E'.\n            E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                          catch(C V) e\\<^sub>2 :: T\nA total of 12 subgoals...", "apply(fastforce simp: WTFAss del:WT_WTs.intros WT_elim_cases)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>E e1 U C F T fm D e2 T' e3 T'' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e1 :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e2 :: T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e3 :: T'';\n        P \\<turnstile> T'' \\<le> T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) :: Boolean\n 2. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 3. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 4. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 6. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 7. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 8. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 9. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 10. \\<And>E E'.\n        E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n        is_lub,P,E' \\<turnstile> [] [::] []\nA total of 11 subgoals...", "apply blast"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>E e U C M Ts T meth D es Ts' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts';\n        P \\<turnstile> Ts' [\\<le>] Ts; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<bullet>M(es) :: T\n 2. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 3. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 4. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 5. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 6. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 7. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 8. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 9. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 10. \\<And>E e T es Ts E'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> e :: T;\n         is_lub,P,E \\<turnstile> es [::] Ts;\n         \\<And>E'.\n            E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n            is_lub,P,E' \\<turnstile> es [::] Ts;\n         E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n        \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>T E V e T' vo E'.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        \\<And>E'.\n           E(V \\<mapsto> T) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> {V:T=vo; e} :: T'\n 2. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 3. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 4. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 5. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 6. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 7. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 8. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 9. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: map_le_def WTBlock)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>E o' T e T' E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> o' :: T;\n        is_refT T; T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T';\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> sync(o') e :: T'\n 2. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 3. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 4. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 5. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 6. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 7. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 8. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTSynchronized)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e\\<^sub>1;;\n                         e\\<^sub>2 :: T\\<^sub>2\n 2. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 3. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 4. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 5. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 6. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 7. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTSeq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        is_lub T\\<^sub>1 T\\<^sub>2 T; E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> if (e) e\\<^sub>1\n                         else e\\<^sub>2 :: T\n 2. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 3. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 4. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 5. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 6. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTCond)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>E e c T E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> c :: T;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> while (e) c :: Void\n 2. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 3. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 4. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 5. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTWhile)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>E e C E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: Class C;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> throw e :: Void\n 2. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 3. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 4. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTThrow)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>E e\\<^sub>1 T V C e\\<^sub>2 E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>1 :: T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        \\<And>E'.\n           E(V \\<mapsto> Class C) \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e\\<^sub>2 :: T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> try e\\<^sub>1\n                         catch(C V) e\\<^sub>2 :: T\n 2. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 3. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce simp: WTTry map_le_def dom_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>E E'.\n       E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n       is_lub,P,E' \\<turnstile> [] [::] []\n 2. \\<And>E e T es Ts E'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> e :: T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        \\<And>E'.\n           E \\<subseteq>\\<^sub>m E' \\<Longrightarrow>\n           is_lub,P,E' \\<turnstile> es [::] Ts;\n        E \\<subseteq>\\<^sub>m E'\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E' \\<turnstile> e # es [::] T # Ts", "apply(fastforce)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes is_lub\n  shows WT_fv: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> fv e \\<subseteq> dom E\"\n  and WT_fvs: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> fvs es \\<subseteq> dom E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow>\n     fv e \\<subseteq> dom E) &&&\n    (is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow>\n     fvs es \\<subseteq> dom E)", "apply(induct rule:WT_WTs.inducts)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>C E. is_class P C \\<Longrightarrow> fv (new C) \\<subseteq> dom E\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        fv e \\<subseteq> dom E; is_type P (T\\<lfloor>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> dom E\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T; fv e \\<subseteq> dom E;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U\\<rbrakk>\n       \\<Longrightarrow> fv (Cast U e) \\<subseteq> dom E\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T; fv e \\<subseteq> dom E;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U\\<rbrakk>\n       \\<Longrightarrow> fv (e instanceof U) \\<subseteq> dom E\n 5. \\<And>v T E.\n       typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n       fv (Val v) \\<subseteq> dom E\n 6. \\<And>E V T.\n       E V = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n       fv (Var V) \\<subseteq> dom E\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1; fv e1 \\<subseteq> dom E;\n        is_lub,P,E \\<turnstile> e2 :: T2; fv e2 \\<subseteq> dom E;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T\\<rbrakk>\n       \\<Longrightarrow> fv (e1 \\<guillemotleft>bop\\<guillemotright> e2)\n                         \\<subseteq> dom E\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        fv e \\<subseteq> dom E; P \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> fv (V:=e) \\<subseteq> dom E\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        fv a \\<subseteq> dom E; is_lub,P,E \\<turnstile> i :: Integer;\n        fv i \\<subseteq> dom E\\<rbrakk>\n       \\<Longrightarrow> fv (a\\<lfloor>i\\<rceil>) \\<subseteq> dom E\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         fv a \\<subseteq> dom E; is_lub,P,E \\<turnstile> i :: Integer;\n         fv i \\<subseteq> dom E; is_lub,P,E \\<turnstile> e :: T';\n         fv e \\<subseteq> dom E; P \\<turnstile> T' \\<le> T\\<rbrakk>\n        \\<Longrightarrow> fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> dom E\nA total of 24 subgoals...", "apply(simp_all del: fun_upd_apply)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>E V T. E V = \\<lfloor>T\\<rfloor> \\<Longrightarrow> V \\<in> dom E\n 2. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        fv e \\<subseteq> dom E; P \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> V \\<in> dom E\n 3. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        fv e \\<subseteq> insert V (dom E); vo = None\\<rbrakk>\n       \\<Longrightarrow> fv e - {V} \\<subseteq> dom E\n 4. \\<And>T E V e T' vo x2.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        fv e \\<subseteq> insert V (dom E); vo = \\<lfloor>x2\\<rfloor>;\n        \\<exists>T'.\n           typeof x2 = \\<lfloor>T'\\<rfloor> \\<and>\n           P \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> fv e - {V} \\<subseteq> dom E\n 5. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        fv e\\<^sub>1 \\<subseteq> dom E;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        fv e\\<^sub>2 \\<subseteq> insert V (dom E);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n       \\<Longrightarrow> fv e\\<^sub>2 - {V} \\<subseteq> dom E", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes is_lub\n  shows WT_expr_locks: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> expr_locks e = (\\<lambda>ad. 0)\"\n  and WTs_expr_lockss: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> expr_lockss es = (\\<lambda>ad. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow>\n     expr_locks e = (\\<lambda>ad. 0)) &&&\n    (is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow>\n     expr_lockss es = (\\<lambda>ad. 0))", "by(induct rule: WT_WTs.inducts)(auto)"], ["", "lemma\n  fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  and wf: \"wf_prog wf_md P\"\n  shows WT_is_type: \"\\<lbrakk> is_lub,P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_type P T\"\n  and WTs_is_type: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> set Ts \\<subseteq> types P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> is_type P T) &&&\n    (\\<lbrakk>is_lub,P,E \\<turnstile> es [::] Ts;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> set Ts \\<subseteq> types P)", "apply(induct rule: WT_WTs.inducts)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P (Class C)\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P (T\\<lfloor>\\<rceil>)\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_type P (T\\<lfloor>\\<rceil>);\n         is_lub,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n         is_lub,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Void\nA total of 24 subgoals...", "apply simp"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>E e T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P (T\\<lfloor>\\<rceil>)\n 2. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P U\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 4. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 8. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 9. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 10. \\<And>E a T.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_type P (T\\<lfloor>\\<rceil>);\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Integer\nA total of 23 subgoals...", "apply simp"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P U\n 2. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 3. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 7. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 9. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 10. \\<And>E e U C F T fm D.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T\nA total of 22 subgoals...", "apply simp"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 2. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 6. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 8. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 9. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 10. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Void\nA total of 21 subgoals...", "apply simp"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 5. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 7. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 8. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 9. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 10. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n         is_lub,P,E \\<turnstile> e2 :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n         P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n         P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Boolean\nA total of 20 subgoals...", "apply (simp add:typeof_lit_is_type)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 6. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 7. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 9. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 10. \\<And>E e U C M Ts T meth D es Ts'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n         class_type_of' U = \\<lfloor>C\\<rfloor>;\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n         is_lub,P,E \\<turnstile> es [::] Ts';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         set Ts' \\<subseteq> types P;\n         P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T\nA total of 19 subgoals...", "apply (fastforce intro:nth_mem simp add: ran_def)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T1;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 5. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 6. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 8. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 9. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 10. \\<And>T E V e T' vo.\n        \\<lbrakk>is_type P T;\n         is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n         ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n         is_type P T';\n         case vo of None \\<Rightarrow> True\n         | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n             \\<exists>T'.\n                typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n                P \\<turnstile> T' \\<le> T;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T'\nA total of 18 subgoals...", "apply(simp add: WT_binop_is_type)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 2. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 5. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 7. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 8. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 9. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 10. \\<And>E o' T e T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n         T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T'\nA total of 17 subgoals...", "apply(simp)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 4. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 6. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 7. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 9. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 10. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T\\<^sub>2\nA total of 16 subgoals...", "apply(simp del: is_type_array add: is_type_ArrayD)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>E a T i e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        is_lub,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Integer;\n        is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 2. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 3. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 5. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 6. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 8. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 9. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 10. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n         is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n         is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n         \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T\nA total of 15 subgoals...", "apply(simp)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>E a T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_type P (T\\<lfloor>\\<rceil>);\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Integer\n 2. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 5. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 7. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 8. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 9. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 10. \\<And>E e c T.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n         is_lub,P,E \\<turnstile> c :: T;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Void\nA total of 14 subgoals...", "apply(simp)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>E e U C F T fm D.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 4. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 6. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 7. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 8. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 9. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 10. \\<And>E e C.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P Void\nA total of 13 subgoals...", "apply(simp add:sees_field_is_type[OF _ wf])"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>E e\\<^sub>1 U C F T fm D e\\<^sub>2 T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 2. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 3. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 5. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 6. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 7. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 9. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 10. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n         is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n         ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n         is_type P T;\n         P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_type P T\nA total of 12 subgoals...", "apply(simp)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>E e1 U C F T fm D e2 T' e3 T''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in D; volatile fm;\n        is_lub,P,E \\<turnstile> e2 :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        P \\<turnstile> T' \\<le> T; is_lub,P,E \\<turnstile> e3 :: T'';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T'';\n        P \\<turnstile> T'' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Boolean\n 2. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 4. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 6. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 8. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 9. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 10. \\<And>E.\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set [] \\<subseteq> types P\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>E e U C M Ts T meth D es Ts'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: U;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = meth in D;\n        is_lub,P,E \\<turnstile> es [::] Ts';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts' \\<subseteq> types P;\n        P \\<turnstile> Ts' [\\<le>] Ts; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 3. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 4. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 5. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 7. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 8. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 9. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 10. \\<And>E e T es Ts.\n        \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n         ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n         is_lub,P,E \\<turnstile> es [::] Ts;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         set Ts \\<subseteq> types P;\n         ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(fastforce dest: sees_wf_mdecl[OF wf] simp:wf_mdecl_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>T E V e T' vo.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        ran (E(V \\<mapsto> T)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            \\<exists>T'.\n               typeof v = \\<lfloor>T'\\<rfloor> \\<and>\n               P \\<turnstile> T' \\<le> T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 2. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 3. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 4. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 6. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 7. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 8. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 9. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(fastforce simp add: ran_def split: if_split_asm)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>E o' T e T'.\n       \\<lbrakk>is_lub,P,E \\<turnstile> o' :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T; is_refT T;\n        T \\<noteq> NT; is_lub,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T';\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T'\n 2. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 3. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 5. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 6. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 7. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 8. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(simp add: is_class_Object[OF wf])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\\<^sub>2\n 2. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 5. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 6. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 7. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 6. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>E e e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2 T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        is_lub,P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1; is_type P T\\<^sub>1;\n        is_lub,P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2; is_type P T\\<^sub>2;\n        \\<turnstile> lub(T\\<^sub>1, T\\<^sub>2) = T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 4. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 5. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 6. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(fastforce intro: is_lub_is_type)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>E e c T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Boolean;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P Boolean;\n        is_lub,P,E \\<turnstile> c :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 2. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 3. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 4. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 5. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>E e C.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Class C;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P (Class C);\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P Void\n 2. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 3. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 4. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>E e\\<^sub>1 T V C e\\<^sub>2.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e\\<^sub>1 :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e\\<^sub>2 :: T;\n        ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n        is_type P T;\n        P \\<turnstile> C \\<preceq>\\<^sup>* Throwable;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 3. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>E.\n       ran E \\<subseteq> types P \\<Longrightarrow>\n       set [] \\<subseteq> types P\n 2. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E e T es Ts.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow> is_type P T;\n        is_lub,P,E \\<turnstile> es [::] Ts;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        set Ts \\<subseteq> types P;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (T # Ts) \\<subseteq> types P", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  fixes is_lub1 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>1 lub'((_,/ _)') = _\" [51,51,51] 50)\n  and is_lub2 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>2 lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes wf: \"wf_prog wf_md P\"\n  and is_lub1_into_is_lub2: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>1 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> \\<turnstile>2 lub(T1, T2) = T3\"\n  and is_lub2_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>2 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  shows WT_change_is_lub: \"\\<lbrakk> is_lub1,P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> e :: T\"\n  and WTs_change_is_lub: \"\\<lbrakk> is_lub1,P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [::] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> is_lub2,P,E \\<turnstile> e :: T) &&&\n    (\\<lbrakk>is_lub1,P,E \\<turnstile> es [::] Ts;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [::] Ts)", "proof(induct rule: WT_WTs.inducts)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 24 subgoals...", "case (WTBlock U E V e' T vo)"], ["proof (state)\nthis:\n  is_type P U\n  is_lub1,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\n  ran (E(V \\<mapsto> U)) \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\n  case vo of None \\<Rightarrow> True\n  | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n      \\<exists>T'.\n         typeof v = \\<lfloor>T'\\<rfloor> \\<and> P \\<turnstile> T' \\<le> U\n  ran E \\<subseteq> types P\n\ngoal (24 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 24 subgoals...", "from \\<open>is_type P U\\<close> \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  is_type P U\n  ran E \\<subseteq> types P", "have \"ran (E(V \\<mapsto> U)) \\<subseteq> types P\""], ["proof (prove)\nusing this:\n  is_type P U\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. ran (E(V \\<mapsto> U)) \\<subseteq> types P", "by(auto simp add: ran_def)"], ["proof (state)\nthis:\n  ran (E(V \\<mapsto> U)) \\<subseteq> types P\n\ngoal (24 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 24 subgoals...", "hence \"is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\""], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> U)) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T", "by(rule WTBlock)"], ["proof (state)\nthis:\n  is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\n\ngoal (24 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 24 subgoals...", "with \\<open>is_type P U\\<close>"], ["proof (chain)\npicking this:\n  is_type P U\n  is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T", "show ?case"], ["proof (prove)\nusing this:\n  is_type P U\n  is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> {V:U=vo; e'} :: T", "using \\<open>case vo of None \\<Rightarrow> True | \\<lfloor>v\\<rfloor> \\<Rightarrow> \\<exists>T'. typeof v = \\<lfloor>T'\\<rfloor> \\<and> P \\<turnstile> T' \\<le> U\\<close>"], ["proof (prove)\nusing this:\n  is_type P U\n  is_lub2,P,E(V \\<mapsto> U) \\<turnstile> e' :: T\n  case vo of None \\<Rightarrow> True\n  | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n      \\<exists>T'.\n         typeof v = \\<lfloor>T'\\<rfloor> \\<and> P \\<turnstile> T' \\<le> U\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> {V:U=vo; e'} :: T", "by auto"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> {V:U=vo; e'} :: T\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "case (WTCond E e e1 T1 e2 T2 T)"], ["proof (state)\nthis:\n  is_lub1,P,E \\<turnstile> e :: Boolean\n  ran E \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e :: Boolean\n  is_lub1,P,E \\<turnstile> e1 :: T1\n  ran E \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  is_lub1,P,E \\<turnstile> e2 :: T2\n  ran E \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e2 :: T2\n  \\<turnstile>1 lub(T1, T2) = T\n  ran E \\<subseteq> types P\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "from \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  ran E \\<subseteq> types P", "have \"is_lub2,P,E \\<turnstile> e :: Boolean\" \"is_lub2,P,E \\<turnstile> e1 :: T1\" \"is_lub2,P,E \\<turnstile> e2 :: T2\""], ["proof (prove)\nusing this:\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> e :: Boolean &&&\n    is_lub2,P,E \\<turnstile> e1 :: T1 &&& is_lub2,P,E \\<turnstile> e2 :: T2", "by(rule WTCond)+"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> e :: Boolean\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  is_lub2,P,E \\<turnstile> e2 :: T2\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> e :: Boolean\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  is_lub2,P,E \\<turnstile> e2 :: T2\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "from is_lub2_is_type wf \\<open>is_lub2,P,E \\<turnstile> e1 :: T1\\<close> \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<turnstile>2 lub(?T1.0, ?T2.0) = ?T3.0; is_type P ?T1.0;\n   is_type P ?T2.0\\<rbrakk>\n  \\<Longrightarrow> is_type P ?T3.0\n  wf_prog wf_md P\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  ran E \\<subseteq> types P", "have \"is_type P T1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>2 lub(?T1.0, ?T2.0) = ?T3.0; is_type P ?T1.0;\n   is_type P ?T2.0\\<rbrakk>\n  \\<Longrightarrow> is_type P ?T3.0\n  wf_prog wf_md P\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_type P T1", "by(rule WT_is_type)"], ["proof (state)\nthis:\n  is_type P T1\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "from is_lub2_is_type wf \\<open>is_lub2,P,E \\<turnstile> e2 :: T2\\<close> \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<turnstile>2 lub(?T1.0, ?T2.0) = ?T3.0; is_type P ?T1.0;\n   is_type P ?T2.0\\<rbrakk>\n  \\<Longrightarrow> is_type P ?T3.0\n  wf_prog wf_md P\n  is_lub2,P,E \\<turnstile> e2 :: T2\n  ran E \\<subseteq> types P", "have \"is_type P T2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>2 lub(?T1.0, ?T2.0) = ?T3.0; is_type P ?T1.0;\n   is_type P ?T2.0\\<rbrakk>\n  \\<Longrightarrow> is_type P ?T3.0\n  wf_prog wf_md P\n  is_lub2,P,E \\<turnstile> e2 :: T2\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_type P T2", "by(rule WT_is_type)"], ["proof (state)\nthis:\n  is_type P T2\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "with \\<open>\\<turnstile>1 lub(T1, T2) = T\\<close> \\<open>is_type P T1\\<close>"], ["proof (chain)\npicking this:\n  \\<turnstile>1 lub(T1, T2) = T\n  is_type P T1\n  is_type P T2", "have \"\\<turnstile>2 lub(T1, T2) = T\""], ["proof (prove)\nusing this:\n  \\<turnstile>1 lub(T1, T2) = T\n  is_type P T1\n  is_type P T2\n\ngoal (1 subgoal):\n 1. \\<turnstile>2 lub(T1, T2) = T", "by(rule is_lub1_into_is_lub2)"], ["proof (state)\nthis:\n  \\<turnstile>2 lub(T1, T2) = T\n\ngoal (23 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 23 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_lub2,P,E \\<turnstile> e :: Boolean\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  is_lub2,P,E \\<turnstile> e2 :: T2\n  \\<turnstile>2 lub(T1, T2) = T", "show ?case"], ["proof (prove)\nusing this:\n  is_lub2,P,E \\<turnstile> e :: Boolean\n  is_lub2,P,E \\<turnstile> e1 :: T1\n  is_lub2,P,E \\<turnstile> e2 :: T2\n  \\<turnstile>2 lub(T1, T2) = T\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> if (e) e1 else e2 :: T", ".."], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> if (e) e1 else e2 :: T\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "case (WTTry E e1 T V C e2)"], ["proof (state)\nthis:\n  is_lub1,P,E \\<turnstile> e1 :: T\n  ran E \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e1 :: T\n  is_lub1,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\n  ran (E(V \\<mapsto> Class C)) \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\n  P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\n  ran E \\<subseteq> types P\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "from \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  ran E \\<subseteq> types P", "have \"is_lub2,P,E \\<turnstile> e1 :: T\""], ["proof (prove)\nusing this:\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> e1 :: T", "by(rule WTTry)"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> e1 :: T\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> e1 :: T\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "from \\<open>P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* Throwable", "have \"is_class P C\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\n\ngoal (1 subgoal):\n 1. is_class P C", "by(rule is_class_sub_Throwable[OF wf])"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "with \\<open>ran E \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  ran E \\<subseteq> types P\n  is_class P C", "have \"ran (E(V \\<mapsto> Class C)) \\<subseteq> types P\""], ["proof (prove)\nusing this:\n  ran E \\<subseteq> types P\n  is_class P C\n\ngoal (1 subgoal):\n 1. ran (E(V \\<mapsto> Class C)) \\<subseteq> types P", "by(auto simp add: ran_def)"], ["proof (state)\nthis:\n  ran (E(V \\<mapsto> Class C)) \\<subseteq> types P\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "hence \"is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\""], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> Class C)) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T", "by(rule WTTry)"], ["proof (state)\nthis:\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\n\ngoal (22 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 22 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_lub2,P,E \\<turnstile> e1 :: T\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T", "show ?case"], ["proof (prove)\nusing this:\n  is_lub2,P,E \\<turnstile> e1 :: T\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 :: T", "using \\<open>P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\\<close>"], ["proof (prove)\nusing this:\n  is_lub2,P,E \\<turnstile> e1 :: T\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 :: T\n  P \\<turnstile> C \\<preceq>\\<^sup>* Throwable\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 :: T", ".."], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 :: T\n\ngoal (21 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>is_class P C; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> new C :: Class C\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: Integer;\n        is_type P (T\\<lfloor>\\<rceil>); ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> :: T\\<lfloor>\\<rceil>\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast U e :: U\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e :: T;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U; ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof U :: Boolean\n 5. \\<And>v T E.\n       \\<lbrakk>typeof v = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Val v :: T\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V :: T\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 :: T1;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 :: T1;\n        is_lub1,P,E \\<turnstile> e2 :: T2;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 :: T2;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 :: T\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub1,P,E \\<turnstile> e :: T';\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e :: T';\n        P \\<turnstile> T' \\<le> T; V \\<noteq> this;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e :: Void\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        is_lub1,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i :: Integer;\n        ran E \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> :: T\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub1,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         is_lub1,P,E \\<turnstile> i :: Integer;\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> i :: Integer;\n         is_lub1,P,E \\<turnstile> e :: T';\n         ran E \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e :: T';\n         P \\<turnstile> T' \\<le> T; ran E \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e :: Void\nA total of 21 subgoals...", "qed auto"], ["", "subsection \\<open>Code generator setup\\<close>"], ["", "lemma WTBlock_code:\n  \"\\<And>is_lub. \\<lbrakk> is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T'; \n     case vo of None \\<Rightarrow> True | \\<lfloor>v\\<rfloor> \\<Rightarrow> case typeof v of None \\<Rightarrow> False | Some T' \\<Rightarrow> P \\<turnstile> T' \\<le> T \\<rbrakk>\n  \\<Longrightarrow>  is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>is_lub.\n       \\<lbrakk>is_type P T; is_lub,P,E(V \\<mapsto> T) \\<turnstile> e :: T';\n        case vo of None \\<Rightarrow> True\n        | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n            case typeof v of None \\<Rightarrow> False\n            | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n                P \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> is_lub,P,E \\<turnstile> {V:T=vo; e} :: T'", "by(auto)"], ["", "lemmas [code_pred_intro] =\n  WTNew WTNewArray WTCast WTInstanceOf WTVal WTVar WTBinOp WTLAss WTAAcc WTAAss WTALength WTFAcc WTFAss WTCAS WTCall"], ["", "declare \n  WTBlock_code [code_pred_intro WTBlock']"], ["", "lemmas [code_pred_intro] =\n  WTSynchronized WTSeq WTCond WTWhile WTThrow WTTry\n  WTNil WTCons"], ["", "code_pred\n  (modes:\n    (i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool, \n    (i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> bool)\n  [detect_switches, skip_proof]\n  WT"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>x,xa,xb \\<turnstile> xc :: xd;\n      \\<And>is_lub P E C.\n         \\<lbrakk>x = is_lub; xa = P; xb = E; xc = new C; xd = Class C;\n          is_class P C\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ T_ e_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = newA T_\\<lfloor>e_\\<rceil>; xd = T_\\<lfloor>\\<rceil>;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: Integer;\n          is_type Pa_ (T_\\<lfloor>\\<rceil>)\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ U_ e_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Cast U_ e_; xd = U_;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n          Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n          is_type Pa_ U_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ U_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ instanceof U_;\n          xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n          Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n          is_type Pa_ U_; is_refT U_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ v_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Val v_; xd = T_;\n          typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ V_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Var V_; xd = T_;\n          Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e1_ bop_ e2_ T_ T1_ T2_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = e1_ \\<guillemotleft>bop_\\<guillemotright> e2_; xd = T_;\n          is_lub,Pa_,Ea_ \\<turnstile> e1_ :: T1_;\n          is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T2_;\n          Pa_ \\<turnstile> T1_\\<guillemotleft>bop_\\<guillemotright>T2_ :: T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ V_ e_ T_ T'_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = V_:=e_; xd = Void;\n          Ea_ V_ = \\<lfloor>T_\\<rfloor>;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ a_ i_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = a_\\<lfloor>i_\\<rceil>; xd = T_;\n          is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n          is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ a_ i_ e_ T_ T'_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = a_\\<lfloor>i_\\<rceil> := e_; xd = Void;\n          is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n          is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ a_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = a_\\<bullet>length;\n          xd = Integer;\n          is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ F_ D_ T_ U_ Ca_ fm_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>F_{D_};\n          xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n          class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n          Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ U_ Ca_ T_ fm_ T'_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xd = Void;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: U_;\n          class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n          Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e1_ D_ F_ e2_ e3_ U_ Ca_ T_ fm_ T'_ T''_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = e1_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n          xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e1_ :: U_;\n          class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n          Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_; volatile fm_;\n          is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_;\n          is_lub,Pa_,Ea_ \\<turnstile> e3_ :: T''_;\n          Pa_ \\<turnstile> T''_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ M_ es_ T_ U_ Ca_ Ts_ meth_ D_ Ts'_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>M_(es_);\n          xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n          class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n          Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = meth_ in D_;\n          is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n          Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ V_ T_ vo_ e_ T'_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = {V_:T_=vo_; e_};\n          xd = T'_; is_type Pa_ T_;\n          is_lub,Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_;\n          case vo_ of None \\<Rightarrow> True\n          | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n              case typeof v of None \\<Rightarrow> False\n              | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n                  Pa_ \\<turnstile> T' \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ o'_ e_ T'_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = sync(o'_) e_;\n          xd = T'_; is_lub,Pa_,Ea_ \\<turnstile> o'_ :: T_; is_refT T_;\n          T_ \\<noteq> NT; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = e\\<^sub>1_;; e\\<^sub>2_; xd = T\\<^sub>2_;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T_ T\\<^sub>1_\n         T\\<^sub>2_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = if (e_) e\\<^sub>1_ else e\\<^sub>2_; xd = T_;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n          is_lub T\\<^sub>1_ T\\<^sub>2_ T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ c_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = while (e_) c_;\n          xd = Void; is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n          is_lub,Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ Ca_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = throw e_; xd = Void;\n          is_lub,Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n          Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n          xc = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xd = T_;\n          is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n          is_lub,Pa_,Ea_(V_ \\<mapsto>\n          Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n          Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis) &&&\n    (\\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n      \\<And>is_lub P E.\n         \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n         \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n          xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n          is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x,xa,xb \\<turnstile> xc :: xd;\n     \\<And>is_lub P E C.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = new C; xd = Class C;\n         is_class P C\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ T_ e_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = newA T_\\<lfloor>e_\\<rceil>; xd = T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Integer;\n         is_type Pa_ (T_\\<lfloor>\\<rceil>)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ U_ e_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Cast U_ e_; xd = U_;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n         is_type Pa_ U_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ U_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ instanceof U_;\n         xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n         is_type Pa_ U_; is_refT U_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ v_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Val v_; xd = T_;\n         typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Var V_; xd = T_;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e1_ bop_ e2_ T_ T1_ T2_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e1_ \\<guillemotleft>bop_\\<guillemotright> e2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e1_ :: T1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T2_;\n         Pa_ \\<turnstile> T1_\\<guillemotleft>bop_\\<guillemotright>T2_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ e_ T_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = V_:=e_; xd = Void;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ i_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = a_\\<lfloor>i_\\<rceil>;\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ i_ e_ T_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = a_\\<lfloor>i_\\<rceil> := e_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = a_\\<bullet>length;\n         xd = Integer;\n         is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ F_ D_ T_ U_ Ca_ fm_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>F_{D_};\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ U_ Ca_ T_ fm_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e1_ D_ F_ e2_ e3_ U_ Ca_ T_ fm_ T'_ T''_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e1_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e1_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_; volatile fm_;\n         is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e3_ :: T''_;\n         Pa_ \\<turnstile> T''_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ M_ es_ T_ U_ Ca_ Ts_ meth_ D_ Ts'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>M_(es_);\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = meth_ in D_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n         Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ T_ vo_ e_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = {V_:T_=vo_; e_};\n         xd = T'_; is_type Pa_ T_;\n         is_lub,Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_;\n         case vo_ of None \\<Rightarrow> True\n         | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n             case typeof v of None \\<Rightarrow> False\n             | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n                 Pa_ \\<turnstile> T' \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ o'_ e_ T'_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = sync(o'_) e_;\n         xd = T'_; is_lub,Pa_,Ea_ \\<turnstile> o'_ :: T_; is_refT T_;\n         T_ \\<noteq> NT; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e\\<^sub>1_;; e\\<^sub>2_; xd = T\\<^sub>2_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = if (e_) e\\<^sub>1_ else e\\<^sub>2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         is_lub T\\<^sub>1_ T\\<^sub>2_ T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ c_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = while (e_) c_;\n         xd = Void; is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         is_lub,Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ Ca_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = throw e_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n         is_lub,Pa_,Ea_(V_ \\<mapsto>\n         Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n     \\<And>is_lub P E.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n         xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case WT"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?is_lub; xa = ?P; xb = ?E; xc = new ?C; xd = Class ?C;\n   is_class ?P ?C\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = newA ?T\\<lfloor>?e\\<rceil>;\n   xd = ?T\\<lfloor>\\<rceil>; ?is_lub,?Pa,?Ea \\<turnstile> ?e :: Integer;\n   is_type ?Pa (?T\\<lfloor>\\<rceil>)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = Cast ?U ?e; xd = ?U;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T;\n   ?Pa \\<turnstile> ?U \\<le> ?T \\<or> ?Pa \\<turnstile> ?T \\<le> ?U;\n   is_type ?Pa ?U\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e instanceof ?U;\n   xd = Boolean; ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T;\n   ?Pa \\<turnstile> ?U \\<le> ?T \\<or> ?Pa \\<turnstile> ?T \\<le> ?U;\n   is_type ?Pa ?U; is_refT ?U\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = Val ?v; xd = ?T;\n   typeof ?v = \\<lfloor>?T\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = Var ?V; xd = ?T;\n   ?Ea ?V = \\<lfloor>?T\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = ?e1.0 \\<guillemotleft>?bop\\<guillemotright> ?e2.0; xd = ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e1.0 :: ?T1.0;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e2.0 :: ?T2.0;\n   ?Pa \\<turnstile> ?T1.0\\<guillemotleft>?bop\\<guillemotright>?T2.0 :: ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?V:=?e; xd = Void;\n   ?Ea ?V = \\<lfloor>?T\\<rfloor>; ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T';\n   ?Pa \\<turnstile> ?T' \\<le> ?T; ?V \\<noteq> this\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?a\\<lfloor>?i\\<rceil>;\n   xd = ?T; ?is_lub,?Pa,?Ea \\<turnstile> ?a :: ?T\\<lfloor>\\<rceil>;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?i :: Integer\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = ?a\\<lfloor>?i\\<rceil> := ?e; xd = Void;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?a :: ?T\\<lfloor>\\<rceil>;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?i :: Integer;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T';\n   ?Pa \\<turnstile> ?T' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?a\\<bullet>length;\n   xd = Integer;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?a :: ?T\\<lfloor>\\<rceil>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e\\<bullet>?F{?D}; xd = ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?U;\n   class_type_of' ?U = \\<lfloor>?Ca\\<rfloor>;\n   ?Pa \\<turnstile> ?Ca sees ?F:?T (?fm) in ?D\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = ?e\\<^sub>1\\<bullet>?F{?D} := ?e\\<^sub>2; xd = Void;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?U;\n   class_type_of' ?U = \\<lfloor>?Ca\\<rfloor>;\n   ?Pa \\<turnstile> ?Ca sees ?F:?T (?fm) in ?D;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T';\n   ?Pa \\<turnstile> ?T' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = ?e1.0\\<bullet>compareAndSwap(?D\\<bullet>?F, ?e2.0, ?e3.0);\n   xd = Boolean; ?is_lub,?Pa,?Ea \\<turnstile> ?e1.0 :: ?U;\n   class_type_of' ?U = \\<lfloor>?Ca\\<rfloor>;\n   ?Pa \\<turnstile> ?Ca sees ?F:?T (?fm) in ?D; volatile ?fm;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e2.0 :: ?T'; ?Pa \\<turnstile> ?T' \\<le> ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e3.0 :: ?T'';\n   ?Pa \\<turnstile> ?T'' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e\\<bullet>?M(?es);\n   xd = ?T; ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?U;\n   class_type_of' ?U = \\<lfloor>?Ca\\<rfloor>;\n   ?Pa \\<turnstile> ?Ca sees ?M: ?Ts\\<rightarrow>?T = ?meth in ?D;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?es [::] ?Ts';\n   ?Pa \\<turnstile> ?Ts' [\\<le>] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = {?V:?T=?vo; ?e}; xd = ?T';\n   is_type ?Pa ?T; ?is_lub,?Pa,?Ea(?V \\<mapsto> ?T) \\<turnstile> ?e :: ?T';\n   case ?vo of None \\<Rightarrow> True\n   | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n       case typeof v of None \\<Rightarrow> False\n       | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n           ?Pa \\<turnstile> T' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = sync(?o') ?e; xd = ?T';\n   ?is_lub,?Pa,?Ea \\<turnstile> ?o' :: ?T; is_refT ?T; ?T \\<noteq> NT;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e\\<^sub>1;; ?e\\<^sub>2;\n   xd = ?T\\<^sub>2; ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = if (?e) ?e\\<^sub>1 else ?e\\<^sub>2; xd = ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?is_lub ?T\\<^sub>1 ?T\\<^sub>2 ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = while (?e) ?c; xd = Void;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?c :: ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = throw ?e; xd = Void;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: Class ?Ca;\n   ?Pa \\<turnstile> ?Ca \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea;\n   xc = try ?e\\<^sub>1 catch(?Ca ?V) ?e\\<^sub>2; xd = ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T;\n   ?is_lub,?Pa,?Ea(?V \\<mapsto> Class ?Ca) \\<turnstile> ?e\\<^sub>2 :: ?T;\n   ?Pa \\<turnstile> ?Ca \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x,xa,xb \\<turnstile> xc :: xd\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = {?V:?T=?vo; ?e}; xd = ?T';\n   is_type ?Pa ?T; ?is_lub,?Pa,?Ea(?V \\<mapsto> ?T) \\<turnstile> ?e :: ?T';\n   case ?vo of None \\<Rightarrow> True\n   | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n       case typeof v of None \\<Rightarrow> False\n       | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n           ?Pa \\<turnstile> T' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x,xa,xb \\<turnstile> xc :: xd;\n     \\<And>is_lub P E C.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = new C; xd = Class C;\n         is_class P C\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ T_ e_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = newA T_\\<lfloor>e_\\<rceil>; xd = T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Integer;\n         is_type Pa_ (T_\\<lfloor>\\<rceil>)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ U_ e_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Cast U_ e_; xd = U_;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n         is_type Pa_ U_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ U_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ instanceof U_;\n         xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_ \\<turnstile> U_ \\<le> T_ \\<or> Pa_ \\<turnstile> T_ \\<le> U_;\n         is_type Pa_ U_; is_refT U_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ v_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Val v_; xd = T_;\n         typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = Var V_; xd = T_;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e1_ bop_ e2_ T_ T1_ T2_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e1_ \\<guillemotleft>bop_\\<guillemotright> e2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e1_ :: T1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T2_;\n         Pa_ \\<turnstile> T1_\\<guillemotleft>bop_\\<guillemotright>T2_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ e_ T_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = V_:=e_; xd = Void;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ i_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = a_\\<lfloor>i_\\<rceil>;\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ i_ e_ T_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = a_\\<lfloor>i_\\<rceil> := e_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>;\n         is_lub,Pa_,Ea_ \\<turnstile> i_ :: Integer;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ a_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = a_\\<bullet>length;\n         xd = Integer;\n         is_lub,Pa_,Ea_ \\<turnstile> a_ :: T_\\<lfloor>\\<rceil>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ F_ D_ T_ U_ Ca_ fm_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>F_{D_};\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ U_ Ca_ T_ fm_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e1_ D_ F_ e2_ e3_ U_ Ca_ T_ fm_ T'_ T''_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e1_\\<bullet>compareAndSwap(D_\\<bullet>F_, e2_, e3_);\n         xd = Boolean; is_lub,Pa_,Ea_ \\<turnstile> e1_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ (fm_) in D_; volatile fm_;\n         is_lub,Pa_,Ea_ \\<turnstile> e2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e3_ :: T''_;\n         Pa_ \\<turnstile> T''_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ M_ es_ T_ U_ Ca_ Ts_ meth_ D_ Ts'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_\\<bullet>M_(es_);\n         xd = T_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: U_;\n         class_type_of' U_ = \\<lfloor>Ca_\\<rfloor>;\n         Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = meth_ in D_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n         Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ V_ T_ vo_ e_ T'_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = {V_:T_=vo_; e_};\n         xd = T'_; is_type Pa_ T_;\n         is_lub,Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_;\n         case vo_ of None \\<Rightarrow> True\n         | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n             case typeof v of None \\<Rightarrow> False\n             | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n                 Pa_ \\<turnstile> T' \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ o'_ e_ T'_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = sync(o'_) e_;\n         xd = T'_; is_lub,Pa_,Ea_ \\<turnstile> o'_ :: T_; is_refT T_;\n         T_ \\<noteq> NT; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = e\\<^sub>1_;; e\\<^sub>2_; xd = T\\<^sub>2_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = if (e_) e\\<^sub>1_ else e\\<^sub>2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         is_lub T\\<^sub>1_ T\\<^sub>2_ T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ c_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = while (e_) c_;\n         xd = Void; is_lub,Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         is_lub,Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ Ca_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = throw e_; xd = Void;\n         is_lub,Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_;\n         xc = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xd = T_;\n         is_lub,Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n         is_lub,Pa_,Ea_(V_ \\<mapsto>\n         Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* Throwable\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n     \\<And>is_lub P E.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n         xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from WT.prems"], ["proof (chain)\npicking this:\n  x,xa,xb \\<turnstile> xc :: xd", "show thesis"], ["proof (prove)\nusing this:\n  x,xa,xb \\<turnstile> xc :: xd\n\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>xc = new C; xd = Class C; is_class xa C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>e T.\n       \\<lbrakk>xc = newA T\\<lfloor>e\\<rceil>; xd = T\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> e :: Integer;\n        is_type xa (T\\<lfloor>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e T.\n       \\<lbrakk>xc = Cast xd e; x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> xd \\<le> T \\<or> xa \\<turnstile> T \\<le> xd;\n        is_type xa xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>e T U.\n       \\<lbrakk>xc = e instanceof U; xd = Boolean;\n        x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> U \\<le> T \\<or> xa \\<turnstile> T \\<le> U;\n        is_type xa U; is_refT U\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>v.\n       \\<lbrakk>xc = Val v; typeof v = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>V.\n       \\<lbrakk>xc = Var V; xb V = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e1 T1 e2 T2 bop.\n       \\<lbrakk>xc = e1 \\<guillemotleft>bop\\<guillemotright> e2;\n        x,xa,xb \\<turnstile> e1 :: T1; x,xa,xb \\<turnstile> e2 :: T2;\n        xa \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>V T e T'.\n       \\<lbrakk>xc = V:=e; xd = Void; xb V = \\<lfloor>T\\<rfloor>;\n        x,xa,xb \\<turnstile> e :: T'; xa \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>a i.\n       \\<lbrakk>xc = a\\<lfloor>i\\<rceil>;\n        x,xa,xb \\<turnstile> a :: xd\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> i :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>a T i e T'.\n        \\<lbrakk>xc = a\\<lfloor>i\\<rceil> := e; xd = Void;\n         x,xa,xb \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         x,xa,xb \\<turnstile> i :: Integer; x,xa,xb \\<turnstile> e :: T';\n         xa \\<turnstile> T' \\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 22 subgoals...", "case (WTBlock T V e vo)"], ["proof (state)\nthis:\n  xc = {V:T=vo; e}\n  is_type xa T\n  x,xa,xb(V \\<mapsto> T) \\<turnstile> e :: xd\n  case vo of None \\<Rightarrow> True\n  | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n      \\<exists>T'.\n         typeof v = \\<lfloor>T'\\<rfloor> \\<and> xa \\<turnstile> T' \\<le> T\n\ngoal (22 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>xc = new C; xd = Class C; is_class xa C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>e T.\n       \\<lbrakk>xc = newA T\\<lfloor>e\\<rceil>; xd = T\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> e :: Integer;\n        is_type xa (T\\<lfloor>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e T.\n       \\<lbrakk>xc = Cast xd e; x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> xd \\<le> T \\<or> xa \\<turnstile> T \\<le> xd;\n        is_type xa xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>e T U.\n       \\<lbrakk>xc = e instanceof U; xd = Boolean;\n        x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> U \\<le> T \\<or> xa \\<turnstile> T \\<le> U;\n        is_type xa U; is_refT U\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>v.\n       \\<lbrakk>xc = Val v; typeof v = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>V.\n       \\<lbrakk>xc = Var V; xb V = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e1 T1 e2 T2 bop.\n       \\<lbrakk>xc = e1 \\<guillemotleft>bop\\<guillemotright> e2;\n        x,xa,xb \\<turnstile> e1 :: T1; x,xa,xb \\<turnstile> e2 :: T2;\n        xa \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>V T e T'.\n       \\<lbrakk>xc = V:=e; xd = Void; xb V = \\<lfloor>T\\<rfloor>;\n        x,xa,xb \\<turnstile> e :: T'; xa \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>a i.\n       \\<lbrakk>xc = a\\<lfloor>i\\<rceil>;\n        x,xa,xb \\<turnstile> a :: xd\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> i :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>a T i e T'.\n        \\<lbrakk>xc = a\\<lfloor>i\\<rceil> := e; xd = Void;\n         x,xa,xb \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         x,xa,xb \\<turnstile> i :: Integer; x,xa,xb \\<turnstile> e :: T';\n         xa \\<turnstile> T' \\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 22 subgoals...", "thus thesis"], ["proof (prove)\nusing this:\n  xc = {V:T=vo; e}\n  is_type xa T\n  x,xa,xb(V \\<mapsto> T) \\<turnstile> e :: xd\n  case vo of None \\<Rightarrow> True\n  | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n      \\<exists>T'.\n         typeof v = \\<lfloor>T'\\<rfloor> \\<and> xa \\<turnstile> T' \\<le> T\n\ngoal (1 subgoal):\n 1. thesis", "using WT.WTBlock'[OF refl refl refl, of V T vo e]"], ["proof (prove)\nusing this:\n  xc = {V:T=vo; e}\n  is_type xa T\n  x,xa,xb(V \\<mapsto> T) \\<turnstile> e :: xd\n  case vo of None \\<Rightarrow> True\n  | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n      \\<exists>T'.\n         typeof v = \\<lfloor>T'\\<rfloor> \\<and> xa \\<turnstile> T' \\<le> T\n  \\<lbrakk>xc = {V:T=vo; e}; xd = ?T'; is_type xa T;\n   x,xa,xb(V \\<mapsto> T) \\<turnstile> e :: ?T';\n   case vo of None \\<Rightarrow> True\n   | \\<lfloor>v\\<rfloor> \\<Rightarrow>\n       case typeof v of None \\<Rightarrow> False\n       | \\<lfloor>T'\\<rfloor> \\<Rightarrow>\n           xa \\<turnstile> T' \\<le> T\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by(auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (21 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>xc = new C; xd = Class C; is_class xa C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>e T.\n       \\<lbrakk>xc = newA T\\<lfloor>e\\<rceil>; xd = T\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> e :: Integer;\n        is_type xa (T\\<lfloor>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>e T.\n       \\<lbrakk>xc = Cast xd e; x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> xd \\<le> T \\<or> xa \\<turnstile> T \\<le> xd;\n        is_type xa xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>e T U.\n       \\<lbrakk>xc = e instanceof U; xd = Boolean;\n        x,xa,xb \\<turnstile> e :: T;\n        xa \\<turnstile> U \\<le> T \\<or> xa \\<turnstile> T \\<le> U;\n        is_type xa U; is_refT U\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>v.\n       \\<lbrakk>xc = Val v; typeof v = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>V.\n       \\<lbrakk>xc = Var V; xb V = \\<lfloor>xd\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>e1 T1 e2 T2 bop.\n       \\<lbrakk>xc = e1 \\<guillemotleft>bop\\<guillemotright> e2;\n        x,xa,xb \\<turnstile> e1 :: T1; x,xa,xb \\<turnstile> e2 :: T2;\n        xa \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: xd\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>V T e T'.\n       \\<lbrakk>xc = V:=e; xd = Void; xb V = \\<lfloor>T\\<rfloor>;\n        x,xa,xb \\<turnstile> e :: T'; xa \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>a i.\n       \\<lbrakk>xc = a\\<lfloor>i\\<rceil>;\n        x,xa,xb \\<turnstile> a :: xd\\<lfloor>\\<rceil>;\n        x,xa,xb \\<turnstile> i :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>a T i e T'.\n        \\<lbrakk>xc = a\\<lfloor>i\\<rceil> := e; xd = Void;\n         x,xa,xb \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         x,xa,xb \\<turnstile> i :: Integer; x,xa,xb \\<turnstile> e :: T';\n         xa \\<turnstile> T' \\<le> T\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 21 subgoals...", "qed(assumption|erule WT.that[OF refl refl refl]|rule refl)+"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n     \\<And>is_lub P E.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n         xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n     \\<And>is_lub P E.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n         xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case WTs"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?is_lub; xa = ?P; xb = ?E; xc = []; xd = []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e # ?es; xd = ?T # ?Ts;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?es [::] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x,xa,xb \\<turnstile> xc [::] xd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa,xb \\<turnstile> xc [::] xd;\n     \\<And>is_lub P E.\n        \\<lbrakk>x = is_lub; xa = P; xb = E; xc = []; xd = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>is_lub Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = is_lub; xa = Pa_; xb = Ea_; xc = e_ # es_;\n         xd = T_ # Ts_; is_lub,Pa_,Ea_ \\<turnstile> e_ :: T_;\n         is_lub,Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from WTs.prems WTs.that"], ["proof (chain)\npicking this:\n  x,xa,xb \\<turnstile> xc [::] xd\n  \\<lbrakk>x = ?is_lub; xa = ?P; xb = ?E; xc = []; xd = []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e # ?es; xd = ?T # ?Ts;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?es [::] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\nusing this:\n  x,xa,xb \\<turnstile> xc [::] xd\n  \\<lbrakk>x = ?is_lub; xa = ?P; xb = ?E; xc = []; xd = []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?is_lub; xa = ?Pa; xb = ?Ea; xc = ?e # ?es; xd = ?T # ?Ts;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?e :: ?T;\n   ?is_lub,?Pa,?Ea \\<turnstile> ?es [::] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by cases blast+"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive is_lub_sup :: \"'m prog \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\"\nfor P T1 T2 T3\nwhere\n  \"sup P T1 T2 = OK T3 \\<Longrightarrow> is_lub_sup P T1 T2 T3\""], ["", "code_pred\n  (modes: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool, i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> bool)\n  is_lub_sup"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition WT_code :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> ty \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ ::'' _\" [51,51,51] 50)\nwhere \"WT_code P \\<equiv> WT (is_lub_sup P) P\""], ["", "definition WTs_code :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr list \\<Rightarrow> ty list \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ [::''] _\" [51,51,51] 50)\nwhere \"WTs_code P \\<equiv> WTs (is_lub_sup P) P\""], ["", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows WT_code_into_WT: \n  \"\\<lbrakk> P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e :: T\"\n\n  and WTs_code_into_WTs:\n  \"\\<lbrakk> P,E \\<turnstile> es [::'] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [::] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> e :: T) &&&\n    (\\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> es [::] Ts)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e :: T\n 2. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "assume ran: \"ran E \\<subseteq> types P\""], ["proof (state)\nthis:\n  ran E \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e :: T\n 2. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "{"], ["proof (state)\nthis:\n  ran E \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e :: T\n 2. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "assume wt: \"P,E \\<turnstile> e ::' T\""], ["proof (state)\nthis:\n  P,E \\<turnstile> e ::' T\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e ::' T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e :: T\n 2. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "show \"P,E \\<turnstile> e :: T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> e :: T", "by(rule WT_change_is_lub[OF wf _ _ wt[unfolded WT_code_def] ran])(blast elim!: is_lub_sup.cases intro: sup_is_lubI[OF wf] is_lub_is_type[OF wf])+"], ["proof (state)\nthis:\n  P,E \\<turnstile> e :: T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "}"], ["proof (state)\nthis:\n  P,E \\<turnstile> e ::' T \\<Longrightarrow> P,E \\<turnstile> e :: T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "{"], ["proof (state)\nthis:\n  P,E \\<turnstile> e ::' T \\<Longrightarrow> P,E \\<turnstile> e :: T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "assume wts: \"P,E \\<turnstile> es [::'] Ts\""], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::'] Ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::'] Ts;\n     ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::] Ts", "show \"P,E \\<turnstile> es [::] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> es [::] Ts", "by(rule WTs_change_is_lub[OF wf _ _ wts[unfolded WTs_code_def] ran])(blast elim!: is_lub_sup.cases intro: sup_is_lubI[OF wf] is_lub_is_type[OF wf])+"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::] Ts\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::'] Ts \\<Longrightarrow> P,E \\<turnstile> es [::] Ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows WT_into_WT_code: \n  \"\\<lbrakk> P,E \\<turnstile> e :: T; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e ::' T\"\n\n  and WT_into_WTs_code_OK:\n  \"\\<lbrakk> P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> e :: T; ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> e ::' T) &&&\n    (\\<lbrakk>P,E \\<turnstile> es [::] Ts;\n      ran E \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e :: T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e ::' T\n 2. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "assume ran: \"ran E \\<subseteq> types P\""], ["proof (state)\nthis:\n  ran E \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e :: T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e ::' T\n 2. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "{"], ["proof (state)\nthis:\n  ran E \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e :: T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e ::' T\n 2. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "assume wt: \"P,E \\<turnstile> e :: T\""], ["proof (state)\nthis:\n  P,E \\<turnstile> e :: T\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e :: T; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e ::' T\n 2. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "show \"P,E \\<turnstile> e ::' T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> e ::' T", "unfolding WT_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lub_sup P,P,E \\<turnstile> e :: T", "by(rule WT_change_is_lub[OF wf _ _ wt ran])(blast intro!: is_lub_sup.intros intro: is_lub_subD[OF wf] sup_is_type[OF wf] elim!: is_lub_sup.cases)+"], ["proof (state)\nthis:\n  P,E \\<turnstile> e ::' T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "}"], ["proof (state)\nthis:\n  P,E \\<turnstile> e :: T \\<Longrightarrow> P,E \\<turnstile> e ::' T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "{"], ["proof (state)\nthis:\n  P,E \\<turnstile> e :: T \\<Longrightarrow> P,E \\<turnstile> e ::' T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "assume wts: \"P,E \\<turnstile> es [::] Ts\""], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::] Ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [::] Ts; ran E \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts", "show \"P,E \\<turnstile> es [::'] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> es [::'] Ts", "unfolding WTs_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lub_sup P,P,E \\<turnstile> es [::] Ts", "by(rule WTs_change_is_lub[OF wf _ _ wts ran])(blast intro!: is_lub_sup.intros intro: is_lub_subD[OF wf] sup_is_type[OF wf] elim!: is_lub_sup.cases)+"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::'] Ts\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [::] Ts \\<Longrightarrow> P,E \\<turnstile> es [::'] Ts\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem WT_eq_WT_code:\n  assumes \"wf_prog wf_md P\"\n  and \"ran E \\<subseteq> types P\"\n  shows \"P,E \\<turnstile> e :: T \\<longleftrightarrow> P,E \\<turnstile> e ::' T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> e :: T) = (P,E \\<turnstile> e ::' T)", "using assms"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  ran E \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> e :: T) = (P,E \\<turnstile> e ::' T)", "by(blast intro: WT_code_into_WT WT_into_WT_code)"], ["", "code_pred\n  (modes: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> bool, i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool)\n  [inductify]\n  WT_code"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "code_pred\n  (modes: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> bool, i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool)\n  [inductify]\n  WTs_code"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"]]}