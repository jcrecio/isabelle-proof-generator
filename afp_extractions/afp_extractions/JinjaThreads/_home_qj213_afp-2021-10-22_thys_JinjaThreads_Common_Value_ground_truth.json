{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Common/Value.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma default_val_not_Addr: \"default_val T \\<noteq> Addr a\"", "lemma Addr_not_default_val: \"Addr a \\<noteq> default_val T\"", "lemma is_AddrE [elim!]:\n  \"\\<lbrakk> is_Addr v; \\<And>a. v = Addr a \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\"", "lemma is_IntgE [elim!]:\n  \"\\<lbrakk> is_Intg v; \\<And>i. v = Intg i \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\"", "lemma is_BoolE [elim!]:\n  \"\\<lbrakk> is_Bool v; \\<And>a. v = Bool a \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\"", "lemma is_Ref_def2:\n  \"is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))\"", "lemma [iff]: \"is_Ref Null\"", "lemma undefined_value_not_Addr: \n  \"undefined_value \\<noteq> Addr a\" \"Addr a \\<noteq> undefined_value\""], "translations": [["", "lemma default_val_not_Addr: \"default_val T \\<noteq> Addr a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. default_val T \\<noteq> Addr a", "by(cases T)(simp_all)"], ["", "lemma Addr_not_default_val: \"Addr a \\<noteq> default_val T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Addr a \\<noteq> default_val T", "by(cases T)(simp_all)"], ["", "primrec the_Intg :: \"'addr val \\<Rightarrow> word32\"\nwhere\n  \"the_Intg (Intg i) = i\""], ["", "primrec the_Addr :: \"'addr val \\<Rightarrow> 'addr\"\nwhere\n  \"the_Addr (Addr a) = a\""], ["", "fun is_Addr :: \"'addr val \\<Rightarrow> bool\"\nwhere\n  \"is_Addr (Addr a) = True\"\n| \"is_Addr _        = False\""], ["", "lemma is_AddrE [elim!]:\n  \"\\<lbrakk> is_Addr v; \\<And>a. v = Addr a \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_Addr v;\n     \\<And>a. v = Addr a \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(cases v, auto)"], ["", "fun is_Intg :: \"'addr val \\<Rightarrow> bool\"\nwhere\n  \"is_Intg (Intg i) = True\"\n| \"is_Intg _        = False\""], ["", "lemma is_IntgE [elim!]:\n  \"\\<lbrakk> is_Intg v; \\<And>i. v = Intg i \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_Intg v;\n     \\<And>i. v = Intg i \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(cases v, auto)"], ["", "fun is_Bool :: \"'addr val \\<Rightarrow> bool\"\nwhere\n  \"is_Bool (Bool b) = True\"\n| \"is_Bool _        = False\""], ["", "lemma is_BoolE [elim!]:\n  \"\\<lbrakk> is_Bool v; \\<And>a. v = Bool a \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_Bool v;\n     \\<And>a. v = Bool a \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(cases v, auto)"], ["", "definition is_Ref :: \"'addr val \\<Rightarrow> bool\"\nwhere \"is_Ref v \\<equiv> v = Null \\<or> is_Addr v\""], ["", "lemma is_Ref_def2:\n  \"is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))", "by (cases v) (auto simp add: is_Ref_def)"], ["", "lemma [iff]: \"is_Ref Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Ref Null", "by (simp add: is_Ref_def2)"], ["", "definition undefined_value :: \"'addr val\" where \"undefined_value = Unit\""], ["", "lemma undefined_value_not_Addr: \n  \"undefined_value \\<noteq> Addr a\" \"Addr a \\<noteq> undefined_value\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undefined_value \\<noteq> Addr a &&& Addr a \\<noteq> undefined_value", "by(simp_all add: undefined_value_def)"], ["", "class addr =\n  fixes hash_addr :: \"'a \\<Rightarrow> int\"\n  and monitor_finfun_to_list :: \"('a \\<Rightarrow>f nat) \\<Rightarrow> 'a list\"\n  assumes \"set (monitor_finfun_to_list f) = Collect (($) (finfun_dom f))\""], ["", "locale addr_base =\n  fixes addr2thread_id :: \"'addr \\<Rightarrow> 'thread_id\"\n  and thread_id2addr :: \"'thread_id \\<Rightarrow> 'addr\""], ["", "end"]]}