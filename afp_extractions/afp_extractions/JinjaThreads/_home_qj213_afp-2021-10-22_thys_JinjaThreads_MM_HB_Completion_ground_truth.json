{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/HB_Completion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma ta_hb_consistent_into_non_speculative:\n  \"ta_hb_consistent P obs0 obs\n  \\<Longrightarrow> non_speculative P (w_values P (\\<lambda>_. {}) (map snd obs0)) (lmap snd obs)\"", "lemma ta_hb_consistent_lappendI:\n  assumes hb1: \"ta_hb_consistent P E E'\"\n  and hb2: \"ta_hb_consistent P (E @ list_of E') E''\"\n  and fin: \"lfinite E'\"\n  shows \"ta_hb_consistent P E (lappend E' E'')\"", "lemma ta_hb_consistent_coinduct_append\n  [consumes 1, case_names ta_hb_consistent, case_conclusion ta_hb_consistent LNil lappend]:\n  assumes major: \"X E tobs\"\n  and step: \"\\<And>E tobs. X E tobs \n    \\<Longrightarrow> tobs = LNil \\<or>\n       (\\<exists>tobs' tobs''. tobs = lappend tobs' tobs'' \\<and> tobs' \\<noteq> LNil \\<and> ta_hb_consistent P E tobs' \\<and>\n                    (lfinite tobs' \\<longrightarrow> (X (E @ list_of tobs') tobs''\\<or> \n                                       ta_hb_consistent P (E @ list_of tobs') tobs'')))\"\n    (is \"\\<And>E tobs. _ \\<Longrightarrow> _ \\<or> ?step E tobs\")\n  shows \"ta_hb_consistent P E tobs\"", "lemma ta_hb_consistent_coinduct_append_wf\n  [consumes 2, case_names ta_hb_consistent, case_conclusion ta_hb_consistent LNil lappend]:\n  assumes major: \"X E obs a\"\n  and wf: \"wf R\"\n  and step: \"\\<And>E obs a. X E obs a\n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'. obs = lappend obs' obs'' \\<and> ta_hb_consistent P E obs' \\<and> (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n                        (lfinite obs' \\<longrightarrow> X (E @ list_of obs') obs'' a' \\<or>\n                                          ta_hb_consistent P (E @ list_of obs') obs''))\"\n    (is \"\\<And>E obs a. _ \\<Longrightarrow> _ \\<or> ?step E obs a\")\n  shows \"ta_hb_consistent P E obs\"", "lemma ta_hb_consistent_lappendD2:\n  assumes hb: \"ta_hb_consistent P E (lappend E' E'')\"\n  and fin: \"lfinite E'\"\n  shows \"ta_hb_consistent P (E @ list_of E') E''\"", "lemma ta_hb_consistent_Read_hb:\n  fixes E E' defines \"E'' \\<equiv> lappend (llist_of E') E\"\n  assumes hb: \"ta_hb_consistent P E' E\"\n  and tsa: \"thread_start_actions_ok E''\"\n  and E'': \"is_write_seen P (llist_of E') ws'\"\n  and new_actions_for_fun: \n  \"\\<And>w w' adal. \\<lbrakk> w \\<in> new_actions_for P E'' adal; \n                 w' \\<in> new_actions_for P E'' adal \\<rbrakk> \\<Longrightarrow> w = w'\"\n  shows \"\\<exists>ws. P \\<turnstile> (E'', ws) \\<surd> \\<and> (\\<forall>n. n \\<in> read_actions E'' \\<longrightarrow> length E' \\<le> n \\<longrightarrow> P,E'' \\<turnstile> ws n \\<le>hb n) \\<and> \n              (\\<forall>n. n < length E' \\<longrightarrow> ws n = ws' n)\"", "lemma ta_hb_consistent_not_ReadI:\n  \"(\\<And>t ad al v. (t, NormalAction (ReadMem ad al v)) \\<notin> lset E) \\<Longrightarrow> ta_hb_consistent P E' E\"", "lemma hb_completionD:\n  \"\\<lbrakk> hb_completion s E; s -\\<triangleright>ttas\\<rightarrow>* s';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))); \n     thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; t \\<turnstile> (x, shr s') -ta\\<rightarrow> (x', m'); actions_ok s' t ta;\n     non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''. t \\<turnstile> (x, shr s') -ta'\\<rightarrow> (x'', m'') \\<and> actions_ok s' t ta' \\<and>\n                   take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                   ta_hb_consistent P (E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas) @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                      (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                   (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                   (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)\"", "lemma hb_completionI [intro?]:\n  \"(\\<And>ttas s' t x ta x' m' i. \n     \\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)));\n       thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; t \\<turnstile> (x, shr s') -ta\\<rightarrow> (x', m'); actions_ok s' t ta;\n       non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<rbrakk>\n     \\<Longrightarrow> \\<exists>ta' x'' m''. t \\<turnstile> (x, shr s') -ta'\\<rightarrow> (x'', m'') \\<and> actions_ok s' t ta' \\<and> take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                   ta_hb_consistent P (E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas) @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                   (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                   (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i))\n  \\<Longrightarrow> hb_completion s E\"", "lemma hb_completion_shift:\n  assumes hb_c: \"hb_completion s E\"\n  and \\<tau>Red: \"s -\\<triangleright>ttas\\<rightarrow>* s'\"\n  and sc: \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)))\"\n      (is \"non_speculative _ ?vs _\")\n  shows \"hb_completion s' (E @ (concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)))\"\n  (is \"hb_completion _ ?E\")", "lemma hb_completion_shift1:\n  assumes hb_c: \"hb_completion s E\"\n  and Red: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and sc: \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\"\n  shows \"hb_completion s' (E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\"", "lemma complete_hb_in_Runs:\n  assumes hb_c: \"hb_completion s E\"\n  and ta_hb_consistent_convert_RA: \"\\<And>t E ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"mthr.Runs s (complete_hb s E)\"", "lemma complete_hb_ta_hb_consistent:\n  assumes \"hb_completion s E\"\n  and ta_hb_consistent_convert_RA: \"\\<And>E t ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"ta_hb_consistent P E (lconcat (lmap (\\<lambda>(t, ta). llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) (complete_hb s E)))\"\n  (is \"ta_hb_consistent _ _ (?obs (complete_hb s E))\")", "lemma hb_completion_Runs:\n  assumes \"hb_completion s E\"\n  and \"\\<And>E t ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"\\<exists>ttas. mthr.Runs s ttas \\<and> ta_hb_consistent P E (lconcat (lmap (\\<lambda>(t, ta). llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) ttas))\""], "translations": [["", "lemma ta_hb_consistent_into_non_speculative:\n  \"ta_hb_consistent P obs0 obs\n  \\<Longrightarrow> non_speculative P (w_values P (\\<lambda>_. {}) (map snd obs0)) (lmap snd obs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P obs0 obs \\<Longrightarrow>\n    non_speculative P (w_values P (\\<lambda>_. {}) (map snd obs0))\n     (lmap snd obs)", "proof(coinduction arbitrary: obs0 obs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>obs0 obs.\n       ta_hb_consistent P obs0 obs \\<Longrightarrow>\n       (\\<exists>vs.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LNil) \\<or>\n       (\\<exists>ob vs obsa.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs0 obs.\n                w_value P vs ob =\n                w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n                obsa = lmap snd obs \\<and>\n                ta_hb_consistent P obs0 obs) \\<or>\n            non_speculative P (w_value P vs ob) obsa))", "case (non_speculative obs0 obs)"], ["proof (state)\nthis:\n  ta_hb_consistent P obs0 obs\n\ngoal (1 subgoal):\n 1. \\<And>obs0 obs.\n       ta_hb_consistent P obs0 obs \\<Longrightarrow>\n       (\\<exists>vs.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LNil) \\<or>\n       (\\<exists>ob vs obsa.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs0 obs.\n                w_value P vs ob =\n                w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n                obsa = lmap snd obs \\<and>\n                ta_hb_consistent P obs0 obs) \\<or>\n            non_speculative P (w_value P vs ob) obsa))", "let ?vs = \"w_values P (\\<lambda>_. {}) (map snd obs0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>obs0 obs.\n       ta_hb_consistent P obs0 obs \\<Longrightarrow>\n       (\\<exists>vs.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LNil) \\<or>\n       (\\<exists>ob vs obsa.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs0 obs.\n                w_value P vs ob =\n                w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n                obsa = lmap snd obs \\<and>\n                ta_hb_consistent P obs0 obs) \\<or>\n            non_speculative P (w_value P vs ob) obsa))", "let ?CH = \"\\<lambda>vs obs'. \\<exists>obs0 obs. vs = w_values P (\\<lambda>_. {}) (map snd obs0) \\<and> obs' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>obs0 obs.\n       ta_hb_consistent P obs0 obs \\<Longrightarrow>\n       (\\<exists>vs.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LNil) \\<or>\n       (\\<exists>ob vs obsa.\n           w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n           lmap snd obs = LCons ob obsa \\<and>\n           (case ob of\n            NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n            | NormalAction _ \\<Rightarrow> True\n            | _ \\<Rightarrow> True) \\<and>\n           ((\\<exists>obs0 obs.\n                w_value P vs ob =\n                w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n                obsa = lmap snd obs \\<and>\n                ta_hb_consistent P obs0 obs) \\<or>\n            non_speculative P (w_value P vs ob) obsa))", "from non_speculative"], ["proof (chain)\npicking this:\n  ta_hb_consistent P obs0 obs", "show ?case"], ["proof (prove)\nusing this:\n  ta_hb_consistent P obs0 obs\n\ngoal (1 subgoal):\n 1. (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "case LNil"], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "hence ?LNil"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. \\<exists>vs.\n       w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n       lmap snd obs = LNil", "by simp"], ["proof (state)\nthis:\n  \\<exists>vs.\n     w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n     lmap snd obs = LNil\n\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))\n 2. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>vs.\n     w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n     lmap snd obs = LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))", ".."], ["proof (state)\nthis:\n  (\\<exists>vs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs0 obsa.\n           w_value P vs ob =\n           w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n           obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "case (LCons tob obs'')"], ["proof (state)\nthis:\n  obs = LCons tob obs''\n  ta_hb_consistent P (obs0 @ [tob]) obs''\n  case tob of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    \\<exists>w.\n       w \\<in> write_actions (llist_of (obs0 @ [tob])) \\<and>\n       (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w \\<and>\n       value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v \\<and>\n       P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n       (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [tob])).\n           (ad, al)\n           \\<in> action_loc P (llist_of (obs0 @ [tob])) w' \\<longrightarrow>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb w' \\<and>\n           P,llist_of\n              (obs0 @ [tob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n           is_volatile P al \\<and>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>so w' \\<and>\n           P,llist_of\n              (obs0 @\n               [tob]) \\<turnstile> w' \\<le>so length obs0 \\<longrightarrow>\n           w' = w)\n  | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "note obs = \\<open>obs = LCons tob obs''\\<close>"], ["proof (state)\nthis:\n  obs = LCons tob obs''\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "obtain t ob where tob: \"tob = (t, ob)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t ob. tob = (t, ob) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases tob)"], ["proof (state)\nthis:\n  tob = (t, ob)\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "from \\<open>ta_hb_consistent P (obs0 @ [tob]) obs''\\<close> tob obs"], ["proof (chain)\npicking this:\n  ta_hb_consistent P (obs0 @ [tob]) obs''\n  tob = (t, ob)\n  obs = LCons tob obs''", "have \"?CH (w_value P ?vs ob) (lmap snd obs'')\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P (obs0 @ [tob]) obs''\n  tob = (t, ob)\n  obs = LCons tob obs''\n\ngoal (1 subgoal):\n 1. \\<exists>obs0 obs.\n       w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n       w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n       lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs", "by(auto intro!: exI)"], ["proof (state)\nthis:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "moreover"], ["proof (state)\nthis:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "{"], ["proof (state)\nthis:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "fix ad al v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "assume ob: \"ob = NormalAction (ReadMem ad al v)\""], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "with LCons tob"], ["proof (chain)\npicking this:\n  obs = LCons tob obs''\n  ta_hb_consistent P (obs0 @ [tob]) obs''\n  case tob of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    \\<exists>w.\n       w \\<in> write_actions (llist_of (obs0 @ [tob])) \\<and>\n       (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w \\<and>\n       value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v \\<and>\n       P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n       (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [tob])).\n           (ad, al)\n           \\<in> action_loc P (llist_of (obs0 @ [tob])) w' \\<longrightarrow>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb w' \\<and>\n           P,llist_of\n              (obs0 @ [tob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n           is_volatile P al \\<and>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>so w' \\<and>\n           P,llist_of\n              (obs0 @\n               [tob]) \\<turnstile> w' \\<le>so length obs0 \\<longrightarrow>\n           w' = w)\n  | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True\n  tob = (t, ob)\n  ob = NormalAction (ReadMem ad al v)", "obtain w where w: \"w \\<in> write_actions (llist_of (obs0 @ [tob]))\"\n        and adal: \"(ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\"\n        and v: \"value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\""], ["proof (prove)\nusing this:\n  obs = LCons tob obs''\n  ta_hb_consistent P (obs0 @ [tob]) obs''\n  case tob of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    \\<exists>w.\n       w \\<in> write_actions (llist_of (obs0 @ [tob])) \\<and>\n       (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w \\<and>\n       value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v \\<and>\n       P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n       (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [tob])).\n           (ad, al)\n           \\<in> action_loc P (llist_of (obs0 @ [tob])) w' \\<longrightarrow>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>hb w' \\<and>\n           P,llist_of\n              (obs0 @ [tob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n           is_volatile P al \\<and>\n           P,llist_of (obs0 @ [tob]) \\<turnstile> w \\<le>so w' \\<and>\n           P,llist_of\n              (obs0 @\n               [tob]) \\<turnstile> w' \\<le>so length obs0 \\<longrightarrow>\n           w' = w)\n  | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True\n  tob = (t, ob)\n  ob = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> write_actions (llist_of (obs0 @ [tob]));\n         (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w;\n         value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w \\<in> write_actions (llist_of (obs0 @ [tob]))\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n  value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "from w"], ["proof (chain)\npicking this:\n  w \\<in> write_actions (llist_of (obs0 @ [tob]))", "obtain \"is_write_action (action_obs (llist_of (obs0 @ [tob])) w)\" \n        and w_actions: \"w \\<in> actions (llist_of (obs0 @ [tob]))\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_write_action (action_obs (llist_of (obs0 @ [tob])) w);\n      w \\<in> actions (llist_of (obs0 @ [tob]))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  is_write_action (action_obs (llist_of (obs0 @ [tob])) w)\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "hence \"v \\<in> ?vs (ad, al)\""], ["proof (prove)\nusing this:\n  is_write_action (action_obs (llist_of (obs0 @ [tob])) w)\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)\n 2. \\<And>ada ala va.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (WriteMem ada ala va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "case (WriteMem ad' al' v')"], ["proof (state)\nthis:\n  action_obs (llist_of (obs0 @ [tob])) w =\n  NormalAction (WriteMem ad' al' v')\n\ngoal (2 subgoals):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)\n 2. \\<And>ada ala va.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (WriteMem ada ala va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "hence \"NormalAction (WriteMem ad al v) \\<in> set (map snd obs0)\""], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w =\n  NormalAction (WriteMem ad' al' v')\n\ngoal (1 subgoal):\n 1. NormalAction (WriteMem ad al v) \\<in> set (map snd obs0)", "using adal ob tob v w_actions"], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w =\n  NormalAction (WriteMem ad' al' v')\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n  ob = NormalAction (ReadMem ad al v)\n  tob = (t, ob)\n  value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. NormalAction (WriteMem ad al v) \\<in> set (map snd obs0)", "unfolding in_set_conv_nth"], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w =\n  NormalAction (WriteMem ad' al' v')\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n  ob = NormalAction (ReadMem ad al v)\n  tob = (t, ob)\n  value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (map snd obs0).\n       map snd obs0 ! i = NormalAction (WriteMem ad al v)", "by(auto simp add: action_obs_def nth_append value_written.simps actions_def cong: conj_cong split: if_split_asm)"], ["proof (state)\nthis:\n  NormalAction (WriteMem ad al v) \\<in> set (map snd obs0)\n\ngoal (2 subgoals):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)\n 2. \\<And>ada ala va.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (WriteMem ada ala va)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "thus ?thesis"], ["proof (prove)\nusing this:\n  NormalAction (WriteMem ad al v) \\<in> set (map snd obs0)\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)", "by(rule w_values_WriteMemD)"], ["proof (state)\nthis:\n  v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "case (NewHeapElem ad' hT)"], ["proof (state)\nthis:\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n\ngoal (1 subgoal):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "hence \"NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)\""], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n\ngoal (1 subgoal):\n 1. NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)", "using adal ob tob v w_actions"], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n  ob = NormalAction (ReadMem ad al v)\n  tob = (t, ob)\n  value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)", "unfolding in_set_conv_nth"], ["proof (prove)\nusing this:\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n  ob = NormalAction (ReadMem ad al v)\n  tob = (t, ob)\n  value_written P (llist_of (obs0 @ [tob])) w (ad, al) = v\n  w \\<in> actions (llist_of (obs0 @ [tob]))\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (map snd obs0).\n       map snd obs0 ! i = NormalAction (NewHeapElem ad hT)", "by(auto simp add: action_obs_def nth_append value_written.simps actions_def cong: conj_cong split: if_split_asm)"], ["proof (state)\nthis:\n  NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)\n\ngoal (1 subgoal):\n 1. \\<And>ada hT.\n       \\<lbrakk>w \\<in> actions (llist_of (obs0 @ [tob]));\n        action_obs (llist_of (obs0 @ [tob])) w =\n        NormalAction (NewHeapElem ada hT)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0)\n                                  (ad, al)", "thus ?thesis"], ["proof (prove)\nusing this:\n  NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)", "using NewHeapElem adal"], ["proof (prove)\nusing this:\n  NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n\ngoal (1 subgoal):\n 1. v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)", "unfolding v[symmetric]"], ["proof (prove)\nusing this:\n  NormalAction (NewHeapElem ad hT) \\<in> set (map snd obs0)\n  action_obs (llist_of (obs0 @ [tob])) w = NormalAction (NewHeapElem ad' hT)\n  (ad, al) \\<in> action_loc P (llist_of (obs0 @ [tob])) w\n\ngoal (1 subgoal):\n 1. value_written P (llist_of (obs0 @ [tob])) w (ad, al)\n    \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)", "by(fastforce simp add: value_written.simps intro!: w_values_new_actionD intro: rev_image_eqI)"], ["proof (state)\nthis:\n  v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "}"], ["proof (state)\nthis:\n  ob = NormalAction (ReadMem ?ad3 ?al3 ?v3) \\<Longrightarrow>\n  ?v3 \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (?ad3, ?al3)\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "hence \"case ob of NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> ?vs (ad, al) | _ \\<Rightarrow> True\""], ["proof (prove)\nusing this:\n  ob = NormalAction (ReadMem ?ad3 ?al3 ?v3) \\<Longrightarrow>\n  ?v3 \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (?ad3, ?al3)\n\ngoal (1 subgoal):\n 1. case ob of\n    NormalAction (ReadMem ad al v) \\<Rightarrow>\n      v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n    | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True", "by(simp split: action.split obs_event.split)"], ["proof (state)\nthis:\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow>\n    v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow>\n    v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True", "have ?LCons"], ["proof (prove)\nusing this:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow>\n    v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n       lmap snd obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs0 obsa.\n            w_value P vs ob =\n            w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n            obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n        non_speculative P (w_value P vs ob) obs)", "using obs tob"], ["proof (prove)\nusing this:\n  \\<exists>obs0 obs.\n     w_value P (w_values P (\\<lambda>_. {}) (map snd obs0)) ob =\n     w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n     lmap snd obs'' = lmap snd obs \\<and> ta_hb_consistent P obs0 obs\n  case ob of\n  NormalAction (ReadMem ad al v) \\<Rightarrow>\n    v \\<in> w_values P (\\<lambda>_. {}) (map snd obs0) (ad, al)\n  | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True\n  obs = LCons tob obs''\n  tob = (t, ob)\n\ngoal (1 subgoal):\n 1. \\<exists>ob vs obs.\n       w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n       lmap snd obs = LCons ob obs \\<and>\n       (case ob of\n        NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n        | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n       ((\\<exists>obs0 obsa.\n            w_value P vs ob =\n            w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n            obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n        non_speculative P (w_value P vs ob) obs)", "by simp"], ["proof (state)\nthis:\n  \\<exists>ob vs obs.\n     w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n     lmap snd obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs0 obsa.\n          w_value P vs ob =\n          w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n          obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. \\<And>ob obs'.\n       \\<lbrakk>obs = LCons ob obs'; ta_hb_consistent P (obs0 @ [ob]) obs';\n        case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs0 @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs0 @ [ob])) w \\<and>\n             value_written P (llist_of (obs0 @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs0 @ [ob]) \\<turnstile> w \\<le>hb length obs0 \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs0 @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs0 @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs0 @ [ob]) \\<turnstile> w' \\<le>hb length obs0 \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs0 @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs0 @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs0 \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LNil) \\<or>\n                         (\\<exists>ob vs obs.\n                             w_values P (\\<lambda>_. {}) (map snd obs0) =\n                             vs \\<and>\n                             lmap snd obs = LCons ob obs \\<and>\n                             (case ob of\n                              NormalAction (ReadMem ad al v) \\<Rightarrow>\n                                v \\<in> vs (ad, al)\n                              | NormalAction _ \\<Rightarrow> True\n                              | _ \\<Rightarrow> True) \\<and>\n                             ((\\<exists>obs0 obsa.\n                                  w_value P vs ob =\n                                  w_values P (\\<lambda>_. {})\n                                   (map snd obs0) \\<and>\n                                  obs = lmap snd obsa \\<and>\n                                  ta_hb_consistent P obs0 obsa) \\<or>\n                              non_speculative P (w_value P vs ob) obs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ob vs obs.\n     w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n     lmap snd obs = LCons ob obs \\<and>\n     (case ob of\n      NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n      | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n     ((\\<exists>obs0 obsa.\n          w_value P vs ob =\n          w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n          obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n      non_speculative P (w_value P vs ob) obs)\n\ngoal (1 subgoal):\n 1. (\\<exists>vs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LNil) \\<or>\n    (\\<exists>ob vs obs.\n        w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n        lmap snd obs = LCons ob obs \\<and>\n        (case ob of\n         NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n         | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n        ((\\<exists>obs0 obsa.\n             w_value P vs ob =\n             w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n             obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n         non_speculative P (w_value P vs ob) obs))", ".."], ["proof (state)\nthis:\n  (\\<exists>vs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs0 obsa.\n           w_value P vs ob =\n           w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n           obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>vs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LNil) \\<or>\n  (\\<exists>ob vs obs.\n      w_values P (\\<lambda>_. {}) (map snd obs0) = vs \\<and>\n      lmap snd obs = LCons ob obs \\<and>\n      (case ob of\n       NormalAction (ReadMem ad al v) \\<Rightarrow> v \\<in> vs (ad, al)\n       | NormalAction _ \\<Rightarrow> True | _ \\<Rightarrow> True) \\<and>\n      ((\\<exists>obs0 obsa.\n           w_value P vs ob =\n           w_values P (\\<lambda>_. {}) (map snd obs0) \\<and>\n           obs = lmap snd obsa \\<and> ta_hb_consistent P obs0 obsa) \\<or>\n       non_speculative P (w_value P vs ob) obs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ta_hb_consistent_lappendI:\n  assumes hb1: \"ta_hb_consistent P E E'\"\n  and hb2: \"ta_hb_consistent P (E @ list_of E') E''\"\n  and fin: \"lfinite E'\"\n  shows \"ta_hb_consistent P E (lappend E' E'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E (lappend E' E'')", "using fin hb1 hb2"], ["proof (prove)\nusing this:\n  lfinite E'\n  ta_hb_consistent P E E'\n  ta_hb_consistent P (E @ list_of E') E''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E (lappend E' E'')", "proof(induction arbitrary: E)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>E.\n       \\<lbrakk>ta_hb_consistent P E LNil;\n        ta_hb_consistent P (E @ list_of LNil) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend LNil E'')\n 2. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "case lfinite_LNil"], ["proof (state)\nthis:\n  ta_hb_consistent P E LNil\n  ta_hb_consistent P (E @ list_of LNil) E''\n\ngoal (2 subgoals):\n 1. \\<And>E.\n       \\<lbrakk>ta_hb_consistent P E LNil;\n        ta_hb_consistent P (E @ list_of LNil) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend LNil E'')\n 2. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "thus ?case"], ["proof (prove)\nusing this:\n  ta_hb_consistent P E LNil\n  ta_hb_consistent P (E @ list_of LNil) E''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E (lappend LNil E'')", "by simp"], ["proof (state)\nthis:\n  ta_hb_consistent P E (lappend LNil E'')\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "case (lfinite_LConsI E' tob)"], ["proof (state)\nthis:\n  lfinite E'\n  \\<lbrakk>ta_hb_consistent P ?E E';\n   ta_hb_consistent P (?E @ list_of E') E''\\<rbrakk>\n  \\<Longrightarrow> ta_hb_consistent P ?E (lappend E' E'')\n  ta_hb_consistent P E (LCons tob E')\n  ta_hb_consistent P (E @ list_of (LCons tob E')) E''\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "from \\<open>ta_hb_consistent P E (LCons tob E')\\<close>"], ["proof (chain)\npicking this:\n  ta_hb_consistent P E (LCons tob E')", "have \"ta_hb_consistent P (E @ [tob]) E'\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P E (LCons tob E')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [tob]) E'", "by cases"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [tob]) E'\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "moreover"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [tob]) E'\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "from \\<open>ta_hb_consistent P (E @ list_of (LCons tob E')) E''\\<close> \\<open>lfinite E'\\<close>"], ["proof (chain)\npicking this:\n  ta_hb_consistent P (E @ list_of (LCons tob E')) E''\n  lfinite E'", "have \"ta_hb_consistent P ((E @ [tob]) @ list_of E') E''\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ list_of (LCons tob E')) E''\n  lfinite E'\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P ((E @ [tob]) @ list_of E') E''", "by simp"], ["proof (state)\nthis:\n  ta_hb_consistent P ((E @ [tob]) @ list_of E') E''\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "ultimately"], ["proof (chain)\npicking this:\n  ta_hb_consistent P (E @ [tob]) E'\n  ta_hb_consistent P ((E @ [tob]) @ list_of E') E''", "have \"ta_hb_consistent P (E @ [tob]) (lappend E' E'')\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ [tob]) E'\n  ta_hb_consistent P ((E @ [tob]) @ list_of E') E''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [tob]) (lappend E' E'')", "by(rule lfinite_LConsI.IH)"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [tob]) (lappend E' E'')\n\ngoal (1 subgoal):\n 1. \\<And>xs x E.\n       \\<lbrakk>lfinite xs;\n        \\<And>E.\n           \\<lbrakk>ta_hb_consistent P E xs;\n            ta_hb_consistent P (E @ list_of xs) E''\\<rbrakk>\n           \\<Longrightarrow> ta_hb_consistent P E (lappend xs E'');\n        ta_hb_consistent P E (LCons x xs);\n        ta_hb_consistent P (E @ list_of (LCons x xs)) E''\\<rbrakk>\n       \\<Longrightarrow> ta_hb_consistent P E (lappend (LCons x xs) E'')", "thus ?case"], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ [tob]) (lappend E' E'')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E (lappend (LCons tob E') E'')", "unfolding lappend_code"], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ [tob]) (lappend E' E'')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E (LCons tob (lappend E' E''))", "apply(rule ta_hb_consistent.LCons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. case tob of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      \\<exists>w.\n         w \\<in> write_actions (llist_of (E @ [tob])) \\<and>\n         (ad, al) \\<in> action_loc P (llist_of (E @ [tob])) w \\<and>\n         value_written P (llist_of (E @ [tob])) w (ad, al) = v \\<and>\n         P,llist_of (E @ [tob]) \\<turnstile> w \\<le>hb length E \\<and>\n         (\\<forall>w'\\<in>write_actions (llist_of (E @ [tob])).\n             (ad, al)\n             \\<in> action_loc P (llist_of (E @ [tob])) w' \\<longrightarrow>\n             P,llist_of (E @ [tob]) \\<turnstile> w \\<le>hb w' \\<and>\n             P,llist_of (E @ [tob]) \\<turnstile> w' \\<le>hb length E \\<or>\n             is_volatile P al \\<and>\n             P,llist_of (E @ [tob]) \\<turnstile> w \\<le>so w' \\<and>\n             P,llist_of\n                (E @\n                 [tob]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n             w' = w)\n    | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True", "using \\<open>ta_hb_consistent P E (LCons tob E')\\<close>"], ["proof (prove)\nusing this:\n  ta_hb_consistent P E (LCons tob E')\n\ngoal (1 subgoal):\n 1. case tob of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      \\<exists>w.\n         w \\<in> write_actions (llist_of (E @ [tob])) \\<and>\n         (ad, al) \\<in> action_loc P (llist_of (E @ [tob])) w \\<and>\n         value_written P (llist_of (E @ [tob])) w (ad, al) = v \\<and>\n         P,llist_of (E @ [tob]) \\<turnstile> w \\<le>hb length E \\<and>\n         (\\<forall>w'\\<in>write_actions (llist_of (E @ [tob])).\n             (ad, al)\n             \\<in> action_loc P (llist_of (E @ [tob])) w' \\<longrightarrow>\n             P,llist_of (E @ [tob]) \\<turnstile> w \\<le>hb w' \\<and>\n             P,llist_of (E @ [tob]) \\<turnstile> w' \\<le>hb length E \\<or>\n             is_volatile P al \\<and>\n             P,llist_of (E @ [tob]) \\<turnstile> w \\<le>so w' \\<and>\n             P,llist_of\n                (E @\n                 [tob]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n             w' = w)\n    | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True", "by cases (simp split: prod.split_asm action.split_asm obs_event.split_asm)"], ["proof (state)\nthis:\n  ta_hb_consistent P E (lappend (LCons tob E') E'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ta_hb_consistent_coinduct_append\n  [consumes 1, case_names ta_hb_consistent, case_conclusion ta_hb_consistent LNil lappend]:\n  assumes major: \"X E tobs\"\n  and step: \"\\<And>E tobs. X E tobs \n    \\<Longrightarrow> tobs = LNil \\<or>\n       (\\<exists>tobs' tobs''. tobs = lappend tobs' tobs'' \\<and> tobs' \\<noteq> LNil \\<and> ta_hb_consistent P E tobs' \\<and>\n                    (lfinite tobs' \\<longrightarrow> (X (E @ list_of tobs') tobs''\\<or> \n                                       ta_hb_consistent P (E @ list_of tobs') tobs'')))\"\n    (is \"\\<And>E tobs. _ \\<Longrightarrow> _ \\<or> ?step E tobs\")\n  shows \"ta_hb_consistent P E tobs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E tobs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E tobs", "from major"], ["proof (chain)\npicking this:\n  X E tobs", "have \"\\<exists>tobs' tobs''. tobs = lappend (llist_of tobs') tobs'' \\<and> ta_hb_consistent P E (llist_of tobs') \\<and> \n                     X (E @ tobs') tobs''\""], ["proof (prove)\nusing this:\n  X E tobs\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''.\n       tobs = lappend (llist_of tobs') tobs'' \\<and>\n       ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''", "by(auto intro: exI[where x=\"[]\"])"], ["proof (state)\nthis:\n  \\<exists>tobs' tobs''.\n     tobs = lappend (llist_of tobs') tobs'' \\<and>\n     ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E tobs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>tobs' tobs''.\n     tobs = lappend (llist_of tobs') tobs'' \\<and>\n     ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E tobs", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>tobs' tobs''.\n          x2 = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P x1 (llist_of tobs') \\<and>\n          X (x1 @ tobs') tobs'' \\<Longrightarrow>\n       (\\<exists>obs. x1 = obs \\<and> x2 = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           x1 = obs \\<and>\n           x2 = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "case (ta_hb_consistent E tobs)"], ["proof (state)\nthis:\n  \\<exists>tobs' tobs''.\n     tobs = lappend (llist_of tobs') tobs'' \\<and>\n     ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>tobs' tobs''.\n          x2 = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P x1 (llist_of tobs') \\<and>\n          X (x1 @ tobs') tobs'' \\<Longrightarrow>\n       (\\<exists>obs. x1 = obs \\<and> x2 = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           x1 = obs \\<and>\n           x2 = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "then"], ["proof (chain)\npicking this:\n  \\<exists>tobs' tobs''.\n     tobs = lappend (llist_of tobs') tobs'' \\<and>\n     ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''", "obtain tobs' tobs'' \n      where tobs: \"tobs = lappend (llist_of tobs') tobs''\"\n      and hb_tobs': \"ta_hb_consistent P E (llist_of tobs')\"\n      and X: \"X (E @ tobs') tobs''\""], ["proof (prove)\nusing this:\n  \\<exists>tobs' tobs''.\n     tobs = lappend (llist_of tobs') tobs'' \\<and>\n     ta_hb_consistent P E (llist_of tobs') \\<and> X (E @ tobs') tobs''\n\ngoal (1 subgoal):\n 1. (\\<And>tobs' tobs''.\n        \\<lbrakk>tobs = lappend (llist_of tobs') tobs'';\n         ta_hb_consistent P E (llist_of tobs');\n         X (E @ tobs') tobs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  tobs = lappend (llist_of tobs') tobs''\n  ta_hb_consistent P E (llist_of tobs')\n  X (E @ tobs') tobs''\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<exists>tobs' tobs''.\n          x2 = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P x1 (llist_of tobs') \\<and>\n          X (x1 @ tobs') tobs'' \\<Longrightarrow>\n       (\\<exists>obs. x1 = obs \\<and> x2 = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           x1 = obs \\<and>\n           x2 = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "proof(cases tobs')"], ["proof (state)\ngoal (2 subgoals):\n 1. tobs' = [] \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))\n 2. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "case Nil"], ["proof (state)\nthis:\n  tobs' = []\n\ngoal (2 subgoals):\n 1. tobs' = [] \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))\n 2. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "with X"], ["proof (chain)\npicking this:\n  X (E @ tobs') tobs''\n  tobs' = []", "have \"X E tobs''\""], ["proof (prove)\nusing this:\n  X (E @ tobs') tobs''\n  tobs' = []\n\ngoal (1 subgoal):\n 1. X E tobs''", "by simp"], ["proof (state)\nthis:\n  X E tobs''\n\ngoal (2 subgoals):\n 1. tobs' = [] \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))\n 2. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "from step[OF this]"], ["proof (chain)\npicking this:\n  tobs'' = LNil \\<or>\n  (\\<exists>tobs' tobs''a.\n      tobs'' = lappend tobs' tobs''a \\<and>\n      tobs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E tobs' \\<and>\n      (lfinite tobs' \\<longrightarrow>\n       X (E @ list_of tobs') tobs''a \\<or>\n       ta_hb_consistent P (E @ list_of tobs') tobs''a))", "show ?thesis"], ["proof (prove)\nusing this:\n  tobs'' = LNil \\<or>\n  (\\<exists>tobs' tobs''a.\n      tobs'' = lappend tobs' tobs''a \\<and>\n      tobs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E tobs' \\<and>\n      (lfinite tobs' \\<longrightarrow>\n       X (E @ list_of tobs') tobs''a \\<or>\n       ta_hb_consistent P (E @ list_of tobs') tobs''a))\n\ngoal (1 subgoal):\n 1. (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tobs'' = LNil \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))\n 2. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "assume \"tobs'' = LNil\""], ["proof (state)\nthis:\n  tobs'' = LNil\n\ngoal (2 subgoals):\n 1. tobs'' = LNil \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))\n 2. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "with Nil tobs"], ["proof (chain)\npicking this:\n  tobs' = []\n  tobs = lappend (llist_of tobs') tobs''\n  tobs'' = LNil", "show ?thesis"], ["proof (prove)\nusing this:\n  tobs' = []\n  tobs = lappend (llist_of tobs') tobs''\n  tobs'' = LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E = obs \\<and>\n      tobs = LCons ob obs' \\<and>\n      ((\\<exists>tobs' tobs''.\n           obs' = lappend (llist_of tobs') tobs'' \\<and>\n           ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n           X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "assume \"?step E tobs''\""], ["proof (state)\nthis:\n  \\<exists>tobs' tobs''a.\n     tobs'' = lappend tobs' tobs''a \\<and>\n     tobs' \\<noteq> LNil \\<and>\n     ta_hb_consistent P E tobs' \\<and>\n     (lfinite tobs' \\<longrightarrow>\n      X (E @ list_of tobs') tobs''a \\<or>\n      ta_hb_consistent P (E @ list_of tobs') tobs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "then"], ["proof (chain)\npicking this:\n  \\<exists>tobs' tobs''a.\n     tobs'' = lappend tobs' tobs''a \\<and>\n     tobs' \\<noteq> LNil \\<and>\n     ta_hb_consistent P E tobs' \\<and>\n     (lfinite tobs' \\<longrightarrow>\n      X (E @ list_of tobs') tobs''a \\<or>\n      ta_hb_consistent P (E @ list_of tobs') tobs''a)", "obtain tobs''' tobs'''' \n          where tobs'': \"tobs'' = lappend tobs''' tobs''''\" and \"tobs''' \\<noteq> LNil\"\n          and sc_obs''': \"ta_hb_consistent P E tobs'''\" \n          and fin: \"lfinite tobs''' \\<Longrightarrow> X (E @ list_of tobs''') tobs'''' \\<or>\n                                      ta_hb_consistent P (E @ list_of tobs''') tobs''''\""], ["proof (prove)\nusing this:\n  \\<exists>tobs' tobs''a.\n     tobs'' = lappend tobs' tobs''a \\<and>\n     tobs' \\<noteq> LNil \\<and>\n     ta_hb_consistent P E tobs' \\<and>\n     (lfinite tobs' \\<longrightarrow>\n      X (E @ list_of tobs') tobs''a \\<or>\n      ta_hb_consistent P (E @ list_of tobs') tobs''a)\n\ngoal (1 subgoal):\n 1. (\\<And>tobs''' tobs''''.\n        \\<lbrakk>tobs'' = lappend tobs''' tobs''''; tobs''' \\<noteq> LNil;\n         ta_hb_consistent P E tobs''';\n         lfinite tobs''' \\<Longrightarrow>\n         X (E @ list_of tobs''') tobs'''' \\<or>\n         ta_hb_consistent P (E @ list_of tobs''') tobs''''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  tobs'' = lappend tobs''' tobs''''\n  tobs''' \\<noteq> LNil\n  ta_hb_consistent P E tobs'''\n  lfinite tobs''' \\<Longrightarrow>\n  X (E @ list_of tobs''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "from \\<open>tobs''' \\<noteq> LNil\\<close>"], ["proof (chain)\npicking this:\n  tobs''' \\<noteq> LNil", "obtain t ob tobs''''' where tobs''': \"tobs''' = LCons (t, ob) tobs'''''\""], ["proof (prove)\nusing this:\n  tobs''' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. (\\<And>t ob tobs'''''.\n        tobs''' = LCons (t, ob) tobs''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding neq_LNil_conv"], ["proof (prove)\nusing this:\n  \\<exists>x xs'. tobs''' = LCons x xs'\n\ngoal (1 subgoal):\n 1. (\\<And>t ob tobs'''''.\n        tobs''' = LCons (t, ob) tobs''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tobs''' = LCons (t, ob) tobs'''''\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "with Nil tobs'' tobs"], ["proof (chain)\npicking this:\n  tobs' = []\n  tobs'' = lappend tobs''' tobs''''\n  tobs = lappend (llist_of tobs') tobs''\n  tobs''' = LCons (t, ob) tobs'''''", "have concl1: \"tobs = LCons (t, ob) (lappend tobs''''' tobs'''')\""], ["proof (prove)\nusing this:\n  tobs' = []\n  tobs'' = lappend tobs''' tobs''''\n  tobs = lappend (llist_of tobs') tobs''\n  tobs''' = LCons (t, ob) tobs'''''\n\ngoal (1 subgoal):\n 1. tobs = LCons (t, ob) (lappend tobs''''' tobs'''')", "by simp"], ["proof (state)\nthis:\n  tobs = LCons (t, ob) (lappend tobs''''' tobs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "have ?LCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "proof(cases \"lfinite tobs'''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)\n 2. \\<not> lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "case False"], ["proof (state)\nthis:\n  \\<not> lfinite tobs'''\n\ngoal (2 subgoals):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)\n 2. \\<not> lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "hence \"lappend tobs''''' tobs'''' = tobs'''''\""], ["proof (prove)\nusing this:\n  \\<not> lfinite tobs'''\n\ngoal (1 subgoal):\n 1. lappend tobs''''' tobs'''' = tobs'''''", "using tobs'''"], ["proof (prove)\nusing this:\n  \\<not> lfinite tobs'''\n  tobs''' = LCons (t, ob) tobs'''''\n\ngoal (1 subgoal):\n 1. lappend tobs''''' tobs'''' = tobs'''''", "by(simp add: lappend_inf)"], ["proof (state)\nthis:\n  lappend tobs''''' tobs'''' = tobs'''''\n\ngoal (2 subgoals):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)\n 2. \\<not> lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "hence \"ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')\""], ["proof (prove)\nusing this:\n  lappend tobs''''' tobs'''' = tobs'''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')", "using sc_obs''' tobs'''"], ["proof (prove)\nusing this:\n  lappend tobs''''' tobs'''' = tobs'''''\n  ta_hb_consistent P E tobs'''\n  tobs''' = LCons (t, ob) tobs'''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')", "by(simp add: ta_hb_consistent_LCons)"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')\n\ngoal (2 subgoals):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)\n 2. \\<not> lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "with concl1"], ["proof (chain)\npicking this:\n  tobs = LCons (t, ob) (lappend tobs''''' tobs'''')\n  ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')", "show ?LCons"], ["proof (prove)\nusing this:\n  tobs = LCons (t, ob) (lappend tobs''''' tobs'''')\n  ta_hb_consistent P (E @ [(t, ob)]) (lappend tobs''''' tobs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tobs = LCons (t, ob) (lappend tobs''''' tobs'''');\n     ta_hb_consistent P (E @ [(t, ob)])\n      (lappend tobs''''' tobs'''')\\<rbrakk>\n    \\<Longrightarrow> case ob of\n                      NormalAction (ReadMem ad al v) \\<Rightarrow>\n                        \\<exists>w.\n                           w \\<in> write_actions\n                                    (llist_of (E @ [(t, ob)])) \\<and>\n                           (ad, al)\n                           \\<in> action_loc P (llist_of (E @ [(t, ob)]))\n                                  w \\<and>\n                           value_written P (llist_of (E @ [(t, ob)])) w\n                            (ad, al) =\n                           v \\<and>\n                           P,llist_of\n                              (E @\n                               [(t, ob)]) \\<turnstile> w \\<le>hb length\n                            E \\<and>\n                           (\\<forall>w'\\<in>write_actions\n       (llist_of (E @ [(t, ob)])).\n                               (ad, al)\n                               \\<in> action_loc P (llist_of (E @ [(t, ob)]))\nw' \\<longrightarrow>\n                               (P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>hb w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>hb length E \\<longrightarrow>\n                                w' = w) \\<and>\n                               (is_volatile P al \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>so w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n                                w' = w))\n                      | NormalAction _ \\<Rightarrow> True\n                      | _ \\<Rightarrow> True", "using sc_obs'''[unfolded tobs''']"], ["proof (prove)\nusing this:\n  ta_hb_consistent P E (LCons (t, ob) tobs''''')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tobs = LCons (t, ob) (lappend tobs''''' tobs'''');\n     ta_hb_consistent P (E @ [(t, ob)])\n      (lappend tobs''''' tobs'''')\\<rbrakk>\n    \\<Longrightarrow> case ob of\n                      NormalAction (ReadMem ad al v) \\<Rightarrow>\n                        \\<exists>w.\n                           w \\<in> write_actions\n                                    (llist_of (E @ [(t, ob)])) \\<and>\n                           (ad, al)\n                           \\<in> action_loc P (llist_of (E @ [(t, ob)]))\n                                  w \\<and>\n                           value_written P (llist_of (E @ [(t, ob)])) w\n                            (ad, al) =\n                           v \\<and>\n                           P,llist_of\n                              (E @\n                               [(t, ob)]) \\<turnstile> w \\<le>hb length\n                            E \\<and>\n                           (\\<forall>w'\\<in>write_actions\n       (llist_of (E @ [(t, ob)])).\n                               (ad, al)\n                               \\<in> action_loc P (llist_of (E @ [(t, ob)]))\nw' \\<longrightarrow>\n                               (P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>hb w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>hb length E \\<longrightarrow>\n                                w' = w) \\<and>\n                               (is_volatile P al \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>so w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n                                w' = w))\n                      | NormalAction _ \\<Rightarrow> True\n                      | _ \\<Rightarrow> True", "by cases simp"], ["proof (state)\nthis:\n  \\<exists>obs ob obs'.\n     E = obs \\<and>\n     tobs = LCons ob obs' \\<and>\n     ((\\<exists>tobs' tobs''.\n          obs' = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n          X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n      ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n     (case ob of\n      (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n        \\<exists>w.\n           w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n           (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n           value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n           P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n           (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n               (ad, al)\n               \\<in> action_loc P (llist_of (obs @ [ob]))\n                      w' \\<longrightarrow>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n               P,llist_of\n                  (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n               is_volatile P al \\<and>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n               P,llist_of\n                  (obs @\n                   [ob]) \\<turnstile> w' \\<le>so length\n            obs \\<longrightarrow>\n               w' = w)\n      | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "case True"], ["proof (state)\nthis:\n  lfinite tobs'''\n\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "with tobs'''"], ["proof (chain)\npicking this:\n  tobs''' = LCons (t, ob) tobs'''''\n  lfinite tobs'''", "obtain tobs'''''' where tobs''''': \"tobs''''' = llist_of tobs''''''\""], ["proof (prove)\nusing this:\n  tobs''' = LCons (t, ob) tobs'''''\n  lfinite tobs'''\n\ngoal (1 subgoal):\n 1. (\\<And>tobs''''''.\n        tobs''''' = llist_of tobs'''''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp(auto simp add: lfinite_eq_range_llist_of)"], ["proof (state)\nthis:\n  tobs''''' = llist_of tobs''''''\n\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "from fin[OF True]"], ["proof (chain)\npicking this:\n  X (E @ list_of tobs''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''", "have \"ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and> X (E @ (t, ob) # tobs'''''') tobs'''' \\<or> \n                ta_hb_consistent P (E @ [(t, ob)]) (lappend (llist_of tobs'''''') tobs'''')\""], ["proof (prove)\nusing this:\n  X (E @ list_of tobs''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')\n 2. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "assume X: \"X (E @ list_of tobs''') tobs''''\""], ["proof (state)\nthis:\n  X (E @ list_of tobs''') tobs''''\n\ngoal (2 subgoals):\n 1. X (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')\n 2. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "hence \"X (E @ (t, ob) # tobs'''''') tobs''''\""], ["proof (prove)\nusing this:\n  X (E @ list_of tobs''') tobs''''\n\ngoal (1 subgoal):\n 1. X (E @ (t, ob) # tobs'''''') tobs''''", "using tobs''''' tobs'''"], ["proof (prove)\nusing this:\n  X (E @ list_of tobs''') tobs''''\n  tobs''''' = llist_of tobs''''''\n  tobs''' = LCons (t, ob) tobs'''''\n\ngoal (1 subgoal):\n 1. X (E @ (t, ob) # tobs'''''') tobs''''", "by simp"], ["proof (state)\nthis:\n  X (E @ (t, ob) # tobs'''''') tobs''''\n\ngoal (2 subgoals):\n 1. X (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')\n 2. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "moreover"], ["proof (state)\nthis:\n  X (E @ (t, ob) # tobs'''''') tobs''''\n\ngoal (2 subgoals):\n 1. X (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')\n 2. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "have \"ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')", "using sc_obs''' tobs''' tobs'''''"], ["proof (prove)\nusing this:\n  ta_hb_consistent P E tobs'''\n  tobs''' = LCons (t, ob) tobs'''''\n  tobs''''' = llist_of tobs''''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')", "by(simp add: ta_hb_consistent_LCons)"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')\n\ngoal (2 subgoals):\n 1. X (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')\n 2. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "ultimately"], ["proof (chain)\npicking this:\n  X (E @ (t, ob) # tobs'''''') tobs''''\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')", "show ?thesis"], ["proof (prove)\nusing this:\n  X (E @ (t, ob) # tobs'''''') tobs''''\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "by simp"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n  X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "assume \"ta_hb_consistent P (E @ list_of tobs''') tobs''''\""], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "with sc_obs''' tobs''''' tobs'''"], ["proof (chain)\npicking this:\n  ta_hb_consistent P E tobs'''\n  tobs''''' = llist_of tobs''''''\n  tobs''' = LCons (t, ob) tobs'''''\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''", "have \"ta_hb_consistent P (E @ [(t, ob)]) (lappend (llist_of tobs'''''') tobs'''')\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P E tobs'''\n  tobs''''' = llist_of tobs''''''\n  tobs''' = LCons (t, ob) tobs'''''\n  ta_hb_consistent P (E @ list_of tobs''') tobs''''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "by(simp add: ta_hb_consistent_LCons ta_hb_consistent_lappendI)"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of tobs''') tobs'''' \\<Longrightarrow>\n    ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "thus ?thesis"], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n    X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", ".."], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n  X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n  X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "hence \"((\\<exists>tobs' tobs''. lappend (llist_of tobs'''''') tobs'''' = lappend (llist_of tobs') tobs'' \\<and>\n                                  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and> X (E @ (t, ob) # tobs') tobs'') \\<or>\n                 ta_hb_consistent P (E @ [(t, ob)]) (lappend (llist_of tobs'''''') tobs''''))\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs'''''') \\<and>\n  X (E @ (t, ob) # tobs'''''') tobs'''' \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. (\\<exists>tobs' tobs''.\n        lappend (llist_of tobs'''''') tobs'''' =\n        lappend (llist_of tobs') tobs'' \\<and>\n        ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n        X (E @ (t, ob) # tobs') tobs'') \\<or>\n    ta_hb_consistent P (E @ [(t, ob)])\n     (lappend (llist_of tobs'''''') tobs'''')", "by auto"], ["proof (state)\nthis:\n  (\\<exists>tobs' tobs''.\n      lappend (llist_of tobs'''''') tobs'''' =\n      lappend (llist_of tobs') tobs'' \\<and>\n      ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n      X (E @ (t, ob) # tobs') tobs'') \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. lfinite tobs''' \\<Longrightarrow>\n    \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "thus \"?LCons\""], ["proof (prove)\nusing this:\n  (\\<exists>tobs' tobs''.\n      lappend (llist_of tobs'''''') tobs'''' =\n      lappend (llist_of tobs') tobs'' \\<and>\n      ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n      X (E @ (t, ob) # tobs') tobs'') \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n\ngoal (1 subgoal):\n 1. \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "using concl1 tobs'''''"], ["proof (prove)\nusing this:\n  (\\<exists>tobs' tobs''.\n      lappend (llist_of tobs'''''') tobs'''' =\n      lappend (llist_of tobs') tobs'' \\<and>\n      ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n      X (E @ (t, ob) # tobs') tobs'') \\<or>\n  ta_hb_consistent P (E @ [(t, ob)])\n   (lappend (llist_of tobs'''''') tobs'''')\n  tobs = LCons (t, ob) (lappend tobs''''' tobs'''')\n  tobs''''' = llist_of tobs''''''\n\ngoal (1 subgoal):\n 1. \\<exists>obs ob obs'.\n       E = obs \\<and>\n       tobs = LCons ob obs' \\<and>\n       ((\\<exists>tobs' tobs''.\n            obs' = lappend (llist_of tobs') tobs'' \\<and>\n            ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n            X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n        ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n       (case ob of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          \\<exists>w.\n             w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n             (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n             value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n             P,llist_of\n                (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n             (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob]))\n                        w' \\<longrightarrow>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                 is_volatile P al \\<and>\n                 P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                 P,llist_of\n                    (obs @\n                     [ob]) \\<turnstile> w' \\<le>so length\n              obs \\<longrightarrow>\n                 w' = w)\n        | (t, NormalAction _) \\<Rightarrow> True\n        | (t, _) \\<Rightarrow> True)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>tobs' tobs''.\n                 lappend (llist_of tobs'''''') tobs'''' =\n                 lappend (llist_of tobs') tobs'' \\<and>\n                 ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n                 X (E @ (t, ob) # tobs') tobs'') \\<or>\n             ta_hb_consistent P (E @ [(t, ob)])\n              (lappend (llist_of tobs'''''') tobs'''');\n     tobs = LCons (t, ob) (lappend (llist_of tobs'''''') tobs'''');\n     tobs''''' = llist_of tobs''''''\\<rbrakk>\n    \\<Longrightarrow> case ob of\n                      NormalAction (ReadMem ad al v) \\<Rightarrow>\n                        \\<exists>w.\n                           w \\<in> write_actions\n                                    (llist_of (E @ [(t, ob)])) \\<and>\n                           (ad, al)\n                           \\<in> action_loc P (llist_of (E @ [(t, ob)]))\n                                  w \\<and>\n                           value_written P (llist_of (E @ [(t, ob)])) w\n                            (ad, al) =\n                           v \\<and>\n                           P,llist_of\n                              (E @\n                               [(t, ob)]) \\<turnstile> w \\<le>hb length\n                            E \\<and>\n                           (\\<forall>w'\\<in>write_actions\n       (llist_of (E @ [(t, ob)])).\n                               (ad, al)\n                               \\<in> action_loc P (llist_of (E @ [(t, ob)]))\nw' \\<longrightarrow>\n                               (P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>hb w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>hb length E \\<longrightarrow>\n                                w' = w) \\<and>\n                               (is_volatile P al \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>so w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n                                w' = w))\n                      | NormalAction _ \\<Rightarrow> True\n                      | _ \\<Rightarrow> True", "using sc_obs'''[unfolded tobs''']"], ["proof (prove)\nusing this:\n  ta_hb_consistent P E (LCons (t, ob) tobs''''')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>tobs' tobs''.\n                 lappend (llist_of tobs'''''') tobs'''' =\n                 lappend (llist_of tobs') tobs'' \\<and>\n                 ta_hb_consistent P (E @ [(t, ob)]) (llist_of tobs') \\<and>\n                 X (E @ (t, ob) # tobs') tobs'') \\<or>\n             ta_hb_consistent P (E @ [(t, ob)])\n              (lappend (llist_of tobs'''''') tobs'''');\n     tobs = LCons (t, ob) (lappend (llist_of tobs'''''') tobs'''');\n     tobs''''' = llist_of tobs''''''\\<rbrakk>\n    \\<Longrightarrow> case ob of\n                      NormalAction (ReadMem ad al v) \\<Rightarrow>\n                        \\<exists>w.\n                           w \\<in> write_actions\n                                    (llist_of (E @ [(t, ob)])) \\<and>\n                           (ad, al)\n                           \\<in> action_loc P (llist_of (E @ [(t, ob)]))\n                                  w \\<and>\n                           value_written P (llist_of (E @ [(t, ob)])) w\n                            (ad, al) =\n                           v \\<and>\n                           P,llist_of\n                              (E @\n                               [(t, ob)]) \\<turnstile> w \\<le>hb length\n                            E \\<and>\n                           (\\<forall>w'\\<in>write_actions\n       (llist_of (E @ [(t, ob)])).\n                               (ad, al)\n                               \\<in> action_loc P (llist_of (E @ [(t, ob)]))\nw' \\<longrightarrow>\n                               (P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>hb w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>hb length E \\<longrightarrow>\n                                w' = w) \\<and>\n                               (is_volatile P al \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w \\<le>so w' \\<and>\n                                P,llist_of\n                                   (E @\n                                    [(t,\nob)]) \\<turnstile> w' \\<le>so length E \\<longrightarrow>\n                                w' = w))\n                      | NormalAction _ \\<Rightarrow> True\n                      | _ \\<Rightarrow> True", "by cases simp"], ["proof (state)\nthis:\n  \\<exists>obs ob obs'.\n     E = obs \\<and>\n     tobs = LCons ob obs' \\<and>\n     ((\\<exists>tobs' tobs''.\n          obs' = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n          X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n      ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n     (case ob of\n      (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n        \\<exists>w.\n           w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n           (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n           value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n           P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n           (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n               (ad, al)\n               \\<in> action_loc P (llist_of (obs @ [ob]))\n                      w' \\<longrightarrow>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n               P,llist_of\n                  (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n               is_volatile P al \\<and>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n               P,llist_of\n                  (obs @\n                   [ob]) \\<turnstile> w' \\<le>so length\n            obs \\<longrightarrow>\n               w' = w)\n      | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>obs ob obs'.\n     E = obs \\<and>\n     tobs = LCons ob obs' \\<and>\n     ((\\<exists>tobs' tobs''.\n          obs' = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n          X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n      ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n     (case ob of\n      (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n        \\<exists>w.\n           w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n           (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n           value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n           P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n           (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n               (ad, al)\n               \\<in> action_loc P (llist_of (obs @ [ob]))\n                      w' \\<longrightarrow>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n               P,llist_of\n                  (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n               is_volatile P al \\<and>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n               P,llist_of\n                  (obs @\n                   [ob]) \\<turnstile> w' \\<le>so length\n            obs \\<longrightarrow>\n               w' = w)\n      | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. \\<exists>tobs' tobs''a.\n       tobs'' = lappend tobs' tobs''a \\<and>\n       tobs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E tobs' \\<and>\n       (lfinite tobs' \\<longrightarrow>\n        X (E @ list_of tobs') tobs''a \\<or>\n        ta_hb_consistent P (E @ list_of tobs') tobs''a) \\<Longrightarrow>\n    (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>obs ob obs'.\n     E = obs \\<and>\n     tobs = LCons ob obs' \\<and>\n     ((\\<exists>tobs' tobs''.\n          obs' = lappend (llist_of tobs') tobs'' \\<and>\n          ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n          X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n      ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n     (case ob of\n      (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n        \\<exists>w.\n           w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n           (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n           value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n           P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n           (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n               (ad, al)\n               \\<in> action_loc P (llist_of (obs @ [ob]))\n                      w' \\<longrightarrow>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n               P,llist_of\n                  (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n               is_volatile P al \\<and>\n               P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n               P,llist_of\n                  (obs @\n                   [ob]) \\<turnstile> w' \\<le>so length\n            obs \\<longrightarrow>\n               w' = w)\n      | (t, NormalAction _) \\<Rightarrow> True | (t, _) \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", ".."], ["proof (state)\nthis:\n  (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E = obs \\<and>\n      tobs = LCons ob obs' \\<and>\n      ((\\<exists>tobs' tobs''.\n           obs' = lappend (llist_of tobs') tobs'' \\<and>\n           ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n           X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E = obs \\<and>\n      tobs = LCons ob obs' \\<and>\n      ((\\<exists>tobs' tobs''.\n           obs' = lappend (llist_of tobs') tobs'' \\<and>\n           ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n           X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "case (Cons tob tobs''')"], ["proof (state)\nthis:\n  tobs' = tob # tobs'''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tobs' = a # list \\<Longrightarrow>\n       (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E = obs \\<and>\n           tobs = LCons ob obs' \\<and>\n           ((\\<exists>tobs' tobs''.\n                obs' = lappend (llist_of tobs') tobs'' \\<and>\n                ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n                X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "with X tobs hb_tobs'"], ["proof (chain)\npicking this:\n  X (E @ tobs') tobs''\n  tobs = lappend (llist_of tobs') tobs''\n  ta_hb_consistent P E (llist_of tobs')\n  tobs' = tob # tobs'''", "show ?thesis"], ["proof (prove)\nusing this:\n  X (E @ tobs') tobs''\n  tobs = lappend (llist_of tobs') tobs''\n  ta_hb_consistent P E (llist_of tobs')\n  tobs' = tob # tobs'''\n\ngoal (1 subgoal):\n 1. (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E = obs \\<and>\n        tobs = LCons ob obs' \\<and>\n        ((\\<exists>tobs' tobs''.\n             obs' = lappend (llist_of tobs') tobs'' \\<and>\n             ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n             X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "by(auto simp add: ta_hb_consistent_LCons)"], ["proof (state)\nthis:\n  (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E = obs \\<and>\n      tobs = LCons ob obs' \\<and>\n      ((\\<exists>tobs' tobs''.\n           obs' = lappend (llist_of tobs') tobs'' \\<and>\n           ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n           X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>obs. E = obs \\<and> tobs = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E = obs \\<and>\n      tobs = LCons ob obs' \\<and>\n      ((\\<exists>tobs' tobs''.\n           obs' = lappend (llist_of tobs') tobs'' \\<and>\n           ta_hb_consistent P (obs @ [ob]) (llist_of tobs') \\<and>\n           X ((obs @ [ob]) @ tobs') tobs'') \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ta_hb_consistent P E tobs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ta_hb_consistent_coinduct_append_wf\n  [consumes 2, case_names ta_hb_consistent, case_conclusion ta_hb_consistent LNil lappend]:\n  assumes major: \"X E obs a\"\n  and wf: \"wf R\"\n  and step: \"\\<And>E obs a. X E obs a\n    \\<Longrightarrow> obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'. obs = lappend obs' obs'' \\<and> ta_hb_consistent P E obs' \\<and> (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n                        (lfinite obs' \\<longrightarrow> X (E @ list_of obs') obs'' a' \\<or>\n                                          ta_hb_consistent P (E @ list_of obs') obs''))\"\n    (is \"\\<And>E obs a. _ \\<Longrightarrow> _ \\<or> ?step E obs a\")\n  shows \"ta_hb_consistent P E obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "fix E obs a"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "assume \"X E obs a\""], ["proof (state)\nthis:\n  X E obs a\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "with wf"], ["proof (chain)\npicking this:\n  wf R\n  X E obs a", "have \"obs = LNil \\<or> (\\<exists>obs' obs''. obs = lappend obs' obs'' \\<and> obs' \\<noteq> LNil \\<and> ta_hb_consistent P E obs' \\<and>\n          (lfinite obs' \\<longrightarrow> (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or> \n                            ta_hb_consistent P (E @ list_of obs') obs''))\"\n      (is \"_ \\<or> ?step_concl E obs\")"], ["proof (prove)\nusing this:\n  wf R\n  X E obs a\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof(induction a arbitrary: E obs rule: wf_induct[consumes 1, case_names wf])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x E obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           ta_hb_consistent P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (x @ list_of obs') obs'') \\<or>\n                            ta_hb_consistent P (x @ list_of obs') obs'')));\n        X E obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             ta_hb_consistent P E obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (E @ list_of obs') obs'') \\<or>\n                              ta_hb_consistent P (E @ list_of obs') obs''))", "case (wf a)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, a) \\<in> R \\<longrightarrow>\n     (\\<forall>x xa.\n         X x xa y \\<longrightarrow>\n         xa = LNil \\<or>\n         (\\<exists>obs' obs''.\n             xa = lappend obs' obs'' \\<and>\n             obs' \\<noteq> LNil \\<and>\n             ta_hb_consistent P x obs' \\<and>\n             (lfinite obs' \\<longrightarrow>\n              (\\<exists>a. X (x @ list_of obs') obs'' a) \\<or>\n              ta_hb_consistent P (x @ list_of obs') obs'')))\n  X E obs a\n\ngoal (1 subgoal):\n 1. \\<And>x E obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           ta_hb_consistent P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (x @ list_of obs') obs'') \\<or>\n                            ta_hb_consistent P (x @ list_of obs') obs'')));\n        X E obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             ta_hb_consistent P E obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (E @ list_of obs') obs'') \\<or>\n                              ta_hb_consistent P (E @ list_of obs') obs''))", "note IH = wf.IH[rule_format]"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, a) \\<in> R; X ?x ?xa ?y\\<rbrakk>\n  \\<Longrightarrow> ?xa = LNil \\<or>\n                    (\\<exists>obs' obs''.\n                        ?xa = lappend obs' obs'' \\<and>\n                        obs' \\<noteq> LNil \\<and>\n                        ta_hb_consistent P ?x obs' \\<and>\n                        (lfinite obs' \\<longrightarrow>\n                         Ex (X (?x @ list_of obs') obs'') \\<or>\n                         ta_hb_consistent P (?x @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. \\<And>x E obs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> R \\<longrightarrow>\n                   (\\<forall>x xa.\n                       X x xa y \\<longrightarrow>\n                       xa = LNil \\<or>\n                       (\\<exists>obs' obs''.\n                           xa = lappend obs' obs'' \\<and>\n                           obs' \\<noteq> LNil \\<and>\n                           ta_hb_consistent P x obs' \\<and>\n                           (lfinite obs' \\<longrightarrow>\n                            Ex (X (x @ list_of obs') obs'') \\<or>\n                            ta_hb_consistent P (x @ list_of obs') obs'')));\n        X E obs x\\<rbrakk>\n       \\<Longrightarrow> obs = LNil \\<or>\n                         (\\<exists>obs' obs''.\n                             obs = lappend obs' obs'' \\<and>\n                             obs' \\<noteq> LNil \\<and>\n                             ta_hb_consistent P E obs' \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              Ex (X (E @ list_of obs') obs'') \\<or>\n                              ta_hb_consistent P (E @ list_of obs') obs''))", "from step[OF \\<open>X E obs a\\<close>]"], ["proof (chain)\npicking this:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (E @ list_of obs') obs'' a' \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))", "show ?case"], ["proof (prove)\nusing this:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       X (E @ list_of obs') obs'' a' \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"obs = LNil\""], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"?step E obs a\""], ["proof (state)\nthis:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (E @ list_of obs') obs'' a' \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "then"], ["proof (chain)\npicking this:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (E @ list_of obs') obs'' a' \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')", "obtain obs' obs'' a'\n          where obs: \"obs = lappend obs' obs''\"\n          and sc_obs': \"ta_hb_consistent P E obs'\"\n          and decr: \"obs' = LNil \\<Longrightarrow> (a', a) \\<in> R\"\n          and fin: \"lfinite obs' \\<Longrightarrow> \n                    X (E @ list_of obs') obs'' a' \\<or>\n                    ta_hb_consistent P (E @ list_of obs') obs''\""], ["proof (prove)\nusing this:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      X (E @ list_of obs') obs'' a' \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. (\\<And>obs' obs'' a'.\n        \\<lbrakk>obs = lappend obs' obs''; ta_hb_consistent P E obs';\n         obs' = LNil \\<Longrightarrow> (a', a) \\<in> R;\n         lfinite obs' \\<Longrightarrow>\n         X (E @ list_of obs') obs'' a' \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs = lappend obs' obs''\n  ta_hb_consistent P E obs'\n  obs' = LNil \\<Longrightarrow> (a', a) \\<in> R\n  lfinite obs' \\<Longrightarrow>\n  X (E @ list_of obs') obs'' a' \\<or>\n  ta_hb_consistent P (E @ list_of obs') obs''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow> (a', a) \\<in> R) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        X (E @ list_of obs') obs'' a' \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'') \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof(cases \"obs' = LNil\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case True"], ["proof (state)\nthis:\n  obs' = LNil\n\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence \"lfinite obs'\""], ["proof (prove)\nusing this:\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. lfinite obs'", "by simp"], ["proof (state)\nthis:\n  lfinite obs'\n\ngoal (2 subgoals):\n 1. obs' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from fin[OF this]"], ["proof (chain)\npicking this:\n  X (E @ list_of obs') obs'' a' \\<or>\n  ta_hb_consistent P (E @ list_of obs') obs''", "show ?thesis"], ["proof (prove)\nusing this:\n  X (E @ list_of obs') obs'' a' \\<or>\n  ta_hb_consistent P (E @ list_of obs') obs''\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X (E @ list_of obs') obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume X: \"X (E @ list_of obs') obs'' a'\""], ["proof (state)\nthis:\n  X (E @ list_of obs') obs'' a'\n\ngoal (2 subgoals):\n 1. X (E @ list_of obs') obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from True"], ["proof (chain)\npicking this:\n  obs' = LNil", "have \"(a', a) \\<in> R\""], ["proof (prove)\nusing this:\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. (a', a) \\<in> R", "by(rule decr)"], ["proof (state)\nthis:\n  (a', a) \\<in> R\n\ngoal (2 subgoals):\n 1. X (E @ list_of obs') obs'' a' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from IH[OF this X]"], ["proof (chain)\npicking this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs'a obs''a.\n      obs'' = lappend obs'a obs''a \\<and>\n      obs'a \\<noteq> LNil \\<and>\n      ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n      (lfinite obs'a \\<longrightarrow>\n       Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n       ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a) obs''a))", "show ?thesis"], ["proof (prove)\nusing this:\n  obs'' = LNil \\<or>\n  (\\<exists>obs'a obs''a.\n      obs'' = lappend obs'a obs''a \\<and>\n      obs'a \\<noteq> LNil \\<and>\n      ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n      (lfinite obs'a \\<longrightarrow>\n       Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n       ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a) obs''a))\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"obs'' = LNil\""], ["proof (state)\nthis:\n  obs'' = LNil\n\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "with True obs"], ["proof (chain)\npicking this:\n  obs' = LNil\n  obs = lappend obs' obs''\n  obs'' = LNil", "have \"obs = LNil\""], ["proof (prove)\nusing this:\n  obs' = LNil\n  obs = lappend obs' obs''\n  obs'' = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil", "by simp"], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. obs'' = LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"?step_concl (E @ list_of obs') obs''\""], ["proof (state)\nthis:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a. X ((E @ list_of obs') @ list_of obs'a) obs''a a) \\<or>\n      ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a) obs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence \"?step_concl E obs\""], ["proof (prove)\nusing this:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a. X ((E @ list_of obs') @ list_of obs'a) obs''a a) \\<or>\n      ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a) obs''a)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''.\n       obs = lappend obs' obs'' \\<and>\n       obs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'')", "using True obs"], ["proof (prove)\nusing this:\n  \\<exists>obs'a obs''a.\n     obs'' = lappend obs'a obs''a \\<and>\n     obs'a \\<noteq> LNil \\<and>\n     ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n     (lfinite obs'a \\<longrightarrow>\n      (\\<exists>a. X ((E @ list_of obs') @ list_of obs'a) obs''a a) \\<or>\n      ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a) obs''a)\n  obs' = LNil\n  obs = lappend obs' obs''\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs''.\n       obs = lappend obs' obs'' \\<and>\n       obs' \\<noteq> LNil \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'')", "by simp"], ["proof (state)\nthis:\n  \\<exists>obs' obs''.\n     obs = lappend obs' obs'' \\<and>\n     obs' \\<noteq> LNil \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. \\<exists>obs'a obs''a.\n       obs'' = lappend obs'a obs''a \\<and>\n       obs'a \\<noteq> LNil \\<and>\n       ta_hb_consistent P (E @ list_of obs') obs'a \\<and>\n       (lfinite obs'a \\<longrightarrow>\n        Ex (X ((E @ list_of obs') @ list_of obs'a) obs''a) \\<or>\n        ta_hb_consistent P ((E @ list_of obs') @ list_of obs'a)\n         obs''a) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>obs' obs''.\n     obs = lappend obs' obs'' \\<and>\n     obs' \\<noteq> LNil \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"ta_hb_consistent P (E @ list_of obs') obs''\""], ["proof (state)\nthis:\n  ta_hb_consistent P (E @ list_of obs') obs''\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of obs') obs'' \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ list_of obs') obs''\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "using obs True"], ["proof (prove)\nusing this:\n  ta_hb_consistent P (E @ list_of obs') obs''\n  obs = lappend obs' obs''\n  obs' = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "by cases (auto 4 3 cong: action.case_cong obs_event.case_cong intro: exI[where x=\"LCons x LNil\" for x] simp add: ta_hb_consistent_LCons)"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case False"], ["proof (state)\nthis:\n  obs' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. obs' \\<noteq> LNil \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "with obs sc_obs' fin"], ["proof (chain)\npicking this:\n  obs = lappend obs' obs''\n  ta_hb_consistent P E obs'\n  lfinite obs' \\<Longrightarrow>\n  X (E @ list_of obs') obs'' a' \\<or>\n  ta_hb_consistent P (E @ list_of obs') obs''\n  obs' \\<noteq> LNil", "show ?thesis"], ["proof (prove)\nusing this:\n  obs = lappend obs' obs''\n  ta_hb_consistent P E obs'\n  lfinite obs' \\<Longrightarrow>\n  X (E @ list_of obs') obs'' a' \\<or>\n  ta_hb_consistent P (E @ list_of obs') obs''\n  obs' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs''.\n        obs = lappend obs' obs'' \\<and>\n        obs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "by auto"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs''.\n      obs = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (E @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "}"], ["proof (state)\nthis:\n  X ?Ea2 ?obsa2 ?aa2 \\<Longrightarrow>\n  ?obsa2 = LNil \\<or>\n  (\\<exists>obs' obs''.\n      ?obsa2 = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P ?Ea2 obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (?Ea2 @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (?Ea2 @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "note step' = this"], ["proof (state)\nthis:\n  X ?Ea2 ?obsa2 ?aa2 \\<Longrightarrow>\n  ?obsa2 = LNil \\<or>\n  (\\<exists>obs' obs''.\n      ?obsa2 = lappend obs' obs'' \\<and>\n      obs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P ?Ea2 obs' \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>a. X (?Ea2 @ list_of obs') obs'' a) \\<or>\n       ta_hb_consistent P (?Ea2 @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "from major"], ["proof (chain)\npicking this:\n  X E obs a", "show ?thesis"], ["proof (prove)\nusing this:\n  X E obs a\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "proof(coinduction arbitrary: E obs a rule: ta_hb_consistent_coinduct_append)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ea obs a.\n       X Ea obs a \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>tobs' tobs''.\n           obs = lappend tobs' tobs'' \\<and>\n           tobs' \\<noteq> LNil \\<and>\n           ta_hb_consistent P Ea tobs' \\<and>\n           (lfinite tobs' \\<longrightarrow>\n            (\\<exists>E obs a.\n                Ea @ list_of tobs' = E \\<and>\n                tobs'' = obs \\<and> X E obs a) \\<or>\n            ta_hb_consistent P (Ea @ list_of tobs') tobs''))", "case (ta_hb_consistent E obs)"], ["proof (state)\nthis:\n  X E obs a\n\ngoal (1 subgoal):\n 1. \\<And>Ea obs a.\n       X Ea obs a \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>tobs' tobs''.\n           obs = lappend tobs' tobs'' \\<and>\n           tobs' \\<noteq> LNil \\<and>\n           ta_hb_consistent P Ea tobs' \\<and>\n           (lfinite tobs' \\<longrightarrow>\n            (\\<exists>E obs a.\n                Ea @ list_of tobs' = E \\<and>\n                tobs'' = obs \\<and> X E obs a) \\<or>\n            ta_hb_consistent P (Ea @ list_of tobs') tobs''))", "thus ?case"], ["proof (prove)\nusing this:\n  X E obs a\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>tobs' tobs''.\n        obs = lappend tobs' tobs'' \\<and>\n        tobs' \\<noteq> LNil \\<and>\n        ta_hb_consistent P E tobs' \\<and>\n        (lfinite tobs' \\<longrightarrow>\n         (\\<exists>E obs a.\n             E @ list_of tobs' = E \\<and>\n             tobs'' = obs \\<and> X E obs a) \\<or>\n         ta_hb_consistent P (E @ list_of tobs') tobs''))", "by simp(rule step')"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>tobs' tobs''.\n      obs = lappend tobs' tobs'' \\<and>\n      tobs' \\<noteq> LNil \\<and>\n      ta_hb_consistent P E tobs' \\<and>\n      (lfinite tobs' \\<longrightarrow>\n       (\\<exists>E obs a.\n           E @ list_of tobs' = E \\<and> tobs'' = obs \\<and> X E obs a) \\<or>\n       ta_hb_consistent P (E @ list_of tobs') tobs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ta_hb_consistent P E obs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ta_hb_consistent_lappendD2:\n  assumes hb: \"ta_hb_consistent P E (lappend E' E'')\"\n  and fin: \"lfinite E'\"\n  shows \"ta_hb_consistent P (E @ list_of E') E''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of E') E''", "using fin hb"], ["proof (prove)\nusing this:\n  lfinite E'\n  ta_hb_consistent P E (lappend E' E'')\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E @ list_of E') E''", "by(induct arbitrary: E)(fastforce simp add: ta_hb_consistent_LCons)+"], ["", "lemma ta_hb_consistent_Read_hb:\n  fixes E E' defines \"E'' \\<equiv> lappend (llist_of E') E\"\n  assumes hb: \"ta_hb_consistent P E' E\"\n  and tsa: \"thread_start_actions_ok E''\"\n  and E'': \"is_write_seen P (llist_of E') ws'\"\n  and new_actions_for_fun: \n  \"\\<And>w w' adal. \\<lbrakk> w \\<in> new_actions_for P E'' adal; \n                 w' \\<in> new_actions_for P E'' adal \\<rbrakk> \\<Longrightarrow> w = w'\"\n  shows \"\\<exists>ws. P \\<turnstile> (E'', ws) \\<surd> \\<and> (\\<forall>n. n \\<in> read_actions E'' \\<longrightarrow> length E' \\<le> n \\<longrightarrow> P,E'' \\<turnstile> ws n \\<le>hb n) \\<and> \n              (\\<forall>n. n < length E' \\<longrightarrow> ws n = ws' n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       P \\<turnstile> (E'', ws) \\<surd> \\<and>\n       (\\<forall>n.\n           n \\<in> read_actions E'' \\<longrightarrow>\n           length E' \\<le> n \\<longrightarrow>\n           P,E'' \\<turnstile> ws n \\<le>hb n) \\<and>\n       (\\<forall>n<length E'. ws n = ws' n)", "proof(intro exI conjI strip)"], ["proof (state)\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "let ?P = \n    \"\\<lambda>n w. case lnth E'' n of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow> \n          (w \\<in> write_actions E'' \\<and> (ad, al) \\<in> action_loc P E'' w \\<and> value_written P E'' w (ad, al) = v \\<and>\n          P,E'' \\<turnstile> w \\<le>hb n \\<and> \n          (\\<forall>w'\\<in>write_actions E''. (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow> \n              (P,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb n \\<or> \n               is_volatile P al \\<and> P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so n) \\<longrightarrow> \n              w' = w))\""], ["proof (state)\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "let ?ws = \"\\<lambda>n. if n < length E' then ws' n else Eps (?P n)\""], ["proof (state)\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "have \"\\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length E' \\<Longrightarrow>\n       (if n < length E' then ws' n\n        else SOME w.\n                case lnth E'' n of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                      w' = w)) =\n       ws' n", "by simp"], ["proof (state)\nthis:\n  ?n < length E' \\<Longrightarrow>\n  (if ?n < length E' then ws' ?n\n   else SOME w.\n           case lnth E'' ?n of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb ?n \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb ?n \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so ?n \\<longrightarrow>\n                 w' = w)) =\n  ws' ?n\n\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "moreover"], ["proof (state)\nthis:\n  ?n < length E' \\<Longrightarrow>\n  (if ?n < length E' then ws' ?n\n   else SOME w.\n           case lnth E'' ?n of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb ?n \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb ?n \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so ?n \\<longrightarrow>\n                 w' = w)) =\n  ws' ?n\n\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "have \"P \\<turnstile> (E'', ?ws) \\<surd> \\<and> \n        (\\<forall>n ad al v. n \\<in> read_actions E'' \\<longrightarrow> length E' \\<le> n \\<longrightarrow> action_obs E'' n = NormalAction (ReadMem ad al v) \\<longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E'',\n                    \\<lambda>n.\n                       if n < length E' then ws' n\n                       else SOME w.\n                               case lnth E'' n of\n                               (t, NormalAction\n                                    (ReadMem ad al v)) \\<Rightarrow>\n                                 w \\<in> write_actions E'' \\<and>\n                                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                                 value_written P E'' w (ad, al) = v \\<and>\n                                 P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                                 (\\<forall>w'\\<in>write_actions E''.\n                                     (ad, al)\n                                     \\<in> action_loc P E''\n      w' \\<longrightarrow>\n                                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                                     is_volatile P al \\<and>\n                                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                                     w' = w)) \\<surd> \\<and>\n    (\\<forall>n ad al v.\n        n \\<in> read_actions E'' \\<longrightarrow>\n        length E' \\<le> n \\<longrightarrow>\n        action_obs E'' n = NormalAction (ReadMem ad al v) \\<longrightarrow>\n        P,E'' \\<turnstile> if n < length E' then ws' n\n                           else SOME w.\n                                   case lnth E'' n of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n   w' = w) \\<le>hb n)", "proof(intro conjI wf_execI strip is_write_seenI)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n                         \\<in> write_actions E''\n 2. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (ad, al)\n                         \\<in> action_loc P E''\n                                (if a < length E' then ws' a\n                                 else SOME w.\n   case lnth E'' a of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n         w' = w))\n 3. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> value_written P E''\n                          (if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w))\n                          (ad, al) =\n                         v\n 4. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>hb (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 5. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        is_volatile P al\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>so (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 6. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>hb a';\n        P,E'' \\<turnstile> a' \\<le>hb a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 7. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        is_volatile P al;\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>so a';\n        P,E'' \\<turnstile> a' \\<le>so a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 8. thread_start_actions_ok E''\n 9. \\<And>n ad al v.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n;\n        action_obs E'' n = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n      else SOME w.\n              case lnth E'' n of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                    w' = w) \\<le>hb n", "fix a' ad al v"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n                         \\<in> write_actions E''\n 2. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (ad, al)\n                         \\<in> action_loc P E''\n                                (if a < length E' then ws' a\n                                 else SOME w.\n   case lnth E'' a of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n         w' = w))\n 3. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> value_written P E''\n                          (if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w))\n                          (ad, al) =\n                         v\n 4. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>hb (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 5. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        is_volatile P al\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>so (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 6. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>hb a';\n        P,E'' \\<turnstile> a' \\<le>hb a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 7. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        is_volatile P al;\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>so a';\n        P,E'' \\<turnstile> a' \\<le>so a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 8. thread_start_actions_ok E''\n 9. \\<And>n ad al v.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n;\n        action_obs E'' n = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n      else SOME w.\n              case lnth E'' n of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                    w' = w) \\<le>hb n", "assume read: \"a' \\<in> read_actions E''\" \n      and aobs: \"action_obs E'' a' = NormalAction (ReadMem ad al v)\""], ["proof (state)\nthis:\n  a' \\<in> read_actions E''\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n\ngoal (9 subgoals):\n 1. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n                         \\<in> write_actions E''\n 2. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (ad, al)\n                         \\<in> action_loc P E''\n                                (if a < length E' then ws' a\n                                 else SOME w.\n   case lnth E'' a of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n         w' = w))\n 3. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> value_written P E''\n                          (if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w))\n                          (ad, al) =\n                         v\n 4. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>hb (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 5. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        is_volatile P al\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>so (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 6. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>hb a';\n        P,E'' \\<turnstile> a' \\<le>hb a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 7. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        is_volatile P al;\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>so a';\n        P,E'' \\<turnstile> a' \\<le>so a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 8. thread_start_actions_ok E''\n 9. \\<And>n ad al v.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n;\n        action_obs E'' n = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n      else SOME w.\n              case lnth E'' n of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                    w' = w) \\<le>hb n", "then"], ["proof (chain)\npicking this:\n  a' \\<in> read_actions E''\n  action_obs E'' a' = NormalAction (ReadMem ad al v)", "obtain t where a': \"enat a' < llength E''\"\n      and lnth'': \"lnth E'' a' = (t, NormalAction (ReadMem ad al v))\""], ["proof (prove)\nusing this:\n  a' \\<in> read_actions E''\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>enat a' < llength E'';\n         lnth E'' a' = (t, NormalAction (ReadMem ad al v))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases)(cases \"lnth E'' a'\", clarsimp simp add: actions_def action_obs_def)"], ["proof (state)\nthis:\n  enat a' < llength E''\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n\ngoal (9 subgoals):\n 1. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n                         \\<in> write_actions E''\n 2. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (ad, al)\n                         \\<in> action_loc P E''\n                                (if a < length E' then ws' a\n                                 else SOME w.\n   case lnth E'' a of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n         w' = w))\n 3. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> value_written P E''\n                          (if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w))\n                          (ad, al) =\n                         v\n 4. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>hb (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 5. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        is_volatile P al\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>so (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 6. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>hb a';\n        P,E'' \\<turnstile> a' \\<le>hb a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 7. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        is_volatile P al;\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>so a';\n        P,E'' \\<turnstile> a' \\<le>so a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 8. thread_start_actions_ok E''\n 9. \\<And>n ad al v.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n;\n        action_obs E'' n = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n      else SOME w.\n              case lnth E'' n of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                    w' = w) \\<le>hb n", "have \"?ws a' \\<in> write_actions E'' \\<and> \n      (ad, al) \\<in> action_loc P E'' (?ws a') \\<and> \n      value_written P E'' (?ws a') (ad, al) = v \\<and>\n      (length E' \\<le> a' \\<longrightarrow> P,E'' \\<turnstile> ?ws a' \\<le>hb a') \\<and>\n      \\<not> P,E'' \\<turnstile> a' \\<le>hb ?ws a' \\<and>\n      (is_volatile P al \\<longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so ?ws a') \\<and>\n      (\\<forall>a''. a'' \\<in> write_actions E'' \\<longrightarrow> (ad, al) \\<in> action_loc P E'' a'' \\<longrightarrow>\n             (P,E'' \\<turnstile> ?ws a' \\<le>hb a'' \\<and> P,E'' \\<turnstile> a'' \\<le>hb a' \\<or> is_volatile P al \\<and> P,E'' \\<turnstile> ?ws a' \\<le>so a'' \\<and> P,E'' \\<turnstile> a'' \\<le>so a')\n             \\<longrightarrow> a'' = ?ws a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E'' \\<and>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w)) \\<and>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v \\<and>\n    (length E' \\<le> a' \\<longrightarrow>\n     P,E'' \\<turnstile> if a' < length E' then ws' a'\n                        else SOME w.\n                                case lnth E'' a' of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and>\nP,E'' \\<turnstile> w' \\<le>hb a' \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\nw' = w) \\<le>hb a') \\<and>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)) \\<and>\n    (is_volatile P al \\<longrightarrow>\n     \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))) \\<and>\n    (\\<forall>a''.\n        a'' \\<in> write_actions E'' \\<longrightarrow>\n        (ad, al) \\<in> action_loc P E'' a'' \\<longrightarrow>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a' \\<longrightarrow>\n        a'' =\n        (if a' < length E' then ws' a'\n         else SOME w.\n                 case lnth E'' a' of\n                 (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                   w \\<in> write_actions E'' \\<and>\n                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                   value_written P E'' w (ad, al) = v \\<and>\n                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                   (\\<forall>w'\\<in>write_actions E''.\n                       (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                       P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                       P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                       is_volatile P al \\<and>\n                       P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                       P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                       w' = w)))", "proof(cases \"a' < length E'\", safe del: notI disjE conjE)"], ["proof (state)\ngoal (14 subgoals):\n 1. a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 8. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 9. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 10. \\<not> a' < length E' \\<Longrightarrow>\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v\nA total of 14 subgoals...", "assume a'_E': \"a' < length E'\""], ["proof (state)\nthis:\n  a' < length E'\n\ngoal (14 subgoals):\n 1. a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 8. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 9. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 10. \\<not> a' < length E' \\<Longrightarrow>\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v\nA total of 14 subgoals...", "with read aobs"], ["proof (chain)\npicking this:\n  a' \\<in> read_actions E''\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n  a' < length E'", "have a': \"a' \\<in> read_actions (llist_of E')\" \n        and aobs': \"action_obs (llist_of E') a' = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  a' \\<in> read_actions E''\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n  a' < length E'\n\ngoal (1 subgoal):\n 1. a' \\<in> read_actions (llist_of E') &&&\n    action_obs (llist_of E') a' = NormalAction (ReadMem ad al v)", "by(auto simp add: E''_def action_obs_def lnth_lappend1 actions_def elim: read_actions.cases intro: read_actions.intros)"], ["proof (state)\nthis:\n  a' \\<in> read_actions (llist_of E')\n  action_obs (llist_of E') a' = NormalAction (ReadMem ad al v)\n\ngoal (14 subgoals):\n 1. a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 8. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 9. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 10. \\<not> a' < length E' \\<Longrightarrow>\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v\nA total of 14 subgoals...", "have sim: \"ltake (enat (length E')) (llist_of E') [\\<approx>] ltake (enat (length E')) (lappend (llist_of E') E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltake (enat (length E'))\n     (llist_of\n       E') [\\<approx>] ltake (enat (length E')) (lappend (llist_of E') E)", "by(rule eq_into_sim_actions)(simp add: ltake_all ltake_lappend1)"], ["proof (state)\nthis:\n  ltake (enat (length E'))\n   (llist_of\n     E') [\\<approx>] ltake (enat (length E')) (lappend (llist_of E') E)\n\ngoal (14 subgoals):\n 1. a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 8. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 9. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 10. \\<not> a' < length E' \\<Longrightarrow>\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v\nA total of 14 subgoals...", "from tsa"], ["proof (chain)\npicking this:\n  thread_start_actions_ok E''", "have tsa': \"thread_start_actions_ok (llist_of E')\""], ["proof (prove)\nusing this:\n  thread_start_actions_ok E''\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok (llist_of E')", "by(rule thread_start_actions_ok_prefix)(simp add: E''_def lprefix_lappend)"], ["proof (state)\nthis:\n  thread_start_actions_ok (llist_of E')\n\ngoal (14 subgoals):\n 1. a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 8. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 9. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 10. \\<not> a' < length E' \\<Longrightarrow>\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v\nA total of 14 subgoals...", "from is_write_seenD[OF E'' a' aobs'] a'_E'"], ["proof (chain)\npicking this:\n  ws' a' \\<in> write_actions (llist_of E') \\<and>\n  (ad, al) \\<in> action_loc P (llist_of E') (ws' a') \\<and>\n  value_written P (llist_of E') (ws' a') (ad, al) = v \\<and>\n  \\<not> P,llist_of E' \\<turnstile> a' \\<le>hb ws' a' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,llist_of E' \\<turnstile> a' \\<le>so ws' a') \\<and>\n  (\\<forall>a'a\\<in>write_actions (llist_of E').\n      (ad, al) \\<in> action_loc P (llist_of E') a'a \\<and>\n      (P,llist_of E' \\<turnstile> ws' a' \\<le>hb a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>hb a' \\<or>\n       is_volatile P al \\<and>\n       P,llist_of E' \\<turnstile> ws' a' \\<le>so a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>so a') \\<longrightarrow>\n      a'a = ws' a')\n  a' < length E'", "show \"?ws a' \\<in> write_actions E''\"\n        and \"(ad, al) \\<in> action_loc P E'' (?ws a')\"\n        and \"value_written P E'' (?ws a') (ad, al) = v\"\n        and \"\\<not> P,E'' \\<turnstile> a' \\<le>hb ?ws a'\"\n        and \"is_volatile P al \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so ?ws a'\""], ["proof (prove)\nusing this:\n  ws' a' \\<in> write_actions (llist_of E') \\<and>\n  (ad, al) \\<in> action_loc P (llist_of E') (ws' a') \\<and>\n  value_written P (llist_of E') (ws' a') (ad, al) = v \\<and>\n  \\<not> P,llist_of E' \\<turnstile> a' \\<le>hb ws' a' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,llist_of E' \\<turnstile> a' \\<le>so ws' a') \\<and>\n  (\\<forall>a'a\\<in>write_actions (llist_of E').\n      (ad, al) \\<in> action_loc P (llist_of E') a'a \\<and>\n      (P,llist_of E' \\<turnstile> ws' a' \\<le>hb a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>hb a' \\<or>\n       is_volatile P al \\<and>\n       P,llist_of E' \\<turnstile> ws' a' \\<le>so a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>so a') \\<longrightarrow>\n      a'a = ws' a')\n  a' < length E'\n\ngoal (1 subgoal):\n 1. ((if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     \\<in> write_actions E'' &&&\n     (ad, al)\n     \\<in> action_loc P E''\n            (if a' < length E' then ws' a'\n             else SOME w.\n                     case lnth E'' a' of\n                     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                       w \\<in> write_actions E'' \\<and>\n                       (ad, al) \\<in> action_loc P E'' w \\<and>\n                       value_written P E'' w (ad, al) = v \\<and>\n                       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                       (\\<forall>w'\\<in>write_actions E''.\n                           (ad, al)\n                           \\<in> action_loc P E'' w' \\<longrightarrow>\n                           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                           is_volatile P al \\<and>\n                           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                           w' = w))) &&&\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v &&&\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)) &&&\n    (is_volatile P al \\<Longrightarrow>\n     \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w)))", "by(auto elim!: write_actions.cases intro!: write_actions.intros simp add: E''_def lnth_lappend1 actions_def action_obs_def value_written_def enat_less_enat_plusI dest: happens_before_change_prefix[OF _ tsa' sim[symmetric]] sync_order_change_prefix[OF _ sim[symmetric]])"], ["proof (state)\nthis:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w))\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n  is_volatile P al \\<Longrightarrow>\n  \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n\ngoal (9 subgoals):\n 1. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 2. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 6. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 7. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 8. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 9. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "{"], ["proof (state)\nthis:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w))\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n  is_volatile P al \\<Longrightarrow>\n  \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n\ngoal (9 subgoals):\n 1. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 2. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 6. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 7. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 8. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 9. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "assume \"length E' \\<le> a'\""], ["proof (state)\nthis:\n  length E' \\<le> a'\n\ngoal (9 subgoals):\n 1. \\<lbrakk>a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 2. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 6. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 7. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 8. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 9. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "thus \"P,E'' \\<turnstile> ?ws a' \\<le>hb a'\""], ["proof (prove)\nusing this:\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> if a' < length E' then ws' a'\n                       else SOME w.\n                               case lnth E'' a' of\n                               (t, NormalAction\n                                    (ReadMem ad al v)) \\<Rightarrow>\n                                 w \\<in> write_actions E'' \\<and>\n                                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                                 value_written P E'' w (ad, al) = v \\<and>\n                                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                 (\\<forall>w'\\<in>write_actions E''.\n                                     (ad, al)\n                                     \\<in> action_loc P E''\n      w' \\<longrightarrow>\n                                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                     is_volatile P al \\<and>\n                                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                     w' = w) \\<le>hb a'", "using a'_E'"], ["proof (prove)\nusing this:\n  length E' \\<le> a'\n  a' < length E'\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> if a' < length E' then ws' a'\n                       else SOME w.\n                               case lnth E'' a' of\n                               (t, NormalAction\n                                    (ReadMem ad al v)) \\<Rightarrow>\n                                 w \\<in> write_actions E'' \\<and>\n                                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                                 value_written P E'' w (ad, al) = v \\<and>\n                                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                 (\\<forall>w'\\<in>write_actions E''.\n                                     (ad, al)\n                                     \\<in> action_loc P E''\n      w' \\<longrightarrow>\n                                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                     is_volatile P al \\<and>\n                                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                     w' = w) \\<le>hb a'", "by simp"], ["proof (state)\nthis:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n\ngoal (8 subgoals):\n 1. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 5. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 6. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 7. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 8. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "}"], ["proof (state)\nthis:\n  length E' \\<le> a' \\<Longrightarrow>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n\ngoal (8 subgoals):\n 1. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 5. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 6. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 7. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 8. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "{"], ["proof (state)\nthis:\n  length E' \\<le> a' \\<Longrightarrow>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n\ngoal (8 subgoals):\n 1. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 5. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 6. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 7. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 8. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "fix w"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 5. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 6. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 7. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 8. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "assume w: \"w \\<in> write_actions E''\" \"(ad, al) \\<in> action_loc P E'' w\" \n          and hbso: \"P,E'' \\<turnstile> ?ws a' \\<le>hb w \\<and> P,E'' \\<turnstile> w \\<le>hb a' \\<or> is_volatile P al \\<and> P,E'' \\<turnstile> ?ws a' \\<le>so w \\<and> P,E'' \\<turnstile> w \\<le>so a'\""], ["proof (state)\nthis:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n\ngoal (8 subgoals):\n 1. \\<And>a''.\n       \\<lbrakk>a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 4. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 5. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 6. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 7. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 8. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "show \"w = ?ws a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "proof(cases \"w < length E'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n 2. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "case True"], ["proof (state)\nthis:\n  w < length E'\n\ngoal (2 subgoals):\n 1. w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n 2. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "with is_write_seenD[OF E'' a' aobs'] a'_E' w hbso"], ["proof (chain)\npicking this:\n  ws' a' \\<in> write_actions (llist_of E') \\<and>\n  (ad, al) \\<in> action_loc P (llist_of E') (ws' a') \\<and>\n  value_written P (llist_of E') (ws' a') (ad, al) = v \\<and>\n  \\<not> P,llist_of E' \\<turnstile> a' \\<le>hb ws' a' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,llist_of E' \\<turnstile> a' \\<le>so ws' a') \\<and>\n  (\\<forall>a'a\\<in>write_actions (llist_of E').\n      (ad, al) \\<in> action_loc P (llist_of E') a'a \\<and>\n      (P,llist_of E' \\<turnstile> ws' a' \\<le>hb a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>hb a' \\<or>\n       is_volatile P al \\<and>\n       P,llist_of E' \\<turnstile> ws' a' \\<le>so a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>so a') \\<longrightarrow>\n      a'a = ws' a')\n  a' < length E'\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n  w < length E'", "show ?thesis"], ["proof (prove)\nusing this:\n  ws' a' \\<in> write_actions (llist_of E') \\<and>\n  (ad, al) \\<in> action_loc P (llist_of E') (ws' a') \\<and>\n  value_written P (llist_of E') (ws' a') (ad, al) = v \\<and>\n  \\<not> P,llist_of E' \\<turnstile> a' \\<le>hb ws' a' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,llist_of E' \\<turnstile> a' \\<le>so ws' a') \\<and>\n  (\\<forall>a'a\\<in>write_actions (llist_of E').\n      (ad, al) \\<in> action_loc P (llist_of E') a'a \\<and>\n      (P,llist_of E' \\<turnstile> ws' a' \\<le>hb a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>hb a' \\<or>\n       is_volatile P al \\<and>\n       P,llist_of E' \\<turnstile> ws' a' \\<le>so a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>so a') \\<longrightarrow>\n      a'a = ws' a')\n  a' < length E'\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n  w < length E'\n\ngoal (1 subgoal):\n 1. w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "by(auto 4 3 elim!: write_actions.cases intro!: write_actions.intros simp add: E''_def lnth_lappend1 actions_def action_obs_def value_written_def enat_less_enat_plusI dest: happens_before_change_prefix[OF _ tsa[unfolded E''_def] sim] happens_before_change_prefix[OF _ tsa' sim[symmetric]] sync_order_change_prefix[OF _ sim, simplified] sync_order_change_prefix[OF _ sim[symmetric], simplified] bspec[where x=w])"], ["proof (state)\nthis:\n  w =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "case False"], ["proof (state)\nthis:\n  \\<not> w < length E'\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "from hbso"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'", "have \"E'' \\<turnstile> w \\<le>a a'\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n\ngoal (1 subgoal):\n 1. E'' \\<turnstile> w \\<le>a a'", "by(auto intro: happens_before_into_action_order elim: sync_orderE)"], ["proof (state)\nthis:\n  E'' \\<turnstile> w \\<le>a a'\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "moreover"], ["proof (state)\nthis:\n  E'' \\<turnstile> w \\<le>a a'\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "from w(1) read"], ["proof (chain)\npicking this:\n  w \\<in> write_actions E''\n  a' \\<in> read_actions E''", "have \"w \\<noteq> a'\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions E''\n  a' \\<in> read_actions E''\n\ngoal (1 subgoal):\n 1. w \\<noteq> a'", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  w \\<noteq> a'\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "ultimately"], ["proof (chain)\npicking this:\n  E'' \\<turnstile> w \\<le>a a'\n  w \\<noteq> a'", "have new_w: \"is_new_action (action_obs E'' w)\""], ["proof (prove)\nusing this:\n  E'' \\<turnstile> w \\<le>a a'\n  w \\<noteq> a'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E'' w)", "using False aobs a'_E'"], ["proof (prove)\nusing this:\n  E'' \\<turnstile> w \\<le>a a'\n  w \\<noteq> a'\n  \\<not> w < length E'\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n  a' < length E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E'' w)", "by(cases rule: action_orderE) auto"], ["proof (state)\nthis:\n  is_new_action (action_obs E'' w)\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "moreover"], ["proof (state)\nthis:\n  is_new_action (action_obs E'' w)\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "from hbso a'_E'"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n  a' < length E'", "have \"E'' \\<turnstile> ws' a' \\<le>a w\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb w \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so w \\<and>\n  P,E'' \\<turnstile> w \\<le>so a'\n  a' < length E'\n\ngoal (1 subgoal):\n 1. E'' \\<turnstile> ws' a' \\<le>a w", "by(auto intro: happens_before_into_action_order elim: sync_orderE)"], ["proof (state)\nthis:\n  E'' \\<turnstile> ws' a' \\<le>a w\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "hence new_a': \"is_new_action (action_obs E'' (?ws a'))\""], ["proof (prove)\nusing this:\n  E'' \\<turnstile> ws' a' \\<le>a w\n\ngoal (1 subgoal):\n 1. is_new_action\n     (action_obs E''\n       (if a' < length E' then ws' a'\n        else SOME w.\n                case lnth E'' a' of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                      w' = w)))", "using new_w a'_E'"], ["proof (prove)\nusing this:\n  E'' \\<turnstile> ws' a' \\<le>a w\n  is_new_action (action_obs E'' w)\n  a' < length E'\n\ngoal (1 subgoal):\n 1. is_new_action\n     (action_obs E''\n       (if a' < length E' then ws' a'\n        else SOME w.\n                case lnth E'' a' of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                      w' = w)))", "by(cases rule: action_orderE) auto"], ["proof (state)\nthis:\n  is_new_action\n   (action_obs E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "ultimately"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E'' w)\n  is_new_action\n   (action_obs E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))", "have \"w \\<in> new_actions_for P E'' (ad, al)\" \"?ws a' \\<in> new_actions_for P E'' (ad, al)\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E'' w)\n  is_new_action\n   (action_obs E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))\n\ngoal (1 subgoal):\n 1. w \\<in> new_actions_for P E'' (ad, al) &&&\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> new_actions_for P E'' (ad, al)", "using w is_write_seenD[OF E'' a' aobs'] a'_E'"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E'' w)\n  is_new_action\n   (action_obs E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  ws' a' \\<in> write_actions (llist_of E') \\<and>\n  (ad, al) \\<in> action_loc P (llist_of E') (ws' a') \\<and>\n  value_written P (llist_of E') (ws' a') (ad, al) = v \\<and>\n  \\<not> P,llist_of E' \\<turnstile> a' \\<le>hb ws' a' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,llist_of E' \\<turnstile> a' \\<le>so ws' a') \\<and>\n  (\\<forall>a'a\\<in>write_actions (llist_of E').\n      (ad, al) \\<in> action_loc P (llist_of E') a'a \\<and>\n      (P,llist_of E' \\<turnstile> ws' a' \\<le>hb a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>hb a' \\<or>\n       is_volatile P al \\<and>\n       P,llist_of E' \\<turnstile> ws' a' \\<le>so a'a \\<and>\n       P,llist_of E' \\<turnstile> a'a \\<le>so a') \\<longrightarrow>\n      a'a = ws' a')\n  a' < length E'\n\ngoal (1 subgoal):\n 1. w \\<in> new_actions_for P E'' (ad, al) &&&\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> new_actions_for P E'' (ad, al)", "by(auto simp add: new_actions_for_def actions_def action_obs_def lnth_lappend1 E''_def enat_less_enat_plusI elim!: write_actions.cases)"], ["proof (state)\nthis:\n  w \\<in> new_actions_for P E'' (ad, al)\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> new_actions_for P E'' (ad, al)\n\ngoal (1 subgoal):\n 1. \\<not> w < length E' \\<Longrightarrow>\n    w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "thus ?thesis"], ["proof (prove)\nusing this:\n  w \\<in> new_actions_for P E'' (ad, al)\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> new_actions_for P E'' (ad, al)\n\ngoal (1 subgoal):\n 1. w =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "by(rule new_actions_for_fun)"], ["proof (state)\nthis:\n  w =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?w2 \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' ?w2;\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb ?w2 \\<and>\n   P,E'' \\<turnstile> ?w2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so ?w2 \\<and>\n   P,E'' \\<turnstile> ?w2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w2 =\n                    (if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "assume \"\\<not> a' < length E'\""], ["proof (state)\nthis:\n  \\<not> a' < length E'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "hence a'_E': \"length E' \\<le> a'\""], ["proof (prove)\nusing this:\n  \\<not> a' < length E'\n\ngoal (1 subgoal):\n 1. length E' \\<le> a'", "by simp"], ["proof (state)\nthis:\n  length E' \\<le> a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "define a where \"a = a' - length E'\""], ["proof (state)\nthis:\n  a = a' - length E'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "with a' a'_E'"], ["proof (chain)\npicking this:\n  enat a' < llength E''\n  length E' \\<le> a'\n  a = a' - length E'", "have a: \"enat a < llength E\""], ["proof (prove)\nusing this:\n  enat a' < llength E''\n  length E' \\<le> a'\n  a = a' - length E'\n\ngoal (1 subgoal):\n 1. enat a < llength E", "by(simp add: E''_def) (metis enat_add_mono le_add_diff_inverse plus_enat_simps(1))"], ["proof (state)\nthis:\n  enat a < llength E\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from a_def aobs lnth'' a'_E'"], ["proof (chain)\npicking this:\n  a = a' - length E'\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'", "have aobs: \"action_obs E a = NormalAction (ReadMem ad al v)\"\n        and lnth: \"lnth E a = (t, NormalAction (ReadMem ad al v))\""], ["proof (prove)\nusing this:\n  a = a' - length E'\n  action_obs E'' a' = NormalAction (ReadMem ad al v)\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. action_obs E a = NormalAction (ReadMem ad al v) &&&\n    lnth E a = (t, NormalAction (ReadMem ad al v))", "by(simp_all add: E''_def lnth_lappend2 action_obs_def)"], ["proof (state)\nthis:\n  action_obs E a = NormalAction (ReadMem ad al v)\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "define E''' where \"E''' = lappend (llist_of E') (ltake (enat a) E)\""], ["proof (state)\nthis:\n  E''' = lappend (llist_of E') (ltake (enat a) E)\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "let ?E'' = \"lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)\""], ["proof (state)\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "note hb"], ["proof (state)\nthis:\n  ta_hb_consistent P E' E\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "also"], ["proof (state)\nthis:\n  ta_hb_consistent P E' E\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "have E_unfold1: \"E = lappend (ltake (enat a) E) (ldropn a E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E = lappend (ltake (enat a) E) (ldropn a E)", "by simp"], ["proof (state)\nthis:\n  E = lappend (ltake (enat a) E) (ldropn a E)\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "also"], ["proof (state)\nthis:\n  E = lappend (ltake (enat a) E) (ldropn a E)\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "have E_unfold2: \"ldropn a E = LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ldropn a E =\n    LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)", "using a lnth"], ["proof (prove)\nusing this:\n  enat a < llength E\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n\ngoal (1 subgoal):\n 1. ldropn a E =\n    LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)", "by (metis ldropn_Suc_conv_ldropn)"], ["proof (state)\nthis:\n  ldropn a E = LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "finally"], ["proof (chain)\npicking this:\n  ta_hb_consistent P E'\n   (lappend (ltake (enat a) E)\n     (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)))", "have \"ta_hb_consistent P (E' @ list_of (ltake (enat a) E))\n              (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E))\""], ["proof (prove)\nusing this:\n  ta_hb_consistent P E'\n   (lappend (ltake (enat a) E)\n     (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E)))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P (E' @ list_of (ltake (enat a) E))\n     (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E))", "by(rule ta_hb_consistent_lappendD2) simp"], ["proof (state)\nthis:\n  ta_hb_consistent P (E' @ list_of (ltake (enat a) E))\n   (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "with a a'_E' a_def"], ["proof (chain)\npicking this:\n  enat a < llength E\n  length E' \\<le> a'\n  a = a' - length E'\n  ta_hb_consistent P (E' @ list_of (ltake (enat a) E))\n   (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E))", "obtain w where w: \"w \\<in> write_actions ?E''\"\n        and adal_w: \"(ad, al) \\<in> action_loc P ?E'' w\"\n        and written: \"value_written P ?E'' w (ad, al) = v\"\n        and hb: \"P,?E'' \\<turnstile> w \\<le>hb a'\"\n        and in_between_so:\n        \"\\<And>w'. \\<lbrakk> w' \\<in> write_actions ?E''; (ad, al) \\<in> action_loc P ?E'' w'; \n                is_volatile P al; P,?E'' \\<turnstile> w \\<le>so w'; P,?E'' \\<turnstile> w' \\<le>so a' \\<rbrakk>\n        \\<Longrightarrow> w' = w\"        \n        and in_between_hb: \n        \"\\<And>w'. \\<lbrakk> w' \\<in> write_actions ?E''; (ad, al) \\<in> action_loc P ?E'' w'; \n                P,?E'' \\<turnstile> w \\<le>hb w'; P,?E'' \\<turnstile> w' \\<le>hb a' \\<rbrakk>\n        \\<Longrightarrow> w' = w\""], ["proof (prove)\nusing this:\n  enat a < llength E\n  length E' \\<le> a'\n  a = a' - length E'\n  ta_hb_consistent P (E' @ list_of (ltake (enat a) E))\n   (LCons (t, NormalAction (ReadMem ad al v)) (ldropn (Suc a) E))\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> write_actions\n                          (lappend E'''\n                            (LCons (t, NormalAction (ReadMem ad al v))\n                              LNil));\n         (ad, al)\n         \\<in> action_loc P\n                (lappend E'''\n                  (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n                w;\n         value_written P\n          (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n          (ad, al) =\n         v;\n         P,lappend E'''\n            (LCons (t, NormalAction (ReadMem ad al v))\n              LNil) \\<turnstile> w \\<le>hb a';\n         \\<And>w'.\n            \\<lbrakk>w' \\<in> write_actions\n                               (lappend E'''\n                                 (LCons (t, NormalAction (ReadMem ad al v))\n                                   LNil));\n             (ad, al)\n             \\<in> action_loc P\n                    (lappend E'''\n                      (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n                    w';\n             is_volatile P al;\n             P,lappend E'''\n                (LCons (t, NormalAction (ReadMem ad al v))\n                  LNil) \\<turnstile> w \\<le>so w';\n             P,lappend E'''\n                (LCons (t, NormalAction (ReadMem ad al v))\n                  LNil) \\<turnstile> w' \\<le>so a'\\<rbrakk>\n            \\<Longrightarrow> w' = w;\n         \\<And>w'.\n            \\<lbrakk>w' \\<in> write_actions\n                               (lappend E'''\n                                 (LCons (t, NormalAction (ReadMem ad al v))\n                                   LNil));\n             (ad, al)\n             \\<in> action_loc P\n                    (lappend E'''\n                      (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n                    w';\n             P,lappend E'''\n                (LCons (t, NormalAction (ReadMem ad al v))\n                  LNil) \\<turnstile> w \\<le>hb w';\n             P,lappend E'''\n                (LCons (t, NormalAction (ReadMem ad al v))\n                  LNil) \\<turnstile> w' \\<le>hb a'\\<rbrakk>\n            \\<Longrightarrow> w' = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: ta_hb_consistent_LCons length_list_of_conv_the_enat min_def lnth_ltake lappend_llist_of_llist_of[symmetric] E'''_def lappend_assoc simp del: lappend_llist_of_llist_of nth_list_of split: if_splits)"], ["proof (state)\nthis:\n  w \\<in> write_actions\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n  value_written P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n   (ad, al) =\n  v\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb a'\n  \\<lbrakk>?w'\n           \\<in> write_actions\n                  (lappend E'''\n                    (LCons (t, NormalAction (ReadMem ad al v)) LNil));\n   (ad, al)\n   \\<in> action_loc P\n          (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n          ?w';\n   is_volatile P al;\n   P,lappend E'''\n      (LCons (t, NormalAction (ReadMem ad al v))\n        LNil) \\<turnstile> w \\<le>so ?w';\n   P,lappend E'''\n      (LCons (t, NormalAction (ReadMem ad al v))\n        LNil) \\<turnstile> ?w' \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w' = w\n  \\<lbrakk>?w'\n           \\<in> write_actions\n                  (lappend E'''\n                    (LCons (t, NormalAction (ReadMem ad al v)) LNil));\n   (ad, al)\n   \\<in> action_loc P\n          (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n          ?w';\n   P,lappend E'''\n      (LCons (t, NormalAction (ReadMem ad al v))\n        LNil) \\<turnstile> w \\<le>hb ?w';\n   P,lappend E'''\n      (LCons (t, NormalAction (ReadMem ad al v))\n        LNil) \\<turnstile> ?w' \\<le>hb a'\\<rbrakk>\n  \\<Longrightarrow> ?w' = w\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from a' a'_E' a"], ["proof (chain)\npicking this:\n  enat a' < llength E''\n  length E' \\<le> a'\n  enat a < llength E", "have eq: \"ltake (enat (Suc a')) ?E'' = ltake (enat (Suc a')) E''\" (is \"?lhs = ?rhs\")"], ["proof (prove)\nusing this:\n  enat a' < llength E''\n  length E' \\<le> a'\n  enat a < llength E\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc a'))\n     (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n    ltake (enat (Suc a')) E''", "unfolding E''_def E'''_def lappend_assoc"], ["proof (prove)\nusing this:\n  enat a' < llength (lappend (llist_of E') E)\n  length E' \\<le> a'\n  enat a < llength E\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc a'))\n     (lappend (llist_of E')\n       (lappend (ltake (enat a) E)\n         (LCons (t, NormalAction (ReadMem ad al v)) LNil))) =\n    ltake (enat (Suc a')) (lappend (llist_of E') E)", "apply(subst (2) E_unfold1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> ltake (enat (Suc a'))\n                       (lappend (llist_of E')\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             LNil))) =\n                      ltake (enat (Suc a'))\n                       (lappend (llist_of E')\n                         (lappend (ltake (enat a) E) (ldropn a E)))", "apply(subst E_unfold2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> ltake (enat (Suc a'))\n                       (lappend (llist_of E')\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             LNil))) =\n                      ltake (enat (Suc a'))\n                       (lappend (llist_of E')\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             (ldropn (Suc a) E))))", "apply(subst (1 2) ltake_lappend2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> llength (llist_of E') \\<le> enat (Suc a')\n 2. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             LNil))) =\n                      lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             (ldropn (Suc a) E))))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             LNil))) =\n                      lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             (ldropn (Suc a) E))))", "apply(rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             LNil))) =\n                      lappend (llist_of E')\n                       (ltake (enat (Suc a') - llength (llist_of E'))\n                         (lappend (ltake (enat a) E)\n                           (LCons (t, NormalAction (ReadMem ad al v))\n                             (ldropn (Suc a) E))))", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> ltake (enat (Suc a') - llength (llist_of E'))\n                       (lappend (ltake (enat a) E)\n                         (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n                      ltake (enat (Suc a') - llength (llist_of E'))\n                       (lappend (ltake (enat a) E)\n                         (LCons (t, NormalAction (ReadMem ad al v))\n                           (ldropn (Suc a) E)))", "apply(subst (1 2) ltake_lappend2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> llength (ltake (enat a) E)\n                      \\<le> enat (Suc a') - llength (llist_of E')\n 2. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n                      lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v))\n                           (ldropn (Suc a) E)))", "apply(simp add: min_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>enat a' < enat (length E') + llength E; length E' \\<le> a';\n     enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> (enat a \\<le> llength E \\<longrightarrow>\n                       a \\<le> Suc a' - length E') \\<and>\n                      (\\<not> enat a \\<le> llength E \\<longrightarrow>\n                       llength E \\<le> enat (Suc a' - length E'))\n 2. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n                      lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v))\n                           (ldropn (Suc a) E)))", "apply (metis Suc_diff_le a_def le_Suc_eq order_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n                      lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v))\n                           (ldropn (Suc a) E)))", "apply(rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n                      lappend (ltake (enat a) E)\n                       (ltake\n                         (enat (Suc a') - llength (llist_of E') -\n                          llength (ltake (enat a) E))\n                         (LCons (t, NormalAction (ReadMem ad al v))\n                           (ldropn (Suc a) E)))", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < llength (lappend (llist_of E') E);\n     length E' \\<le> a'; enat a < llength E\\<rbrakk>\n    \\<Longrightarrow> ltake\n                       (enat (Suc a') - llength (llist_of E') -\n                        llength (ltake (enat a) E))\n                       (LCons (t, NormalAction (ReadMem ad al v)) LNil) =\n                      ltake\n                       (enat (Suc a') - llength (llist_of E') -\n                        llength (ltake (enat a) E))\n                       (LCons (t, NormalAction (ReadMem ad al v))\n                         (ldropn (Suc a) E))", "apply(auto simp add: min_def a_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat a' < enat (length E') + llength E; length E' \\<le> a';\n     enat (a' - length E') < llength E;\n     enat (a' - length E') \\<le> llength E\\<rbrakk>\n    \\<Longrightarrow> ltake (enat (Suc 0))\n                       (LCons (t, NormalAction (ReadMem ad al v)) LNil) =\n                      ltake (enat (Suc 0))\n                       (LCons (t, NormalAction (ReadMem ad al v))\n                         (ldropn (Suc (a' - length E')) E))", "apply(auto simp add: eSuc_enat[symmetric] zero_enat_def[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ltake (enat (Suc a'))\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n  ltake (enat (Suc a')) E''\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "hence sim: \"?lhs [\\<approx>] ?rhs\""], ["proof (prove)\nusing this:\n  ltake (enat (Suc a'))\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) =\n  ltake (enat (Suc a')) E''\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc a'))\n     (lappend E'''\n       (LCons (t, NormalAction (ReadMem ad al v))\n         LNil)) [\\<approx>] ltake (enat (Suc a')) E''", "by(rule eq_into_sim_actions)"], ["proof (state)\nthis:\n  ltake (enat (Suc a'))\n   (lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil)) [\\<approx>] ltake (enat (Suc a')) E''\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from tsa"], ["proof (chain)\npicking this:\n  thread_start_actions_ok E''", "have tsa': \"thread_start_actions_ok ?E''\""], ["proof (prove)\nusing this:\n  thread_start_actions_ok E''\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok\n     (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))", "unfolding E''_def E'''_def lappend_assoc"], ["proof (prove)\nusing this:\n  thread_start_actions_ok (lappend (llist_of E') E)\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok\n     (lappend (llist_of E')\n       (lappend (ltake (enat a) E)\n         (LCons (t, NormalAction (ReadMem ad al v)) LNil)))", "by(rule thread_start_actions_ok_prefix)(subst (2) E_unfold1, simp add: E_unfold2)"], ["proof (state)\nthis:\n  thread_start_actions_ok\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from w a a' a_def a'_E'"], ["proof (chain)\npicking this:\n  w \\<in> write_actions\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  enat a < llength E\n  enat a' < llength E''\n  a = a' - length E'\n  length E' \\<le> a'", "have w_a': \"w < Suc a'\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  enat a < llength E\n  enat a' < llength E''\n  a = a' - length E'\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. w < Suc a'", "by cases(simp add: actions_def E'''_def min_def zero_enat_def eSuc_enat split: if_split_asm)"], ["proof (state)\nthis:\n  w < Suc a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from w sim"], ["proof (chain)\npicking this:\n  w \\<in> write_actions\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  ltake (enat (Suc a'))\n   (lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil)) [\\<approx>] ltake (enat (Suc a')) E''", "have \"w \\<in> write_actions E''\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  ltake (enat (Suc a'))\n   (lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil)) [\\<approx>] ltake (enat (Suc a')) E''\n\ngoal (1 subgoal):\n 1. w \\<in> write_actions E''", "by(rule write_actions_change_prefix)(simp add: w_a')"], ["proof (state)\nthis:\n  w \\<in> write_actions E''\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "moreover"], ["proof (state)\nthis:\n  w \\<in> write_actions E''\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from adal_w action_loc_change_prefix[OF sim, of w P] w_a'"], ["proof (chain)\npicking this:\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n  enat w < enat (Suc a') \\<Longrightarrow>\n  action_loc P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w =\n  action_loc P E'' w\n  w < Suc a'", "have \"(ad, al) \\<in> action_loc P E'' w\""], ["proof (prove)\nusing this:\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n  enat w < enat (Suc a') \\<Longrightarrow>\n  action_loc P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w =\n  action_loc P E'' w\n  w < Suc a'\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E'' w", "by simp"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E'' w\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "moreover"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E'' w\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from written value_written_change_prefix[OF eq, of w P] w_a'"], ["proof (chain)\npicking this:\n  value_written P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n   (ad, al) =\n  v\n  enat w < enat (Suc a') \\<Longrightarrow>\n  value_written P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w =\n  value_written P E'' w\n  w < Suc a'", "have \"value_written P E'' w (ad, al) = v\""], ["proof (prove)\nusing this:\n  value_written P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w\n   (ad, al) =\n  v\n  enat w < enat (Suc a') \\<Longrightarrow>\n  value_written P\n   (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w =\n  value_written P E'' w\n  w < Suc a'\n\ngoal (1 subgoal):\n 1. value_written P E'' w (ad, al) = v", "by simp"], ["proof (state)\nthis:\n  value_written P E'' w (ad, al) = v\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "moreover"], ["proof (state)\nthis:\n  value_written P E'' w (ad, al) = v\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from hb tsa sim"], ["proof (chain)\npicking this:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb a'\n  thread_start_actions_ok E''\n  ltake (enat (Suc a'))\n   (lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil)) [\\<approx>] ltake (enat (Suc a')) E''", "have \"P,E'' \\<turnstile> w \\<le>hb a'\""], ["proof (prove)\nusing this:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb a'\n  thread_start_actions_ok E''\n  ltake (enat (Suc a'))\n   (lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil)) [\\<approx>] ltake (enat (Suc a')) E''\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> w \\<le>hb a'", "by(rule happens_before_change_prefix)(simp_all add: w_a')"], ["proof (state)\nthis:\n  P,E'' \\<turnstile> w \\<le>hb a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "moreover"], ["proof (state)\nthis:\n  P,E'' \\<turnstile> w \\<le>hb a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "{"], ["proof (state)\nthis:\n  P,E'' \\<turnstile> w \\<le>hb a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "fix w'"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "assume w': \"w' \\<in> write_actions E''\"\n          and adal: \"(ad, al) \\<in> action_loc P E'' w'\"\n          and hbso: \"P,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a' \\<or> is_volatile P al \\<and> P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'\"\n          (is \"?hbso E''\")"], ["proof (state)\nthis:\n  w' \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w'\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from hbso"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'", "have ao: \"E'' \\<turnstile> w \\<le>a w'\" \"E'' \\<turnstile> w' \\<le>a a'\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'\n\ngoal (1 subgoal):\n 1. E'' \\<turnstile> w \\<le>a w' &&& E'' \\<turnstile> w' \\<le>a a'", "by(auto dest: happens_before_into_action_order elim: sync_orderE)"], ["proof (state)\nthis:\n  E'' \\<turnstile> w \\<le>a w'\n  E'' \\<turnstile> w' \\<le>a a'\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "have \"w' = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' = w", "proof(cases \"is_new_action (action_obs E'' w')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E'' w')\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "hence \"w' \\<in> new_actions_for P E'' (ad, al)\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E'' w')\n\ngoal (1 subgoal):\n 1. w' \\<in> new_actions_for P E'' (ad, al)", "using w' adal"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E'' w')\n  w' \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w'\n\ngoal (1 subgoal):\n 1. w' \\<in> new_actions_for P E'' (ad, al)", "by(simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  w' \\<in> new_actions_for P E'' (ad, al)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "moreover"], ["proof (state)\nthis:\n  w' \\<in> new_actions_for P E'' (ad, al)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "from ao True"], ["proof (chain)\npicking this:\n  E'' \\<turnstile> w \\<le>a w'\n  E'' \\<turnstile> w' \\<le>a a'\n  is_new_action (action_obs E'' w')", "have \"is_new_action (action_obs E'' w)\""], ["proof (prove)\nusing this:\n  E'' \\<turnstile> w \\<le>a w'\n  E'' \\<turnstile> w' \\<le>a a'\n  is_new_action (action_obs E'' w')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E'' w)", "by(cases rule: action_orderE) simp_all"], ["proof (state)\nthis:\n  is_new_action (action_obs E'' w)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "with \\<open>w \\<in> write_actions E''\\<close> \\<open>(ad, al) \\<in> action_loc P E'' w\\<close>"], ["proof (chain)\npicking this:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  is_new_action (action_obs E'' w)", "have \"w \\<in> new_actions_for P E'' (ad, al)\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  is_new_action (action_obs E'' w)\n\ngoal (1 subgoal):\n 1. w \\<in> new_actions_for P E'' (ad, al)", "by(simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  w \\<in> new_actions_for P E'' (ad, al)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w\n 2. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "ultimately"], ["proof (chain)\npicking this:\n  w' \\<in> new_actions_for P E'' (ad, al)\n  w \\<in> new_actions_for P E'' (ad, al)", "show \"w' = w\""], ["proof (prove)\nusing this:\n  w' \\<in> new_actions_for P E'' (ad, al)\n  w \\<in> new_actions_for P E'' (ad, al)\n\ngoal (1 subgoal):\n 1. w' = w", "by(rule new_actions_for_fun)"], ["proof (state)\nthis:\n  w' = w\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "case False"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E'' w')\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "with ao"], ["proof (chain)\npicking this:\n  E'' \\<turnstile> w \\<le>a w'\n  E'' \\<turnstile> w' \\<le>a a'\n  \\<not> is_new_action (action_obs E'' w')", "have \"w' \\<le> a'\""], ["proof (prove)\nusing this:\n  E'' \\<turnstile> w \\<le>a w'\n  E'' \\<turnstile> w' \\<le>a a'\n  \\<not> is_new_action (action_obs E'' w')\n\ngoal (1 subgoal):\n 1. w' \\<le> a'", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  w' \\<le> a'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "hence w'_a: \"enat w' < enat (Suc a')\""], ["proof (prove)\nusing this:\n  w' \\<le> a'\n\ngoal (1 subgoal):\n 1. enat w' < enat (Suc a')", "by simp"], ["proof (state)\nthis:\n  enat w' < enat (Suc a')\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "with hbso w_a'"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'\n  w < Suc a'\n  enat w' < enat (Suc a')", "have \"?hbso ?E''\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and> P,E'' \\<turnstile> w' \\<le>so a'\n  w < Suc a'\n  enat w' < enat (Suc a')\n\ngoal (1 subgoal):\n 1. P,lappend E'''\n       (LCons (t, NormalAction (ReadMem ad al v))\n         LNil) \\<turnstile> w \\<le>hb w' \\<and>\n    P,lappend E'''\n       (LCons (t, NormalAction (ReadMem ad al v))\n         LNil) \\<turnstile> w' \\<le>hb a' \\<or>\n    is_volatile P al \\<and>\n    P,lappend E'''\n       (LCons (t, NormalAction (ReadMem ad al v))\n         LNil) \\<turnstile> w \\<le>so w' \\<and>\n    P,lappend E'''\n       (LCons (t, NormalAction (ReadMem ad al v))\n         LNil) \\<turnstile> w' \\<le>so a'", "by(auto 4 3 elim: happens_before_change_prefix[OF _ tsa' sim[symmetric]] sync_order_change_prefix[OF _ sim[symmetric]] del: disjCI intro: disjI1 disjI2)"], ["proof (state)\nthis:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>so w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>so a'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "moreover"], ["proof (state)\nthis:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>so w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>so a'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "from w' \\<open>w' \\<le> a'\\<close> a' a lnth a'_E'"], ["proof (chain)\npicking this:\n  w' \\<in> write_actions E''\n  w' \\<le> a'\n  enat a' < llength E''\n  enat a < llength E\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'", "have \"w' \\<in> write_actions ?E''\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E''\n  w' \\<le> a'\n  enat a' < llength E''\n  enat a < llength E\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. w' \\<in> write_actions\n              (lappend E'''\n                (LCons (t, NormalAction (ReadMem ad al v)) LNil))", "by(cases)(cases \"w' < a'\", auto intro!: write_actions.intros simp add: E'''_def actions_def action_obs_def lnth_lappend min_def zero_enat_def eSuc_enat lnth_ltake a_def E''_def not_le not_less)"], ["proof (state)\nthis:\n  w' \\<in> write_actions\n            (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "moreover"], ["proof (state)\nthis:\n  w' \\<in> write_actions\n            (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "from adal \\<open>w' \\<le> a'\\<close> a a' lnth w' a'_E'"], ["proof (chain)\npicking this:\n  (ad, al) \\<in> action_loc P E'' w'\n  w' \\<le> a'\n  enat a < llength E\n  enat a' < llength E''\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n  w' \\<in> write_actions E''\n  length E' \\<le> a'", "have \"(ad, al) \\<in> action_loc P ?E'' w'\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E'' w'\n  w' \\<le> a'\n  enat a < llength E\n  enat a' < llength E''\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n  w' \\<in> write_actions E''\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. (ad, al)\n    \\<in> action_loc P\n           (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n           w'", "by(cases \"w' < a'\")(cases \"w' < length E'\", auto simp add: E'''_def action_obs_def lnth_lappend lappend_assoc[symmetric] min_def lnth_ltake less_trans[where y=\"enat a\"] a_def E''_def lnth_ltake elim: write_actions.cases)"], ["proof (state)\nthis:\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E'' w') \\<Longrightarrow> w' = w", "ultimately"], ["proof (chain)\npicking this:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>so w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>so a'\n  w' \\<in> write_actions\n            (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w'", "show \"w' = w\""], ["proof (prove)\nusing this:\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>hb w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w \\<le>so w' \\<and>\n  P,lappend E'''\n     (LCons (t, NormalAction (ReadMem ad al v))\n       LNil) \\<turnstile> w' \\<le>so a'\n  w' \\<in> write_actions\n            (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil))\n  (ad, al)\n  \\<in> action_loc P\n         (lappend E''' (LCons (t, NormalAction (ReadMem ad al v)) LNil)) w'\n\ngoal (1 subgoal):\n 1. w' = w", "by(blast dest: in_between_so in_between_hb)"], ["proof (state)\nthis:\n  w' = w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w' = w\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?w'2 \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?w'2;\n   P,E'' \\<turnstile> w \\<le>hb ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w'2 = w\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "ultimately"], ["proof (chain)\npicking this:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  value_written P E'' w (ad, al) = v\n  P,E'' \\<turnstile> w \\<le>hb a'\n  \\<lbrakk>?w'2 \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?w'2;\n   P,E'' \\<turnstile> w \\<le>hb ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w'2 = w", "have \"?P a' w\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  value_written P E'' w (ad, al) = v\n  P,E'' \\<turnstile> w \\<le>hb a'\n  \\<lbrakk>?w'2 \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?w'2;\n   P,E'' \\<turnstile> w \\<le>hb ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w'2 = w\n\ngoal (1 subgoal):\n 1. case lnth E'' a' of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      w \\<in> write_actions E'' \\<and>\n      (ad, al) \\<in> action_loc P E'' w \\<and>\n      value_written P E'' w (ad, al) = v \\<and>\n      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n      (\\<forall>w'\\<in>write_actions E''.\n          (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n          is_volatile P al \\<and>\n          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n          w' = w)", "using a'_E' lnth"], ["proof (prove)\nusing this:\n  w \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' w\n  value_written P E'' w (ad, al) = v\n  P,E'' \\<turnstile> w \\<le>hb a'\n  \\<lbrakk>?w'2 \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?w'2;\n   P,E'' \\<turnstile> w \\<le>hb ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so ?w'2 \\<and>\n   P,E'' \\<turnstile> ?w'2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w'2 = w\n  length E' \\<le> a'\n  lnth E a = (t, NormalAction (ReadMem ad al v))\n\ngoal (1 subgoal):\n 1. case lnth E'' a' of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      w \\<in> write_actions E'' \\<and>\n      (ad, al) \\<in> action_loc P E'' w \\<and>\n      value_written P E'' w (ad, al) = v \\<and>\n      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n      (\\<forall>w'\\<in>write_actions E''.\n          (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n          is_volatile P al \\<and>\n          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n          w' = w)", "unfolding E''_def a_def"], ["proof (prove)\nusing this:\n  w \\<in> write_actions (lappend (llist_of E') E)\n  (ad, al) \\<in> action_loc P (lappend (llist_of E') E) w\n  value_written P (lappend (llist_of E') E) w (ad, al) = v\n  P,lappend (llist_of E') E \\<turnstile> w \\<le>hb a'\n  \\<lbrakk>?w'2 \\<in> write_actions (lappend (llist_of E') E);\n   (ad, al) \\<in> action_loc P (lappend (llist_of E') E) ?w'2;\n   P,lappend (llist_of E') E \\<turnstile> w \\<le>hb ?w'2 \\<and>\n   P,lappend (llist_of E') E \\<turnstile> ?w'2 \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,lappend (llist_of E') E \\<turnstile> w \\<le>so ?w'2 \\<and>\n   P,lappend (llist_of E') E \\<turnstile> ?w'2 \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?w'2 = w\n  length E' \\<le> a'\n  lnth E (a' - length E') = (t, NormalAction (ReadMem ad al v))\n\ngoal (1 subgoal):\n 1. case lnth (lappend (llist_of E') E) a' of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      w \\<in> write_actions (lappend (llist_of E') E) \\<and>\n      (ad, al) \\<in> action_loc P (lappend (llist_of E') E) w \\<and>\n      value_written P (lappend (llist_of E') E) w (ad, al) = v \\<and>\n      P,lappend (llist_of E') E \\<turnstile> w \\<le>hb a' \\<and>\n      (\\<forall>w'\\<in>write_actions (lappend (llist_of E') E).\n          (ad, al)\n          \\<in> action_loc P (lappend (llist_of E') E) w' \\<longrightarrow>\n          P,lappend (llist_of E') E \\<turnstile> w \\<le>hb w' \\<and>\n          P,lappend (llist_of E') E \\<turnstile> w' \\<le>hb a' \\<or>\n          is_volatile P al \\<and>\n          P,lappend (llist_of E') E \\<turnstile> w \\<le>so w' \\<and>\n          P,lappend (llist_of E')\n             E \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n          w' = w)", "by(simp add: lnth_lappend)"], ["proof (state)\nthis:\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    w \\<in> write_actions E'' \\<and>\n    (ad, al) \\<in> action_loc P E'' w \\<and>\n    value_written P E'' w (ad, al) = v \\<and>\n    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' = w)\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "hence P: \"?P a' (Eps (?P a'))\""], ["proof (prove)\nusing this:\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    w \\<in> write_actions E'' \\<and>\n    (ad, al) \\<in> action_loc P E'' w \\<and>\n    value_written P E'' w (ad, al) = v \\<and>\n    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' = w)\n\ngoal (1 subgoal):\n 1. case lnth E'' a' of\n    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n      (SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n      \\<in> write_actions E'' \\<and>\n      (ad, al)\n      \\<in> action_loc P E''\n             (SOME w.\n                 case lnth E'' a' of\n                 (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                   w \\<in> write_actions E'' \\<and>\n                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                   value_written P E'' w (ad, al) = v \\<and>\n                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                   (\\<forall>w'\\<in>write_actions E''.\n                       (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                       P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                       P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                       is_volatile P al \\<and>\n                       P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                       P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                       w' = w)) \\<and>\n      value_written P E''\n       (SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n       (ad, al) =\n      v \\<and>\n      P,E'' \\<turnstile> SOME w.\n                            case lnth E'' a' of\n                            (t, NormalAction\n                                 (ReadMem ad al v)) \\<Rightarrow>\n                              w \\<in> write_actions E'' \\<and>\n                              (ad, al) \\<in> action_loc P E'' w \\<and>\n                              value_written P E'' w (ad, al) = v \\<and>\n                              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                              (\\<forall>w'\\<in>write_actions E''.\n                                  (ad, al)\n                                  \\<in> action_loc P E''\n   w' \\<longrightarrow>\n                                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                  is_volatile P al \\<and>\n                                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                  w' = w) \\<le>hb a' \\<and>\n      (\\<forall>w'\\<in>write_actions E''.\n          (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n          P,E'' \\<turnstile> SOME w.\n                                case lnth E'' a' of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and>\nP,E'' \\<turnstile> w' \\<le>hb a' \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\nw' = w) \\<le>hb w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n          is_volatile P al \\<and>\n          P,E'' \\<turnstile> SOME w.\n                                case lnth E'' a' of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and>\nP,E'' \\<turnstile> w' \\<le>hb a' \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\nw' = w) \\<le>so w' \\<and>\n          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n          w' =\n          (SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))", "by(rule someI[where P=\"?P a'\"])"], ["proof (state)\nthis:\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    (SOME w.\n        case lnth E'' a' of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          w \\<in> write_actions E'' \\<and>\n          (ad, al) \\<in> action_loc P E'' w \\<and>\n          value_written P E'' w (ad, al) = v \\<and>\n          P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n          (\\<forall>w'\\<in>write_actions E''.\n              (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n              P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n              is_volatile P al \\<and>\n              P,E'' \\<turnstile> w \\<le>so w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n              w' = w))\n    \\<in> write_actions E'' \\<and>\n    (ad, al)\n    \\<in> action_loc P E''\n           (SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)) \\<and>\n    value_written P E''\n     (SOME w.\n         case lnth E'' a' of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           w \\<in> write_actions E'' \\<and>\n           (ad, al) \\<in> action_loc P E'' w \\<and>\n           value_written P E'' w (ad, al) = v \\<and>\n           P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n           (\\<forall>w'\\<in>write_actions E''.\n               (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n               P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n               is_volatile P al \\<and>\n               P,E'' \\<turnstile> w \\<le>so w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n               w' = w))\n     (ad, al) =\n    v \\<and>\n    P,E'' \\<turnstile> SOME w.\n                          case lnth E'' a' of\n                          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                            w \\<in> write_actions E'' \\<and>\n                            (ad, al) \\<in> action_loc P E'' w \\<and>\n                            value_written P E'' w (ad, al) = v \\<and>\n                            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                            (\\<forall>w'\\<in>write_actions E''.\n                                (ad, al)\n                                \\<in> action_loc P E'' w' \\<longrightarrow>\n                                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                is_volatile P al \\<and>\n                                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                w' = w) \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' =\n        (SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)))\n\ngoal (7 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))\n    \\<in> write_actions E''\n 2. \\<not> a' < length E' \\<Longrightarrow>\n    (ad, al)\n    \\<in> action_loc P E''\n           (if a' < length E' then ws' a'\n            else SOME w.\n                    case lnth E'' a' of\n                    (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                      w \\<in> write_actions E'' \\<and>\n                      (ad, al) \\<in> action_loc P E'' w \\<and>\n                      value_written P E'' w (ad, al) = v \\<and>\n                      P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                      (\\<forall>w'\\<in>write_actions E''.\n                          (ad, al)\n                          \\<in> action_loc P E'' w' \\<longrightarrow>\n                          P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                          is_volatile P al \\<and>\n                          P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                          P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                          w' = w))\n 3. \\<not> a' < length E' \\<Longrightarrow>\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v\n 4. \\<lbrakk>\\<not> a' < length E'; length E' \\<le> a'\\<rbrakk>\n    \\<Longrightarrow> P,E'' \\<turnstile> if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w) \\<le>hb a'\n 5. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 6. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 7. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "from P lnth'' a'_E'"], ["proof (chain)\npicking this:\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    (SOME w.\n        case lnth E'' a' of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          w \\<in> write_actions E'' \\<and>\n          (ad, al) \\<in> action_loc P E'' w \\<and>\n          value_written P E'' w (ad, al) = v \\<and>\n          P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n          (\\<forall>w'\\<in>write_actions E''.\n              (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n              P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n              is_volatile P al \\<and>\n              P,E'' \\<turnstile> w \\<le>so w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n              w' = w))\n    \\<in> write_actions E'' \\<and>\n    (ad, al)\n    \\<in> action_loc P E''\n           (SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)) \\<and>\n    value_written P E''\n     (SOME w.\n         case lnth E'' a' of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           w \\<in> write_actions E'' \\<and>\n           (ad, al) \\<in> action_loc P E'' w \\<and>\n           value_written P E'' w (ad, al) = v \\<and>\n           P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n           (\\<forall>w'\\<in>write_actions E''.\n               (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n               P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n               is_volatile P al \\<and>\n               P,E'' \\<turnstile> w \\<le>so w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n               w' = w))\n     (ad, al) =\n    v \\<and>\n    P,E'' \\<turnstile> SOME w.\n                          case lnth E'' a' of\n                          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                            w \\<in> write_actions E'' \\<and>\n                            (ad, al) \\<in> action_loc P E'' w \\<and>\n                            value_written P E'' w (ad, al) = v \\<and>\n                            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                            (\\<forall>w'\\<in>write_actions E''.\n                                (ad, al)\n                                \\<in> action_loc P E'' w' \\<longrightarrow>\n                                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                is_volatile P al \\<and>\n                                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                w' = w) \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' =\n        (SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)))\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'", "show \"?ws a' \\<in> write_actions E''\" \n        and \"(ad, al) \\<in> action_loc P E'' (?ws a')\" \n        and \"value_written P E'' (?ws a') (ad, al) = v\" \n        and \"P,E'' \\<turnstile> ?ws a' \\<le>hb a'\""], ["proof (prove)\nusing this:\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    (SOME w.\n        case lnth E'' a' of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          w \\<in> write_actions E'' \\<and>\n          (ad, al) \\<in> action_loc P E'' w \\<and>\n          value_written P E'' w (ad, al) = v \\<and>\n          P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n          (\\<forall>w'\\<in>write_actions E''.\n              (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n              P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n              is_volatile P al \\<and>\n              P,E'' \\<turnstile> w \\<le>so w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n              w' = w))\n    \\<in> write_actions E'' \\<and>\n    (ad, al)\n    \\<in> action_loc P E''\n           (SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)) \\<and>\n    value_written P E''\n     (SOME w.\n         case lnth E'' a' of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           w \\<in> write_actions E'' \\<and>\n           (ad, al) \\<in> action_loc P E'' w \\<and>\n           value_written P E'' w (ad, al) = v \\<and>\n           P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n           (\\<forall>w'\\<in>write_actions E''.\n               (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n               P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n               is_volatile P al \\<and>\n               P,E'' \\<turnstile> w \\<le>so w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n               w' = w))\n     (ad, al) =\n    v \\<and>\n    P,E'' \\<turnstile> SOME w.\n                          case lnth E'' a' of\n                          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                            w \\<in> write_actions E'' \\<and>\n                            (ad, al) \\<in> action_loc P E'' w \\<and>\n                            value_written P E'' w (ad, al) = v \\<and>\n                            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                            (\\<forall>w'\\<in>write_actions E''.\n                                (ad, al)\n                                \\<in> action_loc P E'' w' \\<longrightarrow>\n                                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                is_volatile P al \\<and>\n                                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                w' = w) \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' =\n        (SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)))\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. ((if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     \\<in> write_actions E'' &&&\n     (ad, al)\n     \\<in> action_loc P E''\n            (if a' < length E' then ws' a'\n             else SOME w.\n                     case lnth E'' a' of\n                     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                       w \\<in> write_actions E'' \\<and>\n                       (ad, al) \\<in> action_loc P E'' w \\<and>\n                       value_written P E'' w (ad, al) = v \\<and>\n                       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                       (\\<forall>w'\\<in>write_actions E''.\n                           (ad, al)\n                           \\<in> action_loc P E'' w' \\<longrightarrow>\n                           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                           is_volatile P al \\<and>\n                           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                           w' = w))) &&&\n    value_written P E''\n     (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w))\n     (ad, al) =\n    v &&&\n    P,E'' \\<turnstile> if a' < length E' then ws' a'\n                       else SOME w.\n                               case lnth E'' a' of\n                               (t, NormalAction\n                                    (ReadMem ad al v)) \\<Rightarrow>\n                                 w \\<in> write_actions E'' \\<and>\n                                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                                 value_written P E'' w (ad, al) = v \\<and>\n                                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                 (\\<forall>w'\\<in>write_actions E''.\n                                     (ad, al)\n                                     \\<in> action_loc P E''\n      w' \\<longrightarrow>\n                                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                     is_volatile P al \\<and>\n                                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                     w' = w) \\<le>hb a'", "by simp_all"], ["proof (state)\nthis:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w))\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n\ngoal (3 subgoals):\n 1. \\<not> a' < length E' \\<Longrightarrow>\n    \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n 2. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 3. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "show \"\\<not> P,E'' \\<turnstile> a' \\<le>hb ?ws a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "assume \"P,E'' \\<turnstile> a' \\<le>hb ?ws a'\""], ["proof (state)\nthis:\n  P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                 else SOME w.\n   case lnth E'' a' of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n         w' = w))\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "with \\<open>P,E'' \\<turnstile> ?ws a' \\<le>hb a'\\<close>"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n  P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                 else SOME w.\n   case lnth E'' a' of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n         w' = w))", "have \"a' = ?ws a'\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n  P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                 else SOME w.\n   case lnth E'' a' of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n         w' = w))\n\ngoal (1 subgoal):\n 1. a' =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "by(blast dest: antisymPD[OF antisym_action_order] happens_before_into_action_order)"], ["proof (state)\nthis:\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "with read \\<open>?ws a' \\<in> write_actions E''\\<close>"], ["proof (chain)\npicking this:\n  a' \\<in> read_actions E''\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))", "show False"], ["proof (prove)\nusing this:\n  a' \\<in> read_actions E''\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> a' < length E'; is_volatile P al\\<rbrakk>\n    \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so (if a'\n                         < length E'\n                      then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w))\n 2. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "show \"\\<not> P,E'' \\<turnstile> a' \\<le>so ?ws a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "assume \"P,E'' \\<turnstile> a' \\<le>so ?ws a'\""], ["proof (state)\nthis:\n  P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                 else SOME w.\n   case lnth E'' a' of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n         w' = w))\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "hence \"E'' \\<turnstile> a' \\<le>a ?ws a'\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                 else SOME w.\n   case lnth E'' a' of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n         w' = w))\n\ngoal (1 subgoal):\n 1. E'' \\<turnstile> a' \\<le>a (if a' < length E' then ws' a'\n                                else SOME w.\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    w \\<in> write_actions E'' \\<and>\n    (ad, al) \\<in> action_loc P E'' w \\<and>\n    value_written P E'' w (ad, al) = v \\<and>\n    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' = w))", "by(blast elim: sync_orderE)"], ["proof (state)\nthis:\n  E'' \\<turnstile> a' \\<le>a (if a' < length E' then ws' a'\n                              else SOME w.\ncase lnth E'' a' of\n(t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n  w \\<in> write_actions E'' \\<and>\n  (ad, al) \\<in> action_loc P E'' w \\<and>\n  value_written P E'' w (ad, al) = v \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n  (\\<forall>w'\\<in>write_actions E''.\n      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n      is_volatile P al \\<and>\n      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n      w' = w))\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "with \\<open>P,E'' \\<turnstile> ?ws a' \\<le>hb a'\\<close>"], ["proof (chain)\npicking this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n  E'' \\<turnstile> a' \\<le>a (if a' < length E' then ws' a'\n                              else SOME w.\ncase lnth E'' a' of\n(t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n  w \\<in> write_actions E'' \\<and>\n  (ad, al) \\<in> action_loc P E'' w \\<and>\n  value_written P E'' w (ad, al) = v \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n  (\\<forall>w'\\<in>write_actions E''.\n      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n      is_volatile P al \\<and>\n      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n      w' = w))", "have \"a' = ?ws a'\""], ["proof (prove)\nusing this:\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n  E'' \\<turnstile> a' \\<le>a (if a' < length E' then ws' a'\n                              else SOME w.\ncase lnth E'' a' of\n(t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n  w \\<in> write_actions E'' \\<and>\n  (ad, al) \\<in> action_loc P E'' w \\<and>\n  value_written P E'' w (ad, al) = v \\<and>\n  P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n  (\\<forall>w'\\<in>write_actions E''.\n      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n      is_volatile P al \\<and>\n      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n      P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n      w' = w))\n\ngoal (1 subgoal):\n 1. a' =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "by(blast dest: antisymPD[OF antisym_action_order] happens_before_into_action_order)"], ["proof (state)\nthis:\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (1 subgoal):\n 1. P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n                                   else SOME w.\n     case lnth E'' a' of\n     (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n       w \\<in> write_actions E'' \\<and>\n       (ad, al) \\<in> action_loc P E'' w \\<and>\n       value_written P E'' w (ad, al) = v \\<and>\n       P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n       (\\<forall>w'\\<in>write_actions E''.\n           (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n           P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n           is_volatile P al \\<and>\n           P,E'' \\<turnstile> w \\<le>so w' \\<and>\n           P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n           w' = w)) \\<Longrightarrow>\n    False", "with read \\<open>?ws a' \\<in> write_actions E''\\<close>"], ["proof (chain)\npicking this:\n  a' \\<in> read_actions E''\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))", "show False"], ["proof (prove)\nusing this:\n  a' \\<in> read_actions E''\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  a' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n\ngoal (1 subgoal):\n 1. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "fix a''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "assume \"a'' \\<in> write_actions E''\" \"(ad, al) \\<in> action_loc P E'' a''\"\n        and \"P,E'' \\<turnstile> ?ws a' \\<le>hb a'' \\<and> P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n             is_volatile P al \\<and> P,E'' \\<turnstile> ?ws a' \\<le>so a'' \\<and> P,E'' \\<turnstile> a'' \\<le>so a'\""], ["proof (state)\nthis:\n  a'' \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' a''\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>so a'\n\ngoal (1 subgoal):\n 1. \\<And>a''.\n       \\<lbrakk>\\<not> a' < length E'; a'' \\<in> write_actions E'';\n        (ad, al) \\<in> action_loc P E'' a'';\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>hb a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w) \\<le>so a'' \\<and>\n        P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n       \\<Longrightarrow> a'' =\n                         (if a' < length E' then ws' a'\n                          else SOME w.\n                                  case lnth E'' a' of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n  w' = w))", "thus \"a'' = ?ws a'\""], ["proof (prove)\nusing this:\n  a'' \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' a''\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>so a'\n\ngoal (1 subgoal):\n 1. a'' =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "using lnth'' P a'_E'"], ["proof (prove)\nusing this:\n  a'' \\<in> write_actions E''\n  (ad, al) \\<in> action_loc P E'' a''\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>so a'' \\<and>\n  P,E'' \\<turnstile> a'' \\<le>so a'\n  lnth E'' a' = (t, NormalAction (ReadMem ad al v))\n  case lnth E'' a' of\n  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n    (SOME w.\n        case lnth E'' a' of\n        (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n          w \\<in> write_actions E'' \\<and>\n          (ad, al) \\<in> action_loc P E'' w \\<and>\n          value_written P E'' w (ad, al) = v \\<and>\n          P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n          (\\<forall>w'\\<in>write_actions E''.\n              (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n              P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n              is_volatile P al \\<and>\n              P,E'' \\<turnstile> w \\<le>so w' \\<and>\n              P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n              w' = w))\n    \\<in> write_actions E'' \\<and>\n    (ad, al)\n    \\<in> action_loc P E''\n           (SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)) \\<and>\n    value_written P E''\n     (SOME w.\n         case lnth E'' a' of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           w \\<in> write_actions E'' \\<and>\n           (ad, al) \\<in> action_loc P E'' w \\<and>\n           value_written P E'' w (ad, al) = v \\<and>\n           P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n           (\\<forall>w'\\<in>write_actions E''.\n               (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n               P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n               is_volatile P al \\<and>\n               P,E'' \\<turnstile> w \\<le>so w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n               w' = w))\n     (ad, al) =\n    v \\<and>\n    P,E'' \\<turnstile> SOME w.\n                          case lnth E'' a' of\n                          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                            w \\<in> write_actions E'' \\<and>\n                            (ad, al) \\<in> action_loc P E'' w \\<and>\n                            value_written P E'' w (ad, al) = v \\<and>\n                            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                            (\\<forall>w'\\<in>write_actions E''.\n                                (ad, al)\n                                \\<in> action_loc P E'' w' \\<longrightarrow>\n                                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                is_volatile P al \\<and>\n                                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                w' = w) \\<le>hb a' \\<and>\n    (\\<forall>w'\\<in>write_actions E''.\n        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n        is_volatile P al \\<and>\n        P,E'' \\<turnstile> SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so w' \\<and>\n        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n        w' =\n        (SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w)))\n  length E' \\<le> a'\n\ngoal (1 subgoal):\n 1. a'' =\n    (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w))", "by -(erule disjE, clarsimp+)"], ["proof (state)\nthis:\n  a'' =\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E'' \\<and>\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w)) \\<and>\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v \\<and>\n  (length E' \\<le> a' \\<longrightarrow>\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb a') \\<and>\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w)) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))) \\<and>\n  (\\<forall>a''.\n      a'' \\<in> write_actions E'' \\<longrightarrow>\n      (ad, al) \\<in> action_loc P E'' a'' \\<longrightarrow>\n      P,E'' \\<turnstile> if a' < length E' then ws' a'\n                         else SOME w.\n                                 case lnth E'' a' of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n w' = w) \\<le>hb a'' \\<and>\n      P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n      is_volatile P al \\<and>\n      P,E'' \\<turnstile> if a' < length E' then ws' a'\n                         else SOME w.\n                                 case lnth E'' a' of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n w' = w) \\<le>so a'' \\<and>\n      P,E'' \\<turnstile> a'' \\<le>so a' \\<longrightarrow>\n      a'' =\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)))\n\ngoal (9 subgoals):\n 1. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n                         \\<in> write_actions E''\n 2. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> (ad, al)\n                         \\<in> action_loc P E''\n                                (if a < length E' then ws' a\n                                 else SOME w.\n   case lnth E'' a of\n   (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n     w \\<in> write_actions E'' \\<and>\n     (ad, al) \\<in> action_loc P E'' w \\<and>\n     value_written P E'' w (ad, al) = v \\<and>\n     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n     (\\<forall>w'\\<in>write_actions E''.\n         (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n         P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n         is_volatile P al \\<and>\n         P,E'' \\<turnstile> w \\<le>so w' \\<and>\n         P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n         w' = w))\n 3. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> value_written P E''\n                          (if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w))\n                          (ad, al) =\n                         v\n 4. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>hb (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 5. \\<And>a ad al v.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        is_volatile P al\\<rbrakk>\n       \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a \\<le>so (if a\n                           < length E'\n                        then ws' a\n                        else SOME w.\n                                case lnth E'' a of\n                                (t, NormalAction\n                                     (ReadMem ad al v)) \\<Rightarrow>\n                                  w \\<in> write_actions E'' \\<and>\n                                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                                  value_written P E'' w (ad, al) = v \\<and>\n                                  P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                  (\\<forall>w'\\<in>write_actions E''.\n(ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\nP,E'' \\<turnstile> w \\<le>hb w' \\<and> P,E'' \\<turnstile> w' \\<le>hb a \\<or>\nis_volatile P al \\<and>\nP,E'' \\<turnstile> w \\<le>so w' \\<and>\nP,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\nw' = w))\n 6. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>hb a';\n        P,E'' \\<turnstile> a' \\<le>hb a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 7. \\<And>a ad al v a'.\n       \\<lbrakk>a \\<in> read_actions E'';\n        action_obs E'' a = NormalAction (ReadMem ad al v);\n        a' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a';\n        is_volatile P al;\n        P,E'' \\<turnstile> if a < length E' then ws' a\n                           else SOME w.\n                                   case lnth E'' a of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n   w' = w) \\<le>so a';\n        P,E'' \\<turnstile> a' \\<le>so a\\<rbrakk>\n       \\<Longrightarrow> a' =\n                         (if a < length E' then ws' a\n                          else SOME w.\n                                  case lnth E'' a of\n                                  (t, NormalAction\n (ReadMem ad al v)) \\<Rightarrow>\n                                    w \\<in> write_actions E'' \\<and>\n                                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                                    value_written P E'' w (ad, al) =\n                                    v \\<and>\n                                    P,E'' \\<turnstile> w \\<le>hb a \\<and>\n                                    (\\<forall>w'\\<in>write_actions E''.\n  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>hb a \\<or>\n  is_volatile P al \\<and>\n  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n  P,E'' \\<turnstile> w' \\<le>so a \\<longrightarrow>\n  w' = w))\n 8. thread_start_actions_ok E''\n 9. \\<And>n ad al v.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n;\n        action_obs E'' n = NormalAction (ReadMem ad al v)\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n      else SOME w.\n              case lnth E'' n of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                    w' = w) \\<le>hb n", "thus \"?ws a' \\<in> write_actions E''\"\n      and \"(ad, al) \\<in> action_loc P E'' (?ws a')\"\n      and \"value_written P E'' (?ws a') (ad, al) = v\"\n      and \"length E' \\<le> a' \\<Longrightarrow> P,E'' \\<turnstile> ?ws a' \\<le>hb a'\"\n      and \"\\<not> P,E'' \\<turnstile> a' \\<le>hb ?ws a'\"\n      and \"is_volatile P al \\<Longrightarrow> \\<not> P,E'' \\<turnstile> a' \\<le>so ?ws a'\"\n      and \"\\<And>a''. \\<lbrakk> a'' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a''; P,E'' \\<turnstile> ?ws a' \\<le>hb a''; P,E'' \\<turnstile> a'' \\<le>hb a' \\<rbrakk> \\<Longrightarrow> a'' = ?ws a'\"\n      and \"\\<And>a''. \\<lbrakk> a'' \\<in> write_actions E''; (ad, al) \\<in> action_loc P E'' a''; is_volatile P al; P,E'' \\<turnstile> ?ws a' \\<le>so a''; P,E'' \\<turnstile> a'' \\<le>so a' \\<rbrakk> \\<Longrightarrow> a'' = ?ws a'\""], ["proof (prove)\nusing this:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E'' \\<and>\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w)) \\<and>\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v \\<and>\n  (length E' \\<le> a' \\<longrightarrow>\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb a') \\<and>\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w)) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))) \\<and>\n  (\\<forall>a''.\n      a'' \\<in> write_actions E'' \\<longrightarrow>\n      (ad, al) \\<in> action_loc P E'' a'' \\<longrightarrow>\n      P,E'' \\<turnstile> if a' < length E' then ws' a'\n                         else SOME w.\n                                 case lnth E'' a' of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n w' = w) \\<le>hb a'' \\<and>\n      P,E'' \\<turnstile> a'' \\<le>hb a' \\<or>\n      is_volatile P al \\<and>\n      P,E'' \\<turnstile> if a' < length E' then ws' a'\n                         else SOME w.\n                                 case lnth E'' a' of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n w' = w) \\<le>so a'' \\<and>\n      P,E'' \\<turnstile> a'' \\<le>so a' \\<longrightarrow>\n      a'' =\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w)))\n\ngoal (1 subgoal):\n 1. (((if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      \\<in> write_actions E'' &&&\n      (ad, al)\n      \\<in> action_loc P E''\n             (if a' < length E' then ws' a'\n              else SOME w.\n                      case lnth E'' a' of\n                      (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                        w \\<in> write_actions E'' \\<and>\n                        (ad, al) \\<in> action_loc P E'' w \\<and>\n                        value_written P E'' w (ad, al) = v \\<and>\n                        P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                        (\\<forall>w'\\<in>write_actions E''.\n                            (ad, al)\n                            \\<in> action_loc P E'' w' \\<longrightarrow>\n                            P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                            P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                            is_volatile P al \\<and>\n                            P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                            P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                            w' = w))) &&&\n     value_written P E''\n      (if a' < length E' then ws' a'\n       else SOME w.\n               case lnth E'' a' of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                     w' = w))\n      (ad, al) =\n     v &&&\n     (length E' \\<le> a' \\<Longrightarrow>\n      P,E'' \\<turnstile> if a' < length E' then ws' a'\n                         else SOME w.\n                                 case lnth E'' a' of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n w' = w) \\<le>hb a')) &&&\n    (\\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n     else SOME w.\n             case lnth E'' a' of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                   w' = w)) &&&\n     (is_volatile P al \\<Longrightarrow>\n      \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n      else SOME w.\n              case lnth E'' a' of\n              (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                w \\<in> write_actions E'' \\<and>\n                (ad, al) \\<in> action_loc P E'' w \\<and>\n                value_written P E'' w (ad, al) = v \\<and>\n                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                (\\<forall>w'\\<in>write_actions E''.\n                    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                    is_volatile P al \\<and>\n                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                    w' = w)))) &&&\n    (\\<And>a''.\n        \\<lbrakk>a'' \\<in> write_actions E'';\n         (ad, al) \\<in> action_loc P E'' a'';\n         P,E'' \\<turnstile> if a' < length E' then ws' a'\n                            else SOME w.\n                                    case lnth E'' a' of\n                                    (t, NormalAction\n   (ReadMem ad al v)) \\<Rightarrow>\nw \\<in> write_actions E'' \\<and>\n(ad, al) \\<in> action_loc P E'' w \\<and>\nvalue_written P E'' w (ad, al) = v \\<and>\nP,E'' \\<turnstile> w \\<le>hb a' \\<and>\n(\\<forall>w'\\<in>write_actions E''.\n    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n    is_volatile P al \\<and>\n    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n    w' = w) \\<le>hb a'';\n         P,E'' \\<turnstile> a'' \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a'' =\n                          (if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w))) &&&\n    (\\<And>a''.\n        \\<lbrakk>a'' \\<in> write_actions E'';\n         (ad, al) \\<in> action_loc P E'' a''; is_volatile P al;\n         P,E'' \\<turnstile> if a' < length E' then ws' a'\n                            else SOME w.\n                                    case lnth E'' a' of\n                                    (t, NormalAction\n   (ReadMem ad al v)) \\<Rightarrow>\nw \\<in> write_actions E'' \\<and>\n(ad, al) \\<in> action_loc P E'' w \\<and>\nvalue_written P E'' w (ad, al) = v \\<and>\nP,E'' \\<turnstile> w \\<le>hb a' \\<and>\n(\\<forall>w'\\<in>write_actions E''.\n    (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n    is_volatile P al \\<and>\n    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n    w' = w) \\<le>so a'';\n         P,E'' \\<turnstile> a'' \\<le>so a'\\<rbrakk>\n        \\<Longrightarrow> a'' =\n                          (if a' < length E' then ws' a'\n                           else SOME w.\n                                   case lnth E'' a' of\n                                   (t, NormalAction\n  (ReadMem ad al v)) \\<Rightarrow>\n                                     w \\<in> write_actions E'' \\<and>\n                                     (ad, al)\n                                     \\<in> action_loc P E'' w \\<and>\n                                     value_written P E'' w (ad, al) =\n                                     v \\<and>\n                                     P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                     (\\<forall>w'\\<in>write_actions E''.\n   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n   is_volatile P al \\<and>\n   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n   w' = w)))", "by blast+"], ["proof (state)\nthis:\n  (if a' < length E' then ws' a'\n   else SOME w.\n           case lnth E'' a' of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                 w' = w))\n  \\<in> write_actions E''\n  (ad, al)\n  \\<in> action_loc P E''\n         (if a' < length E' then ws' a'\n          else SOME w.\n                  case lnth E'' a' of\n                  (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                    w \\<in> write_actions E'' \\<and>\n                    (ad, al) \\<in> action_loc P E'' w \\<and>\n                    value_written P E'' w (ad, al) = v \\<and>\n                    P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                    (\\<forall>w'\\<in>write_actions E''.\n                        (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                        P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                        is_volatile P al \\<and>\n                        P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                        P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                        w' = w))\n  value_written P E''\n   (if a' < length E' then ws' a'\n    else SOME w.\n            case lnth E'' a' of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              w \\<in> write_actions E'' \\<and>\n              (ad, al) \\<in> action_loc P E'' w \\<and>\n              value_written P E'' w (ad, al) = v \\<and>\n              P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n              (\\<forall>w'\\<in>write_actions E''.\n                  (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                  P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                  is_volatile P al \\<and>\n                  P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                  P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                  w' = w))\n   (ad, al) =\n  v\n  length E' \\<le> a' \\<Longrightarrow>\n  P,E'' \\<turnstile> if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w) \\<le>hb a'\n  \\<not> P,E'' \\<turnstile> a' \\<le>hb (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n  is_volatile P al \\<Longrightarrow>\n  \\<not> P,E'' \\<turnstile> a' \\<le>so (if a' < length E' then ws' a'\n  else SOME w.\n          case lnth E'' a' of\n          (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n            w \\<in> write_actions E'' \\<and>\n            (ad, al) \\<in> action_loc P E'' w \\<and>\n            value_written P E'' w (ad, al) = v \\<and>\n            P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n            (\\<forall>w'\\<in>write_actions E''.\n                (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                is_volatile P al \\<and>\n                P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                w' = w))\n  \\<lbrakk>?a'' \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?a'';\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>hb ?a'';\n   P,E'' \\<turnstile> ?a'' \\<le>hb a'\\<rbrakk>\n  \\<Longrightarrow> ?a'' =\n                    (if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w))\n  \\<lbrakk>?a'' \\<in> write_actions E'';\n   (ad, al) \\<in> action_loc P E'' ?a''; is_volatile P al;\n   P,E'' \\<turnstile> if a' < length E' then ws' a'\n                      else SOME w.\n                              case lnth E'' a' of\n                              (t, NormalAction\n                                   (ReadMem ad al v)) \\<Rightarrow>\n                                w \\<in> write_actions E'' \\<and>\n                                (ad, al) \\<in> action_loc P E'' w \\<and>\n                                value_written P E'' w (ad, al) = v \\<and>\n                                P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                                (\\<forall>w'\\<in>write_actions E''.\n                                    (ad, al)\n                                    \\<in> action_loc P E''\n     w' \\<longrightarrow>\n                                    P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                    is_volatile P al \\<and>\n                                    P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                    P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                    w' = w) \\<le>so ?a'';\n   P,E'' \\<turnstile> ?a'' \\<le>so a'\\<rbrakk>\n  \\<Longrightarrow> ?a'' =\n                    (if a' < length E' then ws' a'\n                     else SOME w.\n                             case lnth E'' a' of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb a' \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb a' \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so a' \\<longrightarrow>\n                                   w' = w))\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok E''", "qed(assumption|rule tsa)+"], ["proof (state)\nthis:\n  P \\<turnstile> (E'',\n                  \\<lambda>n.\n                     if n < length E' then ws' n\n                     else SOME w.\n                             case lnth E'' n of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                                   w' = w)) \\<surd> \\<and>\n  (\\<forall>n ad al v.\n      n \\<in> read_actions E'' \\<longrightarrow>\n      length E' \\<le> n \\<longrightarrow>\n      action_obs E'' n = NormalAction (ReadMem ad al v) \\<longrightarrow>\n      P,E'' \\<turnstile> if n < length E' then ws' n\n                         else SOME w.\n                                 case lnth E'' n of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n w' = w) \\<le>hb n)\n\ngoal (3 subgoals):\n 1. P \\<turnstile> (E'', ?ws) \\<surd>\n 2. \\<And>n.\n       \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\n 3. \\<And>n. n < length E' \\<Longrightarrow> ?ws n = ws' n", "thus \"P \\<turnstile> (E'', ?ws) \\<surd>\"\n    and \"\\<And>n. \\<lbrakk> n \\<in> read_actions E''; length E' \\<le> n \\<rbrakk> \\<Longrightarrow> P,E'' \\<turnstile> ?ws n \\<le>hb n\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E'',\n                  \\<lambda>n.\n                     if n < length E' then ws' n\n                     else SOME w.\n                             case lnth E'' n of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                                   w' = w)) \\<surd> \\<and>\n  (\\<forall>n ad al v.\n      n \\<in> read_actions E'' \\<longrightarrow>\n      length E' \\<le> n \\<longrightarrow>\n      action_obs E'' n = NormalAction (ReadMem ad al v) \\<longrightarrow>\n      P,E'' \\<turnstile> if n < length E' then ws' n\n                         else SOME w.\n                                 case lnth E'' n of\n                                 (t, NormalAction\n(ReadMem ad al v)) \\<Rightarrow>\n                                   w \\<in> write_actions E'' \\<and>\n                                   (ad, al) \\<in> action_loc P E'' w \\<and>\n                                   value_written P E'' w (ad, al) = v \\<and>\n                                   P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                                   (\\<forall>w'\\<in>write_actions E''.\n (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n is_volatile P al \\<and>\n P,E'' \\<turnstile> w \\<le>so w' \\<and>\n P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n w' = w) \\<le>hb n)\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (E'',\n                    \\<lambda>n.\n                       if n < length E' then ws' n\n                       else SOME w.\n                               case lnth E'' n of\n                               (t, NormalAction\n                                    (ReadMem ad al v)) \\<Rightarrow>\n                                 w \\<in> write_actions E'' \\<and>\n                                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                                 value_written P E'' w (ad, al) = v \\<and>\n                                 P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                                 (\\<forall>w'\\<in>write_actions E''.\n                                     (ad, al)\n                                     \\<in> action_loc P E''\n      w' \\<longrightarrow>\n                                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                                     is_volatile P al \\<and>\n                                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                     P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                                     w' = w)) \\<surd> &&&\n    (\\<And>n.\n        \\<lbrakk>n \\<in> read_actions E''; length E' \\<le> n\\<rbrakk>\n        \\<Longrightarrow> P,E'' \\<turnstile> if n < length E' then ws' n\n       else SOME w.\n               case lnth E'' n of\n               (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                 w \\<in> write_actions E'' \\<and>\n                 (ad, al) \\<in> action_loc P E'' w \\<and>\n                 value_written P E'' w (ad, al) = v \\<and>\n                 P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                 (\\<forall>w'\\<in>write_actions E''.\n                     (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                     P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                     is_volatile P al \\<and>\n                     P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                     P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                     w' = w) \\<le>hb n)", "by(blast elim: read_actions.cases intro: read_actions.intros)+"], ["proof (state)\nthis:\n  P \\<turnstile> (E'',\n                  \\<lambda>n.\n                     if n < length E' then ws' n\n                     else SOME w.\n                             case lnth E'' n of\n                             (t, NormalAction\n                                  (ReadMem ad al v)) \\<Rightarrow>\n                               w \\<in> write_actions E'' \\<and>\n                               (ad, al) \\<in> action_loc P E'' w \\<and>\n                               value_written P E'' w (ad, al) = v \\<and>\n                               P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                               (\\<forall>w'\\<in>write_actions E''.\n                                   (ad, al)\n                                   \\<in> action_loc P E''\n    w' \\<longrightarrow>\n                                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                                   is_volatile P al \\<and>\n                                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                                   P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                                   w' = w)) \\<surd>\n  \\<lbrakk>?n \\<in> read_actions E''; length E' \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> P,E'' \\<turnstile> if ?n < length E' then ws' ?n\n else SOME w.\n         case lnth E'' ?n of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           w \\<in> write_actions E'' \\<and>\n           (ad, al) \\<in> action_loc P E'' w \\<and>\n           value_written P E'' w (ad, al) = v \\<and>\n           P,E'' \\<turnstile> w \\<le>hb ?n \\<and>\n           (\\<forall>w'\\<in>write_actions E''.\n               (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n               P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>hb ?n \\<or>\n               is_volatile P al \\<and>\n               P,E'' \\<turnstile> w \\<le>so w' \\<and>\n               P,E'' \\<turnstile> w' \\<le>so ?n \\<longrightarrow>\n               w' = w) \\<le>hb ?n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length E' \\<Longrightarrow>\n       (if n < length E' then ws' n\n        else SOME w.\n                case lnth E'' n of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                      w' = w)) =\n       ws' n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length E' \\<Longrightarrow>\n       (if n < length E' then ws' n\n        else SOME w.\n                case lnth E'' n of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                      w' = w)) =\n       ws' n", "assume \"n < length E'\""], ["proof (state)\nthis:\n  n < length E'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length E' \\<Longrightarrow>\n       (if n < length E' then ws' n\n        else SOME w.\n                case lnth E'' n of\n                (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n                  w \\<in> write_actions E'' \\<and>\n                  (ad, al) \\<in> action_loc P E'' w \\<and>\n                  value_written P E'' w (ad, al) = v \\<and>\n                  P,E'' \\<turnstile> w \\<le>hb n \\<and>\n                  (\\<forall>w'\\<in>write_actions E''.\n                      (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                      P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                      is_volatile P al \\<and>\n                      P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                      P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                      w' = w)) =\n       ws' n", "thus \"?ws n = ws' n\""], ["proof (prove)\nusing this:\n  n < length E'\n\ngoal (1 subgoal):\n 1. (if n < length E' then ws' n\n     else SOME w.\n             case lnth E'' n of\n             (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n               w \\<in> write_actions E'' \\<and>\n               (ad, al) \\<in> action_loc P E'' w \\<and>\n               value_written P E'' w (ad, al) = v \\<and>\n               P,E'' \\<turnstile> w \\<le>hb n \\<and>\n               (\\<forall>w'\\<in>write_actions E''.\n                   (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                   P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                   is_volatile P al \\<and>\n                   P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                   P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                   w' = w)) =\n    ws' n", "by simp"], ["proof (state)\nthis:\n  (if n < length E' then ws' n\n   else SOME w.\n           case lnth E'' n of\n           (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n             w \\<in> write_actions E'' \\<and>\n             (ad, al) \\<in> action_loc P E'' w \\<and>\n             value_written P E'' w (ad, al) = v \\<and>\n             P,E'' \\<turnstile> w \\<le>hb n \\<and>\n             (\\<forall>w'\\<in>write_actions E''.\n                 (ad, al) \\<in> action_loc P E'' w' \\<longrightarrow>\n                 P,E'' \\<turnstile> w \\<le>hb w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>hb n \\<or>\n                 is_volatile P al \\<and>\n                 P,E'' \\<turnstile> w \\<le>so w' \\<and>\n                 P,E'' \\<turnstile> w' \\<le>so n \\<longrightarrow>\n                 w' = w)) =\n  ws' n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ta_hb_consistent_not_ReadI:\n  \"(\\<And>t ad al v. (t, NormalAction (ReadMem ad al v)) \\<notin> lset E) \\<Longrightarrow> ta_hb_consistent P E' E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t ad al v.\n        (t, NormalAction (ReadMem ad al v))\n        \\<notin> lset E) \\<Longrightarrow>\n    ta_hb_consistent P E' E", "proof(coinduction arbitrary: E' E)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E' E.\n       \\<forall>t ad al v.\n          (t, NormalAction (ReadMem ad al v))\n          \\<notin> lset E \\<Longrightarrow>\n       (\\<exists>obs. E' = obs \\<and> E = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E' = obs \\<and>\n           E = LCons ob obs' \\<and>\n           ((\\<exists>E' E.\n                obs @ [ob] = E' \\<and>\n                obs' = E \\<and>\n                (\\<forall>t ad al v.\n                    (t, NormalAction (ReadMem ad al v))\n                    \\<notin> lset E)) \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "case (ta_hb_consistent E' E)"], ["proof (state)\nthis:\n  \\<forall>t ad al v. (t, NormalAction (ReadMem ad al v)) \\<notin> lset E\n\ngoal (1 subgoal):\n 1. \\<And>E' E.\n       \\<forall>t ad al v.\n          (t, NormalAction (ReadMem ad al v))\n          \\<notin> lset E \\<Longrightarrow>\n       (\\<exists>obs. E' = obs \\<and> E = LNil) \\<or>\n       (\\<exists>obs ob obs'.\n           E' = obs \\<and>\n           E = LCons ob obs' \\<and>\n           ((\\<exists>E' E.\n                obs @ [ob] = E' \\<and>\n                obs' = E \\<and>\n                (\\<forall>t ad al v.\n                    (t, NormalAction (ReadMem ad al v))\n                    \\<notin> lset E)) \\<or>\n            ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n           (case ob of\n            (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n              \\<exists>w.\n                 w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n                 (ad, al)\n                 \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n                 value_written P (llist_of (obs @ [ob])) w (ad, al) =\n                 v \\<and>\n                 P,llist_of\n                    (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n                 (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                     (ad, al)\n                     \\<in> action_loc P (llist_of (obs @ [ob]))\n                            w' \\<longrightarrow>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                     is_volatile P al \\<and>\n                     P,llist_of\n                        (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                     P,llist_of\n                        (obs @\n                         [ob]) \\<turnstile> w' \\<le>so length\n                  obs \\<longrightarrow>\n                     w' = w)\n            | (t, NormalAction _) \\<Rightarrow> True\n            | (t, _) \\<Rightarrow> True))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t ad al v. (t, NormalAction (ReadMem ad al v)) \\<notin> lset E\n\ngoal (1 subgoal):\n 1. (\\<exists>obs. E' = obs \\<and> E = LNil) \\<or>\n    (\\<exists>obs ob obs'.\n        E' = obs \\<and>\n        E = LCons ob obs' \\<and>\n        ((\\<exists>E' E.\n             obs @ [ob] = E' \\<and>\n             obs' = E \\<and>\n             (\\<forall>t ad al v.\n                 (t, NormalAction (ReadMem ad al v)) \\<notin> lset E)) \\<or>\n         ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n        (case ob of\n         (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n           \\<exists>w.\n              w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n              (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n              value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n              P,llist_of\n                 (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n              (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                  (ad, al)\n                  \\<in> action_loc P (llist_of (obs @ [ob]))\n                         w' \\<longrightarrow>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                  P,llist_of\n                     (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                  is_volatile P al \\<and>\n                  P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                  P,llist_of\n                     (obs @\n                      [ob]) \\<turnstile> w' \\<le>so length\n               obs \\<longrightarrow>\n                  w' = w)\n         | (t, NormalAction _) \\<Rightarrow> True\n         | (t, _) \\<Rightarrow> True))", "by(cases E)(auto split: action.split obs_event.split, blast)"], ["proof (state)\nthis:\n  (\\<exists>obs. E' = obs \\<and> E = LNil) \\<or>\n  (\\<exists>obs ob obs'.\n      E' = obs \\<and>\n      E = LCons ob obs' \\<and>\n      ((\\<exists>E' E.\n           obs @ [ob] = E' \\<and>\n           obs' = E \\<and>\n           (\\<forall>t ad al v.\n               (t, NormalAction (ReadMem ad al v)) \\<notin> lset E)) \\<or>\n       ta_hb_consistent P (obs @ [ob]) obs') \\<and>\n      (case ob of\n       (t, NormalAction (ReadMem ad al v)) \\<Rightarrow>\n         \\<exists>w.\n            w \\<in> write_actions (llist_of (obs @ [ob])) \\<and>\n            (ad, al) \\<in> action_loc P (llist_of (obs @ [ob])) w \\<and>\n            value_written P (llist_of (obs @ [ob])) w (ad, al) = v \\<and>\n            P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb length obs \\<and>\n            (\\<forall>w'\\<in>write_actions (llist_of (obs @ [ob])).\n                (ad, al)\n                \\<in> action_loc P (llist_of (obs @ [ob]))\n                       w' \\<longrightarrow>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>hb w' \\<and>\n                P,llist_of\n                   (obs @ [ob]) \\<turnstile> w' \\<le>hb length obs \\<or>\n                is_volatile P al \\<and>\n                P,llist_of (obs @ [ob]) \\<turnstile> w \\<le>so w' \\<and>\n                P,llist_of\n                   (obs @\n                    [ob]) \\<turnstile> w' \\<le>so length\n             obs \\<longrightarrow>\n                w' = w)\n       | (t, NormalAction _) \\<Rightarrow> True\n       | (t, _) \\<Rightarrow> True))\n\ngoal:\nNo subgoals!", "qed"], ["", "context jmm_multithreaded begin"], ["", "definition complete_hb :: \"('l,'thread_id,'x,'m,'w) state \\<Rightarrow> ('thread_id \\<times> ('addr, 'thread_id) obs_event action) list\n  \\<Rightarrow> ('thread_id \\<times> ('l, 'thread_id, 'x, 'm, 'w, ('addr, 'thread_id) obs_event action) thread_action) llist\"\nwhere\n  \"complete_hb s E = unfold_llist\n     (\\<lambda>(s, E). \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n     (\\<lambda>(s, E). fst (SOME ((t, ta), s'). s -t\\<triangleright>ta\\<rightarrow> s' \\<and> ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n     (\\<lambda>(s, E). let ((t, ta), s') = SOME ((t, ta), s'). s -t\\<triangleright>ta\\<rightarrow> s' \\<and> ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (s, E)\""], ["", "definition hb_completion ::\n  \"('l, 'thread_id, 'x, 'm, 'w) state \\<Rightarrow> ('thread_id \\<times> ('addr, 'thread_id) obs_event action) list \\<Rightarrow> bool\"\nwhere\n  \"hb_completion s E \\<longleftrightarrow>\n   (\\<forall>ttas s' t x ta x' m' i.\n       s -\\<triangleright>ttas\\<rightarrow>* s' \\<longrightarrow> \n       non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) \\<longrightarrow>\n       thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor> \\<longrightarrow> t \\<turnstile> (x, shr s') -ta\\<rightarrow> (x', m') \\<longrightarrow> actions_ok s' t ta \\<longrightarrow>\n       non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<longrightarrow>\n       (\\<exists>ta' x'' m''. t \\<turnstile> (x, shr s') -ta'\\<rightarrow> (x'', m'') \\<and> actions_ok s' t ta' \\<and> \n                      take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                      ta_hb_consistent P\n                        (E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas) @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                      (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                      (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)))\""], ["", "lemma hb_completionD:\n  \"\\<lbrakk> hb_completion s E; s -\\<triangleright>ttas\\<rightarrow>* s';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))); \n     thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; t \\<turnstile> (x, shr s') -ta\\<rightarrow> (x', m'); actions_ok s' t ta;\n     non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''. t \\<turnstile> (x, shr s') -ta'\\<rightarrow> (x'', m'') \\<and> actions_ok s' t ta' \\<and>\n                   take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                   ta_hb_consistent P (E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas) @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                      (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                   (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                   (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb_completion s E; s -\\<triangleright>ttas\\<rightarrow>* s';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n      (llist_of\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas)));\n     thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n     t \\<turnstile> \\<langle>x, shr s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     actions_ok s' t ta;\n     non_speculative P\n      (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas)))\n      (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta' x'' m''.\n                         t \\<turnstile> \\<langle>x, shr\n               s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                         actions_ok s' t ta' \\<and>\n                         take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                         take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                         ta_hb_consistent P\n                          (E @\n                           concat\n                            (map (\\<lambda>(t, ta).\n                                     map (Pair t)\n\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                              ttas) @\n                           map (Pair t)\n                            (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                          (llist_of\n                            (map (Pair t)\n                              (drop i\n                                \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                         (i < length\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                          i < length\n                               \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                         (if \\<exists>ad al v.\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                                NormalAction (ReadMem ad al v)\n                          then sim_action else (=))\n                          (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                          (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "unfolding hb_completion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ttas s' t x ta x' m' i.\n                s -\\<triangleright>ttas\\<rightarrow>* s' \\<longrightarrow>\n                non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n                 (llist_of\n                   (concat\n                     (map (\\<lambda>(t, y).\n                              \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n                       ttas))) \\<longrightarrow>\n                thr s' t =\n                \\<lfloor>(x, no_wait_locks)\\<rfloor> \\<longrightarrow>\n                t \\<turnstile> \\<langle>x, shr\n      s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<longrightarrow>\n                actions_ok s' t ta \\<longrightarrow>\n                non_speculative P\n                 (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n                   (concat\n                     (map (\\<lambda>(t, y).\n                              \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n                       ttas)))\n                 (llist_of\n                   (take i\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<longrightarrow>\n                (\\<exists>ta' x'' m''.\n                    t \\<turnstile> \\<langle>x, shr\n          s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                    actions_ok s' t ta' \\<and>\n                    take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                    take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                    ta_hb_consistent P\n                     (E @\n                      concat\n                       (map (\\<lambda>(t, ta).\n                                map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                         ttas) @\n                      map (Pair t)\n                       (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     (llist_of\n                       (map (Pair t)\n                         (drop i\n                           \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                    (i < length\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                     i < length\n                          \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                    (if \\<exists>ad al v.\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                           NormalAction (ReadMem ad al v)\n                     then sim_action else (=))\n                     (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                     (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i));\n     s -\\<triangleright>ttas\\<rightarrow>* s';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n      (llist_of\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas)));\n     thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n     t \\<turnstile> \\<langle>x, shr s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     actions_ok s' t ta;\n     non_speculative P\n      (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas)))\n      (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta' x'' m''.\n                         t \\<turnstile> \\<langle>x, shr\n               s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                         actions_ok s' t ta' \\<and>\n                         take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                         take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                         ta_hb_consistent P\n                          (E @\n                           concat\n                            (map (\\<lambda>(t, ta).\n                                     map (Pair t)\n\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                              ttas) @\n                           map (Pair t)\n                            (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                          (llist_of\n                            (map (Pair t)\n                              (drop i\n                                \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                         (i < length\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                          i < length\n                               \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                         (if \\<exists>ad al v.\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                                NormalAction (ReadMem ad al v)\n                          then sim_action else (=))\n                          (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                          (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "by blast"], ["", "lemma hb_completionI [intro?]:\n  \"(\\<And>ttas s' t x ta x' m' i. \n     \\<lbrakk> s -\\<triangleright>ttas\\<rightarrow>* s'; non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)));\n       thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; t \\<turnstile> (x, shr s') -ta\\<rightarrow> (x', m'); actions_ok s' t ta;\n       non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<rbrakk>\n     \\<Longrightarrow> \\<exists>ta' x'' m''. t \\<turnstile> (x, shr s') -ta'\\<rightarrow> (x'', m'') \\<and> actions_ok s' t ta' \\<and> take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                   ta_hb_consistent P (E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas) @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                   (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                   (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i))\n  \\<Longrightarrow> hb_completion s E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ttas s' t x ta x' m' i.\n        \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n         non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n          (llist_of\n            (concat\n              (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas)));\n         thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> \\<langle>x, shr s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         actions_ok s' t ta;\n         non_speculative P\n          (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n            (concat\n              (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas)))\n          (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta' x'' m''.\n                             t \\<turnstile> \\<langle>x, shr\n                   s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                             actions_ok s' t ta' \\<and>\n                             take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                             take i\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                             ta_hb_consistent P\n                              (E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas) @\n                               map (Pair t)\n                                (take i\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                              (llist_of\n                                (map (Pair t)\n                                  (drop i\n                                    \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                             (i < length\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              i < length\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                             (if \\<exists>ad al v.\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                    i =\n                                    NormalAction (ReadMem ad al v)\n                              then sim_action else (=))\n                              (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                              (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> !\n                               i)) \\<Longrightarrow>\n    hb_completion s E", "unfolding hb_completion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ttas s' t x ta x' m' i.\n        \\<lbrakk>s -\\<triangleright>ttas\\<rightarrow>* s';\n         non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n          (llist_of\n            (concat\n              (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas)));\n         thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> \\<langle>x, shr s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         actions_ok s' t ta;\n         non_speculative P\n          (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n            (concat\n              (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas)))\n          (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta' x'' m''.\n                             t \\<turnstile> \\<langle>x, shr\n                   s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                             actions_ok s' t ta' \\<and>\n                             take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                             take i\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                             ta_hb_consistent P\n                              (E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas) @\n                               map (Pair t)\n                                (take i\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                              (llist_of\n                                (map (Pair t)\n                                  (drop i\n                                    \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                             (i < length\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              i < length\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                             (if \\<exists>ad al v.\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                    i =\n                                    NormalAction (ReadMem ad al v)\n                              then sim_action else (=))\n                              (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                              (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> !\n                               i)) \\<Longrightarrow>\n    \\<forall>ttas s' t x ta x' m' i.\n       s -\\<triangleright>ttas\\<rightarrow>* s' \\<longrightarrow>\n       non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n        (llist_of\n          (concat\n            (map (\\<lambda>(t, y). \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n              ttas))) \\<longrightarrow>\n       thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor> \\<longrightarrow>\n       t \\<turnstile> \\<langle>x, shr s'\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<longrightarrow>\n       actions_ok s' t ta \\<longrightarrow>\n       non_speculative P\n        (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n          (concat\n            (map (\\<lambda>(t, y). \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n              ttas)))\n        (llist_of\n          (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) \\<longrightarrow>\n       (\\<exists>ta' x'' m''.\n           t \\<turnstile> \\<langle>x, shr\n s'\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n           actions_ok s' t ta' \\<and>\n           take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n           take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n           ta_hb_consistent P\n            (E @\n             concat\n              (map (\\<lambda>(t, ta).\n                       map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas) @\n             map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            (llist_of\n              (map (Pair t)\n                (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n           (i < length\n                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n           (if \\<exists>ad al v.\n                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                  NormalAction (ReadMem ad al v)\n            then sim_action else (=))\n            (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n            (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i))", "by blast"], ["", "lemma hb_completion_shift:\n  assumes hb_c: \"hb_completion s E\"\n  and \\<tau>Red: \"s -\\<triangleright>ttas\\<rightarrow>* s'\"\n  and sc: \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)))\"\n      (is \"non_speculative _ ?vs _\")\n  shows \"hb_completion s' (E @ (concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas)))\"\n  (is \"hb_completion _ ?E\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. hb_completion s'\n     (E @\n      concat\n       (map (\\<lambda>(t, ta).\n                map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas))", "proof(rule hb_completionI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "fix ttas' s'' t x ta x' m' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "assume \\<tau>Red': \"s' -\\<triangleright>ttas'\\<rightarrow>* s''\"\n    and sc': \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd ?E)) (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas')))\"\n    and red: \"thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\" \"t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\" \"actions_ok s'' t ta\" \n    and ns: \"non_speculative P (w_values P (w_values P (\\<lambda>_. {}) (map snd ?E)) (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas'))) (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (state)\nthis:\n  s' -\\<triangleright>ttas'\\<rightarrow>* s''\n  non_speculative P\n   (w_values P (\\<lambda>_. {})\n     (map snd\n       (E @\n        concat\n         (map (\\<lambda>(t, ta).\n                  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           ttas))))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n  thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  actions_ok s'' t ta\n  non_speculative P\n   (w_values P\n     (w_values P (\\<lambda>_. {})\n       (map snd\n         (E @\n          concat\n           (map (\\<lambda>(t, ta).\n                    map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas))))\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n   (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "from \\<tau>Red \\<tau>Red'"], ["proof (chain)\npicking this:\n  s -\\<triangleright>ttas\\<rightarrow>* s'\n  s' -\\<triangleright>ttas'\\<rightarrow>* s''", "have \"s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\""], ["proof (prove)\nusing this:\n  s -\\<triangleright>ttas\\<rightarrow>* s'\n  s' -\\<triangleright>ttas'\\<rightarrow>* s''\n\ngoal (1 subgoal):\n 1. s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''", "unfolding RedT_def"], ["proof (prove)\nusing this:\n  mthr.Trsys s ttas s'\n  mthr.Trsys s' ttas' s''\n\ngoal (1 subgoal):\n 1. mthr.Trsys s (ttas @ ttas') s''", "by(rule rtrancl3p_trans)"], ["proof (state)\nthis:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "moreover"], ["proof (state)\nthis:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "from sc sc'"], ["proof (chain)\npicking this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas)))\n  non_speculative P\n   (w_values P (\\<lambda>_. {})\n     (map snd\n       (E @\n        concat\n         (map (\\<lambda>(t, ta).\n                  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           ttas))))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))", "have \"non_speculative P ?vs (llist_of (concat (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) (ttas @ ttas'))))\""], ["proof (prove)\nusing this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas)))\n  non_speculative P\n   (w_values P (\\<lambda>_. {})\n     (map snd\n       (E @\n        concat\n         (map (\\<lambda>(t, ta).\n                  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           ttas))))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n     (llist_of\n       (concat\n         (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           (ttas @ ttas'))))", "unfolding map_append concat_append lappend_llist_of_llist_of[symmetric] map_concat"], ["proof (prove)\nusing this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas)))\n  non_speculative P\n   (w_values P (\\<lambda>_. {})\n     (map snd E @\n      concat\n       (map (map snd)\n         (map (\\<lambda>(t, ta).\n                  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           ttas))))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n     (lappend\n       (llist_of\n         (concat\n           (map (\\<lambda>(t, y). \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas)))\n       (llist_of\n         (concat\n           (map (\\<lambda>(t, y). \\<lbrace>y\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas'))))", "by(simp add: non_speculative_lappend o_def split_def del: lappend_llist_of_llist_of)"], ["proof (state)\nthis:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         (ttas @ ttas'))))\n\ngoal (1 subgoal):\n 1. \\<And>ttasa s'a t x ta x' m' i.\n       \\<lbrakk>s' -\\<triangleright>ttasa\\<rightarrow>* s'a;\n        non_speculative P\n         (w_values P (\\<lambda>_. {})\n           (map snd\n             (E @\n              concat\n               (map (\\<lambda>(t, ta).\n                        map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                 ttas))))\n         (llist_of\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)));\n        thr s'a t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>x, shr s'a\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        actions_ok s'a t ta;\n        non_speculative P\n         (w_values P\n           (w_values P (\\<lambda>_. {})\n             (map snd\n               (E @\n                concat\n                 (map (\\<lambda>(t, ta).\n                          map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                   ttas))))\n           (concat\n             (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n               ttasa)))\n         (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta' x'' m''.\n                            t \\<turnstile> \\<langle>x, shr\n                  s'a\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                            actions_ok s'a t ta' \\<and>\n                            take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                            take i\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                            ta_hb_consistent P\n                             ((E @\n                               concat\n                                (map (\\<lambda>(t, ta).\n   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                  ttas)) @\n                              concat\n                               (map (\\<lambda>(t, ta).\n  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                                 ttasa) @\n                              map (Pair t)\n                               (take i\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                             (llist_of\n                               (map (Pair t)\n                                 (drop i\n                                   \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                            (i < length\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                             i < length\n                                  \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                            (if \\<exists>ad al v.\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> !\n                                   i =\n                                   NormalAction (ReadMem ad al v)\n                             then sim_action else (=))\n                             (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                             (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "ultimately"], ["proof (chain)\npicking this:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         (ttas @ ttas'))))", "show \"\\<exists>ta' x'' m''. t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and> actions_ok s'' t ta' \\<and> take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> = take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n         ta_hb_consistent P (?E @ concat (map (\\<lambda>(t, ta). map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) ttas') @ map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            (llist_of (map (Pair t) (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n         (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n         (if \\<exists>ad al v. \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i = NormalAction (ReadMem ad al v) then sim_action else (=)) (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i) (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)\""], ["proof (prove)\nusing this:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         (ttas @ ttas'))))\n\ngoal (1 subgoal):\n 1. \\<exists>ta' x'' m''.\n       t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n       actions_ok s'' t ta' \\<and>\n       take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n       take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n       ta_hb_consistent P\n        ((E @\n          concat\n           (map (\\<lambda>(t, ta).\n                    map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas)) @\n         concat\n          (map (\\<lambda>(t, ta).\n                   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas') @\n         map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (llist_of\n          (map (Pair t)\n            (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n       (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n        i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n       (if \\<exists>ad al v.\n              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n              NormalAction (ReadMem ad al v)\n        then sim_action else (=))\n        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "using red ns"], ["proof (prove)\nusing this:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         (ttas @ ttas'))))\n  thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  actions_ok s'' t ta\n  non_speculative P\n   (w_values P\n     (w_values P (\\<lambda>_. {})\n       (map snd\n         (E @\n          concat\n           (map (\\<lambda>(t, ta).\n                    map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas))))\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n   (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>ta' x'' m''.\n       t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n       actions_ok s'' t ta' \\<and>\n       take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n       take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n       ta_hb_consistent P\n        ((E @\n          concat\n           (map (\\<lambda>(t, ta).\n                    map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas)) @\n         concat\n          (map (\\<lambda>(t, ta).\n                   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas') @\n         map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (llist_of\n          (map (Pair t)\n            (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n       (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n        i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n       (if \\<exists>ad al v.\n              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n              NormalAction (ReadMem ad al v)\n        then sim_action else (=))\n        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "unfolding append_assoc"], ["proof (prove)\nusing this:\n  s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s''\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         (ttas @ ttas'))))\n  thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  actions_ok s'' t ta\n  non_speculative P\n   (w_values P\n     (w_values P (\\<lambda>_. {})\n       (map snd\n         (E @\n          concat\n           (map (\\<lambda>(t, ta).\n                    map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n             ttas))))\n     (concat\n       (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n         ttas')))\n   (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>ta' x'' m''.\n       t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n       actions_ok s'' t ta' \\<and>\n       take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n       take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n       ta_hb_consistent P\n        (E @\n         concat\n          (map (\\<lambda>(t, ta).\n                   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas) @\n         concat\n          (map (\\<lambda>(t, ta).\n                   map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas') @\n         map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (llist_of\n          (map (Pair t)\n            (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n       (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n        i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n       (if \\<exists>ad al v.\n              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n              NormalAction (ReadMem ad al v)\n        then sim_action else (=))\n        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "apply(subst (2) append_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s'';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n      (llist_of\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            (ttas @ ttas'))));\n     thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n     t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     actions_ok s'' t ta;\n     non_speculative P\n      (w_values P\n        (w_values P (\\<lambda>_. {})\n          (map snd\n            (E @\n             concat\n              (map (\\<lambda>(t, ta).\n                       map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas))))\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas')))\n      (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta' x'' m''.\n                         t \\<turnstile> \\<langle>x, shr\n               s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                         actions_ok s'' t ta' \\<and>\n                         take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                         take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                         ta_hb_consistent P\n                          (E @\n                           (concat\n                             (map (\\<lambda>(t, ta).\nmap (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                               ttas) @\n                            concat\n                             (map (\\<lambda>(t, ta).\nmap (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                               ttas')) @\n                           map (Pair t)\n                            (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                          (llist_of\n                            (map (Pair t)\n                              (drop i\n                                \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                         (i < length\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                          i < length\n                               \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                         (if \\<exists>ad al v.\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                                NormalAction (ReadMem ad al v)\n                          then sim_action else (=))\n                          (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                          (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "unfolding concat_append[symmetric] map_append[symmetric] foldr_append[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -\\<triangleright>ttas @ ttas'\\<rightarrow>* s'';\n     non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n      (llist_of\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            (ttas @ ttas'))));\n     thr s'' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n     t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     actions_ok s'' t ta;\n     non_speculative P\n      (w_values P\n        (w_values P (\\<lambda>_. {})\n          (map snd\n            (E @\n             concat\n              (map (\\<lambda>(t, ta).\n                       map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                ttas))))\n        (concat\n          (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n            ttas')))\n      (llist_of (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta' x'' m''.\n                         t \\<turnstile> \\<langle>x, shr\n               s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                         actions_ok s'' t ta' \\<and>\n                         take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                         take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                         ta_hb_consistent P\n                          (E @\n                           concat\n                            (map (\\<lambda>(t, ta).\n                                     map (Pair t)\n\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                              (ttas @ ttas')) @\n                           map (Pair t)\n                            (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                          (llist_of\n                            (map (Pair t)\n                              (drop i\n                                \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                         (i < length\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                          i < length\n                               \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                         (if \\<exists>ad al v.\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n                                NormalAction (ReadMem ad al v)\n                          then sim_action else (=))\n                          (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n                          (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)", "by(rule hb_completionD[OF hb_c])(simp_all add: map_concat o_def split_def)"], ["proof (state)\nthis:\n  \\<exists>ta' x'' m''.\n     t \\<turnstile> \\<langle>x, shr s''\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n     actions_ok s'' t ta' \\<and>\n     take i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n     take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n     ta_hb_consistent P\n      ((E @\n        concat\n         (map (\\<lambda>(t, ta).\n                  map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n           ttas)) @\n       concat\n        (map (\\<lambda>(t, ta).\n                 map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          ttas') @\n       map (Pair t) (take i \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n      (llist_of\n        (map (Pair t)\n          (drop i \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n     (i < length \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n      i < length \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n     (if \\<exists>ad al v.\n            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i =\n            NormalAction (ReadMem ad al v)\n      then sim_action else (=))\n      (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n      (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hb_completion_shift1:\n  assumes hb_c: \"hb_completion s E\"\n  and Red: \"s -t\\<triangleright>ta\\<rightarrow> s'\"\n  and sc: \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\"\n  shows \"hb_completion s' (E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb_completion s'\n     (E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)", "using hb_completion_shift[OF hb_c, of \"[(t, ta)]\" s'] Red sc"], ["proof (prove)\nusing this:\n  \\<lbrakk>s -\\<triangleright>[(t, ta)]\\<rightarrow>* s';\n   non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n    (llist_of\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          [(t, ta)])))\\<rbrakk>\n  \\<Longrightarrow> hb_completion s'\n                     (E @\n                      concat\n                       (map (\\<lambda>(t, ta).\n                                map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                         [(t, ta)]))\n  s -t\\<triangleright>ta\\<rightarrow> s'\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. hb_completion s'\n     (E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)", "by(simp add: RedT_def rtrancl3p_Cons rtrancl3p_Nil del: split_paired_Ex)"], ["", "lemma complete_hb_in_Runs:\n  assumes hb_c: \"hb_completion s E\"\n  and ta_hb_consistent_convert_RA: \"\\<And>t E ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"mthr.Runs s (complete_hb s E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mthr.Runs s (complete_hb s E)", "using hb_c"], ["proof (prove)\nusing this:\n  hb_completion s E\n\ngoal (1 subgoal):\n 1. mthr.Runs s (complete_hb s E)", "proof(coinduction arbitrary: s E)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s E.\n       hb_completion s E \\<Longrightarrow>\n       (\\<exists>sa.\n           s = sa \\<and>\n           complete_hb s E = LNil \\<and>\n           (\\<forall>x xa. \\<not> redT sa x xa)) \\<or>\n       (\\<exists>sa s' tls tl.\n           s = sa \\<and>\n           complete_hb s E = LCons tl tls \\<and>\n           redT sa tl s' \\<and>\n           ((\\<exists>s E.\n                s' = s \\<and>\n                tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n            mthr.Runs s' tls))", "case (Runs s E)"], ["proof (state)\nthis:\n  hb_completion s E\n\ngoal (1 subgoal):\n 1. \\<And>s E.\n       hb_completion s E \\<Longrightarrow>\n       (\\<exists>sa.\n           s = sa \\<and>\n           complete_hb s E = LNil \\<and>\n           (\\<forall>x xa. \\<not> redT sa x xa)) \\<or>\n       (\\<exists>sa s' tls tl.\n           s = sa \\<and>\n           complete_hb s E = LCons tl tls \\<and>\n           redT sa tl s' \\<and>\n           ((\\<exists>s E.\n                s' = s \\<and>\n                tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n            mthr.Runs s' tls))", "let ?P = \"\\<lambda>((t, ta), s'). s -t\\<triangleright>ta\\<rightarrow> s' \\<and> ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s E.\n       hb_completion s E \\<Longrightarrow>\n       (\\<exists>sa.\n           s = sa \\<and>\n           complete_hb s E = LNil \\<and>\n           (\\<forall>x xa. \\<not> redT sa x xa)) \\<or>\n       (\\<exists>sa s' tls tl.\n           s = sa \\<and>\n           complete_hb s E = LCons tl tls \\<and>\n           redT sa tl s' \\<and>\n           ((\\<exists>s E.\n                s' = s \\<and>\n                tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n            mthr.Runs s' tls))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "proof(cases \"\\<exists>t ta s'. s -t\\<triangleright>ta\\<rightarrow> s'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "case False"], ["proof (state)\nthis:\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "then"], ["proof (chain)\npicking this:\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)", "have ?Stuck"], ["proof (prove)\nusing this:\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       s = s \\<and>\n       complete_hb s E = LNil \\<and> (\\<forall>x xa. \\<not> redT s x xa)", "by(simp add: complete_hb_def)"], ["proof (state)\nthis:\n  \\<exists>s.\n     s = s \\<and>\n     complete_hb s E = LNil \\<and> (\\<forall>x xa. \\<not> redT s x xa)\n\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     s = s \\<and>\n     complete_hb s E = LNil \\<and> (\\<forall>x xa. \\<not> redT s x xa)\n\ngoal (1 subgoal):\n 1. (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", ".."], ["proof (state)\nthis:\n  (\\<exists>s.\n      s = s \\<and>\n      complete_hb s E = LNil \\<and>\n      (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n  (\\<exists>s s' tls tl.\n      s = s \\<and>\n      complete_hb s E = LCons tl tls \\<and>\n      redT s tl s' \\<and>\n      ((\\<exists>s E.\n           s' = s \\<and>\n           tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n       mthr.Runs s' tls))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "case True"], ["proof (state)\nthis:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "let ?t = \"fst (fst (Eps ?P))\" and ?ta = \"snd (fst (Eps ?P))\" and ?s' = \"snd (Eps ?P)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "from True"], ["proof (chain)\npicking this:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)", "obtain t ta s' where red: \"s -t\\<triangleright>ta\\<rightarrow> s'\""], ["proof (prove)\nusing this:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. (\\<And>t ta s'.\n        s -t\\<triangleright>ta\\<rightarrow> s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "hence \"\\<exists>x. ?P x\""], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "case (redT_normal x x' m')"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  actions_ok s t ta\n  redT_upd s t ta x' m' s'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "from hb_completionD[OF Runs _ _ \\<open>thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close> \\<open>t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\\<close> \\<open>actions_ok s t ta\\<close>, of \"[]\" 0]"], ["proof (chain)\npicking this:\n  \\<lbrakk>s -\\<triangleright>[]\\<rightarrow>* s;\n   non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n    (llist_of\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          [])));\n   non_speculative P\n    (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) [])))\n    (llist_of (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''.\n                       t \\<turnstile> \\<langle>x, shr\n             s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                       actions_ok s t ta' \\<and>\n                       take 0 \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                       take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                       ta_hb_consistent P\n                        (E @\n                         concat\n                          (map (\\<lambda>(t, ta).\n                                   map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                            []) @\n                         map (Pair t)\n                          (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (llist_of\n                          (map (Pair t)\n                            (drop 0\n                              \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                       (0 < length\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                        0 < length\n                             \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                       (if \\<exists>ad al v.\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0 =\n                              NormalAction (ReadMem ad al v)\n                        then sim_action else (=))\n                        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n                        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! 0)", "obtain ta' x'' m'' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\"\n        and \"actions_ok s t ta'\" \"ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>s -\\<triangleright>[]\\<rightarrow>* s;\n   non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n    (llist_of\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          [])));\n   non_speculative P\n    (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) [])))\n    (llist_of (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''.\n                       t \\<turnstile> \\<langle>x, shr\n             s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                       actions_ok s t ta' \\<and>\n                       take 0 \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                       take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                       ta_hb_consistent P\n                        (E @\n                         concat\n                          (map (\\<lambda>(t, ta).\n                                   map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                            []) @\n                         map (Pair t)\n                          (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (llist_of\n                          (map (Pair t)\n                            (drop 0\n                              \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                       (0 < length\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                        0 < length\n                             \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                       (if \\<exists>ad al v.\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0 =\n                              NormalAction (ReadMem ad al v)\n                        then sim_action else (=))\n                        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n                        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n\ngoal (1 subgoal):\n 1. (\\<And>ta' x'' m''.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>;\n         actions_ok s t ta';\n         ta_hb_consistent P E\n          (llist_of\n            (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "obtain ws' where \"redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n         ws' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis redT_updWs_total)"], ["proof (state)\nthis:\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "ultimately"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "using \\<open>thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close>"], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "by(cases ta')(auto intro!: exI redT.redT_normal)"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "case (redT_acquire x n ln)"], ["proof (state)\nthis:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "thus ?thesis"], ["proof (prove)\nusing this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "using ta_hb_consistent_convert_RA[of E t ln]"], ["proof (prove)\nusing this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n  ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "by(auto intro!: exI redT.redT_acquire)"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "hence \"?P (Eps ?P)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. case SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n    (x, xa) \\<Rightarrow>\n      (case x of\n       (t, ta) \\<Rightarrow>\n         \\<lambda>s'.\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n       xa", "by(rule someI_ex)"], ["proof (state)\nthis:\n  case SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of\n             (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n  (x, xa) \\<Rightarrow>\n    (case x of\n     (t, ta) \\<Rightarrow>\n       \\<lambda>s'.\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n     xa\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "hence red: \"s -?t\\<triangleright>?ta\\<rightarrow> ?s'\"\n      and hb: \"ta_hb_consistent P E (llist_of (map (Pair ?t) \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (prove)\nusing this:\n  case SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of\n             (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n  (x, xa) \\<Rightarrow>\n    (case x of\n     (t, ta) \\<Rightarrow>\n       \\<lambda>s'.\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n     xa\n\ngoal (1 subgoal):\n 1. s -fst (fst (SOME ((t, ta), s').\n                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                    ta_hb_consistent P E\n                     (llist_of\n                       (map (Pair t)\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n       (fst (SOME ((t, ta), s').\n                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                ta_hb_consistent P E\n                 (llist_of\n                   (map (Pair t)\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))) &&&\n    ta_hb_consistent P E\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))", "by(simp_all add: split_beta)"], ["proof (state)\nthis:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "moreover"], ["proof (state)\nthis:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "from ta_hb_consistent_into_non_speculative[OF hb]"], ["proof (chain)\npicking this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (lmap snd\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)))", "have \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>)\""], ["proof (prove)\nusing this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (lmap snd\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)))\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n     (llist_of\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "by(simp add: o_def)"], ["proof (state)\nthis:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "with Runs red"], ["proof (chain)\npicking this:\n  hb_completion s E\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "have \"hb_completion ?s' (E @ map (Pair ?t) \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>)\""], ["proof (prove)\nusing this:\n  hb_completion s E\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. hb_completion\n     (snd (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n     (E @\n      map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "by(rule hb_completion_shift1)"], ["proof (state)\nthis:\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "ultimately"], ["proof (chain)\npicking this:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "have ?Step"], ["proof (prove)\nusing this:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>s s' tls tl.\n       s = s \\<and>\n       complete_hb s E = LCons tl tls \\<and>\n       redT s tl s' \\<and>\n       ((\\<exists>s E.\n            s' = s \\<and>\n            tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n        mthr.Runs s' tls)", "using True"], ["proof (prove)\nusing this:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<exists>s s' tls tl.\n       s = s \\<and>\n       complete_hb s E = LCons tl tls \\<and>\n       redT s tl s' \\<and>\n       ((\\<exists>s E.\n            s' = s \\<and>\n            tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n        mthr.Runs s' tls)", "unfolding complete_hb_def"], ["proof (prove)\nusing this:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<exists>s s' tls tl.\n       s = s \\<and>\n       unfold_llist\n        (\\<lambda>(s, E).\n            \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n        (\\<lambda>(s, E).\n            fst (SOME ((t, ta), s').\n                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                    ta_hb_consistent P E\n                     (llist_of\n                       (map (Pair t)\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n        (\\<lambda>(s, E).\n            let ((t, ta), s') =\n                  SOME ((t, ta), s').\n                     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                     ta_hb_consistent P E\n                      (llist_of\n                        (map (Pair t)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (s, E) =\n       LCons tl tls \\<and>\n       redT s tl s' \\<and>\n       ((\\<exists>s E.\n            s' = s \\<and>\n            tls =\n            unfold_llist\n             (\\<lambda>(s, E).\n                 \\<forall>t ta s'.\n                    \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n             (\\<lambda>(s, E).\n                 fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n             (\\<lambda>(s, E).\n                 let ((t, ta), s') =\n                       SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                 in (s',\n                     E @\n                     map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (s, E) \\<and>\n            hb_completion s E) \\<or>\n        mthr.Runs s' tls)", "by(fastforce simp del: split_paired_Ex simp add: split_def)"], ["proof (state)\nthis:\n  \\<exists>s s' tls tl.\n     s = s \\<and>\n     complete_hb s E = LCons tl tls \\<and>\n     redT s tl s' \\<and>\n     ((\\<exists>s E.\n          s' = s \\<and>\n          tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n      mthr.Runs s' tls)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s s' tls tl.\n     s = s \\<and>\n     complete_hb s E = LCons tl tls \\<and>\n     redT s tl s' \\<and>\n     ((\\<exists>s E.\n          s' = s \\<and>\n          tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n      mthr.Runs s' tls)\n\ngoal (1 subgoal):\n 1. (\\<exists>s.\n        s = s \\<and>\n        complete_hb s E = LNil \\<and>\n        (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n    (\\<exists>s s' tls tl.\n        s = s \\<and>\n        complete_hb s E = LCons tl tls \\<and>\n        redT s tl s' \\<and>\n        ((\\<exists>s E.\n             s' = s \\<and>\n             tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n         mthr.Runs s' tls))", ".."], ["proof (state)\nthis:\n  (\\<exists>s.\n      s = s \\<and>\n      complete_hb s E = LNil \\<and>\n      (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n  (\\<exists>s s' tls tl.\n      s = s \\<and>\n      complete_hb s E = LCons tl tls \\<and>\n      redT s tl s' \\<and>\n      ((\\<exists>s E.\n           s' = s \\<and>\n           tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n       mthr.Runs s' tls))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>s.\n      s = s \\<and>\n      complete_hb s E = LNil \\<and>\n      (\\<forall>x xa. \\<not> redT s x xa)) \\<or>\n  (\\<exists>s s' tls tl.\n      s = s \\<and>\n      complete_hb s E = LCons tl tls \\<and>\n      redT s tl s' \\<and>\n      ((\\<exists>s E.\n           s' = s \\<and>\n           tls = complete_hb s E \\<and> hb_completion s E) \\<or>\n       mthr.Runs s' tls))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_hb_ta_hb_consistent:\n  assumes \"hb_completion s E\"\n  and ta_hb_consistent_convert_RA: \"\\<And>E t ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"ta_hb_consistent P E (lconcat (lmap (\\<lambda>(t, ta). llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) (complete_hb s E)))\"\n  (is \"ta_hb_consistent _ _ (?obs (complete_hb s E))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "define obs a where \"obs = ?obs (complete_hb s E)\" and \"a = complete_hb s E\""], ["proof (state)\nthis:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>a.\n         case a of\n         (t, ta) \\<Rightarrow>\n           llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  a = complete_hb s E\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "with \\<open>hb_completion s E\\<close>"], ["proof (chain)\npicking this:\n  hb_completion s E\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>a.\n         case a of\n         (t, ta) \\<Rightarrow>\n           llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  a = complete_hb s E", "have \"\\<exists>s. hb_completion s E \\<and> obs = ?obs (complete_hb s E) \\<and> a = complete_hb s E\""], ["proof (prove)\nusing this:\n  hb_completion s E\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>a.\n         case a of\n         (t, ta) \\<Rightarrow>\n           llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  a = complete_hb s E\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       hb_completion s E \\<and>\n       obs =\n       lconcat\n        (lmap\n          (\\<lambda>a.\n              case a of\n              (t, ta) \\<Rightarrow>\n                llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n          (complete_hb s E)) \\<and>\n       a = complete_hb s E", "by blast"], ["proof (state)\nthis:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "moreover"], ["proof (state)\nthis:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "have \"wf (inv_image {(m, n). m < n} (llength \\<circ> ltakeWhile (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])))\"\n    (is \"wf ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])))", "by(rule wf_inv_image)(rule wellorder_class.wf)"], ["proof (state)\nthis:\n  wf (inv_image {(m, n). m < n}\n       (llength \\<circ>\n        ltakeWhile\n         (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E\n     (lconcat\n       (lmap\n         (\\<lambda>(t, ta).\n             llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n         (complete_hb s E)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n  wf (inv_image {(m, n). m < n}\n       (llength \\<circ>\n        ltakeWhile\n         (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])))", "show \"ta_hb_consistent P E obs\""], ["proof (prove)\nusing this:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n  wf (inv_image {(m, n). m < n}\n       (llength \\<circ>\n        ltakeWhile\n         (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])))\n\ngoal (1 subgoal):\n 1. ta_hb_consistent P E obs", "proof(coinduct E obs a rule: ta_hb_consistent_coinduct_append_wf)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E obs a.\n       \\<exists>s.\n          hb_completion s E \\<and>\n          obs =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s E)) \\<and>\n          a = complete_hb s E \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'.\n           obs = lappend obs' obs'' \\<and>\n           ta_hb_consistent P E obs' \\<and>\n           (obs' = LNil \\<longrightarrow>\n            (a', a)\n            \\<in> inv_image {(m, n). m < n}\n                   (llength \\<circ>\n                    ltakeWhile\n                     (\\<lambda>(t, ta).\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                         []))) \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>s.\n                hb_completion s (E @ list_of obs') \\<and>\n                obs'' =\n                lconcat\n                 (lmap\n                   (\\<lambda>a.\n                       case a of\n                       (t, ta) \\<Rightarrow>\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                   (complete_hb s (E @ list_of obs'))) \\<and>\n                a' = complete_hb s (E @ list_of obs')) \\<or>\n            ta_hb_consistent P (E @ list_of obs') obs''))", "case (ta_hb_consistent E obs a)"], ["proof (state)\nthis:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n\ngoal (1 subgoal):\n 1. \\<And>E obs a.\n       \\<exists>s.\n          hb_completion s E \\<and>\n          obs =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s E)) \\<and>\n          a = complete_hb s E \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'.\n           obs = lappend obs' obs'' \\<and>\n           ta_hb_consistent P E obs' \\<and>\n           (obs' = LNil \\<longrightarrow>\n            (a', a)\n            \\<in> inv_image {(m, n). m < n}\n                   (llength \\<circ>\n                    ltakeWhile\n                     (\\<lambda>(t, ta).\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                         []))) \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>s.\n                hb_completion s (E @ list_of obs') \\<and>\n                obs'' =\n                lconcat\n                 (lmap\n                   (\\<lambda>a.\n                       case a of\n                       (t, ta) \\<Rightarrow>\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                   (complete_hb s (E @ list_of obs'))) \\<and>\n                a' = complete_hb s (E @ list_of obs')) \\<or>\n            ta_hb_consistent P (E @ list_of obs') obs''))", "then"], ["proof (chain)\npicking this:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E", "obtain s where hb_c: \"hb_completion s E\"\n      and obs: \"obs = lconcat (lmap (\\<lambda>(t, ta). llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) (complete_hb s E))\"\n      and a: \"a = complete_hb s E\""], ["proof (prove)\nusing this:\n  \\<exists>s.\n     hb_completion s E \\<and>\n     obs =\n     lconcat\n      (lmap\n        (\\<lambda>a.\n            case a of\n            (t, ta) \\<Rightarrow>\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        (complete_hb s E)) \\<and>\n     a = complete_hb s E\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>hb_completion s E;\n         obs =\n         lconcat\n          (lmap\n            (\\<lambda>(t, ta).\n                llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            (complete_hb s E));\n         a = complete_hb s E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hb_completion s E\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  a = complete_hb s E\n\ngoal (1 subgoal):\n 1. \\<And>E obs a.\n       \\<exists>s.\n          hb_completion s E \\<and>\n          obs =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s E)) \\<and>\n          a = complete_hb s E \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'.\n           obs = lappend obs' obs'' \\<and>\n           ta_hb_consistent P E obs' \\<and>\n           (obs' = LNil \\<longrightarrow>\n            (a', a)\n            \\<in> inv_image {(m, n). m < n}\n                   (llength \\<circ>\n                    ltakeWhile\n                     (\\<lambda>(t, ta).\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                         []))) \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>s.\n                hb_completion s (E @ list_of obs') \\<and>\n                obs'' =\n                lconcat\n                 (lmap\n                   (\\<lambda>a.\n                       case a of\n                       (t, ta) \\<Rightarrow>\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                   (complete_hb s (E @ list_of obs'))) \\<and>\n                a' = complete_hb s (E @ list_of obs')) \\<or>\n            ta_hb_consistent P (E @ list_of obs') obs''))", "let ?P = \"\\<lambda>((t, ta), s'). s -t\\<triangleright>ta\\<rightarrow> s' \\<and> ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E obs a.\n       \\<exists>s.\n          hb_completion s E \\<and>\n          obs =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s E)) \\<and>\n          a = complete_hb s E \\<Longrightarrow>\n       obs = LNil \\<or>\n       (\\<exists>obs' obs'' a'.\n           obs = lappend obs' obs'' \\<and>\n           ta_hb_consistent P E obs' \\<and>\n           (obs' = LNil \\<longrightarrow>\n            (a', a)\n            \\<in> inv_image {(m, n). m < n}\n                   (llength \\<circ>\n                    ltakeWhile\n                     (\\<lambda>(t, ta).\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                         []))) \\<and>\n           (lfinite obs' \\<longrightarrow>\n            (\\<exists>s.\n                hb_completion s (E @ list_of obs') \\<and>\n                obs'' =\n                lconcat\n                 (lmap\n                   (\\<lambda>a.\n                       case a of\n                       (t, ta) \\<Rightarrow>\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                   (complete_hb s (E @ list_of obs'))) \\<and>\n                a' = complete_hb s (E @ list_of obs')) \\<or>\n            ta_hb_consistent P (E @ list_of obs') obs''))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof(cases \"\\<exists>t ta s'. s -t\\<triangleright>ta\\<rightarrow> s'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case False"], ["proof (state)\nthis:\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "with obs"], ["proof (chain)\npicking this:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)", "have ?LNil"], ["proof (prove)\nusing this:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  \\<nexists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. obs = LNil", "by(simp add: complete_hb_def)"], ["proof (state)\nthis:\n  obs = LNil\n\ngoal (2 subgoals):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<nexists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow>\n       (a', a)\n       \\<in> inv_image {(m, n). m < n}\n              (llength \\<circ>\n               ltakeWhile\n                (\\<lambda>(t, ta).\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>s.\n           hb_completion s (E @ list_of obs') \\<and>\n           obs'' =\n           lconcat\n            (lmap\n              (\\<lambda>a.\n                  case a of\n                  (t, ta) \\<Rightarrow>\n                    llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              (complete_hb s (E @ list_of obs'))) \\<and>\n           a' = complete_hb s (E @ list_of obs')) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case True"], ["proof (state)\nthis:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "let ?t = \"fst (fst (Eps ?P))\" and ?ta = \"snd (fst (Eps ?P))\" and ?s' = \"snd (Eps ?P)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from True"], ["proof (chain)\npicking this:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)", "obtain t ta s' where red: \"s -t\\<triangleright>ta\\<rightarrow> s'\""], ["proof (prove)\nusing this:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. (\\<And>t ta s'.\n        s -t\\<triangleright>ta\\<rightarrow> s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence \"\\<exists>x. ?P x\""], ["proof (prove)\nusing this:\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "case (redT_normal x x' m')"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  actions_ok s t ta\n  redT_upd s t ta x' m' s'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "from hb_completionD[OF hb_c _ _ \\<open>thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close> \\<open>t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\\<close> \\<open>actions_ok s t ta\\<close>, of \"[]\" 0]"], ["proof (chain)\npicking this:\n  \\<lbrakk>s -\\<triangleright>[]\\<rightarrow>* s;\n   non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n    (llist_of\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          [])));\n   non_speculative P\n    (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) [])))\n    (llist_of (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''.\n                       t \\<turnstile> \\<langle>x, shr\n             s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                       actions_ok s t ta' \\<and>\n                       take 0 \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                       take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                       ta_hb_consistent P\n                        (E @\n                         concat\n                          (map (\\<lambda>(t, ta).\n                                   map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                            []) @\n                         map (Pair t)\n                          (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (llist_of\n                          (map (Pair t)\n                            (drop 0\n                              \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                       (0 < length\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                        0 < length\n                             \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                       (if \\<exists>ad al v.\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0 =\n                              NormalAction (ReadMem ad al v)\n                        then sim_action else (=))\n                        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n                        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! 0)", "obtain ta' x'' m'' where \"t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\"\n          and \"actions_ok s t ta'\" \"ta_hb_consistent P E (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>s -\\<triangleright>[]\\<rightarrow>* s;\n   non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n    (llist_of\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n          [])));\n   non_speculative P\n    (w_values P (w_values P (\\<lambda>_. {}) (map snd E))\n      (concat\n        (map (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>) [])))\n    (llist_of (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta' x'' m''.\n                       t \\<turnstile> \\<langle>x, shr\n             s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle> \\<and>\n                       actions_ok s t ta' \\<and>\n                       take 0 \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> =\n                       take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<and>\n                       ta_hb_consistent P\n                        (E @\n                         concat\n                          (map (\\<lambda>(t, ta).\n                                   map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)\n                            []) @\n                         map (Pair t)\n                          (take 0 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (llist_of\n                          (map (Pair t)\n                            (drop 0\n                              \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))) \\<and>\n                       (0 < length\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                        0 < length\n                             \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>) \\<and>\n                       (if \\<exists>ad al v.\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0 =\n                              NormalAction (ReadMem ad al v)\n                        then sim_action else (=))\n                        (\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n                        (\\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub> ! 0)\n\ngoal (1 subgoal):\n 1. (\\<And>ta' x'' m''.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>;\n         actions_ok s t ta';\n         ta_hb_consistent P E\n          (llist_of\n            (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "obtain ws' where \"redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n         ws' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis redT_updWs_total)"], ["proof (state)\nthis:\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t \\<turnstile> \\<langle>x, shr\n      s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "ultimately"], ["proof (chain)\npicking this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "using \\<open>thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close>"], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, shr s\\<rangle> -ta'\\<rightarrow> \\<langle>x'', m''\\<rangle>\n  actions_ok s t ta'\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta'\\<rbrace>\\<^bsub>o\\<^esub>))\n  redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub> ws'\n  thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "by(cases ta')(auto intro!: exI redT.redT_normal)"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "case (redT_acquire x n ln)"], ["proof (state)\nthis:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            case x of\n                            (x, xa) \\<Rightarrow>\n                              (case x of\n                               (t, ta) \\<Rightarrow>\n                                 \\<lambda>s'.\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n                               xa", "thus ?thesis"], ["proof (prove)\nusing this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "using ta_hb_consistent_convert_RA[of E t ln]"], ["proof (prove)\nusing this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t ln,\n   (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n  ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       case x of\n       (x, xa) \\<Rightarrow>\n         (case x of\n          (t, ta) \\<Rightarrow>\n            \\<lambda>s'.\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n          xa", "by(auto intro!: exI redT.redT_acquire)"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence \"?P (Eps ?P)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     case x of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (t, ta) \\<Rightarrow>\n          \\<lambda>s'.\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n        xa\n\ngoal (1 subgoal):\n 1. case SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n    (x, xa) \\<Rightarrow>\n      (case x of\n       (t, ta) \\<Rightarrow>\n         \\<lambda>s'.\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n       xa", "by(rule someI_ex)"], ["proof (state)\nthis:\n  case SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of\n             (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n  (x, xa) \\<Rightarrow>\n    (case x of\n     (t, ta) \\<Rightarrow>\n       \\<lambda>s'.\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n     xa\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence red': \"s -?t\\<triangleright>?ta\\<rightarrow> ?s'\" \n        and hb: \"ta_hb_consistent P E (llist_of (map (Pair ?t) \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>))\""], ["proof (prove)\nusing this:\n  case SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of\n             (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) of\n  (x, xa) \\<Rightarrow>\n    (case x of\n     (t, ta) \\<Rightarrow>\n       \\<lambda>s'.\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n     xa\n\ngoal (1 subgoal):\n 1. s -fst (fst (SOME ((t, ta), s').\n                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                    ta_hb_consistent P E\n                     (llist_of\n                       (map (Pair t)\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n       (fst (SOME ((t, ta), s').\n                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                ta_hb_consistent P E\n                 (llist_of\n                   (map (Pair t)\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))) &&&\n    ta_hb_consistent P E\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))", "by(simp_all add: split_beta)"], ["proof (state)\nthis:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "moreover"], ["proof (state)\nthis:\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from ta_hb_consistent_into_non_speculative[OF hb]"], ["proof (chain)\npicking this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (lmap snd\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)))", "have \"non_speculative P (w_values P (\\<lambda>_. {}) (map snd E)) (llist_of \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>)\""], ["proof (prove)\nusing this:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (lmap snd\n     (llist_of\n       (map (Pair\n              (fst (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n         \\<lbrace>snd (fst (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)))\n\ngoal (1 subgoal):\n 1. non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n     (llist_of\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "by(simp add: o_def)"], ["proof (state)\nthis:\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "with hb_c red'"], ["proof (chain)\npicking this:\n  hb_completion s E\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "have hb_c': \"hb_completion ?s' (E @ map (Pair ?t) \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>)\""], ["proof (prove)\nusing this:\n  hb_completion s E\n  s -fst (fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t)\n                       \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<triangleright>snd\n     (fst (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t)\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rightarrow> snd\n                                     (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))\n  non_speculative P (w_values P (\\<lambda>_. {}) (map snd E))\n   (llist_of\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. hb_completion\n     (snd (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n     (E @\n      map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)", "by(rule hb_completion_shift1)"], ["proof (state)\nthis:\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>t ta. Ex (redT_syntax1 s t ta) \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "proof(cases \"lnull obs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case True"], ["proof (state)\nthis:\n  lnull obs\n\ngoal (2 subgoals):\n 1. lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))\n 2. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  lnull obs\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "unfolding lnull_def"], ["proof (prove)\nusing this:\n  obs = LNil\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "by simp"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow>\n       (a', a)\n       \\<in> inv_image {(m, n). m < n}\n              (llength \\<circ>\n               ltakeWhile\n                (\\<lambda>(t, ta).\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>s.\n           hb_completion s (E @ list_of obs') \\<and>\n           obs'' =\n           lconcat\n            (lmap\n              (\\<lambda>a.\n                  case a of\n                  (t, ta) \\<Rightarrow>\n                    llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              (complete_hb s (E @ list_of obs'))) \\<and>\n           a' = complete_hb s (E @ list_of obs')) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "case False"], ["proof (state)\nthis:\n  \\<not> lnull obs\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "have eq: \"(\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s') = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s') =\n    False", "using True"], ["proof (prove)\nusing this:\n  \\<exists>t ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. (\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s') =\n    False", "by auto"], ["proof (state)\nthis:\n  (\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s') = False\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "{"], ["proof (state)\nthis:\n  (\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s') = False\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "assume \"\\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub> = []\""], ["proof (state)\nthis:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "moreover"], ["proof (state)\nthis:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "from obs False"], ["proof (chain)\npicking this:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  \\<not> lnull obs", "have \"lfinite (ltakeWhile (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []) (complete_hb s E))\""], ["proof (prove)\nusing this:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  \\<not> lnull obs\n\ngoal (1 subgoal):\n 1. lfinite\n     (ltakeWhile\n       (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n       (complete_hb s E))", "unfolding lfinite_ltakeWhile"], ["proof (prove)\nusing this:\n  obs =\n  lconcat\n   (lmap\n     (\\<lambda>(t, ta).\n         llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n     (complete_hb s E))\n  \\<not> lnull obs\n\ngoal (1 subgoal):\n 1. lfinite (complete_hb s E) \\<or>\n    (\\<exists>x\\<in>lset (complete_hb s E).\n        \\<not> (case x of\n                (t, ta) \\<Rightarrow>\n                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))", "by(fastforce simp add: split_def lconcat_eq_LNil)"], ["proof (state)\nthis:\n  lfinite\n   (ltakeWhile\n     (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n     (complete_hb s E))\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n  lfinite\n   (ltakeWhile\n     (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n     (complete_hb s E))", "have \"(complete_hb ?s' (E @ map (Pair ?t) \\<lbrace>?ta\\<rbrace>\\<^bsub>o\\<^esub>), a) \\<in> ?R\""], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n  lfinite\n   (ltakeWhile\n     (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n     (complete_hb s E))\n\ngoal (1 subgoal):\n 1. (complete_hb\n      (snd (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (E @\n       map (Pair\n             (fst (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n     a)\n    \\<in> inv_image {(m, n). m < n}\n           (llength \\<circ>\n            ltakeWhile\n             (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))", "using red"], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n  lfinite\n   (ltakeWhile\n     (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n     (complete_hb s E))\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. (complete_hb\n      (snd (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (E @\n       map (Pair\n             (fst (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n     a)\n    \\<in> inv_image {(m, n). m < n}\n           (llength \\<circ>\n            ltakeWhile\n             (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))", "unfolding a complete_hb_def"], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  []\n  lfinite\n   (ltakeWhile\n     (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n     (unfold_llist\n       (\\<lambda>(s, E).\n           \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n       (\\<lambda>(s, E).\n           fst (SOME ((t, ta), s').\n                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                   ta_hb_consistent P E\n                    (llist_of\n                      (map (Pair t)\n                        \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n       (\\<lambda>(s, E).\n           let ((t, ta), s') =\n                 SOME ((t, ta), s').\n                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                    ta_hb_consistent P E\n                     (llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n           in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n       (s, E)))\n  s -t\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. (unfold_llist\n      (\\<lambda>(s, E).\n          \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n      (\\<lambda>(s, E).\n          fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (\\<lambda>(s, E).\n          let ((t, ta), s') =\n                SOME ((t, ta), s').\n                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                   ta_hb_consistent P E\n                    (llist_of\n                      (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n          in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n      (snd (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n       E @\n       map (Pair\n             (fst (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n     unfold_llist\n      (\\<lambda>(s, E).\n          \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n      (\\<lambda>(s, E).\n          fst (SOME ((t, ta), s').\n                  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                  ta_hb_consistent P E\n                   (llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (\\<lambda>(s, E).\n          let ((t, ta), s') =\n                SOME ((t, ta), s').\n                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                   ta_hb_consistent P E\n                    (llist_of\n                      (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n          in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n      (s, E))\n    \\<in> inv_image {(m, n). m < n}\n           (llength \\<circ>\n            ltakeWhile\n             (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))", "apply(subst (2) unfold_llist.code)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>snd (fst (SOME ((t, ta), s').\n                                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                   ta_hb_consistent P E\n                                    (llist_of\n(map (Pair t)\n  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n             [];\n     lfinite\n      (ltakeWhile\n        (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n        (unfold_llist\n          (\\<lambda>(s, E).\n              \\<forall>t ta s'.\n                 \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n          (\\<lambda>(s, E).\n              fst (SOME ((t, ta), s').\n                      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                      ta_hb_consistent P E\n                       (llist_of\n                         (map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n          (\\<lambda>(s, E).\n              let ((t, ta), s') =\n                    SOME ((t, ta), s').\n                       s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                       ta_hb_consistent P E\n                        (llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              in (s',\n                  E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n          (s, E)));\n     s -t\\<triangleright>ta\\<rightarrow> s'\\<rbrakk>\n    \\<Longrightarrow> (unfold_llist\n                        (\\<lambda>(s, E).\n                            \\<forall>t ta s'.\n                               \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                        (\\<lambda>(s, E).\n                            fst (SOME ((t, ta), s').\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                        (\\<lambda>(s, E).\n                            let ((t, ta), s') =\n                                  SOME ((t, ta), s').\n                                     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                     ta_hb_consistent P E\n(llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            in (s',\n                                E @\n                                map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (snd (SOME ((t, ta), s').\n                                 s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                 ta_hb_consistent P E\n                                  (llist_of\n                                    (map (Pair t)\n\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                         E @\n                         map (Pair\n                               (fst (fst\n(SOME ((t, ta), s').\n    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n    ta_hb_consistent P E\n     (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                          \\<lbrace>snd (fst\n   (SOME ((t, ta), s').\n       s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n       ta_hb_consistent P E\n        (llist_of\n          (map (Pair t)\n            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n                       if case (s, E) of\n                          (s, E) \\<Rightarrow>\n                            \\<forall>t ta s'.\n                               \\<not> s -t\\<triangleright>ta\\<rightarrow> s'\n                       then LNil\n                       else LCons\n                             (case (s, E) of\n                              (s, E) \\<Rightarrow>\n                                fst (SOME ((t, ta), s').\n  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                             (unfold_llist\n                               (\\<lambda>(s, E).\n                                   \\<forall>t ta s'.\n\\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                               (\\<lambda>(s, E).\n                                   fst (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                               (\\<lambda>(s, E).\n                                   let ((t, ta), s') =\n   SOME ((t, ta), s').\n      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n      ta_hb_consistent P E\n       (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                   in (s',\n E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                               (case (s, E) of\n                                (s, E) \\<Rightarrow>\n                                  let ((t, ta), s') =\n  SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                  in (s',\nE @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                      \\<in> inv_image {(x, y). x < y}\n                             (llength \\<circ>\n                              ltakeWhile\n                               (\\<lambda>(t, ta).\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                                   []))", "apply(subst (asm) unfold_llist.code)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>snd (fst (SOME ((t, ta), s').\n                                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                   ta_hb_consistent P E\n                                    (llist_of\n(map (Pair t)\n  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n             [];\n     lfinite\n      (ltakeWhile\n        (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = [])\n        (if case (s, E) of\n            (s, E) \\<Rightarrow>\n              \\<forall>t ta s'.\n                 \\<not> s -t\\<triangleright>ta\\<rightarrow> s'\n         then LNil\n         else LCons\n               (case (s, E) of\n                (s, E) \\<Rightarrow>\n                  fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n               (unfold_llist\n                 (\\<lambda>(s, E).\n                     \\<forall>t ta s'.\n                        \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                 (\\<lambda>(s, E).\n                     fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                 (\\<lambda>(s, E).\n                     let ((t, ta), s') =\n                           SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     in (s',\n                         E @\n                         map (Pair t)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                 (case (s, E) of\n                  (s, E) \\<Rightarrow>\n                    let ((t, ta), s') =\n                          SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                    in (s',\n                        E @\n                        map (Pair t)\n                         \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)))));\n     s -t\\<triangleright>ta\\<rightarrow> s'\\<rbrakk>\n    \\<Longrightarrow> (unfold_llist\n                        (\\<lambda>(s, E).\n                            \\<forall>t ta s'.\n                               \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                        (\\<lambda>(s, E).\n                            fst (SOME ((t, ta), s').\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                        (\\<lambda>(s, E).\n                            let ((t, ta), s') =\n                                  SOME ((t, ta), s').\n                                     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                     ta_hb_consistent P E\n(llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            in (s',\n                                E @\n                                map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                        (snd (SOME ((t, ta), s').\n                                 s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                 ta_hb_consistent P E\n                                  (llist_of\n                                    (map (Pair t)\n\\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                         E @\n                         map (Pair\n                               (fst (fst\n(SOME ((t, ta), s').\n    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n    ta_hb_consistent P E\n     (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                          \\<lbrace>snd (fst\n   (SOME ((t, ta), s').\n       s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n       ta_hb_consistent P E\n        (llist_of\n          (map (Pair t)\n            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n                       if case (s, E) of\n                          (s, E) \\<Rightarrow>\n                            \\<forall>t ta s'.\n                               \\<not> s -t\\<triangleright>ta\\<rightarrow> s'\n                       then LNil\n                       else LCons\n                             (case (s, E) of\n                              (s, E) \\<Rightarrow>\n                                fst (SOME ((t, ta), s').\n  s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n  ta_hb_consistent P E\n   (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                             (unfold_llist\n                               (\\<lambda>(s, E).\n                                   \\<forall>t ta s'.\n\\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                               (\\<lambda>(s, E).\n                                   fst (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                               (\\<lambda>(s, E).\n                                   let ((t, ta), s') =\n   SOME ((t, ta), s').\n      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n      ta_hb_consistent P E\n       (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                   in (s',\n E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                               (case (s, E) of\n                                (s, E) \\<Rightarrow>\n                                  let ((t, ta), s') =\n  SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                  in (s',\nE @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                      \\<in> inv_image {(x, y). x < y}\n                             (llength \\<circ>\n                              ltakeWhile\n                               (\\<lambda>(t, ta).\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> =\n                                   []))", "apply(auto simp add: split_beta simp del: split_paired_Ex split_paired_All split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tb a aa ab ac ad b ae af ba ag bb.\n       \\<lbrakk>s -t\\<triangleright>ta\\<rightarrow> s';\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n        [];\n        lfinite\n         (ltakeWhile\n           (\\<lambda>x. \\<lbrace>snd x\\<rbrace>\\<^bsub>o\\<^esub> = [])\n           (unfold_llist\n             (\\<lambda>(s, E).\n                 \\<forall>t ta s'.\n                    \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n             (\\<lambda>(s, E).\n                 fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n             (\\<lambda>(s, E).\n                 (snd (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                  E @\n                  map (Pair\n                        (fst (fst (SOME ((t, ta), s').\ns -t\\<triangleright>ta\\<rightarrow> s' \\<and>\nta_hb_consistent P E\n (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                   \\<lbrace>snd (fst (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of\n      (map (Pair t)\n        \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n             (snd (SOME ((t, ta), s').\n                      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                      ta_hb_consistent P E\n                       (llist_of\n                         (map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n              E)));\n        s -tb\\<triangleright>(a, aa, ab, ac, ad,\n                              b)\\<rightarrow> (ae, (af, ba), ag,\n         bb)\\<rbrakk>\n       \\<Longrightarrow> llength\n                          (ltakeWhile\n                            (\\<lambda>x.\n                                \\<lbrace>snd x\\<rbrace>\\<^bsub>o\\<^esub> =\n                                [])\n                            (unfold_llist\n                              (\\<lambda>(s, E).\n                                  \\<forall>t ta s'.\n                                     \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                              (\\<lambda>(s, E).\n                                  fst (SOME ((t, ta), s').\n    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n    ta_hb_consistent P E\n     (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                              (\\<lambda>(s, E).\n                                  (snd (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                                   E @\n                                   map (Pair\n   (fst (fst (SOME ((t, ta), s').\n                 s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                 ta_hb_consistent P E\n                  (llist_of\n                    (map (Pair t)\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                                    \\<lbrace>snd\n        (fst (SOME ((t, ta), s').\n                 s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                 ta_hb_consistent P E\n                  (llist_of\n                    (map (Pair t)\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                              (snd (SOME ((t, ta), s').\n s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n ta_hb_consistent P E\n  (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                               E)))\n                         < eSuc\n                            (llength\n                              (ltakeWhile\n                                (\\<lambda>x.\n                                    \\<lbrace>snd\n        x\\<rbrace>\\<^bsub>o\\<^esub> =\n                                    [])\n                                (unfold_llist\n                                  (\\<lambda>(s, E).\n\\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                                  (\\<lambda>(s, E).\nfst (SOME ((t, ta), s').\n        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n        ta_hb_consistent P E\n         (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                  (\\<lambda>(s, E).\n(snd (SOME ((t, ta), s').\n         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n         ta_hb_consistent P E\n          (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n E @\n map (Pair\n       (fst (fst (SOME ((t, ta), s').\n                     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                     ta_hb_consistent P E\n                      (llist_of\n                        (map (Pair t)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                                  (snd (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                                   E))))", "apply(auto simp add: lfinite_eq_range_llist_of)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (complete_hb\n    (snd (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n    (E @\n     map (Pair\n           (fst (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n      \\<lbrace>snd (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n   a)\n  \\<in> inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "}"], ["proof (state)\nthis:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  [] \\<Longrightarrow>\n  (complete_hb\n    (snd (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n    (E @\n     map (Pair\n           (fst (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n      \\<lbrace>snd (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n   a)\n  \\<in> inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "hence ?lappend"], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  [] \\<Longrightarrow>\n  (complete_hb\n    (snd (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n    (E @\n     map (Pair\n           (fst (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n      \\<lbrace>snd (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n   a)\n  \\<in> inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow>\n        (a', a)\n        \\<in> inv_image {(m, n). m < n}\n               (llength \\<circ>\n                ltakeWhile\n                 (\\<lambda>(t, ta).\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>s.\n            hb_completion s (E @ list_of obs') \\<and>\n            obs'' =\n            lconcat\n             (lmap\n               (\\<lambda>a.\n                   case a of\n                   (t, ta) \\<Rightarrow>\n                     llist_of\n                      (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n               (complete_hb s (E @ list_of obs'))) \\<and>\n            a' = complete_hb s (E @ list_of obs')) \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'')", "using red hb hb_c'"], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  [] \\<Longrightarrow>\n  (complete_hb\n    (snd (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n    (E @\n     map (Pair\n           (fst (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n      \\<lbrace>snd (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n   a)\n  \\<in> inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))\n  s -t\\<triangleright>ta\\<rightarrow> s'\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       obs = lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow>\n        (a', a)\n        \\<in> inv_image {(m, n). m < n}\n               (llength \\<circ>\n                ltakeWhile\n                 (\\<lambda>(t, ta).\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>s.\n            hb_completion s (E @ list_of obs') \\<and>\n            obs'' =\n            lconcat\n             (lmap\n               (\\<lambda>a.\n                   case a of\n                   (t, ta) \\<Rightarrow>\n                     llist_of\n                      (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n               (complete_hb s (E @ list_of obs'))) \\<and>\n            a' = complete_hb s (E @ list_of obs')) \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'')", "unfolding obs complete_hb_def"], ["proof (prove)\nusing this:\n  \\<lbrace>snd (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n  [] \\<Longrightarrow>\n  (unfold_llist\n    (\\<lambda>(s, E).\n        \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n    (\\<lambda>(s, E).\n        fst (SOME ((t, ta), s').\n                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                ta_hb_consistent P E\n                 (llist_of\n                   (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n    (\\<lambda>(s, E).\n        let ((t, ta), s') =\n              SOME ((t, ta), s').\n                 s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                 ta_hb_consistent P E\n                  (llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n        in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n    (snd (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n     E @\n     map (Pair\n           (fst (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n      \\<lbrace>snd (fst (SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n   a)\n  \\<in> inv_image {(m, n). m < n}\n         (llength \\<circ>\n          ltakeWhile\n           (\\<lambda>(t, ta). \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))\n  s -t\\<triangleright>ta\\<rightarrow> s'\n  ta_hb_consistent P E\n   (llist_of\n     (map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n  hb_completion\n   (snd (SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of\n               (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n   (E @\n    map (Pair\n          (fst (fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n     \\<lbrace>snd (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>obs' obs'' a'.\n       lconcat\n        (lmap\n          (\\<lambda>(t, ta).\n              llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n          (unfold_llist\n            (\\<lambda>(s, E).\n                \\<forall>t ta s'.\n                   \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n            (\\<lambda>(s, E).\n                fst (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n            (\\<lambda>(s, E).\n                let ((t, ta), s') =\n                      SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                in (s',\n                    E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            (s, E))) =\n       lappend obs' obs'' \\<and>\n       ta_hb_consistent P E obs' \\<and>\n       (obs' = LNil \\<longrightarrow>\n        (a', a)\n        \\<in> inv_image {(m, n). m < n}\n               (llength \\<circ>\n                ltakeWhile\n                 (\\<lambda>(t, ta).\n                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n       (lfinite obs' \\<longrightarrow>\n        (\\<exists>s.\n            hb_completion s (E @ list_of obs') \\<and>\n            obs'' =\n            lconcat\n             (lmap\n               (\\<lambda>a.\n                   case a of\n                   (t, ta) \\<Rightarrow>\n                     llist_of\n                      (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n               (unfold_llist\n                 (\\<lambda>(s, E).\n                     \\<forall>t ta s'.\n                        \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                 (\\<lambda>(s, E).\n                     fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                 (\\<lambda>(s, E).\n                     let ((t, ta), s') =\n                           SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     in (s',\n                         E @\n                         map (Pair t)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                 (s, E @ list_of obs'))) \\<and>\n            a' =\n            unfold_llist\n             (\\<lambda>(s, E).\n                 \\<forall>t ta s'.\n                    \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n             (\\<lambda>(s, E).\n                 fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n             (\\<lambda>(s, E).\n                 let ((t, ta), s') =\n                       SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                 in (s',\n                     E @\n                     map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (s, E @ list_of obs')) \\<or>\n        ta_hb_consistent P (E @ list_of obs') obs'')", "apply(subst unfold_llist.code)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>snd (fst (SOME ((t, ta), s').\n                                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                   ta_hb_consistent P E\n                                    (llist_of\n(map (Pair t)\n  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n             [] \\<Longrightarrow>\n             (unfold_llist\n               (\\<lambda>(s, E).\n                   \\<forall>t ta s'.\n                      \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n               (\\<lambda>(s, E).\n                   fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n               (\\<lambda>(s, E).\n                   let ((t, ta), s') =\n                         SOME ((t, ta), s').\n                            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                            ta_hb_consistent P E\n                             (llist_of\n                               (map (Pair t)\n                                 \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                   in (s',\n                       E @\n                       map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n               (snd (SOME ((t, ta), s').\n                        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                        ta_hb_consistent P E\n                         (llist_of\n                           (map (Pair t)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                E @\n                map (Pair\n                      (fst (fst (SOME ((t, ta), s').\n                                    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                    ta_hb_consistent P E\n                                     (llist_of\n (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                 \\<lbrace>snd (fst (SOME ((t, ta), s').\n s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n ta_hb_consistent P E\n  (llist_of\n    (map (Pair t)\n      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>),\n              a)\n             \\<in> inv_image {(m, n). m < n}\n                    (llength \\<circ>\n                     ltakeWhile\n                      (\\<lambda>(t, ta).\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []));\n     s -t\\<triangleright>ta\\<rightarrow> s';\n     ta_hb_consistent P E\n      (llist_of\n        (map (Pair\n               (fst (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n          \\<lbrace>snd (fst (SOME ((t, ta), s').\n                                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                ta_hb_consistent P E\n                                 (llist_of\n                                   (map (Pair t)\n                                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>));\n     hb_completion\n      (snd (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (E @\n       map (Pair\n             (fst (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' obs'' a'.\n                         lconcat\n                          (lmap\n                            (\\<lambda>(t, ta).\n                                llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            (if case (s, E) of\n                                (s, E) \\<Rightarrow>\n                                  \\<forall>t ta s'.\n                                     \\<not> s -t\\<triangleright>ta\\<rightarrow> s'\n                             then LNil\n                             else LCons\n                                   (case (s, E) of\n                                    (s, E) \\<Rightarrow>\nfst (SOME ((t, ta), s').\n        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n        ta_hb_consistent P E\n         (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                   (unfold_llist\n                                     (\\<lambda>(s, E).\n   \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                                     (\\<lambda>(s, E).\n   fst (SOME ((t, ta), s').\n           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n           ta_hb_consistent P E\n            (llist_of\n              (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                     (\\<lambda>(s, E).\n   let ((t, ta), s') =\n         SOME ((t, ta), s').\n            s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n            ta_hb_consistent P E\n             (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n   in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                     (case (s, E) of\n(s, E) \\<Rightarrow>\n  let ((t, ta), s') =\n        SOME ((t, ta), s').\n           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n           ta_hb_consistent P E\n            (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n  in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))) =\n                         lappend obs' obs'' \\<and>\n                         ta_hb_consistent P E obs' \\<and>\n                         (obs' = LNil \\<longrightarrow>\n                          (a', a)\n                          \\<in> inv_image {(x, y). x < y}\n                                 (llength \\<circ>\n                                  ltakeWhile\n                                   (\\<lambda>(t, ta).\n \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n                         (lfinite obs' \\<longrightarrow>\n                          (\\<exists>s.\n                              hb_completion s (E @ list_of obs') \\<and>\n                              obs'' =\n                              lconcat\n                               (lmap\n                                 (\\<lambda>(t, ta).\n                                     llist_of\n(map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                 (unfold_llist\n                                   (\\<lambda>(s, E).\n \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                                   (\\<lambda>(s, E).\n fst (SOME ((t, ta), s').\n         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n         ta_hb_consistent P E\n          (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                   (\\<lambda>(s, E).\n let ((t, ta), s') =\n       SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n in (s', E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                   (s, E @ list_of obs'))) \\<and>\n                              a' =\n                              unfold_llist\n                               (\\<lambda>(s, E).\n                                   \\<forall>t ta s'.\n\\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                               (\\<lambda>(s, E).\n                                   fst (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                               (\\<lambda>(s, E).\n                                   let ((t, ta), s') =\n   SOME ((t, ta), s').\n      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n      ta_hb_consistent P E\n       (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                                   in (s',\n E @ map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                               (s, E @ list_of obs')) \\<or>\n                          ta_hb_consistent P (E @ list_of obs') obs'')", "apply(simp add: split_beta eq del: split_paired_Ex split_paired_All split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>snd (fst (SOME ((t, ta), s').\n                                   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                   ta_hb_consistent P E\n                                    (llist_of\n(map (Pair t)\n  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub> =\n             [] \\<Longrightarrow>\n             llength\n              (ltakeWhile\n                (\\<lambda>x. \\<lbrace>snd x\\<rbrace>\\<^bsub>o\\<^esub> = [])\n                (unfold_llist\n                  (\\<lambda>(s, E).\n                      \\<forall>t ta s'.\n                         \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                  (\\<lambda>(s, E).\n                      fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                  (\\<lambda>(s, E).\n                      (snd (SOME ((t, ta), s').\n                               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                               ta_hb_consistent P E\n                                (llist_of\n                                  (map (Pair t)\n                                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                       E @\n                       map (Pair\n                             (fst (fst (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                        \\<lbrace>snd (fst\n (SOME ((t, ta), s').\n     s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n     ta_hb_consistent P E\n      (llist_of\n        (map (Pair t)\n          \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                  (snd (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                   E)))\n             < llength\n                (ltakeWhile\n                  (\\<lambda>x.\n                      \\<lbrace>snd x\\<rbrace>\\<^bsub>o\\<^esub> = [])\n                  a);\n     s -t\\<triangleright>ta\\<rightarrow> s';\n     ta_hb_consistent P E\n      (llist_of\n        (map (Pair\n               (fst (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n          \\<lbrace>snd (fst (SOME ((t, ta), s').\n                                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                                ta_hb_consistent P E\n                                 (llist_of\n                                   (map (Pair t)\n                                     \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>));\n     hb_completion\n      (snd (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n      (E @\n       map (Pair\n             (fst (fst (SOME ((t, ta), s').\n                           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                           ta_hb_consistent P E\n                            (llist_of\n                              (map (Pair t)\n                                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n        \\<lbrace>snd (fst (SOME ((t, ta), s').\n                              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                              ta_hb_consistent P E\n                               (llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>obs' obs''.\n                         lappend\n                          (llist_of\n                            (map (Pair\n                                   (fst (fst\n    (SOME ((t, ta), s').\n        s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n        ta_hb_consistent P E\n         (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                              \\<lbrace>snd\n  (fst (SOME ((t, ta), s').\n           s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n           ta_hb_consistent P E\n            (llist_of\n              (map (Pair t)\n                \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                          (lconcat\n                            (lmap\n                              (\\<lambda>z.\n                                  llist_of\n                                   (map (Pair (fst z))\n                                     \\<lbrace>snd\n         z\\<rbrace>\\<^bsub>o\\<^esub>))\n                              (unfold_llist\n                                (\\<lambda>(s, E).\n                                    \\<forall>t ta s'.\n \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                                (\\<lambda>(s, E).\n                                    fst (SOME ((t, ta), s').\n      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n      ta_hb_consistent P E\n       (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                (\\<lambda>(s, E).\n                                    (snd\n(SOME ((t, ta), s').\n    s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n    ta_hb_consistent P E\n     (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                                     E @\n                                     map\n(Pair\n  (fst (fst (SOME ((t, ta), s').\n                s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                ta_hb_consistent P E\n                 (llist_of\n                   (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n\\<lbrace>snd (fst (SOME ((t, ta), s').\n                      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                      ta_hb_consistent P E\n                       (llist_of\n                         (map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                                (snd (SOME ((t, ta), s').\n   s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n   ta_hb_consistent P E\n    (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n                                 E @\n                                 map (Pair\n (fst (fst (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n                                  \\<lbrace>snd\n      (fst (SOME ((t, ta), s').\n               s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n               ta_hb_consistent P E\n                (llist_of\n                  (map (Pair t)\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>)))) =\n                         lappend obs' obs'' \\<and>\n                         ta_hb_consistent P E obs' \\<and>\n                         (\\<exists>a'.\n                             (obs' = LNil \\<longrightarrow>\n                              llength\n                               (ltakeWhile\n                                 (\\<lambda>x.\n                                     \\<lbrace>snd\n         x\\<rbrace>\\<^bsub>o\\<^esub> =\n                                     [])\n                                 a')\n                              < llength\n                                 (ltakeWhile\n                                   (\\<lambda>x.\n \\<lbrace>snd x\\<rbrace>\\<^bsub>o\\<^esub> = [])\n                                   a)) \\<and>\n                             (lfinite obs' \\<longrightarrow>\n                              (\\<exists>s.\n                                  hb_completion s (E @ list_of obs') \\<and>\n                                  obs'' =\n                                  lconcat\n                                   (lmap\n                                     (\\<lambda>z.\n   llist_of (map (Pair (fst z)) \\<lbrace>snd z\\<rbrace>\\<^bsub>o\\<^esub>))\n                                     (unfold_llist\n (\\<lambda>(s, E).\n     \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n (\\<lambda>(s, E).\n     fst (SOME ((t, ta), s').\n             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n             ta_hb_consistent P E\n              (llist_of\n                (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n (\\<lambda>(s, E).\n     (snd (SOME ((t, ta), s').\n              s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n              ta_hb_consistent P E\n               (llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n      E @\n      map (Pair\n            (fst (fst (SOME ((t, ta), s').\n                          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                          ta_hb_consistent P E\n                           (llist_of\n                             (map (Pair t)\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n       \\<lbrace>snd (fst (SOME ((t, ta), s').\n                             s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                             ta_hb_consistent P E\n                              (llist_of\n                                (map (Pair t)\n                                  \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n (s, E @ list_of obs'))) \\<and>\n                                  a' =\n                                  unfold_llist\n                                   (\\<lambda>(s, E).\n \\<forall>t ta s'. \\<not> s -t\\<triangleright>ta\\<rightarrow> s')\n                                   (\\<lambda>(s, E).\n fst (SOME ((t, ta), s').\n         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n         ta_hb_consistent P E\n          (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\n                                   (\\<lambda>(s, E).\n (snd (SOME ((t, ta), s').\n          s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n          ta_hb_consistent P E\n           (llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))),\n  E @\n  map (Pair\n        (fst (fst (SOME ((t, ta), s').\n                      s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                      ta_hb_consistent P E\n                       (llist_of\n                         (map (Pair t)\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))))\n   \\<lbrace>snd (fst (SOME ((t, ta), s').\n                         s -t\\<triangleright>ta\\<rightarrow> s' \\<and>\n                         ta_hb_consistent P E\n                          (llist_of\n                            (map (Pair t)\n                              \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))))\\<rbrace>\\<^bsub>o\\<^esub>))\n                                   (s, E @ list_of obs')) \\<or>\n                              ta_hb_consistent P (E @ list_of obs') obs''))", "apply(intro exI conjI impI refl disjI1|rule refl|assumption|simp_all add: llist_of_eq_LNil_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (obs' = LNil \\<longrightarrow>\n      (a', a)\n      \\<in> inv_image {(m, n). m < n}\n             (llength \\<circ>\n              ltakeWhile\n               (\\<lambda>(t, ta).\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>s.\n          hb_completion s (E @ list_of obs') \\<and>\n          obs'' =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s (E @ list_of obs'))) \\<and>\n          a' = complete_hb s (E @ list_of obs')) \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. \\<not> lnull obs \\<Longrightarrow>\n    obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>obs' obs'' a'.\n     obs = lappend obs' obs'' \\<and>\n     ta_hb_consistent P E obs' \\<and>\n     (obs' = LNil \\<longrightarrow>\n      (a', a)\n      \\<in> inv_image {(m, n). m < n}\n             (llength \\<circ>\n              ltakeWhile\n               (\\<lambda>(t, ta).\n                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n     (lfinite obs' \\<longrightarrow>\n      (\\<exists>s.\n          hb_completion s (E @ list_of obs') \\<and>\n          obs'' =\n          lconcat\n           (lmap\n             (\\<lambda>a.\n                 case a of\n                 (t, ta) \\<Rightarrow>\n                   llist_of\n                    (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             (complete_hb s (E @ list_of obs'))) \\<and>\n          a' = complete_hb s (E @ list_of obs')) \\<or>\n      ta_hb_consistent P (E @ list_of obs') obs'')\n\ngoal (1 subgoal):\n 1. obs = LNil \\<or>\n    (\\<exists>obs' obs'' a'.\n        obs = lappend obs' obs'' \\<and>\n        ta_hb_consistent P E obs' \\<and>\n        (obs' = LNil \\<longrightarrow>\n         (a', a)\n         \\<in> inv_image {(m, n). m < n}\n                (llength \\<circ>\n                 ltakeWhile\n                  (\\<lambda>(t, ta).\n                      \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n        (lfinite obs' \\<longrightarrow>\n         (\\<exists>s.\n             hb_completion s (E @ list_of obs') \\<and>\n             obs'' =\n             lconcat\n              (lmap\n                (\\<lambda>a.\n                    case a of\n                    (t, ta) \\<Rightarrow>\n                      llist_of\n                       (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                (complete_hb s (E @ list_of obs'))) \\<and>\n             a' = complete_hb s (E @ list_of obs')) \\<or>\n         ta_hb_consistent P (E @ list_of obs') obs''))", ".."], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow>\n       (a', a)\n       \\<in> inv_image {(m, n). m < n}\n              (llength \\<circ>\n               ltakeWhile\n                (\\<lambda>(t, ta).\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>s.\n           hb_completion s (E @ list_of obs') \\<and>\n           obs'' =\n           lconcat\n            (lmap\n              (\\<lambda>a.\n                  case a of\n                  (t, ta) \\<Rightarrow>\n                    llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              (complete_hb s (E @ list_of obs'))) \\<and>\n           a' = complete_hb s (E @ list_of obs')) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow>\n       (a', a)\n       \\<in> inv_image {(m, n). m < n}\n              (llength \\<circ>\n               ltakeWhile\n                (\\<lambda>(t, ta).\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>s.\n           hb_completion s (E @ list_of obs') \\<and>\n           obs'' =\n           lconcat\n            (lmap\n              (\\<lambda>a.\n                  case a of\n                  (t, ta) \\<Rightarrow>\n                    llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              (complete_hb s (E @ list_of obs'))) \\<and>\n           a' = complete_hb s (E @ list_of obs')) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obs = LNil \\<or>\n  (\\<exists>obs' obs'' a'.\n      obs = lappend obs' obs'' \\<and>\n      ta_hb_consistent P E obs' \\<and>\n      (obs' = LNil \\<longrightarrow>\n       (a', a)\n       \\<in> inv_image {(m, n). m < n}\n              (llength \\<circ>\n               ltakeWhile\n                (\\<lambda>(t, ta).\n                    \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> = []))) \\<and>\n      (lfinite obs' \\<longrightarrow>\n       (\\<exists>s.\n           hb_completion s (E @ list_of obs') \\<and>\n           obs'' =\n           lconcat\n            (lmap\n              (\\<lambda>a.\n                  case a of\n                  (t, ta) \\<Rightarrow>\n                    llist_of\n                     (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n              (complete_hb s (E @ list_of obs'))) \\<and>\n           a' = complete_hb s (E @ list_of obs')) \\<or>\n       ta_hb_consistent P (E @ list_of obs') obs''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ta_hb_consistent P E obs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hb_completion_Runs:\n  assumes \"hb_completion s E\"\n  and \"\\<And>E t ln. ta_hb_consistent P E (llist_of (map (Pair t) (convert_RA ln)))\"\n  shows \"\\<exists>ttas. mthr.Runs s ttas \\<and> ta_hb_consistent P E (lconcat (lmap (\\<lambda>(t, ta). llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>)) ttas))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ttas.\n       mthr.Runs s ttas \\<and>\n       ta_hb_consistent P E\n        (lconcat\n          (lmap\n            (\\<lambda>(t, ta).\n                llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            ttas))", "using complete_hb_in_Runs[OF assms] complete_hb_ta_hb_consistent[OF assms]"], ["proof (prove)\nusing this:\n  mthr.Runs s (complete_hb s E)\n  ta_hb_consistent P E\n   (lconcat\n     (lmap\n       (\\<lambda>(t, ta).\n           llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n       (complete_hb s E)))\n\ngoal (1 subgoal):\n 1. \\<exists>ttas.\n       mthr.Runs s ttas \\<and>\n       ta_hb_consistent P E\n        (lconcat\n          (lmap\n            (\\<lambda>(t, ta).\n                llist_of\n                 (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n            ttas))", "by blast"], ["", "end"], ["", "end"]]}