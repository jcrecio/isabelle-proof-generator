{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/JMM_Compiler_Type2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["theorem J2JVM_jmm_correct:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  shows \"legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws) \\<longleftrightarrow> \n         legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\"", "theorem J2JVM_jmm_correct_weak:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  shows \"weakly_legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws) \\<longleftrightarrow> \n         weakly_legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\"", "theorem J2JVM_jmm_correctly_synchronized:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  and ka: \"\\<Union>(ka_Val ` set vs) \\<subseteq> set jmm.start_addrs\"\n  shows \"correctly_synchronized (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) \\<longleftrightarrow> \n         correctly_synchronized P (jmm_J_\\<E> P C M vs Running)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], "translations": [["", "theorem J2JVM_jmm_correct:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  shows \"legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws) \\<longleftrightarrow> \n         legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws) =\n    legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "using JVMd_legal_typesafe[OF wt_J2JVM[OF wf], of C M vs Running, symmetric] wf_start"], ["proof (prove)\nusing this:\n  jmm_wf_start_state (J2JVM P) C M vs \\<Longrightarrow>\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) (jmm_heap_read_typed (J2JVM P))\n            jmm_heap_write (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))) =\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n  jmm_wf_start_state P C M vs\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws) =\n    legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "by(simp only: J_legal_typesafe[OF assms] J_JVM_conf_read.red_\\<E>_eq_mexecd_\\<E>[OF jmm'_J_JVM_conf_read assms] J2JVM_def o_apply compP1_def compP2_def legal_execution_compP heap_base.wf_start_state_compP jmm_typeof_addr_compP heap_base.heap_read_typed_compP)"], ["", "theorem J2JVM_jmm_correct_weak:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  shows \"weakly_legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws) \\<longleftrightarrow> \n         weakly_legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws) =\n    weakly_legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "using JVMd_weakly_legal_typesafe[OF wt_J2JVM[OF wf], of C M vs Running, symmetric] wf_start"], ["proof (prove)\nusing this:\n  jmm_wf_start_state (J2JVM P) C M vs \\<Longrightarrow>\n  weakly_legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) (jmm_heap_read_typed (J2JVM P))\n            jmm_heap_write (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))) =\n  weakly_legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n  jmm_wf_start_state P C M vs\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws) =\n    weakly_legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "by(simp only: J_weakly_legal_typesafe[OF assms] J_JVM_conf_read.red_\\<E>_eq_mexecd_\\<E>[OF jmm'_J_JVM_conf_read assms] J2JVM_def o_apply compP1_def compP2_def weakly_legal_execution_compP heap_base.wf_start_state_compP jmm_typeof_addr_compP heap_base.heap_read_typed_compP)"], ["", "theorem J2JVM_jmm_correctly_synchronized:\n  assumes wf: \"wf_J_prog P\"\n  and wf_start: \"jmm_wf_start_state P C M vs\"\n  and ka: \"\\<Union>(ka_Val ` set vs) \\<subseteq> set jmm.start_addrs\"\n  shows \"correctly_synchronized (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) \\<longleftrightarrow> \n         correctly_synchronized P (jmm_J_\\<E> P C M vs Running)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))) =\n    correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n           vs))) \\<Longrightarrow>\n    correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n 2. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs))) \\<Longrightarrow>\n    correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "assume ?lhs"], ["proof (state)\nthis:\n  correctly_synchronized (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n\ngoal (2 subgoals):\n 1. correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n           vs))) \\<Longrightarrow>\n    correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n 2. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs))) \\<Longrightarrow>\n    correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))", "unfolding correctly_synchronized_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E\\<in>lappend\n                    (llist_of\n                      (lift_start_obs jmm'.h.start_tid\n                        jmm'.h.start_heap_obs)) `\n                   multithreaded_base.\\<E>\n                    (final_thread.init_fin_final final_expr)\n                    (multithreaded_base.init_fin final_expr\n                      (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                          J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                           jmm_spurious_wakeups jmm_empty jmm_allocate\n                           (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                           (extTA2J P) P t e (h, l) ta e' (h', l')))\n                    (map NormalAction \\<circ> convert_RA)\n                    (init_fin_lift_state Running\n                      (jmm'.h.start_state J_local_start P C M vs)).\n       \\<forall>ws.\n          P \\<turnstile> (E, ws) \\<surd> \\<longrightarrow>\n          sequentially_consistent P (E, ws) \\<longrightarrow>\n          (\\<forall>a\\<in>actions E.\n              \\<forall>a'\\<in>actions E.\n                 P,E \\<turnstile>a\\<dagger>a' \\<longrightarrow>\n                 P,E \\<turnstile> a \\<le>hb a' \\<or>\n                 P,E \\<turnstile> a' \\<le>hb a)", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "fix E ws a a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "assume E: \"E \\<in> jmm_J_\\<E> P C M vs Running\"\n      and wf_exec: \"P \\<turnstile> (E, ws) \\<surd>\"\n      and sc: \"sequentially_consistent P (E, ws)\"\n      and actions: \"a \\<in> actions E\" \"a' \\<in> actions E\"\n      and conflict: \"P,E \\<turnstile> a \\<dagger> a'\""], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)\n  a \\<in> actions E\n  a' \\<in> actions E\n  P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "from E wf_exec sc"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)", "have \"legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws)\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws)", "by(rule sc_legal.SC_is_legal[OF J_allocated_progress.J_sc_legal[OF jmm_J_allocated_progress wf jmm_heap_read_typeable wf_start ka]])"], ["proof (state)\nthis:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "hence \"legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\""], ["proof (prove)\nusing this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "by(simp only: J2JVM_jmm_correct[OF wf wf_start])"], ["proof (state)\nthis:\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "hence \"E \\<in> jmm_JVMd_\\<E> (J2JVM P) C M vs Running\" \"J2JVM P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                    (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state Running\n               (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)) &&&\n    J2JVM P \\<turnstile> (E, ws) \\<surd>", "by(simp_all add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "moreover"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "from sc"], ["proof (chain)\npicking this:\n  sequentially_consistent P (E, ws)", "have \"sequentially_consistent (J2JVM P) (E, ws)\""], ["proof (prove)\nusing this:\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. sequentially_consistent (J2JVM P) (E, ws)", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  sequentially_consistent (J2JVM P) (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "moreover"], ["proof (state)\nthis:\n  sequentially_consistent (J2JVM P) (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "from conflict"], ["proof (chain)\npicking this:\n  P,E \\<turnstile>a\\<dagger>a'", "have \"J2JVM P,E \\<turnstile> a \\<dagger> a'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. J2JVM P,E \\<turnstile>a\\<dagger>a'", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  J2JVM P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "ultimately"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)\n  J2JVM P,E \\<turnstile>a\\<dagger>a'", "have \"J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or> J2JVM P,E \\<turnstile> a' \\<le>hb a\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)\n  J2JVM P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n    J2JVM P,E \\<turnstile> a' \\<le>hb a", "using \\<open>?lhs\\<close> actions"], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)\n  J2JVM P,E \\<turnstile>a\\<dagger>a'\n  correctly_synchronized (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n  a \\<in> actions E\n  a' \\<in> actions E\n\ngoal (1 subgoal):\n 1. J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n    J2JVM P,E \\<turnstile> a' \\<le>hb a", "by(auto simp add: correctly_synchronized_def)"], ["proof (state)\nthis:\n  J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n  J2JVM P,E \\<turnstile> a' \\<le>hb a\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final final_expr)\n                         (multithreaded_base.init_fin final_expr\n                           (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                               J_heap_base.red (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate (jmm_typeof_addr P)\n                                jmm_heap_read jmm_heap_write (extTA2J P) P t\n                                e (h, l) ta e' (h', l')))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state J_local_start P C M vs));\n        P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws);\n        a \\<in> actions E; a' \\<in> actions E;\n        P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "thus \"P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\""], ["proof (prove)\nusing this:\n  J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n  J2JVM P,E \\<turnstile> a' \\<le>hb a\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  correctly_synchronized P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n\ngoal (1 subgoal):\n 1. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs))) \\<Longrightarrow>\n    correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs))) \\<Longrightarrow>\n    correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "assume ?rhs"], ["proof (state)\nthis:\n  correctly_synchronized P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n\ngoal (1 subgoal):\n 1. correctly_synchronized P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs))) \\<Longrightarrow>\n    correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "show ?lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. correctly_synchronized (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))", "unfolding correctly_synchronized_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E\\<in>lappend\n                    (llist_of\n                      (lift_start_obs jmm'.h.start_tid\n                        jmm'.h.start_heap_obs)) `\n                   multithreaded_base.\\<E>\n                    (final_thread.init_fin_final JVM_final)\n                    (multithreaded_base.init_fin JVM_final\n                      (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                          h').\n                          JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                           (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                           jmm_allocate (jmm_typeof_addr (J2JVM P))\n                           jmm_heap_read jmm_heap_write (J2JVM P) t\n                           (Normal (xcp, h, frstls)) ta\n                           (Normal (xcp', h', frstls'))))\n                    (map NormalAction \\<circ> convert_RA)\n                    (init_fin_lift_state Running\n                      (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                        vs)).\n       \\<forall>ws.\n          J2JVM P \\<turnstile> (E, ws) \\<surd> \\<longrightarrow>\n          sequentially_consistent (J2JVM P) (E, ws) \\<longrightarrow>\n          (\\<forall>a\\<in>actions E.\n              \\<forall>a'\\<in>actions E.\n                 J2JVM P,E \\<turnstile>a\\<dagger>a' \\<longrightarrow>\n                 J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                 J2JVM P,E \\<turnstile> a' \\<le>hb a)", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "fix E ws a a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "assume E: \"E \\<in> jmm_JVMd_\\<E> (J2JVM P) C M vs Running\"\n      and wf_exec: \"J2JVM P \\<turnstile> (E, ws) \\<surd>\"\n      and sc: \"sequentially_consistent (J2JVM P) (E, ws)\"\n      and actions: \"a \\<in> actions E\" \"a' \\<in> actions E\"\n      and conflict: \"J2JVM P,E \\<turnstile> a \\<dagger> a'\""], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)\n  a \\<in> actions E\n  a' \\<in> actions E\n  J2JVM P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "from wf"], ["proof (chain)\npicking this:\n  wf_J_prog P", "have \"wf_jvm_prog (J2JVM P)\""], ["proof (prove)\nusing this:\n  wf_J_prog P\n\ngoal (1 subgoal):\n 1. wf_jvm_prog (J2JVM P)", "by(rule wt_J2JVM)"], ["proof (state)\nthis:\n  wf_jvm_prog (J2JVM P)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "then"], ["proof (chain)\npicking this:\n  wf_jvm_prog (J2JVM P)", "obtain \\<Phi> where wf': \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> (J2JVM P)\""], ["proof (prove)\nusing this:\n  wf_jvm_prog (J2JVM P)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>.\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> (J2JVM P) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wf_jvm_prog_def)"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> (J2JVM P)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "from wf_start"], ["proof (chain)\npicking this:\n  jmm_wf_start_state P C M vs", "have wf_start': \"jmm_wf_start_state (J2JVM P) C M vs\""], ["proof (prove)\nusing this:\n  jmm_wf_start_state P C M vs\n\ngoal (1 subgoal):\n 1. jmm_wf_start_state (J2JVM P) C M vs", "by(simp add: J2JVM_def compP2_def heap_base.wf_start_state_compP)"], ["proof (state)\nthis:\n  jmm_wf_start_state (J2JVM P) C M vs\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "from E wf_exec sc"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)", "have \"legal_execution (J2JVM P) (jmm_JVMd_\\<E> (J2JVM P) C M vs Running) (E, ws)\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n                  (J2JVM P) t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs))\n  J2JVM P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent (J2JVM P) (E, ws)\n\ngoal (1 subgoal):\n 1. legal_execution (J2JVM P)\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n              (J2JVM P) t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n     (E, ws)", "by(rule sc_legal.SC_is_legal[OF JVM_allocated_progress.JVM_sc_legal[OF jmm_JVM_allocated_progress wf' jmm_heap_read_typeable wf_start' ka]])"], ["proof (state)\nthis:\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "hence \"legal_execution P (jmm_J_\\<E> P C M vs Running) (E, ws)\""], ["proof (prove)\nusing this:\n  legal_execution (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n       (multithreaded_base.init_fin final_expr\n         (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n             J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write (extTA2J P) P\n              t e (h, l) ta e' (h', l')))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state Running\n         (jmm'.h.start_state J_local_start P C M vs)))\n     (E, ws)", "by(simp only: J2JVM_jmm_correct[OF wf wf_start])"], ["proof (state)\nthis:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "hence \"E \\<in> jmm_J_\\<E> P C M vs Running\" \"P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n             (multithreaded_base.init_fin final_expr\n               (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                   J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                    (extTA2J P) P t e (h, l) ta e' (h', l')))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state Running\n               (jmm'.h.start_state J_local_start P C M vs)) &&&\n    P \\<turnstile> (E, ws) \\<surd>", "by(simp_all add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "moreover"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "from sc"], ["proof (chain)\npicking this:\n  sequentially_consistent (J2JVM P) (E, ws)", "have \"sequentially_consistent P (E, ws)\""], ["proof (prove)\nusing this:\n  sequentially_consistent (J2JVM P) (E, ws)\n\ngoal (1 subgoal):\n 1. sequentially_consistent P (E, ws)", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "moreover"], ["proof (state)\nthis:\n  sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "from conflict"], ["proof (chain)\npicking this:\n  J2JVM P,E \\<turnstile>a\\<dagger>a'", "have \"P,E \\<turnstile> a \\<dagger> a'\""], ["proof (prove)\nusing this:\n  J2JVM P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile>a\\<dagger>a'", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "ultimately"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)\n  P,E \\<turnstile>a\\<dagger>a'", "have \"P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)\n  P,E \\<turnstile>a\\<dagger>a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a", "using \\<open>?rhs\\<close> actions"], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n           (multithreaded_base.init_fin final_expr\n             (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n                 J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write\n                  (extTA2J P) P t e (h, l) ta e' (h', l')))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state Running\n             (jmm'.h.start_state J_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n  sequentially_consistent P (E, ws)\n  P,E \\<turnstile>a\\<dagger>a'\n  correctly_synchronized P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final final_expr)\n     (multithreaded_base.init_fin final_expr\n       (\\<lambda>t ((e, l), h) ta ((e', l'), h').\n           J_heap_base.red (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write (extTA2J P) P t e (h, l) ta e'\n            (h', l')))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state J_local_start P C M vs)))\n  a \\<in> actions E\n  a' \\<in> actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a", "by(auto simp add: correctly_synchronized_def)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\n\ngoal (1 subgoal):\n 1. \\<And>E ws a a'.\n       \\<lbrakk>E \\<in> lappend\n                         (llist_of\n                           (lift_start_obs jmm'.h.start_tid\n                             jmm'.h.start_heap_obs)) `\n                        multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) jmm_spurious_wakeups\n                                jmm_empty jmm_allocate\n                                (jmm_typeof_addr (J2JVM P)) jmm_heap_read\n                                jmm_heap_write (J2JVM P) t\n                                (Normal (xcp, h, frstls)) ta\n                                (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state Running\n                           (jmm'.h.start_state JVM_local_start (J2JVM P) C M\n                             vs));\n        J2JVM P \\<turnstile> (E, ws) \\<surd>;\n        sequentially_consistent (J2JVM P) (E, ws); a \\<in> actions E;\n        a' \\<in> actions E; J2JVM P,E \\<turnstile>a\\<dagger>a'\\<rbrakk>\n       \\<Longrightarrow> J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         J2JVM P,E \\<turnstile> a' \\<le>hb a", "thus \"J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or> J2JVM P,E \\<turnstile> a' \\<le>hb a\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\n\ngoal (1 subgoal):\n 1. J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n    J2JVM P,E \\<turnstile> a' \\<le>hb a", "by(simp add: J2JVM_def compP2_def)"], ["proof (state)\nthis:\n  J2JVM P,E \\<turnstile> a \\<le>hb a' \\<or>\n  J2JVM P,E \\<turnstile> a' \\<le>hb a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  correctly_synchronized (J2JVM P)\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (jmm_typeof_addr (J2JVM P)) jmm_heap_read jmm_heap_write\n            (J2JVM P) t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state Running\n       (jmm'.h.start_state JVM_local_start (J2JVM P) C M vs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}