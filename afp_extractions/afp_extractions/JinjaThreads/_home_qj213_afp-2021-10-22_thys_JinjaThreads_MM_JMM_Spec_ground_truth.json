{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/JMM_Spec.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma action_loc_aux_intros [intro?]:\n  \"P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow> (ad, CField D F) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\"\n  \"n < n' \\<Longrightarrow> (ad, ACell n) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad (Array_type T n')))\"\n  \"(ad, al) \\<in> action_loc_aux P (NormalAction (WriteMem ad al v))\"\n  \"(ad, al) \\<in> action_loc_aux P (NormalAction (ReadMem ad al v))\"", "lemma action_loc_aux_cases [elim?, cases set: action_loc_aux]:\n  assumes \"adal \\<in> action_loc_aux P obs\"\n  obtains (NewHeapElem) hT F T fm D ad where \"obs = NormalAction (NewHeapElem ad hT)\" \"adal = (ad, CField D F)\" \"P \\<turnstile> class_type_of hT has F:T (fm) in D\"\n  | (NewArr) n n' ad T where \"obs = NormalAction (NewHeapElem ad (Array_type T n'))\" \"adal = (ad, ACell n)\" \"n < n'\"\n  | (WriteMem) ad al v where \"obs = NormalAction (WriteMem ad al v)\" \"adal = (ad, al)\"\n  | (ReadMem) ad al v where \"obs = NormalAction (ReadMem ad al v)\" \"adal = (ad, al)\"", "lemma action_loc_aux_simps [simp]:\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT)) \\<longleftrightarrow> \n   (\\<exists>D F T fm. ad = ad' \\<and> al' = CField D F \\<and> P \\<turnstile> class_type_of hT has F:T (fm) in D) \\<or> \n   (\\<exists>n T n'. ad = ad' \\<and> al' = ACell n \\<and> hT = Array_type T n' \\<and> n < n')\"\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (WriteMem ad al v)) \\<longleftrightarrow> ad = ad' \\<and> al = al'\"\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (ReadMem ad al v)) \\<longleftrightarrow> ad = ad' \\<and> al = al'\"\n  \"(ad', al') \\<notin> action_loc_aux P InitialThreadAction\"\n  \"(ad', al') \\<notin> action_loc_aux P ThreadFinishAction\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ExternalCall a m vs v))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadStart t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadJoin t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (SyncLock a))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (SyncUnlock a))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupt t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupted t))\"", "lemmas is_new_action_iff = is_new_action.simps", "lemma new_action_saction [simp, intro]: \"is_new_action a \\<Longrightarrow> saction P a\"", "lemmas saction_iff = saction.simps", "lemma actionsD: \"a \\<in> actions E \\<Longrightarrow> enat a < llength E\"", "lemma actionsE: \n  assumes \"a \\<in> actions E\"\n  obtains \"enat a < llength E\"", "lemma actions_lappend:\n  \"llength xs = enat n \\<Longrightarrow> actions (lappend xs ys) = actions xs \\<union> ((+) n) ` actions ys\"", "lemma tactionsE:\n  assumes \"a \\<in> tactions E t\"\n  obtains obs where \"a \\<in> actions E\" \"action_tid E a = t\" \"action_obs E a = obs\"", "lemma sactionsI:\n  \"\\<lbrakk> a \\<in> actions E; saction P (action_obs E a) \\<rbrakk> \\<Longrightarrow> a \\<in> sactions P E\"", "lemma sactionsE:\n  assumes \"a \\<in> sactions P E\"\n  obtains \"a \\<in> actions E\" \"saction P (action_obs E a)\"", "lemma sactions_actions [simp]:\n  \"a \\<in> sactions P E \\<Longrightarrow> a \\<in> actions E\"", "lemma value_written_aux_WriteMem [simp]:\n  \"value_written_aux P (NormalAction (WriteMem ad al v)) al = v\"", "lemma write_actions_actions [simp]:\n  \"a \\<in> write_actions E \\<Longrightarrow> a \\<in> actions E\"", "lemma read_actions_actions [simp]:\n  \"a \\<in> read_actions E \\<Longrightarrow> a \\<in> actions E\"", "lemma read_action_action_locE:\n  assumes \"r \\<in> read_actions E\"\n  obtains ad al where \"(ad, al) \\<in> action_loc P E r\"", "lemma read_actions_not_write_actions:\n  \"\\<lbrakk> a \\<in> read_actions E; a \\<in> write_actions E \\<rbrakk> \\<Longrightarrow> False\"", "lemma read_actions_Int_write_actions [simp]:\n  \"read_actions E \\<inter> write_actions E = {}\"\n  \"write_actions E \\<inter> read_actions E = {}\"", "lemma action_loc_addr_fun:\n  \"\\<lbrakk> (ad, al) \\<in> action_loc P E a; (ad', al') \\<in> action_loc P E a \\<rbrakk> \\<Longrightarrow> ad = ad'\"", "lemma value_written_cong [cong]:\n  \"\\<lbrakk> P = P'; a = a'; action_obs E a' = action_obs E' a' \\<rbrakk> \n  \\<Longrightarrow> value_written P E a = value_written P' E' a'\"", "lemma new_actionsI:\n  \"\\<lbrakk> a \\<in> actions E; adal \\<in> action_loc P E a; is_new_action (action_obs E a) \\<rbrakk>\n  \\<Longrightarrow> a \\<in> new_actions_for P E adal\"", "lemma new_actionsE:\n  assumes \"a \\<in> new_actions_for P E adal\"\n  obtains \"a \\<in> actions E\" \"adal \\<in> action_loc P E a\" \"is_new_action (action_obs E a)\"", "lemma action_loc_read_action_singleton:\n  \"\\<lbrakk> r \\<in> read_actions E; adal \\<in> action_loc P E r; adal' \\<in> action_loc P E r \\<rbrakk> \\<Longrightarrow> adal = adal'\"", "lemma addr_locsI:\n  \"P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow> CField D F \\<in> addr_locs P hT\"\n  \"\\<lbrakk> hT = Array_type T n; n' < n \\<rbrakk> \\<Longrightarrow> ACell n' \\<in> addr_locs P hT\"", "lemma action_orderI:\n  assumes \"a \\<in> actions E\" \"a' \\<in> actions E\"\n  and \"\\<lbrakk> is_new_action (action_obs E a); is_new_action (action_obs E a') \\<rbrakk> \\<Longrightarrow> a \\<le> a'\"\n  and \"\\<not> is_new_action (action_obs E a) \\<Longrightarrow> \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a'\"\n  shows \"E \\<turnstile> a \\<le>a a'\"", "lemma action_orderE:\n  assumes \"E \\<turnstile> a \\<le>a a'\"\n  obtains \"a \\<in> actions E\" \"a' \\<in> actions E\" \n          \"is_new_action (action_obs E a)\" \"is_new_action (action_obs E a') \\<longrightarrow> a \\<le> a'\"\n        | \"a \\<in> actions E\" \"a' \\<in> actions E\" \n          \"\\<not> is_new_action (action_obs E a)\" \"\\<not> is_new_action (action_obs E a')\" \"a \\<le> a'\"", "lemma refl_action_order:\n  \"refl_onP (actions E) (action_order E)\"", "lemma antisym_action_order:\n  \"antisymp (action_order E)\"", "lemma trans_action_order:\n  \"transp (action_order E)\"", "lemma porder_action_order:\n  \"porder_on (actions E) (action_order E)\"", "lemma total_action_order:\n  \"total_onP (actions E) (action_order E)\"", "lemma torder_action_order:\n  \"torder_on (actions E) (action_order E)\"", "lemma wf_action_order: \"wfP (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\"", "lemma action_order_is_new_actionD:\n  \"\\<lbrakk> E \\<turnstile> a \\<le>a a'; is_new_action (action_obs E a') \\<rbrakk> \\<Longrightarrow> is_new_action (action_obs E a)\"", "lemma program_orderI:\n  assumes \"E \\<turnstile> a \\<le>a a'\" and \"action_tid E a = action_tid E a'\"\n  shows \"E \\<turnstile> a \\<le>po a'\"", "lemma program_orderE:\n  assumes \"E \\<turnstile> a \\<le>po a'\"\n  obtains t obs obs'\n  where \"E \\<turnstile> a \\<le>a a'\"\n  and \"action_tid E a = t\" \"action_obs E a = obs\"\n  and \"action_tid E a' = t\" \"action_obs E a' = obs'\"", "lemma refl_on_program_order:\n  \"refl_onP (actions E) (program_order E)\"", "lemma antisym_program_order:\n  \"antisymp (program_order E)\"", "lemma trans_program_order:\n  \"transp (program_order E)\"", "lemma porder_program_order:\n  \"porder_on (actions E) (program_order E)\"", "lemma total_program_order_on_tactions:\n  \"total_onP (tactions E t) (program_order E)\"", "lemma sync_orderI:\n  \"\\<lbrakk> E \\<turnstile> a \\<le>a a'; a \\<in> sactions P E; a' \\<in> sactions P E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<le>so a'\"", "lemma sync_orderE:\n  assumes \"P,E \\<turnstile> a \\<le>so a'\"\n  obtains \"a \\<in> sactions P E\" \"a' \\<in> sactions P E\" \"E \\<turnstile> a \\<le>a a'\"", "lemma refl_on_sync_order:\n  \"refl_onP (sactions P E) (sync_order P E)\"", "lemma antisym_sync_order:\n  \"antisymp (sync_order P E)\"", "lemma trans_sync_order:\n  \"transp (sync_order P E)\"", "lemma porder_sync_order:\n  \"porder_on (sactions P E) (sync_order P E)\"", "lemma total_sync_order:\n  \"total_onP (sactions P E) (sync_order P E)\"", "lemma torder_sync_order:\n  \"torder_on (sactions P E) (sync_order P E)\"", "lemma sync_withI:\n  \"\\<lbrakk> P,E \\<turnstile> a \\<le>so a'; P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a') \\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> a \\<le>sw a'\"", "lemma sync_withE:\n  assumes \"P,E \\<turnstile> a \\<le>sw a'\"\n  obtains \"P,E \\<turnstile> a \\<le>so a'\" \"P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a')\"", "lemma irrefl_synchronizes_with:\n  \"irreflP (synchronizes_with P)\"", "lemma irrefl_sync_with:\n  \"irreflP (sync_with P E)\"", "lemma anitsym_sync_with:\n  \"antisymp (sync_with P E)\"", "lemma consistent_program_order_sync_order:\n  \"order_consistent (program_order E) (sync_order P E)\"", "lemma consistent_program_order_sync_with:\n  \"order_consistent (program_order E) (sync_with P E)\"", "lemma porder_happens_before:\n  \"porder_on (actions E) (happens_before P E)\"", "lemma porder_tranclp_po_so:\n  \"porder_on (actions E) (\\<lambda>a a'. program_order E a a' \\<or> sync_order P E a a')^++\"", "lemma happens_before_refl:\n  assumes \"a \\<in> actions E\"\n  shows \"P,E \\<turnstile> a \\<le>hb a\"", "lemma happens_before_into_po_so_tranclp:\n  assumes \"P,E \\<turnstile> a \\<le>hb a'\"\n  shows \"(\\<lambda>a a'. E \\<turnstile> a \\<le>po a' \\<or> P,E \\<turnstile> a \\<le>so a')^++ a a'\"", "lemma po_sw_into_action_order:\n  \"po_sw P E a a' \\<Longrightarrow> E \\<turnstile> a \\<le>a a'\"", "lemma happens_before_into_action_order:\n  assumes \"P,E \\<turnstile> a \\<le>hb a'\"\n  shows \"E \\<turnstile> a \\<le>a a'\"", "lemma action_order_consistent_with_happens_before:\n  \"order_consistent (action_order E) (happens_before P E)\"", "lemma happens_before_new_actionD:\n  assumes hb: \"P,E \\<turnstile> a \\<le>hb a'\"\n  and new: \"is_new_action (action_obs E a')\"\n  shows \"is_new_action (action_obs E a)\" \"action_tid E a = action_tid E a'\" \"a \\<le> a'\"", "lemma external_actions_not_new:\n  \"\\<lbrakk> a \\<in> external_actions E; is_new_action (action_obs E a) \\<rbrakk> \\<Longrightarrow> False\"", "lemma most_recent_write_for_fun:\n  \"\\<lbrakk> P,E \\<turnstile> ra \\<leadsto>mrw wa; P,E \\<turnstile> ra \\<leadsto>mrw wa' \\<rbrakk> \\<Longrightarrow> wa = wa'\"", "lemma THE_most_recent_writeI: \"P,E \\<turnstile> r \\<leadsto>mrw w \\<Longrightarrow> (THE w. P,E \\<turnstile> r \\<leadsto>mrw w) = w\"", "lemma most_recent_write_for_write_actionsD:\n  assumes \"P,E \\<turnstile> ra \\<leadsto>mrw wa\"\n  shows \"wa \\<in> write_actions E\"", "lemma most_recent_write_recent:\n  \"\\<lbrakk> P,E \\<turnstile> r \\<leadsto>mrw w; adal \\<in> action_loc P E r; w' \\<in> write_actions E; adal \\<in> action_loc P E w' \\<rbrakk> \n  \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or> E \\<turnstile> r \\<le>a w'\"", "lemma is_write_seenI:\n  \"\\<lbrakk> \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> ws a \\<in> write_actions E;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> (ad, al) \\<in> action_loc P E (ws a);\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> value_written P E (ws a) (ad, al) = v;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>hb ws a;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v); is_volatile P al \\<rbrakk>\n     \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a;\n     \\<And>a ad al v a'. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v);\n                      a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a'; P,E \\<turnstile> ws a \\<le>hb a';\n                      P,E \\<turnstile> a' \\<le>hb a \\<rbrakk> \\<Longrightarrow> a' = ws a;\n     \\<And>a ad al v a'. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v);\n                      a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a'; is_volatile P al; P,E \\<turnstile> ws a \\<le>so a';\n                      P,E \\<turnstile> a' \\<le>so a \\<rbrakk> \\<Longrightarrow> a' = ws a \\<rbrakk>\n  \\<Longrightarrow> is_write_seen P E ws\"", "lemma is_write_seenD:\n  \"\\<lbrakk> is_write_seen P E ws; a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n  \\<Longrightarrow> ws a \\<in> write_actions E \\<and> (ad, al) \\<in> action_loc P E (ws a) \\<and> value_written P E (ws a) (ad, al) = v \\<and> \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and> (is_volatile P al \\<longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n     (\\<forall>a' \\<in> write_actions E. (ad, al) \\<in> action_loc P E a' \\<and> (P,E \\<turnstile> ws a \\<le>hb a' \\<and> P,E \\<turnstile> a' \\<le>hb a \\<or> is_volatile P al \\<and> P,E \\<turnstile> ws a \\<le>so a' \\<and> P,E \\<turnstile> a' \\<le>so a) \\<longrightarrow> a' = ws a)\"", "lemma thread_start_actions_okI:\n  \"(\\<And>a. \\<lbrakk> a \\<in> actions E; \\<not> is_new_action (action_obs E a) \\<rbrakk> \n    \\<Longrightarrow> \\<exists>i. i \\<le> a \\<and> action_obs E i = InitialThreadAction \\<and> action_tid E i = action_tid E a)\n  \\<Longrightarrow> thread_start_actions_ok E\"", "lemma thread_start_actions_okD:\n  \"\\<lbrakk> thread_start_actions_ok E; a \\<in> actions E; \\<not> is_new_action (action_obs E a) \\<rbrakk> \n  \\<Longrightarrow> \\<exists>i. i \\<le> a \\<and> action_obs E i = InitialThreadAction \\<and> action_tid E i = action_tid E a\"", "lemma thread_start_actions_ok_prefix:\n  \"\\<lbrakk> thread_start_actions_ok E'; lprefix E E' \\<rbrakk> \\<Longrightarrow> thread_start_actions_ok E\"", "lemma wf_execI [intro?]:\n  \"\\<lbrakk> is_write_seen P E ws;\n    thread_start_actions_ok E \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> (E, ws) \\<surd>\"", "lemma wf_exec_is_write_seenD:\n  \"P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow> is_write_seen P E ws\"", "lemma wf_exec_thread_start_actions_okD:\n  \"P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow> thread_start_actions_ok E\"", "lemma sequentially_consistentI:\n  \"(\\<And>r. r \\<in> read_actions E \\<Longrightarrow> P,E \\<turnstile> r \\<leadsto>mrw ws r)\n  \\<Longrightarrow> sequentially_consistent P (E, ws)\"", "lemma sequentially_consistentE:\n  assumes \"sequentially_consistent P (E, ws)\" \"a \\<in> read_actions E\"\n  obtains \"P,E \\<turnstile> a \\<leadsto>mrw ws a\"", "lemma sim_action_refl [intro!, simp]:\n  \"obs \\<approx> obs\"", "lemma sim_action_trans [trans]:\n  \"\\<lbrakk> obs \\<approx> obs'; obs' \\<approx> obs'' \\<rbrakk> \\<Longrightarrow> obs \\<approx> obs''\"", "lemma sim_action_sym [sym]:\n  assumes \"obs \\<approx> obs'\"\n  shows \"obs' \\<approx> obs\"", "lemma sim_actions_sym [sym]:\n  \"E [\\<approx>] E' \\<Longrightarrow> E' [\\<approx>] E\"", "lemma sim_actions_action_obsD:\n  \"E [\\<approx>] E' \\<Longrightarrow> action_obs E a \\<approx> action_obs E' a\"", "lemma sim_actions_action_tidD:\n  \"E [\\<approx>] E' \\<Longrightarrow> action_tid E a = action_tid E' a\"", "lemma action_loc_aux_sim_action:\n  \"a \\<approx> a' \\<Longrightarrow> action_loc_aux P a = action_loc_aux P a'\"", "lemma eq_into_sim_actions: \n  assumes \"E = E'\"\n  shows \"E [\\<approx>] E'\"", "lemma sym_non_volatile_conflict:\n  \"symP (non_volatile_conflict P E)\"", "lemma legal_executionI:\n  \"\\<lbrakk> E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; is_justification P (E, ws) J; range (justifying_exec \\<circ> J) \\<subseteq> \\<E> \\<rbrakk>\n  \\<Longrightarrow> gen_legal_execution is_justification P \\<E> (E, ws)\"", "lemma legal_executionE:\n  assumes \"gen_legal_execution is_justification P \\<E> (E, ws)\"\n  obtains J where \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\" \"is_justification P (E, ws) J\" \"range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\"", "lemma legal_\\<E>D: \"gen_legal_execution is_justification P \\<E> (E, ws) \\<Longrightarrow> E \\<in> \\<E>\"", "lemma legal_wf_execD:\n  \"gen_legal_execution is_justification P \\<E> Ews \\<Longrightarrow> P \\<turnstile> Ews \\<surd>\"", "lemma correctly_synchronizedD:\n  \"\\<lbrakk> correctly_synchronized P \\<E>; E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws) \\<rbrakk>\n  \\<Longrightarrow> \\<forall>a a'. a \\<in> actions E \\<longrightarrow> a' \\<in> actions E \\<longrightarrow> P,E \\<turnstile> a \\<dagger> a' \\<longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\"", "lemma wf_action_translation_on_actionD:\n  \"\\<lbrakk> wf_action_translation_on E E' A f; a \\<in> A \\<rbrakk> \n  \\<Longrightarrow> action_tid E a = action_tid E' (f a) \\<and> action_obs E a \\<approx> action_obs E' (f a)\"", "lemma wf_action_translation_on_inj_onD:\n  \"wf_action_translation_on E E' A f \\<Longrightarrow> inj_on f (actions E)\"", "lemma wf_action_translation_on_action_locD:\n  \"\\<lbrakk> wf_action_translation_on E E' A f; a \\<in> A \\<rbrakk>\n  \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\"", "lemma weakly_justified_write_seen_hb_read_committed:\n  assumes J: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and r: \"r \\<in> read_actions (justifying_exec (J n))\" \"r \\<in> committed (J n)\"\n  shows \"ws (action_translation (J n) r) \\<in> action_translation (J n) ` committed (J n)\"", "lemma justified_write_seen_hb_read_committed:\n  assumes J: \"P \\<turnstile> (E, ws) justified_by J\"\n  and r: \"r \\<in> read_actions (justifying_exec (J n))\" \"r \\<in> committed (J n)\"\n  shows \"justifying_ws (J n) r \\<in> committed (J n)\" (is ?thesis1)\n  and \"ws (action_translation (J n) r) \\<in> action_translation (J n) ` committed (J n)\" (is ?thesis2)", "lemma is_justified_by_imp_is_weakly_justified_by:\n  assumes justified: \"P \\<turnstile> (E, ws) justified_by J\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) weakly_justified_by J\"", "lemma drop_0th_justifying_exec:\n  assumes \"P \\<turnstile> (E, ws) justified_by J\"\n  and wf: \"P \\<turnstile> (E', ws') \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) justified_by (J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\"\n  (is \"_ \\<turnstile> _ justified_by ?J\")", "lemma drop_0th_weakly_justifying_exec:\n  assumes \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and wf: \"P \\<turnstile> (E', ws') \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) weakly_justified_by (J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\"\n  (is \"_ \\<turnstile> _ weakly_justified_by ?J\")", "lemma actions_change_prefix:\n  assumes read: \"a \\<in> actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"a \\<in> actions E'\"", "lemma action_obs_change_prefix:\n  assumes prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"action_obs E a \\<approx> action_obs E' a\"", "lemma action_obs_change_prefix_eq:\n  assumes prefix: \"ltake n E = ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"action_obs E a = action_obs E' a\"", "lemma read_actions_change_prefix:\n  assumes read: \"r \\<in> read_actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \"enat r < n\"\n  shows \"r \\<in> read_actions E'\"", "lemma sim_action_is_write_action_eq:\n  assumes \"obs \\<approx> obs'\"\n  shows \"is_write_action obs \\<longleftrightarrow> is_write_action obs'\"", "lemma write_actions_change_prefix:\n  assumes \"write\": \"w \\<in> write_actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \"enat w < n\"\n  shows \"w \\<in> write_actions E'\"", "lemma action_loc_change_prefix:\n  assumes \"ltake n E [\\<approx>] ltake n E'\" \"enat a < n\"\n  shows \"action_loc P E a = action_loc P E' a\"", "lemma sim_action_is_new_action_eq:\n  assumes \"obs \\<approx> obs'\"\n  shows \"is_new_action obs = is_new_action obs'\"", "lemma action_order_change_prefix:\n  assumes ao: \"E \\<turnstile> a \\<le>a a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"E' \\<turnstile> a \\<le>a a'\"", "lemma value_written_change_prefix:\n  assumes eq: \"ltake n E = ltake n E'\"\n  and an: \"enat a < n\"\n  shows \"value_written P E a = value_written P E' a\"", "lemma action_tid_change_prefix:\n  assumes prefix: \"ltake n E [\\<approx>] ltake n E'\" \n  and an: \"enat a < n\"\n  shows \"action_tid E a = action_tid E' a\"", "lemma program_order_change_prefix:\n  assumes po: \"E \\<turnstile> a \\<le>po a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"E' \\<turnstile> a \\<le>po a'\"", "lemma sim_action_sactionD:\n  assumes \"obs \\<approx> obs'\"\n  shows \"saction P obs \\<longleftrightarrow> saction P obs'\"", "lemma sactions_change_prefix:\n  assumes sync: \"a \\<in> sactions P E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"a \\<in> sactions P E'\"", "lemma sync_order_change_prefix:\n  assumes so: \"P,E \\<turnstile> a \\<le>so a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>so a'\"", "lemma sim_action_synchronizes_withD:\n  assumes \"obs \\<approx> obs'\" \"obs'' \\<approx> obs'''\"\n  shows \"P \\<turnstile> (t, obs) \\<leadsto>sw (t', obs'') \\<longleftrightarrow> P \\<turnstile> (t, obs') \\<leadsto>sw (t', obs''')\"", "lemma sync_with_change_prefix:\n  assumes sw: \"P,E \\<turnstile> a \\<le>sw a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>sw a'\"", "lemma po_sw_change_prefix:\n  assumes posw: \"po_sw P E a a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"po_sw P E' a a'\"", "lemma happens_before_new_not_new:\n  assumes tsa_ok: \"thread_start_actions_ok E\"\n  and a: \"a \\<in> actions E\" \n  and a': \"a' \\<in> actions E\"\n  and new_a: \"is_new_action (action_obs E a)\"\n  and new_a': \"\\<not> is_new_action (action_obs E a')\"\n  shows \"P,E \\<turnstile> a \\<le>hb a'\"", "lemma happens_before_change_prefix:\n  assumes hb: \"P,E \\<turnstile> a \\<le>hb a'\"\n  and tsa_ok: \"thread_start_actions_ok E'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>hb a'\"", "lemma thread_start_actions_ok_change:\n  assumes tsa: \"thread_start_actions_ok E\"\n  and sim: \"E [\\<approx>] E'\"\n  shows \"thread_start_actions_ok E'\"", "lemma \\<E>_new_same_addr_singleton:\n  assumes E: \"E \\<in> \\<E>\"\n  shows \"\\<exists>a. new_actions_for P E adal \\<subseteq> {a}\"", "lemma new_action_before_read:\n  assumes E: \"E \\<in> \\<E>\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and adal: \"adal \\<in> action_loc P E ra\"\n  and new: \"wa \\<in> new_actions_for P E adal\"\n  and sc: \"\\<And>a. \\<lbrakk> a < ra; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"wa < ra\"", "lemma mrw_before:\n  assumes E: \"E \\<in> \\<E>\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and sc: \"\\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"w < r\"", "lemma mrw_change_prefix:\n  assumes E': \"E' \\<in> \\<E>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and tsa_ok: \"thread_start_actions_ok E'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat r < n\"\n  and a'n: \"enat w < n\"\n  shows \"P,E' \\<turnstile> r \\<leadsto>mrw w\"", "lemma action_order_read_before_write:\n  assumes E: \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\"\n  and ao: \"E \\<turnstile> w \\<le>a r\"\n  and r: \"r \\<in> read_actions E\"\n  and w: \"w \\<in> write_actions E\"\n  and adal: \"adal \\<in> action_loc P E r\" \"adal \\<in> action_loc P E w\"\n  and sc: \"\\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"w < r\""], "translations": [["", "lemma action_loc_aux_intros [intro?]:\n  \"P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow> (ad, CField D F) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))\"\n  \"n < n' \\<Longrightarrow> (ad, ACell n) \\<in> action_loc_aux P (NormalAction (NewHeapElem ad (Array_type T n')))\"\n  \"(ad, al) \\<in> action_loc_aux P (NormalAction (WriteMem ad al v))\"\n  \"(ad, al) \\<in> action_loc_aux P (NormalAction (ReadMem ad al v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow>\n      (ad, CField D F)\n      \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))) &&&\n     (n < n' \\<Longrightarrow>\n      (ad, ACell n)\n      \\<in> action_loc_aux P\n             (NormalAction (NewHeapElem ad (Array_type T n'))))) &&&\n    (ad, al) \\<in> action_loc_aux P (NormalAction (WriteMem ad al v)) &&&\n    (ad, al) \\<in> action_loc_aux P (NormalAction (ReadMem ad al v))", "by(cases hT) auto"], ["", "lemma action_loc_aux_cases [elim?, cases set: action_loc_aux]:\n  assumes \"adal \\<in> action_loc_aux P obs\"\n  obtains (NewHeapElem) hT F T fm D ad where \"obs = NormalAction (NewHeapElem ad hT)\" \"adal = (ad, CField D F)\" \"P \\<turnstile> class_type_of hT has F:T (fm) in D\"\n  | (NewArr) n n' ad T where \"obs = NormalAction (NewHeapElem ad (Array_type T n'))\" \"adal = (ad, ACell n)\" \"n < n'\"\n  | (WriteMem) ad al v where \"obs = NormalAction (WriteMem ad al v)\" \"adal = (ad, al)\"\n  | (ReadMem) ad al v where \"obs = NormalAction (ReadMem ad al v)\" \"adal = (ad, al)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ad hT D F T fm.\n                \\<lbrakk>obs = NormalAction (NewHeapElem ad hT);\n                 adal = (ad, CField D F);\n                 P \\<turnstile> class_type_of hT has F:T (fm) in D\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>ad T n' n.\n        \\<lbrakk>obs = NormalAction (NewHeapElem ad (Array_type T n'));\n         adal = (ad, ACell n); n < n'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>ad al v.\n        \\<lbrakk>obs = NormalAction (WriteMem ad al v);\n         adal = (ad, al)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>ad al v.\n        \\<lbrakk>obs = NormalAction (ReadMem ad al v);\n         adal = (ad, al)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  adal \\<in> action_loc_aux P obs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ad hT D F T fm.\n                \\<lbrakk>obs = NormalAction (NewHeapElem ad hT);\n                 adal = (ad, CField D F);\n                 P \\<turnstile> class_type_of hT has F:T (fm) in D\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>ad T n' n.\n        \\<lbrakk>obs = NormalAction (NewHeapElem ad (Array_type T n'));\n         adal = (ad, ACell n); n < n'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>ad al v.\n        \\<lbrakk>obs = NormalAction (WriteMem ad al v);\n         adal = (ad, al)\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>ad al v.\n        \\<lbrakk>obs = NormalAction (ReadMem ad al v);\n         adal = (ad, al)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(cases \"(P, obs)\" rule: action_loc_aux.cases) fastforce+"], ["", "lemma action_loc_aux_simps [simp]:\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT)) \\<longleftrightarrow> \n   (\\<exists>D F T fm. ad = ad' \\<and> al' = CField D F \\<and> P \\<turnstile> class_type_of hT has F:T (fm) in D) \\<or> \n   (\\<exists>n T n'. ad = ad' \\<and> al' = ACell n \\<and> hT = Array_type T n' \\<and> n < n')\"\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (WriteMem ad al v)) \\<longleftrightarrow> ad = ad' \\<and> al = al'\"\n  \"(ad', al') \\<in> action_loc_aux P (NormalAction (ReadMem ad al v)) \\<longleftrightarrow> ad = ad' \\<and> al = al'\"\n  \"(ad', al') \\<notin> action_loc_aux P InitialThreadAction\"\n  \"(ad', al') \\<notin> action_loc_aux P ThreadFinishAction\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ExternalCall a m vs v))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadStart t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadJoin t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (SyncLock a))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (SyncUnlock a))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupt t))\"\n  \"(ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupted t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((((ad', al')\n       \\<in> action_loc_aux P (NormalAction (NewHeapElem ad hT))) =\n      ((\\<exists>D F T fm.\n           ad = ad' \\<and>\n           al' = CField D F \\<and>\n           P \\<turnstile> class_type_of hT has F:T (fm) in D) \\<or>\n       (\\<exists>n T n'.\n           ad = ad' \\<and>\n           al' = ACell n \\<and> hT = Array_type T n' \\<and> n < n')) &&&\n      ((ad', al')\n       \\<in> action_loc_aux P (NormalAction (WriteMem ad al v))) =\n      (ad = ad' \\<and> al = al') &&&\n      ((ad', al') \\<in> action_loc_aux P (NormalAction (ReadMem ad al v))) =\n      (ad = ad' \\<and> al = al')) &&&\n     (ad', al') \\<notin> action_loc_aux P InitialThreadAction &&&\n     (ad', al') \\<notin> action_loc_aux P ThreadFinishAction &&&\n     (ad', al')\n     \\<notin> action_loc_aux P (NormalAction (ExternalCall a m vs v))) &&&\n    ((ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadStart t)) &&&\n     (ad', al') \\<notin> action_loc_aux P (NormalAction (ThreadJoin t)) &&&\n     (ad', al') \\<notin> action_loc_aux P (NormalAction (SyncLock a))) &&&\n    (ad', al') \\<notin> action_loc_aux P (NormalAction (SyncUnlock a)) &&&\n    (ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupt t)) &&&\n    (ad', al') \\<notin> action_loc_aux P (NormalAction (ObsInterrupted t))", "by(cases hT) auto"], ["", "declare action_loc_aux.simps [simp del]"], ["", "abbreviation action_loc :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> ('addr \\<times> addr_loc) set\"\nwhere \"action_loc P E a \\<equiv> action_loc_aux P (action_obs E a)\""], ["", "inductive_set read_actions :: \"('addr, 'thread_id) execution \\<Rightarrow> JMM_action set\"\nfor E :: \"('addr, 'thread_id) execution\"\nwhere \n  ReadMem: \"\\<lbrakk> a \\<in> actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk> \\<Longrightarrow> a \\<in> read_actions E\""], ["", "fun addr_loc_default :: \"'m prog \\<Rightarrow> htype \\<Rightarrow> addr_loc \\<Rightarrow> 'addr val\"\nwhere\n  \"addr_loc_default P (Class_type C) (CField D F) = default_val (fst (the (map_of (fields P C) (F, D))))\"\n| \"addr_loc_default P (Array_type T n) (ACell n') = default_val T\"\n| addr_loc_default_Array_CField: \n  \"addr_loc_default P (Array_type T n) (CField D F) = default_val (fst (the (map_of (fields P Object) (F, Object))))\"\n| \"addr_loc_default P _ _ = undefined\""], ["", "definition new_actions_for :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> ('addr \\<times> addr_loc) \\<Rightarrow> JMM_action set\"\nwhere \n  \"new_actions_for P E adal =\n   {a. a \\<in> actions E \\<and> adal \\<in> action_loc P E a \\<and> is_new_action (action_obs E a)}\""], ["", "inductive_set external_actions :: \"('addr, 'thread_id) execution \\<Rightarrow> JMM_action set\"\nfor E :: \"('addr, 'thread_id) execution\"\nwhere\n  \"\\<lbrakk> a \\<in> actions E; action_obs E a = NormalAction (ExternalCall ad M vs v) \\<rbrakk> \n  \\<Longrightarrow> a \\<in> external_actions E\""], ["", "fun value_written_aux :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) obs_event action \\<Rightarrow> addr_loc \\<Rightarrow> 'addr val\"\nwhere\n  \"value_written_aux P (NormalAction (NewHeapElem ad' hT)) al = addr_loc_default P hT al\"\n| value_written_aux_WriteMem':\n  \"value_written_aux P (NormalAction (WriteMem ad al' v)) al = (if al = al' then v else undefined)\"\n| value_written_aux_undefined:\n  \"value_written_aux P _ al = undefined\""], ["", "primrec value_written :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> ('addr \\<times> addr_loc) \\<Rightarrow> 'addr val\"\nwhere \"value_written P E a (ad, al) = value_written_aux P (action_obs E a) al\""], ["", "definition value_read :: \"('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> 'addr val\"\nwhere\n  \"value_read E a = \n  (case action_obs E a of\n     NormalAction obs \\<Rightarrow>\n        (case obs of\n           ReadMem ad al v \\<Rightarrow> v\n         | _ \\<Rightarrow> undefined)\n   | _ \\<Rightarrow> undefined)\""], ["", "definition action_order :: \"('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\" (\"_ \\<turnstile> _ \\<le>a _\" [51,0,50] 50)\nwhere\n  \"E \\<turnstile> a \\<le>a a' \\<longleftrightarrow>\n   a \\<in> actions E \\<and> a' \\<in> actions E \\<and> \n   (if is_new_action (action_obs E a)\n    then is_new_action (action_obs E a') \\<longrightarrow> a \\<le> a'\n    else \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a')\""], ["", "definition program_order :: \"('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\" (\"_ \\<turnstile> _ \\<le>po _\" [51,0,50] 50)\nwhere\n  \"E \\<turnstile> a \\<le>po a' \\<longleftrightarrow> E \\<turnstile> a \\<le>a a' \\<and> action_tid E a = action_tid E a'\""], ["", "inductive synchronizes_with :: \n  \"'m prog \n  \\<Rightarrow> ('thread_id \\<times> ('addr, 'thread_id) obs_event action) \\<Rightarrow> ('thread_id \\<times> ('addr, 'thread_id) obs_event action) \\<Rightarrow> bool\" \n  (\"_ \\<turnstile> _ \\<leadsto>sw _\" [51, 51, 51] 50)\n  for P :: \"'m prog\"\nwhere\n  ThreadStart: \"P \\<turnstile> (t, NormalAction (ThreadStart t')) \\<leadsto>sw (t', InitialThreadAction)\"\n| ThreadFinish: \"P \\<turnstile> (t, ThreadFinishAction) \\<leadsto>sw (t', NormalAction (ThreadJoin t))\"\n| UnlockLock: \"P \\<turnstile> (t, NormalAction (SyncUnlock a)) \\<leadsto>sw (t', NormalAction (SyncLock a))\"\n| \\<comment> \\<open>Only volatile writes synchronize with volatile reads. \n       We could check volatility of @{term \"al\"} here, but this is checked by @{term \"sactions\"}\n       in @{text sync_with} anyway.\\<close>\n  Volatile: \"P \\<turnstile> (t, NormalAction (WriteMem a al v)) \\<leadsto>sw (t', NormalAction (ReadMem a al v'))\"\n| VolatileNew: \"\n    al \\<in> addr_locs P hT\n    \\<Longrightarrow> P \\<turnstile> (t, NormalAction (NewHeapElem a hT)) \\<leadsto>sw (t', NormalAction (ReadMem a al v))\"\n| NewHeapElem: \"P \\<turnstile> (t, NormalAction (NewHeapElem a hT)) \\<leadsto>sw (t', InitialThreadAction)\"\n| Interrupt: \"P \\<turnstile> (t, NormalAction (ObsInterrupt t')) \\<leadsto>sw (t'', NormalAction (ObsInterrupted t'))\""], ["", "definition sync_order :: \n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> _ \\<le>so _\" [51,0,0,50] 50)\nwhere\n  \"P,E \\<turnstile> a \\<le>so a' \\<longleftrightarrow> a \\<in> sactions P E \\<and> a' \\<in> sactions P E \\<and> E \\<turnstile> a \\<le>a a'\""], ["", "definition sync_with :: \n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> _ \\<le>sw _\" [51, 0, 0, 50] 50)\nwhere\n  \"P,E \\<turnstile> a \\<le>sw a' \\<longleftrightarrow>\n   P,E \\<turnstile> a \\<le>so a' \\<and> P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a')\""], ["", "definition po_sw :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\"\nwhere \"po_sw P E a a' \\<longleftrightarrow> E \\<turnstile> a \\<le>po a' \\<or> P,E \\<turnstile> a \\<le>sw a'\""], ["", "abbreviation happens_before :: \n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> _ \\<le>hb _\" [51, 0, 0, 50] 50)\nwhere \"happens_before P E \\<equiv> (po_sw P E)^++\""], ["", "type_synonym write_seen = \"JMM_action \\<Rightarrow> JMM_action\""], ["", "definition is_write_seen :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> write_seen \\<Rightarrow> bool\" where \n  \"is_write_seen P E ws \\<longleftrightarrow>\n   (\\<forall>a \\<in> read_actions E. \\<forall>ad al v. action_obs E a = NormalAction (ReadMem ad al v) \\<longrightarrow> \n       ws a \\<in> write_actions E \\<and> (ad, al) \\<in> action_loc P E (ws a) \\<and>\n       value_written P E (ws a) (ad, al) = v \\<and> \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and>\n       (is_volatile P al \\<longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n       (\\<forall>w' \\<in> write_actions E. (ad, al) \\<in> action_loc P E w' \\<longrightarrow> \n          (P,E \\<turnstile> ws a \\<le>hb w' \\<and> P,E \\<turnstile> w' \\<le>hb a \\<or> is_volatile P al \\<and> P,E \\<turnstile> ws a \\<le>so w' \\<and> P,E \\<turnstile> w' \\<le>so a) \\<longrightarrow>\n          w' = ws a))\""], ["", "definition thread_start_actions_ok :: \"('addr, 'thread_id) execution \\<Rightarrow> bool\"\nwhere\n  \"thread_start_actions_ok E \\<longleftrightarrow> \n  (\\<forall>a \\<in> actions E. \\<not> is_new_action (action_obs E a) \\<longrightarrow> \n     (\\<exists>i. i \\<le> a \\<and> action_obs E i = InitialThreadAction \\<and> action_tid E i = action_tid E a))\""], ["", "primrec wf_exec :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> bool\" (\"_ \\<turnstile> _ \\<surd>\" [51, 50] 51)\nwhere \"P \\<turnstile> (E, ws) \\<surd> \\<longleftrightarrow> is_write_seen P E ws \\<and> thread_start_actions_ok E\""], ["", "inductive most_recent_write_for :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\"\n  (\"_,_ \\<turnstile> _ \\<leadsto>mrw _\" [50, 0, 51] 51)\nfor P :: \"'m prog\" and E :: \"('addr, 'thread_id) execution\" and ra :: JMM_action and wa :: JMM_action\nwhere\n  \"\\<lbrakk> ra \\<in> read_actions E; adal \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n     wa \\<in> write_actions E; adal \\<in> action_loc P E wa;\n     \\<And>wa'. \\<lbrakk> wa' \\<in> write_actions E; adal \\<in> action_loc P E wa' \\<rbrakk>\n     \\<Longrightarrow> E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa' \\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> ra \\<leadsto>mrw wa\""], ["", "primrec sequentially_consistent :: \"'m prog \\<Rightarrow> (('addr, 'thread_id) execution \\<times> write_seen) \\<Rightarrow> bool\"\nwhere \n  \"sequentially_consistent P (E, ws) \\<longleftrightarrow> (\\<forall>r \\<in> read_actions E. P,E \\<turnstile> r \\<leadsto>mrw ws r)\""], ["", "subsection \\<open>Actions\\<close>"], ["", "inductive_cases is_new_action_cases [elim!]:\n  \"is_new_action (NormalAction (ExternalCall a M vs v))\"\n  \"is_new_action (NormalAction (ReadMem a al v))\"\n  \"is_new_action (NormalAction (WriteMem a al v))\"\n  \"is_new_action (NormalAction (NewHeapElem a hT))\"\n  \"is_new_action (NormalAction (ThreadStart t))\"\n  \"is_new_action (NormalAction (ThreadJoin t))\"\n  \"is_new_action (NormalAction (SyncLock a))\"\n  \"is_new_action (NormalAction (SyncUnlock a))\"\n  \"is_new_action (NormalAction (ObsInterrupt t))\"\n  \"is_new_action (NormalAction (ObsInterrupted t))\"\n  \"is_new_action InitialThreadAction\"\n  \"is_new_action ThreadFinishAction\""], ["", "inductive_simps is_new_action_simps [simp]:\n  \"is_new_action (NormalAction (NewHeapElem a hT))\"\n  \"is_new_action (NormalAction (ExternalCall a M vs v))\"\n  \"is_new_action (NormalAction (ReadMem a al v))\"\n  \"is_new_action (NormalAction (WriteMem a al v))\"\n  \"is_new_action (NormalAction (ThreadStart t))\"\n  \"is_new_action (NormalAction (ThreadJoin t))\"\n  \"is_new_action (NormalAction (SyncLock a))\"\n  \"is_new_action (NormalAction (SyncUnlock a))\"\n  \"is_new_action (NormalAction (ObsInterrupt t))\"\n  \"is_new_action (NormalAction (ObsInterrupted t))\"\n  \"is_new_action InitialThreadAction\"\n  \"is_new_action ThreadFinishAction\""], ["", "lemmas is_new_action_iff = is_new_action.simps"], ["", "inductive_simps is_write_action_simps [simp]:\n  \"is_write_action InitialThreadAction\"\n  \"is_write_action ThreadFinishAction\"\n  \"is_write_action (NormalAction (ExternalCall a m vs v))\"\n  \"is_write_action (NormalAction (ReadMem a al v))\"\n  \"is_write_action (NormalAction (WriteMem a al v))\"\n  \"is_write_action (NormalAction (NewHeapElem a hT))\"\n  \"is_write_action (NormalAction (ThreadStart t))\"\n  \"is_write_action (NormalAction (ThreadJoin t))\"\n  \"is_write_action (NormalAction (SyncLock a))\"\n  \"is_write_action (NormalAction (SyncUnlock a))\"\n  \"is_write_action (NormalAction (ObsInterrupt t))\"\n  \"is_write_action (NormalAction (ObsInterrupted t))\""], ["", "declare saction.intros [intro!]"], ["", "inductive_cases saction_cases [elim!]:\n  \"saction P (NormalAction (ExternalCall a M vs v))\"\n  \"saction P (NormalAction (ReadMem a al v))\"\n  \"saction P (NormalAction (WriteMem a al v))\"\n  \"saction P (NormalAction (NewHeapElem a hT))\"\n  \"saction P (NormalAction (ThreadStart t))\"\n  \"saction P (NormalAction (ThreadJoin t))\"\n  \"saction P (NormalAction (SyncLock a))\"\n  \"saction P (NormalAction (SyncUnlock a))\"\n  \"saction P (NormalAction (ObsInterrupt t))\"\n  \"saction P (NormalAction (ObsInterrupted t))\"\n  \"saction P InitialThreadAction\"\n  \"saction P ThreadFinishAction\""], ["", "inductive_simps saction_simps [simp]:\n  \"saction P (NormalAction (ExternalCall a M vs v))\"\n  \"saction P (NormalAction (ReadMem a al v))\"\n  \"saction P (NormalAction (WriteMem a al v))\"\n  \"saction P (NormalAction (NewHeapElem a hT))\"\n  \"saction P (NormalAction (ThreadStart t))\"\n  \"saction P (NormalAction (ThreadJoin t))\"\n  \"saction P (NormalAction (SyncLock a))\"\n  \"saction P (NormalAction (SyncUnlock a))\"\n  \"saction P (NormalAction (ObsInterrupt t))\"\n  \"saction P (NormalAction (ObsInterrupted t))\"\n  \"saction P InitialThreadAction\"\n  \"saction P ThreadFinishAction\""], ["", "lemma new_action_saction [simp, intro]: \"is_new_action a \\<Longrightarrow> saction P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_new_action a \\<Longrightarrow> saction P a", "by(blast elim: is_new_action.cases)"], ["", "lemmas saction_iff = saction.simps"], ["", "lemma actionsD: \"a \\<in> actions E \\<Longrightarrow> enat a < llength E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> actions E \\<Longrightarrow> enat a < llength E", "unfolding actions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {n. enat n < llength E} \\<Longrightarrow> enat a < llength E", "by blast"], ["", "lemma actionsE: \n  assumes \"a \\<in> actions E\"\n  obtains \"enat a < llength E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (enat a < llength E \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. (enat a < llength E \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding actions_def"], ["proof (prove)\nusing this:\n  a \\<in> {n. enat n < llength E}\n\ngoal (1 subgoal):\n 1. (enat a < llength E \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["", "lemma actions_lappend:\n  \"llength xs = enat n \\<Longrightarrow> actions (lappend xs ys) = actions xs \\<union> ((+) n) ` actions ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llength xs = enat n \\<Longrightarrow>\n    actions (lappend xs ys) = actions xs \\<union> (+) n ` actions ys", "unfolding actions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. llength xs = enat n \\<Longrightarrow>\n    {n. enat n < llength (lappend xs ys)} =\n    {n. enat n < llength xs} \\<union> (+) n ` {n. enat n < llength ys}", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>llength xs = enat n;\n        x \\<notin> (+) n ` {n. enat n < llength ys};\n        enat x < llength (lappend xs ys)\\<rbrakk>\n       \\<Longrightarrow> enat x < llength xs\n 2. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> enat x < llength (lappend xs ys)\n 3. \\<And>x xa.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < llength (lappend xs ys)", "apply(erule contrapos_np)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength (lappend xs ys);\n        \\<not> enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (+) n ` {n. enat n < llength ys}\n 2. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> enat x < llength (lappend xs ys)\n 3. \\<And>x xa.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < llength (lappend xs ys)", "apply(rule_tac x=\"x - n\" in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength (lappend xs ys);\n        \\<not> enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> x = n + (x - n)\n 2. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength (lappend xs ys);\n        \\<not> enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> x - n \\<in> {n. enat n < llength ys}\n 3. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < llength xs\\<rbrakk>\n       \\<Longrightarrow> enat x < llength (lappend xs ys)\n 4. \\<And>x xa.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < llength (lappend xs ys)", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < enat n + llength ys;\n        \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> enat (x - n) < llength ys\n 2. \\<And>x.\n       \\<lbrakk>llength xs = enat n; x < n\\<rbrakk>\n       \\<Longrightarrow> enat x < enat n + llength ys\n 3. \\<And>xa.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < enat n + llength ys", "apply(case_tac [!] \"llength ys\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x nat.\n       \\<lbrakk>llength xs = enat n; enat x < enat n + llength ys;\n        \\<not> x < n; llength ys = enat nat\\<rbrakk>\n       \\<Longrightarrow> enat (x - n) < llength ys\n 2. \\<And>x.\n       \\<lbrakk>llength xs = enat n; enat x < enat n + llength ys;\n        \\<not> x < n; llength ys = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> enat (x - n) < llength ys\n 3. \\<And>x nat.\n       \\<lbrakk>llength xs = enat n; x < n; llength ys = enat nat\\<rbrakk>\n       \\<Longrightarrow> enat x < enat n + llength ys\n 4. \\<And>x.\n       \\<lbrakk>llength xs = enat n; x < n;\n        llength ys = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> enat x < enat n + llength ys\n 5. \\<And>xa nat.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys;\n        llength ys = enat nat\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < enat n + llength ys\n 6. \\<And>xa.\n       \\<lbrakk>llength xs = enat n; enat xa < llength ys;\n        llength ys = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> enat (n + xa) < enat n + llength ys", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tactionsE:\n  assumes \"a \\<in> tactions E t\"\n  obtains obs where \"a \\<in> actions E\" \"action_tid E a = t\" \"action_obs E a = obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>obs.\n        \\<lbrakk>a \\<in> actions E; action_tid E a = t;\n         action_obs E a = obs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> tactions E t\n\ngoal (1 subgoal):\n 1. (\\<And>obs.\n        \\<lbrakk>a \\<in> actions E; action_tid E a = t;\n         action_obs E a = obs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"lnth E a\")(auto simp add: tactions_def action_tid_def action_obs_def)"], ["", "lemma sactionsI:\n  \"\\<lbrakk> a \\<in> actions E; saction P (action_obs E a) \\<rbrakk> \\<Longrightarrow> a \\<in> sactions P E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> actions E; saction P (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> sactions P E", "unfolding sactions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> actions E; saction P (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> {a \\<in> actions E.\n                               saction P (action_obs E a)}", "by blast"], ["", "lemma sactionsE:\n  assumes \"a \\<in> sactions P E\"\n  obtains \"a \\<in> actions E\" \"saction P (action_obs E a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; saction P (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; saction P (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sactions_def"], ["proof (prove)\nusing this:\n  a \\<in> {a \\<in> actions E. saction P (action_obs E a)}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; saction P (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma sactions_actions [simp]:\n  \"a \\<in> sactions P E \\<Longrightarrow> a \\<in> actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> sactions P E \\<Longrightarrow> a \\<in> actions E", "by(rule sactionsE)"], ["", "lemma value_written_aux_WriteMem [simp]:\n  \"value_written_aux P (NormalAction (WriteMem ad al v)) al = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_written_aux P (NormalAction (WriteMem ad al v)) al = v", "by simp"], ["", "declare value_written_aux_undefined [simp del]"], ["", "declare value_written_aux_WriteMem' [simp del]"], ["", "inductive_simps is_write_action_iff:\n  \"is_write_action a\""], ["", "inductive_simps write_actions_iff:\n  \"a \\<in> write_actions E\""], ["", "lemma write_actions_actions [simp]:\n  \"a \\<in> write_actions E \\<Longrightarrow> a \\<in> actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> write_actions E \\<Longrightarrow> a \\<in> actions E", "by(rule write_actions.induct)"], ["", "inductive_simps read_actions_iff:\n  \"a \\<in> read_actions E\""], ["", "lemma read_actions_actions [simp]:\n  \"a \\<in> read_actions E \\<Longrightarrow> a \\<in> actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> read_actions E \\<Longrightarrow> a \\<in> actions E", "by(rule read_actions.induct)"], ["", "lemma read_action_action_locE:\n  assumes \"r \\<in> read_actions E\"\n  obtains ad al where \"(ad, al) \\<in> action_loc P E r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ad al.\n        (ad, al) \\<in> action_loc P E r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>ad al.\n        (ad, al) \\<in> action_loc P E r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["", "lemma read_actions_not_write_actions:\n  \"\\<lbrakk> a \\<in> read_actions E; a \\<in> write_actions E \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> read_actions E; a \\<in> write_actions E\\<rbrakk>\n    \\<Longrightarrow> False", "by(auto elim!: read_actions.cases write_actions.cases)"], ["", "lemma read_actions_Int_write_actions [simp]:\n  \"read_actions E \\<inter> write_actions E = {}\"\n  \"write_actions E \\<inter> read_actions E = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. read_actions E \\<inter> write_actions E = {} &&&\n    write_actions E \\<inter> read_actions E = {}", "by(blast dest: read_actions_not_write_actions)+"], ["", "lemma action_loc_addr_fun:\n  \"\\<lbrakk> (ad, al) \\<in> action_loc P E a; (ad', al') \\<in> action_loc P E a \\<rbrakk> \\<Longrightarrow> ad = ad'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(ad, al) \\<in> action_loc P E a;\n     (ad', al') \\<in> action_loc P E a\\<rbrakk>\n    \\<Longrightarrow> ad = ad'", "by(auto elim!: action_loc_aux_cases)"], ["", "lemma value_written_cong [cong]:\n  \"\\<lbrakk> P = P'; a = a'; action_obs E a' = action_obs E' a' \\<rbrakk> \n  \\<Longrightarrow> value_written P E a = value_written P' E' a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P = P'; a = a'; action_obs E a' = action_obs E' a'\\<rbrakk>\n    \\<Longrightarrow> value_written P E a = value_written P' E' a'", "by(rule ext)(auto split: action.splits)"], ["", "declare value_written.simps [simp del]"], ["", "lemma new_actionsI:\n  \"\\<lbrakk> a \\<in> actions E; adal \\<in> action_loc P E a; is_new_action (action_obs E a) \\<rbrakk>\n  \\<Longrightarrow> a \\<in> new_actions_for P E adal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> actions E; adal \\<in> action_loc P E a;\n     is_new_action (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> new_actions_for P E adal", "unfolding new_actions_for_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> actions E; adal \\<in> action_loc P E a;\n     is_new_action (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> {a \\<in> actions E.\n                               adal \\<in> action_loc P E a \\<and>\n                               is_new_action (action_obs E a)}", "by blast"], ["", "lemma new_actionsE:\n  assumes \"a \\<in> new_actions_for P E adal\"\n  obtains \"a \\<in> actions E\" \"adal \\<in> action_loc P E a\" \"is_new_action (action_obs E a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; adal \\<in> action_loc P E a;\n      is_new_action (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> new_actions_for P E adal\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; adal \\<in> action_loc P E a;\n      is_new_action (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding new_actions_for_def"], ["proof (prove)\nusing this:\n  a \\<in> {a \\<in> actions E.\n           adal \\<in> action_loc P E a \\<and>\n           is_new_action (action_obs E a)}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> actions E; adal \\<in> action_loc P E a;\n      is_new_action (action_obs E a)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma action_loc_read_action_singleton:\n  \"\\<lbrakk> r \\<in> read_actions E; adal \\<in> action_loc P E r; adal' \\<in> action_loc P E r \\<rbrakk> \\<Longrightarrow> adal = adal'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> read_actions E; adal \\<in> action_loc P E r;\n     adal' \\<in> action_loc P E r\\<rbrakk>\n    \\<Longrightarrow> adal = adal'", "by(cases adal, cases adal')(fastforce elim: read_actions.cases action_loc_aux_cases)"], ["", "lemma addr_locsI:\n  \"P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow> CField D F \\<in> addr_locs P hT\"\n  \"\\<lbrakk> hT = Array_type T n; n' < n \\<rbrakk> \\<Longrightarrow> ACell n' \\<in> addr_locs P hT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile> class_type_of hT has F:T (fm) in D \\<Longrightarrow>\n     CField D F \\<in> addr_locs P hT) &&&\n    (\\<lbrakk>hT = Array_type T n; n' < n\\<rbrakk>\n     \\<Longrightarrow> ACell n' \\<in> addr_locs P hT)", "by(cases hT)(auto dest: has_field_decl_above)"], ["", "subsection \\<open>Orders\\<close>"], ["", "subsection \\<open>Action order\\<close>"], ["", "lemma action_orderI:\n  assumes \"a \\<in> actions E\" \"a' \\<in> actions E\"\n  and \"\\<lbrakk> is_new_action (action_obs E a); is_new_action (action_obs E a') \\<rbrakk> \\<Longrightarrow> a \\<le> a'\"\n  and \"\\<not> is_new_action (action_obs E a) \\<Longrightarrow> \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a'\"\n  shows \"E \\<turnstile> a \\<le>a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a a'", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  a' \\<in> actions E\n  \\<lbrakk>is_new_action (action_obs E a);\n   is_new_action (action_obs E a')\\<rbrakk>\n  \\<Longrightarrow> a \\<le> a'\n  \\<not> is_new_action (action_obs E a) \\<Longrightarrow>\n  \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a a'", "unfolding action_order_def"], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  a' \\<in> actions E\n  \\<lbrakk>is_new_action (action_obs E a);\n   is_new_action (action_obs E a')\\<rbrakk>\n  \\<Longrightarrow> a \\<le> a'\n  \\<not> is_new_action (action_obs E a) \\<Longrightarrow>\n  \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a'\n\ngoal (1 subgoal):\n 1. a \\<in> actions E \\<and>\n    a' \\<in> actions E \\<and>\n    (if is_new_action (action_obs E a)\n     then is_new_action (action_obs E a') \\<longrightarrow> a \\<le> a'\n     else \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a')", "by simp"], ["", "lemma action_orderE:\n  assumes \"E \\<turnstile> a \\<le>a a'\"\n  obtains \"a \\<in> actions E\" \"a' \\<in> actions E\" \n          \"is_new_action (action_obs E a)\" \"is_new_action (action_obs E a') \\<longrightarrow> a \\<le> a'\"\n        | \"a \\<in> actions E\" \"a' \\<in> actions E\" \n          \"\\<not> is_new_action (action_obs E a)\" \"\\<not> is_new_action (action_obs E a')\" \"a \\<le> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n              is_new_action (action_obs E a);\n              is_new_action (action_obs E a') \\<longrightarrow>\n              a \\<le> a'\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n      \\<not> is_new_action (action_obs E a);\n      \\<not> is_new_action (action_obs E a'); a \\<le> a'\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n              is_new_action (action_obs E a);\n              is_new_action (action_obs E a') \\<longrightarrow>\n              a \\<le> a'\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n      \\<not> is_new_action (action_obs E a);\n      \\<not> is_new_action (action_obs E a'); a \\<le> a'\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding action_order_def"], ["proof (prove)\nusing this:\n  a \\<in> actions E \\<and>\n  a' \\<in> actions E \\<and>\n  (if is_new_action (action_obs E a)\n   then is_new_action (action_obs E a') \\<longrightarrow> a \\<le> a'\n   else \\<not> is_new_action (action_obs E a') \\<and> a \\<le> a')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n              is_new_action (action_obs E a);\n              is_new_action (action_obs E a') \\<longrightarrow>\n              a \\<le> a'\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>a \\<in> actions E; a' \\<in> actions E;\n      \\<not> is_new_action (action_obs E a);\n      \\<not> is_new_action (action_obs E a'); a \\<le> a'\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(simp split: if_split_asm)"], ["", "lemma refl_action_order:\n  \"refl_onP (actions E) (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_onP (actions E) (action_order E)", "by(rule refl_onPI)(auto elim: action_orderE intro: action_orderI)"], ["", "lemma antisym_action_order:\n  \"antisymp (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (action_order E)", "by(rule antisympI)(auto elim!: action_orderE)"], ["", "lemma trans_action_order:\n  \"transp (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (action_order E)", "by(rule transpI)(auto elim!: action_orderE intro: action_orderI)"], ["", "lemma porder_action_order:\n  \"porder_on (actions E) (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (actions E) (action_order E)", "by(blast intro: porder_onI refl_action_order antisym_action_order trans_action_order)"], ["", "lemma total_action_order:\n  \"total_onP (actions E) (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_onP (actions E) (action_order E)", "by(rule total_onPI)(auto simp add: action_order_def)"], ["", "lemma torder_action_order:\n  \"torder_on (actions E) (action_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. torder_on (actions E) (action_order E)", "by(blast intro: torder_onI total_action_order porder_action_order)"], ["", "lemma wf_action_order: \"wfP (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>", "unfolding wfP_eq_minimal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Q x.\n       x \\<in> Q \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n               z \\<longrightarrow>\n              y \\<notin> Q)", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Q x.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n              z \\<longrightarrow>\n             y \\<notin> Q", "fix Q and x :: JMM_action"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Q x.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n              z \\<longrightarrow>\n             y \\<notin> Q", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>Q x.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n              z \\<longrightarrow>\n             y \\<notin> Q", "show \"\\<exists>z \\<in> Q. \\<forall>y. (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "proof(cases \"\\<exists>a \\<in> Q. a \\<in> actions E \\<and> is_new_action (action_obs E a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  \\<exists>a\\<in>Q. a \\<in> actions E \\<and> is_new_action (action_obs E a)\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>a\\<in>Q. a \\<in> actions E \\<and> is_new_action (action_obs E a)", "obtain a where a: \"a \\<in> actions E \\<and> is_new_action (action_obs E a) \\<and> a \\<in> Q\""], ["proof (prove)\nusing this:\n  \\<exists>a\\<in>Q. a \\<in> actions E \\<and> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> actions E \\<and>\n        is_new_action (action_obs E a) \\<and> a \\<in> Q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> actions E \\<and> is_new_action (action_obs E a) \\<and> a \\<in> Q\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "define a' where \"a' = (LEAST a'. a' \\<in> actions E \\<and> is_new_action (action_obs E a') \\<and> a' \\<in> Q)\""], ["proof (state)\nthis:\n  a' =\n  (LEAST a'.\n      a' \\<in> actions E \\<and>\n      is_new_action (action_obs E a') \\<and> a' \\<in> Q)\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "from a"], ["proof (chain)\npicking this:\n  a \\<in> actions E \\<and> is_new_action (action_obs E a) \\<and> a \\<in> Q", "have a': \"a' \\<in> actions E \\<and> is_new_action (action_obs E a') \\<and> a' \\<in> Q\""], ["proof (prove)\nusing this:\n  a \\<in> actions E \\<and> is_new_action (action_obs E a) \\<and> a \\<in> Q\n\ngoal (1 subgoal):\n 1. a' \\<in> actions E \\<and>\n    is_new_action (action_obs E a') \\<and> a' \\<in> Q", "unfolding a'_def"], ["proof (prove)\nusing this:\n  a \\<in> actions E \\<and> is_new_action (action_obs E a) \\<and> a \\<in> Q\n\ngoal (1 subgoal):\n 1. (LEAST a'.\n        a' \\<in> actions E \\<and>\n        is_new_action (action_obs E a') \\<and> a' \\<in> Q)\n    \\<in> actions E \\<and>\n    is_new_action\n     (action_obs E\n       (LEAST a'.\n           a' \\<in> actions E \\<and>\n           is_new_action (action_obs E a') \\<and> a' \\<in> Q)) \\<and>\n    (LEAST a'.\n        a' \\<in> actions E \\<and>\n        is_new_action (action_obs E a') \\<and> a' \\<in> Q)\n    \\<in> Q", "by(rule LeastI)"], ["proof (state)\nthis:\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "{"], ["proof (state)\nthis:\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "assume y_le_a': \"(action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\""], ["proof (state)\nthis:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "have \"y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "assume \"y \\<in> Q\""], ["proof (state)\nthis:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "with y_le_a' a'"], ["proof (chain)\npicking this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  y \\<in> Q", "have y: \"y \\<in> actions E \\<and> is_new_action (action_obs E y) \\<and> y \\<in> Q\""], ["proof (prove)\nusing this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> actions E \\<and> is_new_action (action_obs E y) \\<and> y \\<in> Q", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  y \\<in> actions E \\<and> is_new_action (action_obs E y) \\<and> y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "hence \"a' \\<le> y\""], ["proof (prove)\nusing this:\n  y \\<in> actions E \\<and> is_new_action (action_obs E y) \\<and> y \\<in> Q\n\ngoal (1 subgoal):\n 1. a' \\<le> y", "unfolding a'_def"], ["proof (prove)\nusing this:\n  y \\<in> actions E \\<and> is_new_action (action_obs E y) \\<and> y \\<in> Q\n\ngoal (1 subgoal):\n 1. (LEAST a'.\n        a' \\<in> actions E \\<and>\n        is_new_action (action_obs E a') \\<and> a' \\<in> Q)\n    \\<le> y", "by(rule Least_le)"], ["proof (state)\nthis:\n  a' \\<le> y\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "with y_le_a' a'"], ["proof (chain)\npicking this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  a' \\<le> y", "show False"], ["proof (prove)\nusing this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  a' \\<le> y\n\ngoal (1 subgoal):\n 1. False", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "}"], ["proof (state)\nthis:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q\n\ngoal (2 subgoals):\n 1. \\<exists>a\\<in>Q.\n       a \\<in> actions E \\<and>\n       is_new_action (action_obs E a) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "with a'"], ["proof (chain)\npicking this:\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  a' \\<in> actions E \\<and>\n  is_new_action (action_obs E a') \\<and> a' \\<in> Q\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "by blast"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow>\n        y \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>a\\<in>Q.\n             a \\<in> actions E \\<and> is_new_action (action_obs E a))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "hence not_new: \"\\<And>a. \\<lbrakk> a \\<in> Q; a \\<in> actions E \\<rbrakk> \\<Longrightarrow> \\<not> is_new_action (action_obs E a)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>a\\<in>Q.\n             a \\<in> actions E \\<and> is_new_action (action_obs E a))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> Q; a \\<in> actions E\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_new_action (action_obs E a)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> Q; ?a \\<in> actions E\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_new_action (action_obs E ?a)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>a\\<in>Q.\n               a \\<in> actions E \\<and>\n               is_new_action (action_obs E a)) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "proof(cases \"Q \\<inter> actions E = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q \\<inter> actions E = {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  Q \\<inter> actions E = {}\n\ngoal (2 subgoals):\n 1. Q \\<inter> actions E = {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q\n 2. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "with \\<open>x \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q\n  Q \\<inter> actions E = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> Q\n  Q \\<inter> actions E = {}\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow>\n        y \\<notin> Q\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  Q \\<inter> actions E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "define a' where \"a' = (LEAST a'. a' \\<in> Q \\<and> a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a'))\""], ["proof (state)\nthis:\n  a' =\n  (LEAST a'.\n      a' \\<in> Q \\<and>\n      a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a'))\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "from False"], ["proof (chain)\npicking this:\n  Q \\<inter> actions E \\<noteq> {}", "obtain a where \"a \\<in> Q\" \"a \\<in> actions E\""], ["proof (prove)\nusing this:\n  Q \\<inter> actions E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> Q; a \\<in> actions E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> Q\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "with not_new[OF this]"], ["proof (chain)\npicking this:\n  \\<not> is_new_action (action_obs E a)\n  a \\<in> Q\n  a \\<in> actions E", "have \"a \\<in> Q \\<and> a \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a)\""], ["proof (prove)\nusing this:\n  \\<not> is_new_action (action_obs E a)\n  a \\<in> Q\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. a \\<in> Q \\<and>\n    a \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a)", "by blast"], ["proof (state)\nthis:\n  a \\<in> Q \\<and>\n  a \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "hence a': \"a' \\<in> Q \\<and> a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')\""], ["proof (prove)\nusing this:\n  a \\<in> Q \\<and>\n  a \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. a' \\<in> Q \\<and>\n    a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')", "unfolding a'_def"], ["proof (prove)\nusing this:\n  a \\<in> Q \\<and>\n  a \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. (LEAST a'.\n        a' \\<in> Q \\<and>\n        a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a'))\n    \\<in> Q \\<and>\n    (LEAST a'.\n        a' \\<in> Q \\<and>\n        a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a'))\n    \\<in> actions E \\<and>\n    \\<not> is_new_action\n            (action_obs E\n              (LEAST a'.\n                  a' \\<in> Q \\<and>\n                  a' \\<in> actions E \\<and>\n                  \\<not> is_new_action (action_obs E a')))", "by(rule LeastI)"], ["proof (state)\nthis:\n  a' \\<in> Q \\<and>\n  a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "{"], ["proof (state)\nthis:\n  a' \\<in> Q \\<and>\n  a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "assume y_le_a': \"(action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\""], ["proof (state)\nthis:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "hence \"y \\<in> actions E\""], ["proof (prove)\nusing this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n\ngoal (1 subgoal):\n 1. y \\<in> actions E", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  y \\<in> actions E\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "have \"y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "assume \"y \\<in> Q\""], ["proof (state)\nthis:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "hence y_not_new: \"\\<not> is_new_action (action_obs E y)\""], ["proof (prove)\nusing this:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E y)", "using \\<open>y \\<in> actions E\\<close>"], ["proof (prove)\nusing this:\n  y \\<in> Q\n  y \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E y)", "by(rule not_new)"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E y)\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "with \\<open>y \\<in> Q\\<close> \\<open>y \\<in> actions E\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> Q\n  y \\<in> actions E\n  \\<not> is_new_action (action_obs E y)", "have \"a' \\<le> y\""], ["proof (prove)\nusing this:\n  y \\<in> Q\n  y \\<in> actions E\n  \\<not> is_new_action (action_obs E y)\n\ngoal (1 subgoal):\n 1. a' \\<le> y", "unfolding a'_def"], ["proof (prove)\nusing this:\n  y \\<in> Q\n  y \\<in> actions E\n  \\<not> is_new_action (action_obs E y)\n\ngoal (1 subgoal):\n 1. (LEAST a'.\n        a' \\<in> Q \\<and>\n        a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a'))\n    \\<le> y", "by -(rule Least_le, blast)"], ["proof (state)\nthis:\n  a' \\<le> y\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "with y_le_a' y_not_new"], ["proof (chain)\npicking this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  \\<not> is_new_action (action_obs E y)\n  a' \\<le> y", "show False"], ["proof (prove)\nusing this:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y a'\n  \\<not> is_new_action (action_obs E y)\n  a' \\<le> y\n\ngoal (1 subgoal):\n 1. False", "by(auto elim: action_orderE)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "}"], ["proof (state)\nthis:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q\n\ngoal (1 subgoal):\n 1. Q \\<inter> actions E \\<noteq> {} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "with a'"], ["proof (chain)\npicking this:\n  a' \\<in> Q \\<and>\n  a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  a' \\<in> Q \\<and>\n  a' \\<in> actions E \\<and> \\<not> is_new_action (action_obs E a')\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?y2 a' \\<Longrightarrow>\n  ?y2 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y\n           z \\<longrightarrow>\n          y \\<notin> Q", "by blast"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow>\n        y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow>\n        y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> y z \\<longrightarrow>\n        y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_order_is_new_actionD:\n  \"\\<lbrakk> E \\<turnstile> a \\<le>a a'; is_new_action (action_obs E a') \\<rbrakk> \\<Longrightarrow> is_new_action (action_obs E a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<turnstile> a \\<le>a a';\n     is_new_action (action_obs E a')\\<rbrakk>\n    \\<Longrightarrow> is_new_action (action_obs E a)", "by(auto elim: action_orderE)"], ["", "subsection \\<open>Program order\\<close>"], ["", "lemma program_orderI:\n  assumes \"E \\<turnstile> a \\<le>a a'\" and \"action_tid E a = action_tid E a'\"\n  shows \"E \\<turnstile> a \\<le>po a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>po a'", "using assms"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a a'\n  action_tid E a = action_tid E a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>po a'", "unfolding program_order_def"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a a'\n  action_tid E a = action_tid E a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a a' \\<and> action_tid E a = action_tid E a'", "by auto"], ["", "lemma program_orderE:\n  assumes \"E \\<turnstile> a \\<le>po a'\"\n  obtains t obs obs'\n  where \"E \\<turnstile> a \\<le>a a'\"\n  and \"action_tid E a = t\" \"action_obs E a = obs\"\n  and \"action_tid E a' = t\" \"action_obs E a' = obs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t obs obs'.\n        \\<lbrakk>E \\<turnstile> a \\<le>a a'; action_tid E a = t;\n         action_obs E a = obs; action_tid E a' = t;\n         action_obs E a' = obs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>po a'\n\ngoal (1 subgoal):\n 1. (\\<And>t obs obs'.\n        \\<lbrakk>E \\<turnstile> a \\<le>a a'; action_tid E a = t;\n         action_obs E a = obs; action_tid E a' = t;\n         action_obs E a' = obs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding program_order_def"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a a' \\<and> action_tid E a = action_tid E a'\n\ngoal (1 subgoal):\n 1. (\\<And>t obs obs'.\n        \\<lbrakk>E \\<turnstile> a \\<le>a a'; action_tid E a = t;\n         action_obs E a = obs; action_tid E a' = t;\n         action_obs E a' = obs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"lnth E a\")(cases \"lnth E a'\", auto simp add: action_obs_def action_tid_def)"], ["", "lemma refl_on_program_order:\n  \"refl_onP (actions E) (program_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_onP (actions E) (program_order E)", "by(rule refl_onPI)(auto elim: action_orderE program_orderE intro: program_orderI refl_onPD[OF refl_action_order])"], ["", "lemma antisym_program_order:\n  \"antisymp (program_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (program_order E)", "using antisympD[OF antisym_action_order]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?E1 \\<turnstile> ?a \\<le>a ?b;\n   ?E1 \\<turnstile> ?b \\<le>a ?a\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. antisymp (program_order E)", "by(auto intro: antisympI elim!: program_orderE)"], ["", "lemma trans_program_order:\n  \"transp (program_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (program_order E)", "by(rule transpI)(auto elim!: program_orderE intro: program_orderI dest: transPD[OF trans_action_order])"], ["", "lemma porder_program_order:\n  \"porder_on (actions E) (program_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (actions E) (program_order E)", "by(blast intro: porder_onI refl_on_program_order antisym_program_order trans_program_order)"], ["", "lemma total_program_order_on_tactions:\n  \"total_onP (tactions E t) (program_order E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_onP (tactions E t) (program_order E)", "by(rule total_onPI)(auto elim: tactionsE simp add: program_order_def dest: total_onD[OF total_action_order])"], ["", "subsection \\<open>Synchronization order\\<close>"], ["", "lemma sync_orderI:\n  \"\\<lbrakk> E \\<turnstile> a \\<le>a a'; a \\<in> sactions P E; a' \\<in> sactions P E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<le>so a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<turnstile> a \\<le>a a'; a \\<in> sactions P E;\n     a' \\<in> sactions P E\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> a \\<le>so a'", "unfolding sync_order_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<turnstile> a \\<le>a a'; a \\<in> sactions P E;\n     a' \\<in> sactions P E\\<rbrakk>\n    \\<Longrightarrow> a \\<in> sactions P E \\<and>\n                      a' \\<in> sactions P E \\<and>\n                      E \\<turnstile> a \\<le>a a'", "by blast"], ["", "lemma sync_orderE:\n  assumes \"P,E \\<turnstile> a \\<le>so a'\"\n  obtains \"a \\<in> sactions P E\" \"a' \\<in> sactions P E\" \"E \\<turnstile> a \\<le>a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> sactions P E; a' \\<in> sactions P E;\n      E \\<turnstile> a \\<le>a a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so a'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> sactions P E; a' \\<in> sactions P E;\n      E \\<turnstile> a \\<le>a a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sync_order_def"], ["proof (prove)\nusing this:\n  a \\<in> sactions P E \\<and>\n  a' \\<in> sactions P E \\<and> E \\<turnstile> a \\<le>a a'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<in> sactions P E; a' \\<in> sactions P E;\n      E \\<turnstile> a \\<le>a a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma refl_on_sync_order:\n  \"refl_onP (sactions P E) (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_onP (sactions P E) (sync_order P E)", "by(rule refl_onPI)(fastforce elim: sync_orderE intro: sync_orderI refl_onPD[OF refl_action_order])+"], ["", "lemma antisym_sync_order:\n  \"antisymp (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (sync_order P E)", "using antisympD[OF antisym_action_order]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?E1 \\<turnstile> ?a \\<le>a ?b;\n   ?E1 \\<turnstile> ?b \\<le>a ?a\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. antisymp (sync_order P E)", "by(rule antisympI)(auto elim!: sync_orderE)"], ["", "lemma trans_sync_order:\n  \"transp (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (sync_order P E)", "by(rule transpI)(auto elim!: sync_orderE intro: sync_orderI dest: transPD[OF trans_action_order])"], ["", "lemma porder_sync_order:\n  \"porder_on (sactions P E) (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (sactions P E) (sync_order P E)", "by(blast intro: porder_onI refl_on_sync_order antisym_sync_order trans_sync_order)"], ["", "lemma total_sync_order:\n  \"total_onP (sactions P E) (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_onP (sactions P E) (sync_order P E)", "apply(rule total_onPI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> sactions P E; y \\<in> sactions P E\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> x \\<le>so y \\<or>\n                         x = y \\<or> P,E \\<turnstile> y \\<le>so x", "apply(simp add: sync_order_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> sactions P E; y \\<in> sactions P E\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> x \\<le>a y \\<or>\n                         x = y \\<or> E \\<turnstile> y \\<le>a x", "apply(rule total_onPD[OF total_action_order])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> sactions P E; y \\<in> sactions P E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> actions E\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> sactions P E; y \\<in> sactions P E\\<rbrakk>\n       \\<Longrightarrow> y \\<in> actions E", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma torder_sync_order:\n  \"torder_on (sactions P E) (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. torder_on (sactions P E) (sync_order P E)", "by(blast intro: torder_onI porder_sync_order total_sync_order)"], ["", "subsection \\<open>Synchronizes with\\<close>"], ["", "lemma sync_withI:\n  \"\\<lbrakk> P,E \\<turnstile> a \\<le>so a'; P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a') \\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> a \\<le>sw a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> a \\<le>so a';\n     P \\<turnstile> (action_tid E a,\n                     action_obs E\n                      a) \\<leadsto>sw (action_tid E a',\n action_obs E a')\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> a \\<le>sw a'", "unfolding sync_with_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> a \\<le>so a';\n     P \\<turnstile> (action_tid E a,\n                     action_obs E\n                      a) \\<leadsto>sw (action_tid E a',\n action_obs E a')\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> a \\<le>so a' \\<and>\n                      P \\<turnstile> (action_tid E a,\naction_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a')", "by blast"], ["", "lemma sync_withE:\n  assumes \"P,E \\<turnstile> a \\<le>sw a'\"\n  obtains \"P,E \\<turnstile> a \\<le>so a'\" \"P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E a', action_obs E a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> a \\<le>so a';\n      P \\<turnstile> (action_tid E a,\n                      action_obs E\n                       a) \\<leadsto>sw (action_tid E a',\n  action_obs E a')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>sw a'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> a \\<le>so a';\n      P \\<turnstile> (action_tid E a,\n                      action_obs E\n                       a) \\<leadsto>sw (action_tid E a',\n  action_obs E a')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sync_with_def"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so a' \\<and>\n  P \\<turnstile> (action_tid E a,\n                  action_obs E\n                   a) \\<leadsto>sw (action_tid E a', action_obs E a')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> a \\<le>so a';\n      P \\<turnstile> (action_tid E a,\n                      action_obs E\n                       a) \\<leadsto>sw (action_tid E a',\n  action_obs E a')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma irrefl_synchronizes_with:\n  \"irreflP (synchronizes_with P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflP (synchronizes_with P)", "by(rule irreflPI)(auto elim: synchronizes_with.cases)"], ["", "lemma irrefl_sync_with:\n  \"irreflP (sync_with P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflP (sync_with P E)", "by(rule irreflPI)(auto elim: sync_withE intro: irreflPD[OF irrefl_synchronizes_with])"], ["", "lemma anitsym_sync_with:\n  \"antisymp (sync_with P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (sync_with P E)", "using antisymPD[OF antisym_sync_order, of P E]"], ["proof (prove)\nusing this:\n  \\<lbrakk>P,E \\<turnstile> ?a \\<le>so ?b;\n   P,E \\<turnstile> ?b \\<le>so ?a\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. antisymp (sync_with P E)", "by -(rule antisymPI, auto elim: sync_withE)"], ["", "lemma consistent_program_order_sync_order:\n  \"order_consistent (program_order E) (sync_order P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_consistent (program_order E) (sync_order P E)", "apply(rule order_consistent_subset)"], ["proof (prove)\ngoal (3 subgoals):\n 1. order_consistent ?r ?s\n 2. \\<And>a a'. E \\<turnstile> a \\<le>po a' \\<Longrightarrow> ?r a a'\n 3. \\<And>a a'. P,E \\<turnstile> a \\<le>so a' \\<Longrightarrow> ?s a a'", "apply(rule antisym_order_consistent_self[OF antisym_action_order[of E]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       E \\<turnstile> a \\<le>po a' \\<Longrightarrow>\n       E \\<turnstile> a \\<le>a a'\n 2. \\<And>a a'.\n       P,E \\<turnstile> a \\<le>so a' \\<Longrightarrow>\n       E \\<turnstile> a \\<le>a a'", "apply(blast elim: program_orderE sync_orderE)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma consistent_program_order_sync_with:\n  \"order_consistent (program_order E) (sync_with P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_consistent (program_order E) (sync_with P E)", "by(rule order_consistent_subset[OF consistent_program_order_sync_order])(blast elim: sync_withE)+"], ["", "subsection \\<open>Happens before\\<close>"], ["", "lemma porder_happens_before:\n  \"porder_on (actions E) (happens_before P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (actions E) (happens_before P E)", "unfolding po_sw_def [abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (actions E)\n     (\\<lambda>a a'.\n         E \\<turnstile> a \\<le>po a' \\<or>\n         P,E \\<turnstile> a \\<le>sw a')\\<^sup>+\\<^sup>+", "by(rule porder_on_sub_torder_on_tranclp_porder_onI[OF porder_program_order torder_sync_order consistent_program_order_sync_order])(auto elim: sync_withE)"], ["", "lemma porder_tranclp_po_so:\n  \"porder_on (actions E) (\\<lambda>a a'. program_order E a a' \\<or> sync_order P E a a')^++\""], ["proof (prove)\ngoal (1 subgoal):\n 1. porder_on (actions E)\n     (\\<lambda>a a'.\n         E \\<turnstile> a \\<le>po a' \\<or>\n         P,E \\<turnstile> a \\<le>so a')\\<^sup>+\\<^sup>+", "by(rule porder_on_torder_on_tranclp_porder_onI[OF porder_program_order torder_sync_order consistent_program_order_sync_order]) auto"], ["", "lemma happens_before_refl:\n  assumes \"a \\<in> actions E\"\n  shows \"P,E \\<turnstile> a \\<le>hb a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a", "using porder_happens_before[of E P]"], ["proof (prove)\nusing this:\n  porder_on (actions E) (happens_before P E)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a", "by(rule porder_onE)(erule refl_onPD[OF _ assms])"], ["", "lemma happens_before_into_po_so_tranclp:\n  assumes \"P,E \\<turnstile> a \\<le>hb a'\"\n  shows \"(\\<lambda>a a'. E \\<turnstile> a \\<le>po a' \\<or> P,E \\<turnstile> a \\<le>so a')^++ a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a a'.\n        E \\<turnstile> a \\<le>po a' \\<or>\n        P,E \\<turnstile> a \\<le>so a')\\<^sup>+\\<^sup>+\n     a a'", "using assms"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. (\\<lambda>a a'.\n        E \\<turnstile> a \\<le>po a' \\<or>\n        P,E \\<turnstile> a \\<le>so a')\\<^sup>+\\<^sup>+\n     a a'", "unfolding po_sw_def [abs_def]"], ["proof (prove)\nusing this:\n  (\\<lambda>a a'.\n      E \\<turnstile> a \\<le>po a' \\<or>\n      P,E \\<turnstile> a \\<le>sw a')\\<^sup>+\\<^sup>+\n   a a'\n\ngoal (1 subgoal):\n 1. (\\<lambda>a a'.\n        E \\<turnstile> a \\<le>po a' \\<or>\n        P,E \\<turnstile> a \\<le>so a')\\<^sup>+\\<^sup>+\n     a a'", "by(induct)(blast elim: sync_withE intro: tranclp.trancl_into_trancl)+"], ["", "lemma po_sw_into_action_order:\n  \"po_sw P E a a' \\<Longrightarrow> E \\<turnstile> a \\<le>a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. po_sw P E a a' \\<Longrightarrow> E \\<turnstile> a \\<le>a a'", "by(auto elim: program_orderE sync_withE sync_orderE simp add: po_sw_def)"], ["", "lemma happens_before_into_action_order:\n  assumes \"P,E \\<turnstile> a \\<le>hb a'\"\n  shows \"E \\<turnstile> a \\<le>a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a a'", "using assms"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a a'", "by induct(blast intro: po_sw_into_action_order transPD[OF trans_action_order])+"], ["", "lemma action_order_consistent_with_happens_before:\n  \"order_consistent (action_order E) (happens_before P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_consistent (action_order E) (happens_before P E)", "by(blast intro: order_consistent_subset antisym_order_consistent_self antisym_action_order happens_before_into_action_order)"], ["", "lemma happens_before_new_actionD:\n  assumes hb: \"P,E \\<turnstile> a \\<le>hb a'\"\n  and new: \"is_new_action (action_obs E a')\"\n  shows \"is_new_action (action_obs E a)\" \"action_tid E a = action_tid E a'\" \"a \\<le> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a) &&&\n    action_tid E a = action_tid E a' &&& a \\<le> a'", "using hb"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a) &&&\n    action_tid E a = action_tid E a' &&& a \\<le> a'", "proof(induct rule: converse_tranclp_induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>y. po_sw P E y a' \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y.\n       po_sw P E y a' \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 5. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 6. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case (base a)"], ["proof (state)\nthis:\n  po_sw P E a a'\n\ngoal (6 subgoals):\n 1. \\<And>y. po_sw P E y a' \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y.\n       po_sw P E y a' \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 5. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 6. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>y. po_sw P E y a' \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y.\n       po_sw P E y a' \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 5. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 6. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new base"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a)", "by(auto dest: po_sw_into_action_order elim: action_orderE)"], ["proof (state)\nthis:\n  is_new_action (action_obs E a)\n\ngoal (5 subgoals):\n 1. \\<And>y.\n       po_sw P E y a' \\<Longrightarrow> action_tid E y = action_tid E a'\n 2. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 5. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>y.\n       po_sw P E y a' \\<Longrightarrow> action_tid E y = action_tid E a'\n 2. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 5. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new base"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E a'", "by(auto simp add: po_sw_def elim!: sync_withE elim: program_orderE synchronizes_with.cases)"], ["proof (state)\nthis:\n  action_tid E a = action_tid E a'\n\ngoal (4 subgoals):\n 1. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>y. po_sw P E y a' \\<Longrightarrow> y \\<le> a'\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 4. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new base"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a')\n  po_sw P E a a'\n\ngoal (1 subgoal):\n 1. a \\<le> a'", "by(auto dest: po_sw_into_action_order elim: action_orderE)"], ["proof (state)\nthis:\n  a \\<le> a'\n\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case (step a a'')"], ["proof (state)\nthis:\n  po_sw P E a a''\n  P,E \\<turnstile> a'' \\<le>hb a'\n  is_new_action (action_obs E a'')\n  action_tid E a'' = action_tid E a'\n  a'' \\<le> a'\n\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "note po_sw = \\<open>po_sw P E a a''\\<close>\n    and new = \\<open>is_new_action (action_obs E a'')\\<close>\n    and tid = \\<open>action_tid E a'' = action_tid E a'\\<close>"], ["proof (state)\nthis:\n  po_sw P E a a''\n  is_new_action (action_obs E a'')\n  action_tid E a'' = action_tid E a'\n\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> is_new_action (action_obs E y)\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 3. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new po_sw"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a)", "by(auto dest: po_sw_into_action_order elim: action_orderE)"], ["proof (state)\nthis:\n  is_new_action (action_obs E a)\n\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> action_tid E y = action_tid E a'\n 2. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new po_sw tid"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''\n  action_tid E a'' = action_tid E a'", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''\n  action_tid E a'' = action_tid E a'\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E a'", "by(auto simp add: po_sw_def elim!: sync_withE elim: program_orderE synchronizes_with.cases)"], ["proof (state)\nthis:\n  action_tid E a = action_tid E a'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>po_sw P E y z; P,E \\<turnstile> z \\<le>hb a';\n        is_new_action (action_obs E z); action_tid E z = action_tid E a';\n        z \\<le> a'\\<rbrakk>\n       \\<Longrightarrow> y \\<le> a'", "from new po_sw \\<open>a'' \\<le> a'\\<close>"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''\n  a'' \\<le> a'", "show ?case"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a'')\n  po_sw P E a a''\n  a'' \\<le> a'\n\ngoal (1 subgoal):\n 1. a \\<le> a'", "by(auto dest!: po_sw_into_action_order elim!: action_orderE)"], ["proof (state)\nthis:\n  a \\<le> a'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma external_actions_not_new:\n  \"\\<lbrakk> a \\<in> external_actions E; is_new_action (action_obs E a) \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> external_actions E;\n     is_new_action (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> False", "by(erule external_actions.cases)(simp)"], ["", "subsection \\<open>Most recent writes and sequential consistency\\<close>"], ["", "lemma most_recent_write_for_fun:\n  \"\\<lbrakk> P,E \\<turnstile> ra \\<leadsto>mrw wa; P,E \\<turnstile> ra \\<leadsto>mrw wa' \\<rbrakk> \\<Longrightarrow> wa = wa'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> ra \\<leadsto>mrw wa;\n     P,E \\<turnstile> ra \\<leadsto>mrw wa'\\<rbrakk>\n    \\<Longrightarrow> wa = wa'", "apply(erule most_recent_write_for.cases)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adal adala.\n       \\<lbrakk>ra \\<in> read_actions E; adal \\<in> action_loc P E ra;\n        E \\<turnstile> wa \\<le>a ra; wa \\<in> write_actions E;\n        adal \\<in> action_loc P E wa;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a wa \\<or>\n                             E \\<turnstile> ra \\<le>a wa';\n        ra \\<in> read_actions E; adala \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        adala \\<in> action_loc P E wa';\n        \\<And>wa'a.\n           \\<lbrakk>wa'a \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'a\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                             E \\<turnstile> ra \\<le>a wa'a\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            (a, b) \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a wa \\<or>\n                             E \\<turnstile> ra \\<le>a wa';\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<And>wa'a.\n           \\<lbrakk>wa'a \\<in> write_actions E;\n            (aa, ba) \\<in> action_loc P E wa'a\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa'a \\<le>a wa' \\<or>\n                             E \\<turnstile> ra \\<le>a wa'a\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(erule meta_allE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'4 a b aa ba \\<in> write_actions E;\n         (a, b) \\<in> action_loc P E (?wa'4 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'4 a b aa ba \\<le>a wa \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'4 a b aa ba;\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(erule meta_impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> ?wa'4 a b aa ba \\<in> write_actions E\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba;\n        (a, b) \\<in> action_loc P E (?wa'4 a b aa ba) \\<Longrightarrow>\n        E \\<turnstile> ?wa'4 a b aa ba \\<le>a wa \\<or>\n        E \\<turnstile> ra \\<le>a ?wa'4 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(rotate_tac 3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E wa; ra \\<in> read_actions E;\n        (aa, ba) \\<in> action_loc P E ra; E \\<turnstile> wa' \\<le>a ra;\n        wa' \\<in> write_actions E; (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba;\n        (a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E\\<rbrakk>\n       \\<Longrightarrow> ?wa'4 a b aa ba \\<in> write_actions E\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba;\n        (a, b) \\<in> action_loc P E (?wa'4 a b aa ba) \\<Longrightarrow>\n        E \\<turnstile> ?wa'4 a b aa ba \\<le>a wa \\<or>\n        E \\<turnstile> ra \\<le>a ?wa'4 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        \\<lbrakk>?wa'6 a b aa ba \\<in> write_actions E;\n         (aa, ba) \\<in> action_loc P E (?wa'6 a b aa ba)\\<rbrakk>\n        \\<Longrightarrow> E \\<turnstile> ?wa'6 a b aa ba \\<le>a wa' \\<or>\n                          E \\<turnstile> ra \\<le>a ?wa'6 a b aa ba;\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or>\n        E \\<turnstile> ra \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(erule (1) meta_impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or>\n        E \\<turnstile> ra \\<le>a wa\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(frule (1) action_loc_read_action_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or>\n        E \\<turnstile> ra \\<le>a wa\\<rbrakk>\n       \\<Longrightarrow> ?adal'14 a b aa ba \\<in> action_loc P E ra\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa;\n        (a, b) = ?adal'14 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(rotate_tac 1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>E \\<turnstile> wa \\<le>a ra; wa \\<in> write_actions E;\n        (a, b) \\<in> action_loc P E wa; ra \\<in> read_actions E;\n        (aa, ba) \\<in> action_loc P E ra; E \\<turnstile> wa' \\<le>a ra;\n        wa' \\<in> write_actions E; (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa;\n        (a, b) \\<in> action_loc P E ra\\<rbrakk>\n       \\<Longrightarrow> ?adal'14 a b aa ba \\<in> action_loc P E ra\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa;\n        (a, b) = ?adal'14 a b aa ba\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> action_loc P E ra; E \\<turnstile> wa \\<le>a ra;\n        wa \\<in> write_actions E; (a, b) \\<in> action_loc P E wa;\n        ra \\<in> read_actions E; (aa, ba) \\<in> action_loc P E ra;\n        E \\<turnstile> wa' \\<le>a ra; wa' \\<in> write_actions E;\n        (aa, ba) \\<in> action_loc P E wa';\n        (a, b) \\<in> action_loc P E wa' \\<Longrightarrow>\n        E \\<turnstile> wa' \\<le>a wa \\<or> E \\<turnstile> ra \\<le>a wa';\n        (aa, ba) \\<in> action_loc P E wa \\<Longrightarrow>\n        E \\<turnstile> wa \\<le>a wa' \\<or> E \\<turnstile> ra \\<le>a wa;\n        (a, b) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> wa = wa'", "apply(fastforce dest: antisymPD[OF antisym_action_order] elim: write_actions.cases read_actions.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma THE_most_recent_writeI: \"P,E \\<turnstile> r \\<leadsto>mrw w \\<Longrightarrow> (THE w. P,E \\<turnstile> r \\<leadsto>mrw w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> r \\<leadsto>mrw w \\<Longrightarrow>\n    (THE w. P,E \\<turnstile> r \\<leadsto>mrw w) = w", "by(blast dest: most_recent_write_for_fun)+"], ["", "lemma most_recent_write_for_write_actionsD:\n  assumes \"P,E \\<turnstile> ra \\<leadsto>mrw wa\"\n  shows \"wa \\<in> write_actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wa \\<in> write_actions E", "using assms"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ra \\<leadsto>mrw wa\n\ngoal (1 subgoal):\n 1. wa \\<in> write_actions E", "by cases"], ["", "lemma most_recent_write_recent:\n  \"\\<lbrakk> P,E \\<turnstile> r \\<leadsto>mrw w; adal \\<in> action_loc P E r; w' \\<in> write_actions E; adal \\<in> action_loc P E w' \\<rbrakk> \n  \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or> E \\<turnstile> r \\<le>a w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> r \\<leadsto>mrw w;\n     adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n     adal \\<in> action_loc P E w'\\<rbrakk>\n    \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or>\n                      E \\<turnstile> r \\<le>a w'", "apply(erule most_recent_write_for.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adala.\n       \\<lbrakk>adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n        adal \\<in> action_loc P E w'; r \\<in> read_actions E;\n        adala \\<in> action_loc P E r; E \\<turnstile> w \\<le>a r;\n        w \\<in> write_actions E; adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or>\n                         E \\<turnstile> r \\<le>a w'", "apply(drule (1) action_loc_read_action_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adala.\n       \\<lbrakk>adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n        adal \\<in> action_loc P E w'; adala \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> ?adal'2 adala \\<in> action_loc P E r\n 2. \\<And>adala.\n       \\<lbrakk>adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n        adal \\<in> action_loc P E w'; adala \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        adal = ?adal'2 adala\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or>\n                         E \\<turnstile> r \\<le>a w'", "apply(rotate_tac 1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adala.\n       \\<lbrakk>w' \\<in> write_actions E; adal \\<in> action_loc P E w';\n        adala \\<in> action_loc P E r; E \\<turnstile> w \\<le>a r;\n        w \\<in> write_actions E; adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        adal \\<in> action_loc P E r\\<rbrakk>\n       \\<Longrightarrow> ?adal'2 adala \\<in> action_loc P E r\n 2. \\<And>adala.\n       \\<lbrakk>adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n        adal \\<in> action_loc P E w'; adala \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        adal = ?adal'2 adala\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or>\n                         E \\<turnstile> r \\<le>a w'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adala.\n       \\<lbrakk>adal \\<in> action_loc P E r; w' \\<in> write_actions E;\n        adal \\<in> action_loc P E w'; adala \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adala \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adala \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        adal = adala\\<rbrakk>\n       \\<Longrightarrow> E \\<turnstile> w' \\<le>a w \\<or>\n                         E \\<turnstile> r \\<le>a w'", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_write_seenI:\n  \"\\<lbrakk> \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> ws a \\<in> write_actions E;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> (ad, al) \\<in> action_loc P E (ws a);\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> value_written P E (ws a) (ad, al) = v;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n     \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>hb ws a;\n     \\<And>a ad al v. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v); is_volatile P al \\<rbrakk>\n     \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a;\n     \\<And>a ad al v a'. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v);\n                      a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a'; P,E \\<turnstile> ws a \\<le>hb a';\n                      P,E \\<turnstile> a' \\<le>hb a \\<rbrakk> \\<Longrightarrow> a' = ws a;\n     \\<And>a ad al v a'. \\<lbrakk> a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v);\n                      a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a'; is_volatile P al; P,E \\<turnstile> ws a \\<le>so a';\n                      P,E \\<turnstile> a' \\<le>so a \\<rbrakk> \\<Longrightarrow> a' = ws a \\<rbrakk>\n  \\<Longrightarrow> is_write_seen P E ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a ad al v.\n                \\<lbrakk>a \\<in> read_actions E;\n                 action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n                \\<Longrightarrow> ws a \\<in> write_actions E;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> (ad, al) \\<in> action_loc P E (ws a);\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> value_written P E (ws a) (ad, al) = v;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>hb ws a;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         is_volatile P al\\<rbrakk>\n        \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a;\n     \\<And>a ad al v a'.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a';\n         P,E \\<turnstile> ws a \\<le>hb a';\n         P,E \\<turnstile> a' \\<le>hb a\\<rbrakk>\n        \\<Longrightarrow> a' = ws a;\n     \\<And>a ad al v a'.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a';\n         is_volatile P al; P,E \\<turnstile> ws a \\<le>so a';\n         P,E \\<turnstile> a' \\<le>so a\\<rbrakk>\n        \\<Longrightarrow> a' = ws a\\<rbrakk>\n    \\<Longrightarrow> is_write_seen P E ws", "unfolding is_write_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a ad al v.\n                \\<lbrakk>a \\<in> read_actions E;\n                 action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n                \\<Longrightarrow> ws a \\<in> write_actions E;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> (ad, al) \\<in> action_loc P E (ws a);\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> value_written P E (ws a) (ad, al) = v;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>hb ws a;\n     \\<And>a ad al v.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         is_volatile P al\\<rbrakk>\n        \\<Longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a;\n     \\<And>a ad al v a'.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a';\n         P,E \\<turnstile> ws a \\<le>hb a';\n         P,E \\<turnstile> a' \\<le>hb a\\<rbrakk>\n        \\<Longrightarrow> a' = ws a;\n     \\<And>a ad al v a'.\n        \\<lbrakk>a \\<in> read_actions E;\n         action_obs E a = NormalAction (ReadMem ad al v);\n         a' \\<in> write_actions E; (ad, al) \\<in> action_loc P E a';\n         is_volatile P al; P,E \\<turnstile> ws a \\<le>so a';\n         P,E \\<turnstile> a' \\<le>so a\\<rbrakk>\n        \\<Longrightarrow> a' = ws a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>read_actions E.\n                         \\<forall>ad al v.\n                            action_obs E a =\n                            NormalAction (ReadMem ad al v) \\<longrightarrow>\n                            ws a \\<in> write_actions E \\<and>\n                            (ad, al) \\<in> action_loc P E (ws a) \\<and>\n                            value_written P E (ws a) (ad, al) = v \\<and>\n                            \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and>\n                            (is_volatile P al \\<longrightarrow>\n                             \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n                            (\\<forall>w'\\<in>write_actions E.\n                                (ad, al)\n                                \\<in> action_loc P E w' \\<longrightarrow>\n                                P,E \\<turnstile> ws a \\<le>hb w' \\<and>\n                                P,E \\<turnstile> w' \\<le>hb a \\<or>\n                                is_volatile P al \\<and>\n                                P,E \\<turnstile> ws a \\<le>so w' \\<and>\n                                P,E \\<turnstile> w' \\<le>so a \\<longrightarrow>\n                                w' = ws a)", "by(blast 30)"], ["", "lemma is_write_seenD:\n  \"\\<lbrakk> is_write_seen P E ws; a \\<in> read_actions E; action_obs E a = NormalAction (ReadMem ad al v) \\<rbrakk>\n  \\<Longrightarrow> ws a \\<in> write_actions E \\<and> (ad, al) \\<in> action_loc P E (ws a) \\<and> value_written P E (ws a) (ad, al) = v \\<and> \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and> (is_volatile P al \\<longrightarrow> \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n     (\\<forall>a' \\<in> write_actions E. (ad, al) \\<in> action_loc P E a' \\<and> (P,E \\<turnstile> ws a \\<le>hb a' \\<and> P,E \\<turnstile> a' \\<le>hb a \\<or> is_volatile P al \\<and> P,E \\<turnstile> ws a \\<le>so a' \\<and> P,E \\<turnstile> a' \\<le>so a) \\<longrightarrow> a' = ws a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_write_seen P E ws; a \\<in> read_actions E;\n     action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n    \\<Longrightarrow> ws a \\<in> write_actions E \\<and>\n                      (ad, al) \\<in> action_loc P E (ws a) \\<and>\n                      value_written P E (ws a) (ad, al) = v \\<and>\n                      \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and>\n                      (is_volatile P al \\<longrightarrow>\n                       \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n                      (\\<forall>a'\\<in>write_actions E.\n                          (ad, al) \\<in> action_loc P E a' \\<and>\n                          (P,E \\<turnstile> ws a \\<le>hb a' \\<and>\n                           P,E \\<turnstile> a' \\<le>hb a \\<or>\n                           is_volatile P al \\<and>\n                           P,E \\<turnstile> ws a \\<le>so a' \\<and>\n                           P,E \\<turnstile> a' \\<le>so a) \\<longrightarrow>\n                          a' = ws a)", "unfolding is_write_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>read_actions E.\n                \\<forall>ad al v.\n                   action_obs E a =\n                   NormalAction (ReadMem ad al v) \\<longrightarrow>\n                   ws a \\<in> write_actions E \\<and>\n                   (ad, al) \\<in> action_loc P E (ws a) \\<and>\n                   value_written P E (ws a) (ad, al) = v \\<and>\n                   \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and>\n                   (is_volatile P al \\<longrightarrow>\n                    \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n                   (\\<forall>w'\\<in>write_actions E.\n                       (ad, al) \\<in> action_loc P E w' \\<longrightarrow>\n                       P,E \\<turnstile> ws a \\<le>hb w' \\<and>\n                       P,E \\<turnstile> w' \\<le>hb a \\<or>\n                       is_volatile P al \\<and>\n                       P,E \\<turnstile> ws a \\<le>so w' \\<and>\n                       P,E \\<turnstile> w' \\<le>so a \\<longrightarrow>\n                       w' = ws a);\n     a \\<in> read_actions E;\n     action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n    \\<Longrightarrow> ws a \\<in> write_actions E \\<and>\n                      (ad, al) \\<in> action_loc P E (ws a) \\<and>\n                      value_written P E (ws a) (ad, al) = v \\<and>\n                      \\<not> P,E \\<turnstile> a \\<le>hb ws a \\<and>\n                      (is_volatile P al \\<longrightarrow>\n                       \\<not> P,E \\<turnstile> a \\<le>so ws a) \\<and>\n                      (\\<forall>a'\\<in>write_actions E.\n                          (ad, al) \\<in> action_loc P E a' \\<and>\n                          (P,E \\<turnstile> ws a \\<le>hb a' \\<and>\n                           P,E \\<turnstile> a' \\<le>hb a \\<or>\n                           is_volatile P al \\<and>\n                           P,E \\<turnstile> ws a \\<le>so a' \\<and>\n                           P,E \\<turnstile> a' \\<le>so a) \\<longrightarrow>\n                          a' = ws a)", "by blast"], ["", "lemma thread_start_actions_okI:\n  \"(\\<And>a. \\<lbrakk> a \\<in> actions E; \\<not> is_new_action (action_obs E a) \\<rbrakk> \n    \\<Longrightarrow> \\<exists>i. i \\<le> a \\<and> action_obs E i = InitialThreadAction \\<and> action_tid E i = action_tid E a)\n  \\<Longrightarrow> thread_start_actions_ok E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> actions E;\n         \\<not> is_new_action (action_obs E a)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>i\\<le>a.\n                             action_obs E i = InitialThreadAction \\<and>\n                             action_tid E i =\n                             action_tid E a) \\<Longrightarrow>\n    thread_start_actions_ok E", "unfolding thread_start_actions_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> actions E;\n         \\<not> is_new_action (action_obs E a)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>i\\<le>a.\n                             action_obs E i = InitialThreadAction \\<and>\n                             action_tid E i =\n                             action_tid E a) \\<Longrightarrow>\n    \\<forall>a\\<in>actions E.\n       \\<not> is_new_action (action_obs E a) \\<longrightarrow>\n       (\\<exists>i\\<le>a.\n           action_obs E i = InitialThreadAction \\<and>\n           action_tid E i = action_tid E a)", "by blast"], ["", "lemma thread_start_actions_okD:\n  \"\\<lbrakk> thread_start_actions_ok E; a \\<in> actions E; \\<not> is_new_action (action_obs E a) \\<rbrakk> \n  \\<Longrightarrow> \\<exists>i. i \\<le> a \\<and> action_obs E i = InitialThreadAction \\<and> action_tid E i = action_tid E a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>thread_start_actions_ok E; a \\<in> actions E;\n     \\<not> is_new_action (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i\\<le>a.\n                         action_obs E i = InitialThreadAction \\<and>\n                         action_tid E i = action_tid E a", "unfolding thread_start_actions_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>actions E.\n                \\<not> is_new_action (action_obs E a) \\<longrightarrow>\n                (\\<exists>i\\<le>a.\n                    action_obs E i = InitialThreadAction \\<and>\n                    action_tid E i = action_tid E a);\n     a \\<in> actions E; \\<not> is_new_action (action_obs E a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i\\<le>a.\n                         action_obs E i = InitialThreadAction \\<and>\n                         action_tid E i = action_tid E a", "by blast"], ["", "lemma thread_start_actions_ok_prefix:\n  \"\\<lbrakk> thread_start_actions_ok E'; lprefix E E' \\<rbrakk> \\<Longrightarrow> thread_start_actions_ok E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>thread_start_actions_ok E'; lprefix E E'\\<rbrakk>\n    \\<Longrightarrow> thread_start_actions_ok E", "apply(clarsimp simp add: lprefix_conv_lappend)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>thread_start_actions_ok (lappend E zs);\n        E' = lappend E zs\\<rbrakk>\n       \\<Longrightarrow> thread_start_actions_ok E", "apply(rule thread_start_actions_okI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>zs a.\n       \\<lbrakk>thread_start_actions_ok (lappend E zs); E' = lappend E zs;\n        a \\<in> actions E; \\<not> is_new_action (action_obs E a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E i = InitialThreadAction \\<and>\n                            action_tid E i = action_tid E a", "apply(drule_tac a=a in thread_start_actions_okD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; a \\<in> actions E;\n        \\<not> is_new_action (action_obs E a)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> actions (lappend E zs)\n 2. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; a \\<in> actions E;\n        \\<not> is_new_action (action_obs E a)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_new_action (action_obs (lappend E zs) a)\n 3. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; a \\<in> actions E;\n        \\<not> is_new_action (action_obs E a);\n        \\<exists>i\\<le>a.\n           action_obs (lappend E zs) i = InitialThreadAction \\<and>\n           action_tid (lappend E zs) i =\n           action_tid (lappend E zs) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E i = InitialThreadAction \\<and>\n                            action_tid E i = action_tid E a", "apply(simp add: actions_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; enat a < llength E;\n        \\<not> is_new_action (action_obs E a)\\<rbrakk>\n       \\<Longrightarrow> enat a < llength E + llength zs\n 2. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; a \\<in> actions E;\n        \\<not> is_new_action (action_obs E a)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_new_action (action_obs (lappend E zs) a)\n 3. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; a \\<in> actions E;\n        \\<not> is_new_action (action_obs E a);\n        \\<exists>i\\<le>a.\n           action_obs (lappend E zs) i = InitialThreadAction \\<and>\n           action_tid (lappend E zs) i =\n           action_tid (lappend E zs) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E i = InitialThreadAction \\<and>\n                            action_tid E i = action_tid E a", "apply(auto simp add: action_obs_def lnth_lappend1 actions_def action_tid_def le_less_trans[where y=\"enat a\" for a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>zs a.\n       \\<lbrakk>E' = lappend E zs; enat a < llength E;\n        \\<not> is_new_action (snd (lnth E a))\\<rbrakk>\n       \\<Longrightarrow> enat a < llength E + llength zs", "apply (metis add.right_neutral add_strict_mono not_gr_zero)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wf_execI [intro?]:\n  \"\\<lbrakk> is_write_seen P E ws;\n    thread_start_actions_ok E \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_write_seen P E ws; thread_start_actions_ok E\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> (E, ws) \\<surd>", "by simp"], ["", "lemma wf_exec_is_write_seenD:\n  \"P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow> is_write_seen P E ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow> is_write_seen P E ws", "by simp"], ["", "lemma wf_exec_thread_start_actions_okD:\n  \"P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow> thread_start_actions_ok E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) \\<surd> \\<Longrightarrow>\n    thread_start_actions_ok E", "by simp"], ["", "lemma sequentially_consistentI:\n  \"(\\<And>r. r \\<in> read_actions E \\<Longrightarrow> P,E \\<turnstile> r \\<leadsto>mrw ws r)\n  \\<Longrightarrow> sequentially_consistent P (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        r \\<in> read_actions E \\<Longrightarrow>\n        P,E \\<turnstile> r \\<leadsto>mrw ws r) \\<Longrightarrow>\n    sequentially_consistent P (E, ws)", "by simp"], ["", "lemma sequentially_consistentE:\n  assumes \"sequentially_consistent P (E, ws)\" \"a \\<in> read_actions E\"\n  obtains \"P,E \\<turnstile> a \\<leadsto>mrw ws a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> a \\<leadsto>mrw ws a \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  sequentially_consistent P (E, ws)\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> a \\<leadsto>mrw ws a \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["", "declare sequentially_consistent.simps [simp del]"], ["", "subsection \\<open>Similar actions\\<close>"], ["", "text \\<open>Similar actions differ only in the values written/read.\\<close>"], ["", "inductive sim_action :: \n  \"('addr, 'thread_id) obs_event action \\<Rightarrow> ('addr, 'thread_id) obs_event action \\<Rightarrow> bool\" \n  (\"_ \\<approx> _\" [50, 50] 51)\nwhere\n  InitialThreadAction: \"InitialThreadAction \\<approx> InitialThreadAction\"\n| ThreadFinishAction: \"ThreadFinishAction \\<approx> ThreadFinishAction\"\n| NewHeapElem: \"NormalAction (NewHeapElem a hT) \\<approx> NormalAction (NewHeapElem a hT)\"\n| ReadMem: \"NormalAction (ReadMem ad al v) \\<approx> NormalAction (ReadMem ad al v')\"\n| WriteMem: \"NormalAction (WriteMem ad al v) \\<approx> NormalAction (WriteMem ad al v')\"\n| ThreadStart: \"NormalAction (ThreadStart t) \\<approx> NormalAction (ThreadStart t)\"\n| ThreadJoin: \"NormalAction (ThreadJoin t) \\<approx> NormalAction (ThreadJoin t)\"\n| SyncLock: \"NormalAction (SyncLock a) \\<approx> NormalAction (SyncLock a)\"\n| SyncUnlock: \"NormalAction (SyncUnlock a) \\<approx> NormalAction (SyncUnlock a)\"\n| ExternalCall: \"NormalAction (ExternalCall a M vs v) \\<approx> NormalAction (ExternalCall a M vs v)\"\n| ObsInterrupt: \"NormalAction (ObsInterrupt t) \\<approx> NormalAction (ObsInterrupt t)\"\n| ObsInterrupted: \"NormalAction (ObsInterrupted t) \\<approx> NormalAction (ObsInterrupted t)\""], ["", "definition sim_actions :: \"('addr, 'thread_id) execution \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> bool\" (\"_ [\\<approx>] _\" [51, 50] 51)\nwhere \"sim_actions = llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a')\""], ["", "lemma sim_action_refl [intro!, simp]:\n  \"obs \\<approx> obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs \\<approx> obs", "apply(cases obs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1. obs = NormalAction x1 \\<Longrightarrow> obs \\<approx> obs\n 2. obs = InitialThreadAction \\<Longrightarrow> obs \\<approx> obs\n 3. obs = ThreadFinishAction \\<Longrightarrow> obs \\<approx> obs", "apply(rename_tac obs')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>obs'. obs = NormalAction obs' \\<Longrightarrow> obs \\<approx> obs\n 2. obs = InitialThreadAction \\<Longrightarrow> obs \\<approx> obs\n 3. obs = ThreadFinishAction \\<Longrightarrow> obs \\<approx> obs", "apply(case_tac \"obs'\")"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>obs' x11 x12 x13 x14.\n       \\<lbrakk>obs = NormalAction obs';\n        obs' = ExternalCall x11 x12 x13 x14\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 2. \\<And>obs' x21 x22 x23.\n       \\<lbrakk>obs = NormalAction obs'; obs' = ReadMem x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 3. \\<And>obs' x31 x32 x33.\n       \\<lbrakk>obs = NormalAction obs';\n        obs' = WriteMem x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 4. \\<And>obs' x41 x42.\n       \\<lbrakk>obs = NormalAction obs'; obs' = NewHeapElem x41 x42\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 5. \\<And>obs' x5.\n       \\<lbrakk>obs = NormalAction obs'; obs' = ThreadStart x5\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 6. \\<And>obs' x6.\n       \\<lbrakk>obs = NormalAction obs'; obs' = ThreadJoin x6\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 7. \\<And>obs' x7.\n       \\<lbrakk>obs = NormalAction obs'; obs' = SyncLock x7\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 8. \\<And>obs' x8.\n       \\<lbrakk>obs = NormalAction obs'; obs' = SyncUnlock x8\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 9. \\<And>obs' x9.\n       \\<lbrakk>obs = NormalAction obs'; obs' = ObsInterrupt x9\\<rbrakk>\n       \\<Longrightarrow> obs \\<approx> obs\n 10. \\<And>obs' x10.\n        \\<lbrakk>obs = NormalAction obs'; obs' = ObsInterrupted x10\\<rbrakk>\n        \\<Longrightarrow> obs \\<approx> obs\nA total of 12 subgoals...", "apply(auto intro: sim_action.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "inductive_cases sim_action_cases [elim!]:\n  \"InitialThreadAction \\<approx> obs\"\n  \"ThreadFinishAction \\<approx> obs\"\n  \"NormalAction (NewHeapElem a hT) \\<approx> obs\"\n  \"NormalAction (ReadMem ad al v) \\<approx> obs\"\n  \"NormalAction (WriteMem ad al v) \\<approx> obs\"\n  \"NormalAction (ThreadStart t) \\<approx> obs\"\n  \"NormalAction (ThreadJoin t) \\<approx> obs\"\n  \"NormalAction (SyncLock a) \\<approx> obs\"\n  \"NormalAction (SyncUnlock a) \\<approx> obs\"\n  \"NormalAction (ObsInterrupt t) \\<approx> obs\"\n  \"NormalAction (ObsInterrupted t) \\<approx> obs\"\n  \"NormalAction (ExternalCall a M vs v) \\<approx> obs\"\n\n  \"obs \\<approx> InitialThreadAction\"\n  \"obs \\<approx> ThreadFinishAction\"\n  \"obs \\<approx> NormalAction (NewHeapElem a hT)\"\n  \"obs \\<approx> NormalAction (ReadMem ad al v')\"\n  \"obs \\<approx> NormalAction (WriteMem ad al v')\"\n  \"obs \\<approx> NormalAction (ThreadStart t)\"\n  \"obs \\<approx> NormalAction (ThreadJoin t)\"\n  \"obs \\<approx> NormalAction (SyncLock a)\"\n  \"obs \\<approx> NormalAction (SyncUnlock a)\"\n  \"obs \\<approx> NormalAction (ObsInterrupt t)\"\n  \"obs \\<approx> NormalAction (ObsInterrupted t)\"\n  \"obs \\<approx> NormalAction (ExternalCall a M vs v)\""], ["", "inductive_simps sim_action_simps [simp]:\n  \"InitialThreadAction \\<approx> obs\"\n  \"ThreadFinishAction \\<approx> obs\"\n  \"NormalAction (NewHeapElem a hT) \\<approx> obs\"\n  \"NormalAction (ReadMem ad al v) \\<approx> obs\"\n  \"NormalAction (WriteMem ad al v) \\<approx> obs\"\n  \"NormalAction (ThreadStart t) \\<approx> obs\"\n  \"NormalAction (ThreadJoin t) \\<approx> obs\"\n  \"NormalAction (SyncLock a) \\<approx> obs\"\n  \"NormalAction (SyncUnlock a) \\<approx> obs\"\n  \"NormalAction (ObsInterrupt t) \\<approx> obs\"\n  \"NormalAction (ObsInterrupted t) \\<approx> obs\"\n  \"NormalAction (ExternalCall a M vs v) \\<approx> obs\"\n\n  \"obs \\<approx> InitialThreadAction\"\n  \"obs \\<approx> ThreadFinishAction\"\n  \"obs \\<approx> NormalAction (NewHeapElem a hT)\"\n  \"obs \\<approx> NormalAction (ReadMem ad al v')\"\n  \"obs \\<approx> NormalAction (WriteMem ad al v')\"\n  \"obs \\<approx> NormalAction (ThreadStart t)\"\n  \"obs \\<approx> NormalAction (ThreadJoin t)\"\n  \"obs \\<approx> NormalAction (SyncLock a)\"\n  \"obs \\<approx> NormalAction (SyncUnlock a)\"\n  \"obs \\<approx> NormalAction (ObsInterrupt t)\"\n  \"obs \\<approx> NormalAction (ObsInterrupted t)\"\n  \"obs \\<approx> NormalAction (ExternalCall a M vs v)\""], ["", "lemma sim_action_trans [trans]:\n  \"\\<lbrakk> obs \\<approx> obs'; obs' \\<approx> obs'' \\<rbrakk> \\<Longrightarrow> obs \\<approx> obs''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs \\<approx> obs'; obs' \\<approx> obs''\\<rbrakk>\n    \\<Longrightarrow> obs \\<approx> obs''", "by(erule sim_action.cases) auto"], ["", "lemma sim_action_sym [sym]:\n  assumes \"obs \\<approx> obs'\"\n  shows \"obs' \\<approx> obs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs' \\<approx> obs", "using assms"], ["proof (prove)\nusing this:\n  obs \\<approx> obs'\n\ngoal (1 subgoal):\n 1. obs' \\<approx> obs", "by cases simp_all"], ["", "lemma sim_actions_sym [sym]:\n  \"E [\\<approx>] E' \\<Longrightarrow> E' [\\<approx>] E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E [\\<approx>] E' \\<Longrightarrow> E' [\\<approx>] E", "unfolding sim_actions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') E\n     E' \\<Longrightarrow>\n    llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') E' E", "by(auto simp add: llist_all2_conv_all_lnth split_beta intro: sim_action_sym)"], ["", "lemma sim_actions_action_obsD:\n  \"E [\\<approx>] E' \\<Longrightarrow> action_obs E a \\<approx> action_obs E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E [\\<approx>] E' \\<Longrightarrow>\n    action_obs E a \\<approx> action_obs E' a", "unfolding sim_actions_def action_obs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') E\n     E' \\<Longrightarrow>\n    snd (lnth E a) \\<approx> snd (lnth E' a)", "by(cases \"enat a < llength E\")(auto dest: llist_all2_lnthD llist_all2_llengthD simp add: split_beta lnth_beyond split: enat.split)"], ["", "lemma sim_actions_action_tidD:\n  \"E [\\<approx>] E' \\<Longrightarrow> action_tid E a = action_tid E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E [\\<approx>] E' \\<Longrightarrow> action_tid E a = action_tid E' a", "unfolding sim_actions_def action_tid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') E\n     E' \\<Longrightarrow>\n    fst (lnth E a) = fst (lnth E' a)", "by(cases \"enat a < llength E\")(auto dest: llist_all2_lnthD llist_all2_llengthD simp add: lnth_beyond split: enat.split)"], ["", "lemma action_loc_aux_sim_action:\n  \"a \\<approx> a' \\<Longrightarrow> action_loc_aux P a = action_loc_aux P a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx> a' \\<Longrightarrow>\n    action_loc_aux P a = action_loc_aux P a'", "by(auto elim!: action_loc_aux_cases intro: action_loc_aux_intros)"], ["", "lemma eq_into_sim_actions: \n  assumes \"E = E'\"\n  shows \"E [\\<approx>] E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E [\\<approx>] E'", "unfolding sim_actions_def assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>(t, a) (t', a'). t = t' \\<and> a \\<approx> a') E'\n     E'", "by(rule llist_all2_reflI)(auto)"], ["", "subsection \\<open>Well-formedness conditions for execution sets\\<close>"], ["", "locale executions_base =\n  fixes \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\""], ["", "locale drf =\n  executions_base \\<E> P\n  for \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\" +\n  assumes \\<E>_new_actions_for_fun:\n  \"\\<lbrakk> E \\<in> \\<E>; a \\<in> new_actions_for P E adal; a' \\<in> new_actions_for P E adal \\<rbrakk> \\<Longrightarrow> a = a'\"\n  and \\<E>_sequential_completion:\n  \"\\<lbrakk> E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; \\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a \\<rbrakk>\n  \\<Longrightarrow> \\<exists>E' \\<in> \\<E>. \\<exists>ws'. P \\<turnstile> (E', ws') \\<surd> \\<and> ltake (enat r) E = ltake (enat r) E' \\<and> sequentially_consistent P (E', ws') \\<and>\n                 action_tid E r = action_tid E' r \\<and> action_obs E r \\<approx> action_obs E' r \\<and>\n                 (r \\<in> actions E \\<longrightarrow> r \\<in> actions E')\""], ["", "locale executions_aux =\n  executions_base \\<E> P\n  for \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\" +\n  assumes init_before_read:\n  \"\\<lbrakk>  E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; r \\<in> read_actions E; adal \\<in> action_loc P E r; \n      \\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a \\<rbrakk>\n  \\<Longrightarrow> \\<exists>i<r. i \\<in> new_actions_for P E adal\"\n  and \\<E>_new_actions_for_fun:\n  \"\\<lbrakk> E \\<in> \\<E>; a \\<in> new_actions_for P E adal; a' \\<in> new_actions_for P E adal \\<rbrakk> \\<Longrightarrow> a = a'\""], ["", "locale sc_legal =\n  executions_aux \\<E> P\n  for \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\" +\n  assumes \\<E>_hb_completion:\n  \"\\<lbrakk> E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; \\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a \\<rbrakk>\n  \\<Longrightarrow> \\<exists>E' \\<in> \\<E>. \\<exists>ws'. P \\<turnstile> (E', ws') \\<surd> \\<and> ltake (enat r) E = ltake (enat r) E' \\<and>\n                 (\\<forall>a \\<in> read_actions E'. if a < r then ws' a = ws a else P,E' \\<turnstile> ws' a \\<le>hb a) \\<and>\n                 action_tid E' r = action_tid E r \\<and> \n                 (if r \\<in> read_actions E then sim_action else (=)) (action_obs E' r) (action_obs E r) \\<and>\n                 (r \\<in> actions E \\<longrightarrow> r \\<in> actions E')\""], ["", "locale jmm_consistent =\n  drf?: drf \\<E> P +\n  sc_legal \\<E> P\n  for \\<E> :: \"('addr, 'thread_id) execution set\"\n  and P :: \"'m prog\""], ["", "subsection \\<open>Legal executions\\<close>"], ["", "record ('addr, 'thread_id) pre_justifying_execution =\n  committed :: \"JMM_action set\"\n  justifying_exec :: \"('addr, 'thread_id) execution\"\n  justifying_ws :: \"write_seen\""], ["", "record ('addr, 'thread_id) justifying_execution = \n  \"('addr, 'thread_id) pre_justifying_execution\" +\n  action_translation :: \"JMM_action \\<Rightarrow> JMM_action\""], ["", "type_synonym ('addr, 'thread_id) justification = \"nat \\<Rightarrow> ('addr, 'thread_id) justifying_execution\""], ["", "definition wf_action_translation_on :: \n  \"('addr, 'thread_id) execution \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action set \\<Rightarrow> (JMM_action \\<Rightarrow> JMM_action) \\<Rightarrow> bool\"\nwhere\n  \"wf_action_translation_on E E' A f \\<longleftrightarrow>\n   inj_on f (actions E) \\<and> \n   (\\<forall>a \\<in> A. action_tid E a = action_tid E' (f a) \\<and> action_obs E a \\<approx> action_obs E' (f a))\""], ["", "abbreviation wf_action_translation :: \"('addr, 'thread_id) execution \\<Rightarrow> ('addr, 'thread_id) justifying_execution \\<Rightarrow> bool\"\nwhere\n  \"wf_action_translation E J \\<equiv> \n   wf_action_translation_on (justifying_exec J) E (committed J) (action_translation J)\""], ["", "context\n  fixes P :: \"'m prog\"\n  and E :: \"('addr, 'thread_id) execution\"\n  and ws :: \"write_seen\"\n  and J :: \"('addr, 'thread_id) justification\"\nbegin"], ["", "text \\<open>\n  This context defines the causality constraints for the JMM.\n  The weak versions are for the fixed JMM as presented by Sevcik and Aspinall at ECOOP 2008.\n\\<close>"], ["", "text \\<open>Committed actions are an ascending chain with all actions of E as a limit\\<close>"], ["", "definition is_commit_sequence :: bool where \n  \"is_commit_sequence \\<longleftrightarrow> \n   committed (J 0) = {} \\<and>\n   (\\<forall>n. action_translation (J n) ` committed (J n) \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))) \\<and>\n   actions E = (\\<Union>n. action_translation (J n) ` committed (J n))\""], ["", "definition justification_well_formed :: bool where\n  \"justification_well_formed \\<longleftrightarrow> (\\<forall>n. P \\<turnstile> (justifying_exec (J n), justifying_ws (J n)) \\<surd>)\""], ["", "definition committed_subset_actions :: bool where \\<comment> \\<open>JMM constraint 1\\<close>\n  \"committed_subset_actions \\<longleftrightarrow> (\\<forall>n. committed (J n) \\<subseteq> actions (justifying_exec (J n)))\""], ["", "definition happens_before_committed :: bool where \\<comment> \\<open>JMM constraint 2\\<close>\n  \"happens_before_committed \\<longleftrightarrow> \n  (\\<forall>n. happens_before P (justifying_exec (J n)) |` committed (J n) =\n       inv_imageP (happens_before P E) (action_translation (J n)) |` committed (J n))\""], ["", "definition happens_before_committed_weak :: bool where \\<comment> \\<open>relaxed JMM constraint\\<close>\n  \"happens_before_committed_weak \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>r \\<in> read_actions (justifying_exec (J n)) \\<inter> committed (J n).\n       let r' = action_translation (J n) r;\n           w' = ws r';\n           w = inv_into (actions (justifying_exec (J n))) (action_translation (J n)) w' in\n         (P,E \\<turnstile> w' \\<le>hb r' \\<longleftrightarrow> P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) \\<and>\n         \\<not> P,justifying_exec (J n) \\<turnstile> r \\<le>hb w)\""], ["", "definition sync_order_committed :: bool where \\<comment> \\<open>JMM constraint 3\\<close>\n  \"sync_order_committed \\<longleftrightarrow>\n  (\\<forall>n. sync_order P (justifying_exec (J n)) |` committed (J n) =\n       inv_imageP (sync_order P E) (action_translation (J n)) |` committed (J n))\""], ["", "definition value_written_committed :: bool where \\<comment> \\<open>JMM constraint 4\\<close>\n  \"value_written_committed \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>w \\<in> write_actions (justifying_exec (J n)) \\<inter> committed (J n). \n       let w' = action_translation (J n) w\n       in (\\<forall>adal \\<in> action_loc P E w'. value_written P (justifying_exec (J n)) w adal = value_written P E w' adal))\""], ["", "definition write_seen_committed :: bool where \\<comment> \\<open>JMM constraint 5\\<close>\n  \"write_seen_committed \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>r' \\<in> read_actions (justifying_exec (J n)) \\<inter> committed (J n).\n       let r = action_translation (J n) r';\n           r'' = inv_into (actions (justifying_exec (J (Suc n)))) (action_translation (J (Suc n))) r\n       in action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r'') = ws r)\""], ["", "text \\<open>uncommited reads see writes that happen before them -- JMM constraint 6\\<close>"], ["", "(* this constraint does not apply to the 0th justifying execution, so reads may see arbitrary writes,\n   but this cannot be exploited because reads cannot be committed in the 1st justifying execution\n   since no writes are committed in the 0th execution *)"], ["", "definition uncommitted_reads_see_hb :: bool where\n  \"uncommitted_reads_see_hb \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>r' \\<in> read_actions (justifying_exec (J (Suc n))).\n       action_translation (J (Suc n)) r' \\<in> action_translation (J n) ` committed (J n) \\<or> \n       P,justifying_exec (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r')\""], ["", "text \\<open>\n  newly committed reads see already committed writes and write-seen\n  relationship must not change any more  -- JMM constraint 7\n\\<close>"], ["", "definition committed_reads_see_committed_writes :: bool where\n  \"committed_reads_see_committed_writes \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>r' \\<in> read_actions (justifying_exec (J (Suc n))) \\<inter> committed (J (Suc n)).\n       let r = action_translation (J (Suc n)) r';\n           committed_n = action_translation (J n) ` committed (J n)\n       in r \\<in> committed_n \\<or>\n          (action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r') \\<in> committed_n \\<and> ws r \\<in> committed_n))\""], ["", "definition committed_reads_see_committed_writes_weak :: bool where\n  \"committed_reads_see_committed_writes_weak \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>r' \\<in> read_actions (justifying_exec (J (Suc n))) \\<inter> committed (J (Suc n)).\n       let r = action_translation (J (Suc n)) r';\n           committed_n = action_translation (J n) ` committed (J n)\n       in r \\<in> committed_n \\<or> ws r \\<in> committed_n)\""], ["", "text \\<open>external actions must be committed as soon as hb-subsequent actions are committed  -- JMM constraint 9\\<close>"], ["", "definition external_actions_committed :: bool where\n  \"external_actions_committed \\<longleftrightarrow>\n  (\\<forall>n. \\<forall>a \\<in> external_actions (justifying_exec (J n)). \\<forall>a' \\<in> committed (J n).\n       P,justifying_exec (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow> a \\<in> committed (J n))\""], ["", "text \\<open>well-formedness conditions for action translations\\<close>"], ["", "definition wf_action_translations :: bool where\n  \"wf_action_translations \\<longleftrightarrow>\n  (\\<forall>n. wf_action_translation_on (justifying_exec (J n)) E (committed (J n)) (action_translation (J n)))\""], ["", "end"], ["", "text \\<open>\n  Rule 8 of the justification for the JMM is incorrect because there might be no\n  transitive reduction of the happens-before relation for an infinite execution, if\n  infinitely many initialisation actions have to be ordered before the start\n  action of every thread.\n  Hence, \\<open>is_justified_by\\<close> omits this constraint.\n\\<close>"], ["", "primrec is_justified_by ::\n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> ('addr, 'thread_id) justification \\<Rightarrow> bool\" \n  (\"_ \\<turnstile> _ justified'_by _\" [51, 50, 50] 50)\nwhere\n  \"P \\<turnstile> (E, ws) justified_by J \\<longleftrightarrow>\n   is_commit_sequence E J \\<and>\n   justification_well_formed P J \\<and>\n   committed_subset_actions J \\<and>\n   happens_before_committed P E J \\<and>\n   sync_order_committed P E J \\<and>\n   value_written_committed P E J \\<and>\n   write_seen_committed ws J \\<and> \n   uncommitted_reads_see_hb P J \\<and>\n   committed_reads_see_committed_writes ws J \\<and> \n   external_actions_committed P J \\<and> \n   wf_action_translations E J\""], ["", "text \\<open>\n  Sevcik requires in the fixed JMM that external actions may\n  only be committed when everything that happens before has \n  already been committed. On the level of legality, this constraint\n  is vacuous because it is always possible to delay committing\n  external actions, so we omit it here.\n\\<close>"], ["", "primrec is_weakly_justified_by ::\n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> ('addr, 'thread_id) justification \\<Rightarrow> bool\" \n  (\"_ \\<turnstile> _ weakly'_justified'_by _\" [51, 50, 50] 50)\nwhere\n  \"P \\<turnstile> (E, ws) weakly_justified_by J \\<longleftrightarrow>\n   is_commit_sequence E J \\<and>\n   justification_well_formed P J \\<and>\n   committed_subset_actions J \\<and>\n   happens_before_committed_weak P E ws J \\<and>\n   \\<comment> \\<open>no \\<open>sync_order\\<close> constraint\\<close>\n   value_written_committed P E J \\<and>\n   write_seen_committed ws J \\<and> \n   uncommitted_reads_see_hb P J \\<and>\n   committed_reads_see_committed_writes_weak ws J \\<and> \n   wf_action_translations E J\""], ["", "text \\<open>\n  Notion of conflict is strengthened to explicitly exclude volatile locations.\n  Otherwise, the following program is not correctly synchronised:\n\n\\begin{verbatim}\n  volatile x = 0;\n  ---------------\n  r = x; | x = 1;\n\\end{verbatim}\n\n  because in the SC execution [Init x 0, (t1, Read x 0), (t2, Write x 1)],\n  the read and write are unrelated in hb, because synchronises-with is \n  asymmetric for volatiles.\n\n  The JLS considers conflicting volatiles for data races, but this is only a \n  remark on the DRF guarantee. See JMM mailing list posts \\#2477 to 2488.\n\\<close>"], ["", "(* Problem already exists in Sevcik's formalisation *)"], ["", "definition non_volatile_conflict ::\n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<Rightarrow> JMM_action \\<Rightarrow> JMM_action \\<Rightarrow> bool\" \n  (\"_,_ \\<turnstile>/(_)\\<dagger>(_)\" [51,50,50,50] 51)\nwhere \n  \"P,E \\<turnstile> a \\<dagger> a' \\<longleftrightarrow>\n   (a \\<in> read_actions E \\<and> a' \\<in> write_actions E \\<or>\n    a \\<in> write_actions E \\<and> a' \\<in> read_actions E \\<or>\n    a \\<in> write_actions E \\<and> a' \\<in> write_actions E) \\<and>\n   (\\<exists>ad al. (ad, al) \\<in> action_loc P E a \\<inter> action_loc P E a' \\<and> \\<not> is_volatile P al)\""], ["", "definition correctly_synchronized :: \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution set \\<Rightarrow> bool\"\nwhere\n  \"correctly_synchronized P \\<E> \\<longleftrightarrow>\n  (\\<forall>E \\<in> \\<E>. \\<forall>ws. P \\<turnstile> (E, ws) \\<surd> \\<longrightarrow> sequentially_consistent P (E, ws) \n    \\<longrightarrow> (\\<forall>a \\<in> actions E. \\<forall>a' \\<in> actions E. P,E \\<turnstile> a \\<dagger> a' \n          \\<longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a))\""], ["", "primrec gen_legal_execution ::\n  \"('m prog \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> ('addr, 'thread_id) justification \\<Rightarrow> bool)\n  \\<Rightarrow> 'm prog \\<Rightarrow> ('addr, 'thread_id) execution set \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> bool\"\nwhere\n  \"gen_legal_execution is_justification P \\<E> (E, ws) \\<longleftrightarrow>\n   E \\<in> \\<E> \\<and> P \\<turnstile> (E, ws) \\<surd> \\<and> \n   (\\<exists>J. is_justification P (E, ws) J \\<and> range (justifying_exec \\<circ> J) \\<subseteq> \\<E>)\""], ["", "abbreviation legal_execution :: \n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution set \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> bool\"\nwhere\n  \"legal_execution \\<equiv> gen_legal_execution is_justified_by\""], ["", "abbreviation weakly_legal_execution :: \n  \"'m prog \\<Rightarrow> ('addr, 'thread_id) execution set \\<Rightarrow> ('addr, 'thread_id) execution \\<times> write_seen \\<Rightarrow> bool\"\nwhere\n  \"weakly_legal_execution \\<equiv> gen_legal_execution is_weakly_justified_by\""], ["", "declare gen_legal_execution.simps [simp del]"], ["", "lemma sym_non_volatile_conflict:\n  \"symP (non_volatile_conflict P E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symP (non_volatile_conflict P E)", "unfolding non_volatile_conflict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symP\n     (\\<lambda>x y.\n         (x \\<in> read_actions E \\<and> y \\<in> write_actions E \\<or>\n          x \\<in> write_actions E \\<and> y \\<in> read_actions E \\<or>\n          x \\<in> write_actions E \\<and> y \\<in> write_actions E) \\<and>\n         (\\<exists>ad al.\n             (ad, al)\n             \\<in> action_loc P E x \\<inter> action_loc P E y \\<and>\n             \\<not> is_volatile P al))", "by(rule symPI) blast"], ["", "lemma legal_executionI:\n  \"\\<lbrakk> E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; is_justification P (E, ws) J; range (justifying_exec \\<circ> J) \\<subseteq> \\<E> \\<rbrakk>\n  \\<Longrightarrow> gen_legal_execution is_justification P \\<E> (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n     is_justification P (E, ws) J;\n     range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n    \\<Longrightarrow> gen_legal_execution is_justification P \\<E> (E, ws)", "unfolding gen_legal_execution.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n     is_justification P (E, ws) J;\n     range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n    \\<Longrightarrow> E \\<in> \\<E> \\<and>\n                      P \\<turnstile> (E, ws) \\<surd> \\<and>\n                      (\\<exists>J.\n                          is_justification P (E, ws) J \\<and>\n                          range (justifying_exec \\<circ> J)\n                          \\<subseteq> \\<E>)", "by blast"], ["", "lemma legal_executionE:\n  assumes \"gen_legal_execution is_justification P \\<E> (E, ws)\"\n  obtains J where \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\" \"is_justification P (E, ws) J\" \"range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n         is_justification P (E, ws) J;\n         range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  gen_legal_execution is_justification P \\<E> (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n         is_justification P (E, ws) J;\n         range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding gen_legal_execution.simps"], ["proof (prove)\nusing this:\n  E \\<in> \\<E> \\<and>\n  P \\<turnstile> (E, ws) \\<surd> \\<and>\n  (\\<exists>J.\n      is_justification P (E, ws) J \\<and>\n      range (justifying_exec \\<circ> J) \\<subseteq> \\<E>)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n         is_justification P (E, ws) J;\n         range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma legal_\\<E>D: \"gen_legal_execution is_justification P \\<E> (E, ws) \\<Longrightarrow> E \\<in> \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_legal_execution is_justification P \\<E> (E, ws) \\<Longrightarrow>\n    E \\<in> \\<E>", "by(erule legal_executionE)"], ["", "lemma legal_wf_execD:\n  \"gen_legal_execution is_justification P \\<E> Ews \\<Longrightarrow> P \\<turnstile> Ews \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_legal_execution is_justification P \\<E> Ews \\<Longrightarrow>\n    P \\<turnstile> Ews \\<surd>", "by(cases Ews)(auto elim: legal_executionE)"], ["", "lemma correctly_synchronizedD:\n  \"\\<lbrakk> correctly_synchronized P \\<E>; E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>; sequentially_consistent P (E, ws) \\<rbrakk>\n  \\<Longrightarrow> \\<forall>a a'. a \\<in> actions E \\<longrightarrow> a' \\<in> actions E \\<longrightarrow> P,E \\<turnstile> a \\<dagger> a' \\<longrightarrow> P,E \\<turnstile> a \\<le>hb a' \\<or> P,E \\<turnstile> a' \\<le>hb a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>correctly_synchronized P \\<E>; E \\<in> \\<E>;\n     P \\<turnstile> (E, ws) \\<surd>;\n     sequentially_consistent P (E, ws)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a a'.\n                         a \\<in> actions E \\<longrightarrow>\n                         a' \\<in> actions E \\<longrightarrow>\n                         P,E \\<turnstile>a\\<dagger>a' \\<longrightarrow>\n                         P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "unfolding correctly_synchronized_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>E\\<in>\\<E>.\n                \\<forall>ws.\n                   P \\<turnstile> (E, ws) \\<surd> \\<longrightarrow>\n                   sequentially_consistent P (E, ws) \\<longrightarrow>\n                   (\\<forall>a\\<in>actions E.\n                       \\<forall>a'\\<in>actions E.\n                          P,E \\<turnstile>a\\<dagger>a' \\<longrightarrow>\n                          P,E \\<turnstile> a \\<le>hb a' \\<or>\n                          P,E \\<turnstile> a' \\<le>hb a);\n     E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n     sequentially_consistent P (E, ws)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a a'.\n                         a \\<in> actions E \\<longrightarrow>\n                         a' \\<in> actions E \\<longrightarrow>\n                         P,E \\<turnstile>a\\<dagger>a' \\<longrightarrow>\n                         P,E \\<turnstile> a \\<le>hb a' \\<or>\n                         P,E \\<turnstile> a' \\<le>hb a", "by blast"], ["", "lemma wf_action_translation_on_actionD:\n  \"\\<lbrakk> wf_action_translation_on E E' A f; a \\<in> A \\<rbrakk> \n  \\<Longrightarrow> action_tid E a = action_tid E' (f a) \\<and> action_obs E a \\<approx> action_obs E' (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_action_translation_on E E' A f; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> action_tid E a = action_tid E' (f a) \\<and>\n                      action_obs E a \\<approx> action_obs E' (f a)", "unfolding wf_action_translation_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f (actions E) \\<and>\n             (\\<forall>a\\<in>A.\n                 action_tid E a = action_tid E' (f a) \\<and>\n                 action_obs E a \\<approx> action_obs E' (f a));\n     a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> action_tid E a = action_tid E' (f a) \\<and>\n                      action_obs E a \\<approx> action_obs E' (f a)", "by blast"], ["", "lemma wf_action_translation_on_inj_onD:\n  \"wf_action_translation_on E E' A f \\<Longrightarrow> inj_on f (actions E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_action_translation_on E E' A f \\<Longrightarrow> inj_on f (actions E)", "unfolding wf_action_translation_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f (actions E) \\<and>\n    (\\<forall>a\\<in>A.\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a)) \\<Longrightarrow>\n    inj_on f (actions E)", "by simp"], ["", "lemma wf_action_translation_on_action_locD:\n  \"\\<lbrakk> wf_action_translation_on E E' A f; a \\<in> A \\<rbrakk>\n  \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_action_translation_on E E' A f; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)", "apply(drule (1) wf_action_translation_on_actionD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     action_tid E a = action_tid E' (f a) \\<and>\n     action_obs E a \\<approx> action_obs E' (f a)\\<rbrakk>\n    \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)", "apply(cases \"(P, action_obs E a)\" rule: action_loc_aux.cases)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>Pa ad C.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) =\n        (Pa, NormalAction (NewHeapElem ad (Class_type C)))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 2. \\<And>Pa ad T n'.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) =\n        (Pa, NormalAction (NewHeapElem ad (Array_type T n')))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 3. \\<And>Pa ad al v.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (Pa, NormalAction (WriteMem ad al v))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 4. \\<And>Pa ad al v.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (Pa, NormalAction (ReadMem ad al v))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 5. \\<And>uu_ va vb vc vd.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) =\n        (uu_, NormalAction (ExternalCall va vb vc vd))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 6. \\<And>uu_ va.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (uu_, NormalAction (ThreadStart va))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 7. \\<And>uu_ va.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (uu_, NormalAction (ThreadJoin va))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 8. \\<And>uu_ va.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (uu_, NormalAction (SyncLock va))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 9. \\<And>uu_ va.\n       \\<lbrakk>a \\<in> A;\n        action_tid E a = action_tid E' (f a) \\<and>\n        action_obs E a \\<approx> action_obs E' (f a);\n        (P, action_obs E a) = (uu_, NormalAction (SyncUnlock va))\\<rbrakk>\n       \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\n 10. \\<And>uu_ va.\n        \\<lbrakk>a \\<in> A;\n         action_tid E a = action_tid E' (f a) \\<and>\n         action_obs E a \\<approx> action_obs E' (f a);\n         (P, action_obs E a) =\n         (uu_, NormalAction (ObsInterrupt va))\\<rbrakk>\n        \\<Longrightarrow> action_loc P E a = action_loc P E' (f a)\nA total of 13 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma weakly_justified_write_seen_hb_read_committed:\n  assumes J: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and r: \"r \\<in> read_actions (justifying_exec (J n))\" \"r \\<in> committed (J n)\"\n  shows \"ws (action_translation (J n) r) \\<in> action_translation (J n) ` committed (J n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "using r"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J n))\n  r \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "proof(induct n arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "case 0"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have [simp]: \"committed (J 0) = {}\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J 0) = {}", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  committed (J 0) = {}\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "with 0"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n  committed (J 0) = {}", "show ?case"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n  committed (J 0) = {}\n\ngoal (1 subgoal):\n 1. ws (action_translation (J 0) r)\n    \\<in> action_translation (J 0) ` committed (J 0)", "by simp"], ["proof (state)\nthis:\n  ws (action_translation (J 0) r)\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>?r \\<in> read_actions (justifying_exec (J n));\n   ?r \\<in> committed (J n)\\<rbrakk>\n  \\<Longrightarrow> ws (action_translation (J n) ?r)\n                    \\<in> action_translation (J n) ` committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "let ?E = \"\\<lambda>n. justifying_exec (J n)\"\n    and ?ws = \"\\<lambda>n. justifying_ws (J n)\"\n    and ?C = \"\\<lambda>n. committed (J n)\"\n    and ?\\<phi> = \"\\<lambda>n. action_translation (J n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "note r = \\<open>r \\<in> read_actions (?E (Suc n))\\<close>"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "hence \"r \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have wfan: \"wf_action_translation_on (?E n) E (?C n) (?\\<phi> n)\"\n    and wfaSn: \"wf_action_translation_on (?E (Suc n)) E (?C (Suc n)) (?\\<phi> (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. wf_action_translation E (J n) &&& wf_action_translation E (J (Suc n))", "by(simp_all add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E (J n)\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))", "have injSn: \"inj_on (?\\<phi> (Suc n)) (actions (?E (Suc n)))\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. inj_on (action_translation (J (Suc n)))\n     (actions (justifying_exec (J (Suc n))))", "by(rule wf_action_translation_on_inj_onD)"], ["proof (state)\nthis:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have C_sub_A: \"?C (Suc n) \\<subseteq> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have CnCSn: \"?\\<phi> n ` ?C n \\<subseteq> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. action_translation (J n) ` committed (J n)\n    \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have wsSn: \"is_write_seen P (?E (Suc n)) (?ws (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. is_write_seen P (justifying_exec (J (Suc n)))\n     (justifying_ws (J (Suc n)))", "by(simp add: justification_well_formed_def)"], ["proof (state)\nthis:\n  is_write_seen P (justifying_exec (J (Suc n))) (justifying_ws (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from r"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))", "obtain ad al v where \"action_obs (?E (Suc n)) r = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (J (Suc n))) r =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from is_write_seenD[OF wsSn r this]"], ["proof (chain)\npicking this:\n  justifying_ws (J (Suc n)) r\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r) \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r) (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb justifying_ws (J (Suc n))\n          r \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r \\<le>so justifying_ws (J (Suc n))\n           r) \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r) \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r)", "have wsSn: \"?ws (Suc n) r \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  justifying_ws (J (Suc n)) r\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r) \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r) (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb justifying_ws (J (Suc n))\n          r \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r \\<le>so justifying_ws (J (Suc n))\n           r) \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r) \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "proof(cases \"?\\<phi> (Suc n) r \\<in> ?\\<phi> n ` ?C n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "case True"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "then"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)", "obtain r' where r': \"r' \\<in> ?C n\"\n      and r_r': \"?\\<phi> (Suc n) r = ?\\<phi> n r'\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>r' \\<in> committed (J n);\n         action_translation (J (Suc n)) r =\n         action_translation (J n) r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  r' \\<in> committed (J n)\n  action_translation (J (Suc n)) r = action_translation (J n) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from r' wfan"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  wf_action_translation E (J n)", "have \"action_tid (?E n) r' = action_tid E (?\\<phi> n r')\"\n      and \"action_obs (?E n) r' \\<approx> action_obs E (?\\<phi> n r')\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  wf_action_translation E (J n)\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid E (action_translation (J n) r') &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs E (action_translation (J n) r')", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "moreover"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from r' CnCSn"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "have \"?\\<phi> (Suc n) r \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "unfolding r_r'"], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J n) r'\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"r \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> committed (J (Suc n))", "unfolding inj_on_image_mem_iff[OF injSn C_sub_A \\<open>r \\<in> actions (?E (Suc n))\\<close>]"], ["proof (prove)\nusing this:\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> committed (J (Suc n))", "."], ["proof (state)\nthis:\n  r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))", "have \"action_tid (?E (Suc n)) r = action_tid E (?\\<phi> (Suc n) r)\"\n      and \"action_obs (?E (Suc n)) r \\<approx> action_obs E (?\\<phi> (Suc n) r)\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J (Suc n))) r =\n    action_tid E (action_translation (J (Suc n)) r) &&&\n    action_obs (justifying_exec (J (Suc n)))\n     r \\<approx> action_obs E (action_translation (J (Suc n)) r)", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "ultimately"], ["proof (chain)\npicking this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)", "have tid: \"action_tid (?E n) r' = action_tid (?E (Suc n)) r\"\n      and obs: \"action_obs (?E n) r' \\<approx> action_obs (?E (Suc n)) r\""], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid (justifying_exec (J (Suc n))) r &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs (justifying_exec (J (Suc n))) r", "unfolding r_r'"], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid (justifying_exec (J (Suc n))) r &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs (justifying_exec (J (Suc n))) r", "by(auto intro: sim_action_trans sim_action_sym)"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid (justifying_exec (J (Suc n))) r\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"?C n \\<subseteq> actions (?E n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J n) \\<subseteq> actions (justifying_exec (J n))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r'"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))", "have \"r' \\<in> actions (?E n)\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> actions (justifying_exec (J n))", "by blast"], ["proof (state)\nthis:\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r obs"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n  r' \\<in> actions (justifying_exec (J n))", "have \"r' \\<in> read_actions (?E n)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J n))", "by cases(auto intro: read_actions.intros)"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence ws: \"ws (?\\<phi> n r') \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r')\n    \\<in> action_translation (J n) ` committed (J n)", "using r'"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r')\n    \\<in> action_translation (J n) ` committed (J n)", "by(rule Suc)"], ["proof (state)\nthis:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "have r_conv_inv: \"r = inv_into (actions (?E (Suc n))) (?\\<phi> (Suc n)) (?\\<phi> n r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r')", "using \\<open>r \\<in> actions (?E (Suc n))\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r')", "unfolding r_r'[symmetric]"], ["proof (prove)\nusing this:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J (Suc n)) r)", "by(simp add: inv_into_f_f[OF injSn])"], ["proof (state)\nthis:\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with \\<open>r' \\<in> ?C n\\<close> r J \\<open>r' \\<in> read_actions (?E n)\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J n))\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')", "have ws_eq: \"?\\<phi> (Suc n) (?ws (Suc n) r) = ws (?\\<phi> n r')\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J n))\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n    ws (action_translation (J n) r')", "by(simp add: Let_def write_seen_committed_def)"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with ws CnCSn"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')", "have \"?\\<phi> (Suc n) (?ws (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"?ws (Suc n) r \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))", "by(subst (asm) inj_on_image_mem_iff[OF injSn C_sub_A wsSn])"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "moreover"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from ws CnCSn"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "have \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "unfolding r_r'"], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r')\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "ultimately"], ["proof (chain)\npicking this:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by simp"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "case False"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r \\<open>r \\<in> ?C (Suc n)\\<close> J"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)", "have \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n)", "unfolding is_weakly_justified_by.simps Let_def committed_reads_see_committed_writes_weak_def"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  is_commit_sequence E J \\<and>\n  justification_well_formed P J \\<and>\n  committed_subset_actions J \\<and>\n  happens_before_committed_weak P E ws J \\<and>\n  value_written_committed P E J \\<and>\n  write_seen_committed ws J \\<and>\n  uncommitted_reads_see_hb P J \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         ws (action_translation (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n)) \\<and>\n  wf_action_translations E J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n)", "by blast"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "using CnCSn"], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by blast+"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(simp add: inj_on_image_mem_iff[OF injSn C_sub_A wsSn])"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma justified_write_seen_hb_read_committed:\n  assumes J: \"P \\<turnstile> (E, ws) justified_by J\"\n  and r: \"r \\<in> read_actions (justifying_exec (J n))\" \"r \\<in> committed (J n)\"\n  shows \"justifying_ws (J n) r \\<in> committed (J n)\" (is ?thesis1)\n  and \"ws (action_translation (J n) r) \\<in> action_translation (J n) ` committed (J n)\" (is ?thesis2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. justifying_ws (J n) r \\<in> committed (J n) &&&\n    ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. justifying_ws (J n) r \\<in> committed (J n)\n 2. ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "have \"?thesis1 \\<and> ?thesis2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. justifying_ws (J n) r \\<in> committed (J n) \\<and>\n    ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "using r"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J n))\n  r \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. justifying_ws (J n) r \\<in> committed (J n) \\<and>\n    ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "proof(induct n arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J 0) r \\<in> committed (J 0) \\<and>\n                         ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "case 0"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J 0) r \\<in> committed (J 0) \\<and>\n                         ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have [simp]: \"committed (J 0) = {}\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. committed (J 0) = {}", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  committed (J 0) = {}\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> read_actions (justifying_exec (J 0));\n        r \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J 0) r \\<in> committed (J 0) \\<and>\n                         ws (action_translation (J 0) r)\n                         \\<in> action_translation (J 0) ` committed (J 0)\n 2. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "with 0"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n  committed (J 0) = {}", "show ?case"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J 0))\n  r \\<in> committed (J 0)\n  committed (J 0) = {}\n\ngoal (1 subgoal):\n 1. justifying_ws (J 0) r \\<in> committed (J 0) \\<and>\n    ws (action_translation (J 0) r)\n    \\<in> action_translation (J 0) ` committed (J 0)", "by simp"], ["proof (state)\nthis:\n  justifying_ws (J 0) r \\<in> committed (J 0) \\<and>\n  ws (action_translation (J 0) r)\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>?r \\<in> read_actions (justifying_exec (J n));\n   ?r \\<in> committed (J n)\\<rbrakk>\n  \\<Longrightarrow> justifying_ws (J n) ?r \\<in> committed (J n) \\<and>\n                    ws (action_translation (J n) ?r)\n                    \\<in> action_translation (J n) ` committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "let ?E = \"\\<lambda>n. justifying_exec (J n)\"\n      and ?ws = \"\\<lambda>n. justifying_ws (J n)\"\n      and ?C = \"\\<lambda>n. committed (J n)\"\n      and ?\\<phi> = \"\\<lambda>n. action_translation (J n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "note r = \\<open>r \\<in> read_actions (?E (Suc n))\\<close>"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "hence \"r \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have wfan: \"wf_action_translation_on (?E n) E (?C n) (?\\<phi> n)\"\n      and wfaSn: \"wf_action_translation_on (?E (Suc n)) E (?C (Suc n)) (?\\<phi> (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. wf_action_translation E (J n) &&& wf_action_translation E (J (Suc n))", "by(simp_all add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E (J n)\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))", "have injSn: \"inj_on (?\\<phi> (Suc n)) (actions (?E (Suc n)))\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. inj_on (action_translation (J (Suc n)))\n     (actions (justifying_exec (J (Suc n))))", "by(rule wf_action_translation_on_inj_onD)"], ["proof (state)\nthis:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have C_sub_A: \"?C (Suc n) \\<subseteq> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have CnCSn: \"?\\<phi> n ` ?C n \\<subseteq> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. action_translation (J n) ` committed (J n)\n    \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have wsSn: \"is_write_seen P (?E (Suc n)) (?ws (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. is_write_seen P (justifying_exec (J (Suc n)))\n     (justifying_ws (J (Suc n)))", "by(simp add: justification_well_formed_def)"], ["proof (state)\nthis:\n  is_write_seen P (justifying_exec (J (Suc n))) (justifying_ws (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from r"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))", "obtain ad al v where \"action_obs (?E (Suc n)) r = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (J (Suc n))) r =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "from is_write_seenD[OF wsSn r this]"], ["proof (chain)\npicking this:\n  justifying_ws (J (Suc n)) r\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r) \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r) (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb justifying_ws (J (Suc n))\n          r \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r \\<le>so justifying_ws (J (Suc n))\n           r) \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r) \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r)", "have wsSn: \"?ws (Suc n) r \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  justifying_ws (J (Suc n)) r\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r) \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r) (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb justifying_ws (J (Suc n))\n          r \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r \\<le>so justifying_ws (J (Suc n))\n           r) \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r) \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>r \\<in> read_actions (justifying_exec (J n));\n                    r \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> justifying_ws (J n) r\n                                     \\<in> committed (J n) \\<and>\n                                     ws (action_translation (J n) r)\n                                     \\<in> action_translation (J n) `\n     committed (J n);\n        r \\<in> read_actions (justifying_exec (J (Suc n)));\n        r \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> justifying_ws (J (Suc n)) r\n                         \\<in> committed (J (Suc n)) \\<and>\n                         ws (action_translation (J (Suc n)) r)\n                         \\<in> action_translation (J (Suc n)) `\n                               committed (J (Suc n))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "proof(cases \"?\\<phi> (Suc n) r \\<in> ?\\<phi> n ` ?C n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "case True"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "then"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)", "obtain r' where r': \"r' \\<in> ?C n\"\n        and r_r': \"?\\<phi> (Suc n) r = ?\\<phi> n r'\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>r' \\<in> committed (J n);\n         action_translation (J (Suc n)) r =\n         action_translation (J n) r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  r' \\<in> committed (J n)\n  action_translation (J (Suc n)) r = action_translation (J n) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from r' wfan"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  wf_action_translation E (J n)", "have \"action_tid (?E n) r' = action_tid E (?\\<phi> n r')\"\n        and \"action_obs (?E n) r' \\<approx> action_obs E (?\\<phi> n r')\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  wf_action_translation E (J n)\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid E (action_translation (J n) r') &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs E (action_translation (J n) r')", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "moreover"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from r' CnCSn"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "have \"?\\<phi> (Suc n) r \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "unfolding r_r'"], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J n) r'\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"r \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> committed (J (Suc n))", "unfolding inj_on_image_mem_iff[OF injSn C_sub_A \\<open>r \\<in> actions (?E (Suc n))\\<close>]"], ["proof (prove)\nusing this:\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r \\<in> committed (J (Suc n))", "."], ["proof (state)\nthis:\n  r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))", "have \"action_tid (?E (Suc n)) r = action_tid E (?\\<phi> (Suc n) r)\"\n        and \"action_obs (?E (Suc n)) r \\<approx> action_obs E (?\\<phi> (Suc n) r)\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J (Suc n))) r =\n    action_tid E (action_translation (J (Suc n)) r) &&&\n    action_obs (justifying_exec (J (Suc n)))\n     r \\<approx> action_obs E (action_translation (J (Suc n)) r)", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "ultimately"], ["proof (chain)\npicking this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)", "have tid: \"action_tid (?E n) r' = action_tid (?E (Suc n)) r\"\n        and obs: \"action_obs (?E n) r' \\<approx> action_obs (?E (Suc n)) r\""], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid (justifying_exec (J (Suc n))) r &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs (justifying_exec (J (Suc n))) r", "unfolding r_r'"], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  action_tid (justifying_exec (J (Suc n))) r =\n  action_tid E (action_translation (J n) r')\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r' =\n    action_tid (justifying_exec (J (Suc n))) r &&&\n    action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs (justifying_exec (J (Suc n))) r", "by(auto intro: sim_action_trans sim_action_sym)"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r' =\n  action_tid (justifying_exec (J (Suc n))) r\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have \"?C n \\<subseteq> actions (?E n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. committed (J n) \\<subseteq> actions (justifying_exec (J n))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r'"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))", "have \"r' \\<in> actions (?E n)\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> actions (justifying_exec (J n))", "by blast"], ["proof (state)\nthis:\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r obs"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n  r' \\<in> actions (justifying_exec (J n))", "have \"r' \\<in> read_actions (?E n)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs (justifying_exec (J (Suc n))) r\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J n))", "by cases(auto intro: read_actions.intros)"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"?ws n r' \\<in> ?C n \\<and> ws (?\\<phi> n r') \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. justifying_ws (J n) r' \\<in> committed (J n) \\<and>\n    ws (action_translation (J n) r')\n    \\<in> action_translation (J n) ` committed (J n)", "using r'"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. justifying_ws (J n) r' \\<in> committed (J n) \\<and>\n    ws (action_translation (J n) r')\n    \\<in> action_translation (J n) ` committed (J n)", "by(rule Suc)"], ["proof (state)\nthis:\n  justifying_ws (J n) r' \\<in> committed (J n) \\<and>\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "then"], ["proof (chain)\npicking this:\n  justifying_ws (J n) r' \\<in> committed (J n) \\<and>\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)", "obtain ws: \"ws (?\\<phi> n r') \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  justifying_ws (J n) r' \\<in> committed (J n) \\<and>\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. (ws (action_translation (J n) r')\n     \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "have r_conv_inv: \"r = inv_into (actions (?E (Suc n))) (?\\<phi> (Suc n)) (?\\<phi> n r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r')", "using \\<open>r \\<in> actions (?E (Suc n))\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r')", "unfolding r_r'[symmetric]"], ["proof (prove)\nusing this:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J (Suc n)) r)", "by(simp add: inv_into_f_f[OF injSn])"], ["proof (state)\nthis:\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with \\<open>r' \\<in> ?C n\\<close> r J \\<open>r' \\<in> read_actions (?E n)\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) justified_by J\n  r' \\<in> read_actions (justifying_exec (J n))\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')", "have ws_eq: \"?\\<phi> (Suc n) (?ws (Suc n) r) = ws (?\\<phi> n r')\""], ["proof (prove)\nusing this:\n  r' \\<in> committed (J n)\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) justified_by J\n  r' \\<in> read_actions (justifying_exec (J n))\n  r =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n    ws (action_translation (J n) r')", "by(simp add: Let_def write_seen_committed_def)"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with ws CnCSn"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')", "have \"?\\<phi> (Suc n) (?ws (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r) =\n  ws (action_translation (J n) r')\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"?ws (Suc n) r \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))", "by(subst (asm) inj_on_image_mem_iff[OF injSn C_sub_A wsSn])"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "moreover"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "from ws CnCSn"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "have \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "unfolding r_r'"], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r')\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J n) r')\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n 2. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "ultimately"], ["proof (chain)\npicking this:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by simp"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "case False"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "with r \\<open>r \\<in> ?C (Suc n)\\<close> J"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  P \\<turnstile> (E, ws) justified_by J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)", "have \"?\\<phi> (Suc n) (?ws (Suc n) r) \\<in> ?\\<phi> n ` ?C n\" \n        and \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  P \\<turnstile> (E, ws) justified_by J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n) &&&\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n)", "unfolding is_justified_by.simps Let_def committed_reads_see_committed_writes_def"], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n  is_commit_sequence E J \\<and>\n  justification_well_formed P J \\<and>\n  committed_subset_actions J \\<and>\n  happens_before_committed P E J \\<and>\n  sync_order_committed P E J \\<and>\n  value_written_committed P E J \\<and>\n  write_seen_committed ws J \\<and>\n  uncommitted_reads_see_hb P J \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n) \\<and>\n         ws (action_translation (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n)) \\<and>\n  external_actions_committed P J \\<and> wf_action_translations E J\n  action_translation (J (Suc n)) r\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n) &&&\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J n) ` committed (J n)", "by blast+"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "hence \"?\\<phi> (Suc n) (?ws (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\"\n        and \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n)) &&&\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "using CnCSn"], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J n) ` committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n)) &&&\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by blast+"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n    ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(simp add: inj_on_image_mem_iff[OF injSn C_sub_A wsSn])"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r \\<in> committed (J (Suc n)) \\<and>\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  justifying_ws (J n) r \\<in> committed (J n) \\<and>\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. justifying_ws (J n) r \\<in> committed (J n)\n 2. ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "thus ?thesis1 ?thesis2"], ["proof (prove)\nusing this:\n  justifying_ws (J n) r \\<in> committed (J n) \\<and>\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. justifying_ws (J n) r \\<in> committed (J n) &&&\n    ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "by simp_all"], ["proof (state)\nthis:\n  justifying_ws (J n) r \\<in> committed (J n)\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_justified_by_imp_is_weakly_justified_by:\n  assumes justified: \"P \\<turnstile> (E, ws) justified_by J\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) weakly_justified_by J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) weakly_justified_by J", "unfolding is_weakly_justified_by.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_commit_sequence E J \\<and>\n    justification_well_formed P J \\<and>\n    committed_subset_actions J \\<and>\n    happens_before_committed_weak P E ws J \\<and>\n    value_written_committed P E J \\<and>\n    write_seen_committed ws J \\<and>\n    uncommitted_reads_see_hb P J \\<and>\n    committed_reads_see_committed_writes_weak ws J \\<and>\n    wf_action_translations E J", "proof(intro conjI)"], ["proof (state)\ngoal (9 subgoals):\n 1. is_commit_sequence E J\n 2. justification_well_formed P J\n 3. committed_subset_actions J\n 4. happens_before_committed_weak P E ws J\n 5. value_written_committed P E J\n 6. write_seen_committed ws J\n 7. uncommitted_reads_see_hb P J\n 8. committed_reads_see_committed_writes_weak ws J\n 9. wf_action_translations E J", "let ?E = \"\\<lambda>n. justifying_exec (J n)\"\n    and ?ws = \"\\<lambda>n. justifying_ws (J n)\"\n    and ?C = \"\\<lambda>n. committed (J n)\"\n    and ?\\<phi> = \"\\<lambda>n. action_translation (J n)\""], ["proof (state)\ngoal (9 subgoals):\n 1. is_commit_sequence E J\n 2. justification_well_formed P J\n 3. committed_subset_actions J\n 4. happens_before_committed_weak P E ws J\n 5. value_written_committed P E J\n 6. write_seen_committed ws J\n 7. uncommitted_reads_see_hb P J\n 8. committed_reads_see_committed_writes_weak ws J\n 9. wf_action_translations E J", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "show \"is_commit_sequence E J\" \"justification_well_formed P J\" \"committed_subset_actions J\"\n    \"value_written_committed P E J\" \"write_seen_committed ws J\" \"uncommitted_reads_see_hb P J\"\n    \"wf_action_translations E J\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. (is_commit_sequence E J &&&\n     justification_well_formed P J &&& committed_subset_actions J) &&&\n    (value_written_committed P E J &&& write_seen_committed ws J) &&&\n    uncommitted_reads_see_hb P J &&& wf_action_translations E J", "by(simp_all)"], ["proof (state)\nthis:\n  is_commit_sequence E J\n  justification_well_formed P J\n  committed_subset_actions J\n  value_written_committed P E J\n  write_seen_committed ws J\n  uncommitted_reads_see_hb P J\n  wf_action_translations E J\n\ngoal (2 subgoals):\n 1. happens_before_committed_weak P E ws J\n 2. committed_reads_see_committed_writes_weak ws J", "show \"happens_before_committed_weak P E ws J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. happens_before_committed_weak P E ws J", "unfolding happens_before_committed_weak_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>r\\<in>read_actions (justifying_exec (J n)) \\<inter>\n                      committed (J n).\n          (P,E \\<turnstile> ws (action_translation (J n)\n                                 r) \\<le>hb action_translation (J n) r) =\n          (P,justifying_exec\n              (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                                  (action_translation (J n))\n                                  (ws (action_translation (J n)\n  r)) \\<le>hb r) \\<and>\n          \\<not> P,justifying_exec\n                    (J n) \\<turnstile> r \\<le>hb inv_into\n            (actions (justifying_exec (J n))) (action_translation (J n))\n            (ws (action_translation (J n) r))", "proof(intro strip conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "fix n r"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "assume \"r \\<in> read_actions (?E n) \\<inter> ?C n\""], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J n)) \\<inter> committed (J n)\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "hence read: \"r \\<in> read_actions (?E n)\" and committed: \"r \\<in> ?C n\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J n)) \\<inter> committed (J n)\n\ngoal (1 subgoal):\n 1. r \\<in> read_actions (justifying_exec (J n)) &&& r \\<in> committed (J n)", "by simp_all"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J n))\n  r \\<in> committed (J n)\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "with justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  r \\<in> read_actions (justifying_exec (J n))\n  r \\<in> committed (J n)", "have committed_ws: \"?ws n r \\<in> ?C n\"\n      and committed_ws': \"ws (?\\<phi> n r) \\<in> ?\\<phi> n ` ?C n\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  r \\<in> read_actions (justifying_exec (J n))\n  r \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. justifying_ws (J n) r \\<in> committed (J n) &&&\n    ws (action_translation (J n) r)\n    \\<in> action_translation (J n) ` committed (J n)", "by(rule justified_write_seen_hb_read_committed)+"], ["proof (state)\nthis:\n  justifying_ws (J n) r \\<in> committed (J n)\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from committed_ws'"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)", "obtain w where w: \"ws (?\\<phi> n r) = ?\\<phi> n w\"\n      and committed_w: \"w \\<in> ?C n\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r)\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>ws (action_translation (J n) r) =\n                 action_translation (J n) w;\n         w \\<in> committed (J n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ws (action_translation (J n) r) = action_translation (J n) w\n  w \\<in> committed (J n)\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from committed_w justified"], ["proof (chain)\npicking this:\n  w \\<in> committed (J n)\n  P \\<turnstile> (E, ws) justified_by J", "have \"w \\<in> actions (?E n)\""], ["proof (prove)\nusing this:\n  w \\<in> committed (J n)\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. w \\<in> actions (justifying_exec (J n))", "by(auto simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  w \\<in> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "moreover"], ["proof (state)\nthis:\n  w \\<in> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have \"inj_on (?\\<phi> n) (actions (?E n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. inj_on (action_translation (J n)) (actions (justifying_exec (J n)))", "by(auto simp add: wf_action_translations_def dest: wf_action_translation_on_inj_onD)"], ["proof (state)\nthis:\n  inj_on (action_translation (J n)) (actions (justifying_exec (J n)))\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "ultimately"], ["proof (chain)\npicking this:\n  w \\<in> actions (justifying_exec (J n))\n  inj_on (action_translation (J n)) (actions (justifying_exec (J n)))", "have w_def: \"w = inv_into (actions (?E n)) (?\\<phi> n) (ws (?\\<phi> n r))\""], ["proof (prove)\nusing this:\n  w \\<in> actions (justifying_exec (J n))\n  inj_on (action_translation (J n)) (actions (justifying_exec (J n)))\n\ngoal (1 subgoal):\n 1. w =\n    inv_into (actions (justifying_exec (J n))) (action_translation (J n))\n     (ws (action_translation (J n) r))", "by(simp_all add: w)"], ["proof (state)\nthis:\n  w =\n  inv_into (actions (justifying_exec (J n))) (action_translation (J n))\n   (ws (action_translation (J n) r))\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from committed committed_w"], ["proof (chain)\npicking this:\n  r \\<in> committed (J n)\n  w \\<in> committed (J n)", "have \"P,?E n \\<turnstile> w \\<le>hb r \\<longleftrightarrow> (happens_before P (?E n) |` ?C n) w r\""], ["proof (prove)\nusing this:\n  r \\<in> committed (J n)\n  w \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n    (happens_before P (justifying_exec (J n)) |` committed (J n)) w r", "by auto"], ["proof (state)\nthis:\n  (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) w r\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "also"], ["proof (state)\nthis:\n  (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) w r\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "have \"\\<dots> \\<longleftrightarrow> (inv_imageP (happens_before P E) (?\\<phi> n) |` ?C n) w r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (happens_before P (justifying_exec (J n)) |` committed (J n)) w r =\n    (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     w r", "using justified"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. (happens_before P (justifying_exec (J n)) |` committed (J n)) w r =\n    (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     w r", "by(simp add: happens_before_committed_def)"], ["proof (state)\nthis:\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) w r =\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   w r\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "also"], ["proof (state)\nthis:\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) w r =\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   w r\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "have \"\\<dots> \\<longleftrightarrow> P,E \\<turnstile> ?\\<phi> n w \\<le>hb ?\\<phi> n r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     w r =\n    (P,E \\<turnstile> action_translation (J n)\n                       w \\<le>hb action_translation (J n) r)", "using committed committed_w"], ["proof (prove)\nusing this:\n  r \\<in> committed (J n)\n  w \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     w r =\n    (P,E \\<turnstile> action_translation (J n)\n                       w \\<le>hb action_translation (J n) r)", "by auto"], ["proof (state)\nthis:\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   w r =\n  (P,E \\<turnstile> action_translation (J n)\n                     w \\<le>hb action_translation (J n) r)\n\ngoal (2 subgoals):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       (P,E \\<turnstile> ws (action_translation (J n)\n                              r) \\<le>hb action_translation (J n) r) =\n       (P,justifying_exec\n           (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                               (action_translation (J n))\n                               (ws (action_translation (J n) r)) \\<le>hb r)\n 2. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "finally"], ["proof (chain)\npicking this:\n  (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n  (P,E \\<turnstile> action_translation (J n)\n                     w \\<le>hb action_translation (J n) r)", "show \"P,E \\<turnstile> ws (?\\<phi> n r) \\<le>hb ?\\<phi> n r \\<longleftrightarrow> P,?E n \\<turnstile> inv_into (actions (?E n)) (?\\<phi> n) (ws (?\\<phi> n r)) \\<le>hb r\""], ["proof (prove)\nusing this:\n  (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n  (P,E \\<turnstile> action_translation (J n)\n                     w \\<le>hb action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> ws (action_translation (J n)\n                           r) \\<le>hb action_translation (J n) r) =\n    (P,justifying_exec\n        (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                            (action_translation (J n))\n                            (ws (action_translation (J n) r)) \\<le>hb r)", "unfolding w[symmetric]"], ["proof (prove)\nusing this:\n  (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) =\n  (P,E \\<turnstile> ws (action_translation (J n)\n                         r) \\<le>hb action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> ws (action_translation (J n)\n                           r) \\<le>hb action_translation (J n) r) =\n    (P,justifying_exec\n        (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                            (action_translation (J n))\n                            (ws (action_translation (J n) r)) \\<le>hb r)", "unfolding w_def"], ["proof (prove)\nusing this:\n  (P,justifying_exec\n      (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                          (action_translation (J n))\n                          (ws (action_translation (J n) r)) \\<le>hb r) =\n  (P,E \\<turnstile> ws (action_translation (J n)\n                         r) \\<le>hb action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> ws (action_translation (J n)\n                           r) \\<le>hb action_translation (J n) r) =\n    (P,justifying_exec\n        (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                            (action_translation (J n))\n                            (ws (action_translation (J n) r)) \\<le>hb r)", ".."], ["proof (state)\nthis:\n  (P,E \\<turnstile> ws (action_translation (J n)\n                         r) \\<le>hb action_translation (J n) r) =\n  (P,justifying_exec\n      (J n) \\<turnstile> inv_into (actions (justifying_exec (J n)))\n                          (action_translation (J n))\n                          (ws (action_translation (J n) r)) \\<le>hb r)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "have \"P,?E n\\<turnstile> r \\<le>hb w \\<longleftrightarrow> (happens_before P (?E n) |` ?C n) r w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n    (happens_before P (justifying_exec (J n)) |` committed (J n)) r w", "using committed committed_w"], ["proof (prove)\nusing this:\n  r \\<in> committed (J n)\n  w \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n    (happens_before P (justifying_exec (J n)) |` committed (J n)) r w", "by auto"], ["proof (state)\nthis:\n  (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) r w\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "also"], ["proof (state)\nthis:\n  (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) r w\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "have \"\\<dots> \\<longleftrightarrow> (inv_imageP (happens_before P E) (?\\<phi> n) |` ?C n) r w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (happens_before P (justifying_exec (J n)) |` committed (J n)) r w =\n    (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     r w", "using justified"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. (happens_before P (justifying_exec (J n)) |` committed (J n)) r w =\n    (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     r w", "by(simp add: happens_before_committed_def)"], ["proof (state)\nthis:\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) r w =\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   r w\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "also"], ["proof (state)\nthis:\n  (happens_before P (justifying_exec (J n)) |` committed (J n)) r w =\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   r w\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "have \"\\<dots> \\<longleftrightarrow> P,E \\<turnstile> ?\\<phi> n r \\<le>hb ws (?\\<phi> n r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     r w =\n    (P,E \\<turnstile> action_translation (J n)\n                       r \\<le>hb ws (action_translation (J n) r))", "using w committed committed_w"], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r) = action_translation (J n) w\n  r \\<in> committed (J n)\n  w \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. (inv_imageP (happens_before P E) (action_translation (J n)) |`\n     committed (J n))\n     r w =\n    (P,E \\<turnstile> action_translation (J n)\n                       r \\<le>hb ws (action_translation (J n) r))", "by auto"], ["proof (state)\nthis:\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   r w =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "also"], ["proof (state)\nthis:\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   r w =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "{"], ["proof (state)\nthis:\n  (inv_imageP (happens_before P E) (action_translation (J n)) |`\n   committed (J n))\n   r w =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from read"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J n))", "obtain ad al v where \"action_obs (?E n) r = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (J n)) r =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J n)) r = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "with justified committed"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  r \\<in> committed (J n)\n  action_obs (justifying_exec (J n)) r = NormalAction (ReadMem ad al v)", "obtain v' where obs': \"action_obs E (?\\<phi> n r) = NormalAction (ReadMem ad al v')\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  r \\<in> committed (J n)\n  action_obs (justifying_exec (J n)) r = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        action_obs E (action_translation (J n) r) =\n        NormalAction (ReadMem ad al v') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: wf_action_translations_def dest!: wf_action_translation_on_actionD)"], ["proof (state)\nthis:\n  action_obs E (action_translation (J n) r) =\n  NormalAction (ReadMem ad al v')\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "moreover"], ["proof (state)\nthis:\n  action_obs E (action_translation (J n) r) =\n  NormalAction (ReadMem ad al v')\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from committed justified"], ["proof (chain)\npicking this:\n  r \\<in> committed (J n)\n  P \\<turnstile> (E, ws) justified_by J", "have \"?\\<phi> n r \\<in> actions E\""], ["proof (prove)\nusing this:\n  r \\<in> committed (J n)\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. action_translation (J n) r \\<in> actions E", "by(auto simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation (J n) r \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "ultimately"], ["proof (chain)\npicking this:\n  action_obs E (action_translation (J n) r) =\n  NormalAction (ReadMem ad al v')\n  action_translation (J n) r \\<in> actions E", "have read': \"?\\<phi> n r \\<in> read_actions E\""], ["proof (prove)\nusing this:\n  action_obs E (action_translation (J n) r) =\n  NormalAction (ReadMem ad al v')\n  action_translation (J n) r \\<in> actions E\n\ngoal (1 subgoal):\n 1. action_translation (J n) r \\<in> read_actions E", "by(auto intro: read_actions.intros)"], ["proof (state)\nthis:\n  action_translation (J n) r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) \\<surd>", "have \"is_write_seen P E ws\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. is_write_seen P E ws", "by(rule wf_exec_is_write_seenD)"], ["proof (state)\nthis:\n  is_write_seen P E ws\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "from is_write_seenD[OF this read' obs']"], ["proof (chain)\npicking this:\n  ws (action_translation (J n) r) \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J n) r)) \\<and>\n  value_written P E (ws (action_translation (J n) r)) (ad, al) = v' \\<and>\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> action_translation (J n)\n                            r \\<le>so ws\n (action_translation (J n) r)) \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws (action_translation (J n) r) \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb action_translation (J n) r \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws (action_translation (J n) r) \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so action_translation (J n)\n                                    r) \\<longrightarrow>\n      a' = ws (action_translation (J n) r))", "have \"\\<not> P,E \\<turnstile> ?\\<phi> n r \\<le>hb ws (?\\<phi> n r)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J n) r) \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J n) r)) \\<and>\n  value_written P E (ws (action_translation (J n) r)) (ad, al) = v' \\<and>\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> action_translation (J n)\n                            r \\<le>so ws\n (action_translation (J n) r)) \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws (action_translation (J n) r) \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb action_translation (J n) r \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws (action_translation (J n) r) \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so action_translation (J n)\n                                    r) \\<longrightarrow>\n      a' = ws (action_translation (J n) r))\n\ngoal (1 subgoal):\n 1. \\<not> P,E \\<turnstile> action_translation (J n)\n                             r \\<le>hb ws (action_translation (J n) r)", "by simp"], ["proof (state)\nthis:\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "}"], ["proof (state)\nthis:\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. \\<And>n r.\n       r \\<in> read_actions (justifying_exec (J n)) \\<inter>\n               committed (J n) \\<Longrightarrow>\n       \\<not> P,justifying_exec\n                 (J n) \\<turnstile> r \\<le>hb inv_into\n         (actions (justifying_exec (J n))) (action_translation (J n))\n         (ws (action_translation (J n) r))", "ultimately"], ["proof (chain)\npicking this:\n  (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r)", "show \"\\<not> P,?E n \\<turnstile> r \\<le>hb inv_into (actions (?E n)) (?\\<phi> n) (ws (?\\<phi> n r))\""], ["proof (prove)\nusing this:\n  (P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. \\<not> P,justifying_exec\n              (J n) \\<turnstile> r \\<le>hb inv_into\n      (actions (justifying_exec (J n))) (action_translation (J n))\n      (ws (action_translation (J n) r))", "unfolding w_def"], ["proof (prove)\nusing this:\n  (P,justifying_exec\n      (J n) \\<turnstile> r \\<le>hb inv_into\n                                    (actions (justifying_exec (J n)))\n                                    (action_translation (J n))\n                                    (ws (action_translation (J n) r))) =\n  (P,E \\<turnstile> action_translation (J n)\n                     r \\<le>hb ws (action_translation (J n) r))\n  \\<not> P,E \\<turnstile> action_translation (J n)\n                           r \\<le>hb ws (action_translation (J n) r)\n\ngoal (1 subgoal):\n 1. \\<not> P,justifying_exec\n              (J n) \\<turnstile> r \\<le>hb inv_into\n      (actions (justifying_exec (J n))) (action_translation (J n))\n      (ws (action_translation (J n) r))", "by simp"], ["proof (state)\nthis:\n  \\<not> P,justifying_exec\n            (J n) \\<turnstile> r \\<le>hb inv_into\n    (actions (justifying_exec (J n))) (action_translation (J n))\n    (ws (action_translation (J n) r))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  happens_before_committed_weak P E ws J\n\ngoal (1 subgoal):\n 1. committed_reads_see_committed_writes_weak ws J", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have \"committed_reads_see_committed_writes ws J\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. committed_reads_see_committed_writes ws J", "by simp"], ["proof (state)\nthis:\n  committed_reads_see_committed_writes ws J\n\ngoal (1 subgoal):\n 1. committed_reads_see_committed_writes_weak ws J", "thus \"committed_reads_see_committed_writes_weak ws J\""], ["proof (prove)\nusing this:\n  committed_reads_see_committed_writes ws J\n\ngoal (1 subgoal):\n 1. committed_reads_see_committed_writes_weak ws J", "by(auto simp add: committed_reads_see_committed_writes_def committed_reads_see_committed_writes_weak_def)"], ["proof (state)\nthis:\n  committed_reads_see_committed_writes_weak ws J\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary legal_imp_weakly_legal_execution:\n  \"legal_execution P \\<E> Ews \\<Longrightarrow> weakly_legal_execution P \\<E> Ews\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P \\<E> Ews \\<Longrightarrow>\n    weakly_legal_execution P \\<E> Ews", "by(cases Ews)(auto 4 4 simp add: gen_legal_execution.simps simp del: is_justified_by.simps is_weakly_justified_by.simps intro: is_justified_by_imp_is_weakly_justified_by)"], ["", "lemma drop_0th_justifying_exec:\n  assumes \"P \\<turnstile> (E, ws) justified_by J\"\n  and wf: \"P \\<turnstile> (E', ws') \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) justified_by (J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\"\n  (is \"_ \\<turnstile> _ justified_by ?J\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>)", "using assms"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>)", "unfolding is_justified_by.simps is_commit_sequence_def\n  justification_well_formed_def committed_subset_actions_def happens_before_committed_def\n  sync_order_committed_def value_written_committed_def write_seen_committed_def uncommitted_reads_see_hb_def\n  committed_reads_see_committed_writes_def external_actions_committed_def wf_action_translations_def"], ["proof (prove)\nusing this:\n  (committed (J 0) = {} \\<and>\n   (\\<forall>n.\n       action_translation (J n) ` committed (J n)\n       \\<subseteq> action_translation (J (Suc n)) `\n                   committed (J (Suc n))) \\<and>\n   actions E =\n   (\\<Union>n. action_translation (J n) ` committed (J n))) \\<and>\n  (\\<forall>n.\n      P \\<turnstile> (justifying_exec (J n),\n                      justifying_ws (J n)) \\<surd>) \\<and>\n  (\\<forall>n.\n      committed (J n) \\<subseteq> actions (justifying_exec (J n))) \\<and>\n  (\\<forall>n.\n      happens_before P (justifying_exec (J n)) |` committed (J n) =\n      inv_imageP (happens_before P E) (action_translation (J n)) |`\n      committed (J n)) \\<and>\n  (\\<forall>n.\n      sync_order P (justifying_exec (J n)) |` committed (J n) =\n      inv_imageP (sync_order P E) (action_translation (J n)) |`\n      committed (J n)) \\<and>\n  (\\<forall>n.\n      \\<forall>w\\<in>write_actions (justifying_exec (J n)) \\<inter>\n                     committed (J n).\n         let w' = action_translation (J n) w\n         in \\<forall>adal\\<in>action_loc P E w'.\n               value_written P (justifying_exec (J n)) w adal =\n               value_written P E w' adal) \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J n)) \\<inter>\n                      committed (J n).\n         let r = action_translation (J n) r';\n             r'' =\n               inv_into (actions (justifying_exec (J (Suc n))))\n                (action_translation (J (Suc n))) r\n         in action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r'') =\n            ws r) \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         P,justifying_exec\n            (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\nr' \\<le>hb r') \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         let r = action_translation (J (Suc n)) r';\n             committed_n = action_translation (J n) ` committed (J n)\n         in r \\<in> committed_n \\<or>\n            action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')\n            \\<in> committed_n \\<and>\n            ws r \\<in> committed_n) \\<and>\n  (\\<forall>n.\n      \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n         \\<forall>a'\\<in>committed (J n).\n            P,justifying_exec\n               (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n            a \\<in> committed (J n)) \\<and>\n  (\\<forall>n. wf_action_translation E (J n))\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. (committed\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        0) =\n     {} \\<and>\n     (\\<forall>n.\n         action_translation\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n) `\n         committed\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n)\n         \\<subseteq> action_translation\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n)) `\n                     committed\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n))) \\<and>\n     actions E =\n     (\\<Union>n.\n         action_translation\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n) `\n         committed\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n))) \\<and>\n    (\\<forall>n.\n        P \\<turnstile> (justifying_exec\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n),\n                        justifying_ws\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n)) \\<surd>) \\<and>\n    (\\<forall>n.\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n        \\<subseteq> actions\n                     (justifying_exec\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         n))) \\<and>\n    (\\<forall>n.\n        happens_before P\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)) |`\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) =\n        inv_imageP (happens_before P E)\n         (action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)) |`\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)) \\<and>\n    (\\<forall>n.\n        sync_order P\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)) |`\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) =\n        inv_imageP (sync_order P E)\n         (action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)) |`\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)) \\<and>\n    (\\<forall>n.\n        \\<forall>w\\<in>write_actions\n                        (justifying_exec\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)) \\<inter>\n                       committed\n                        ((J(0 := \\<lparr>committed = {},\n                                    justifying_exec = E',\n                                    justifying_ws = ws',\n                                    action_translation = id\\<rparr>))\n                          n).\n           let w' = action_translation\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       n)\n                     w\n           in \\<forall>adal\\<in>action_loc P E w'.\n                 value_written P\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n))\n                  w adal =\n                 value_written P E w' adal) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)) \\<inter>\n                        committed\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n).\n           let r = action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)\n                    r';\n               r'' =\n                 inv_into\n                  (actions\n                    (justifying_exec\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n))))\n                  (action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\n                  r\n           in action_translation\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               (justifying_ws\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   (Suc n))\n                 r'') =\n              ws r) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))).\n           action_translation\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n            r'\n           \\<in> action_translation\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) `\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) \\<or>\n           P,justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)) \\<turnstile> justifying_ws\n ((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>))\n   (Suc n))\n r' \\<le>hb r') \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))) \\<inter>\n                        committed\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           (Suc n)).\n           let r = action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))\n                    r';\n               committed_n =\n                 action_translation\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) `\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\n           in r \\<in> committed_n \\<or>\n              action_translation\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               (justifying_ws\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   (Suc n))\n                 r')\n              \\<in> committed_n \\<and>\n              ws r \\<in> committed_n) \\<and>\n    (\\<forall>n.\n        \\<forall>a\\<in>external_actions\n                        (justifying_exec\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)).\n           \\<forall>a'\\<in>committed\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n).\n              P,justifying_exec\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n              a \\<in> committed\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         n)) \\<and>\n    (\\<forall>n.\n        wf_action_translation E\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n))", "proof(intro conjI strip)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> committed\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         0) =\n                      {}\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 3. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 8. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n)))\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))\n                           r'\n                          \\<in> action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) \\<or>\n                          P,justifying_exec\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n)) \\<turnstile> justifying_ws\n                ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                            justifying_ws = ws',\n                            action_translation = id\\<rparr>))\n                  (Suc n))\n                r' \\<le>hb r'\nA total of 13 subgoals...", "let ?E = \"\\<lambda>n. justifying_exec (?J n)\"\n    and ?\\<phi> = \"\\<lambda>n. action_translation (?J n)\"\n    and ?C = \"\\<lambda>n. committed (?J n)\"\n    and ?ws = \"\\<lambda>n. justifying_ws (?J n)\""], ["proof (state)\ngoal (13 subgoals):\n 1. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> committed\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         0) =\n                      {}\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 3. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 8. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n)))\\<rbrakk>\n        \\<Longrightarrow> action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))\n                           r'\n                          \\<in> action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) \\<or>\n                          P,justifying_exec\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n)) \\<turnstile> justifying_ws\n                ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                            justifying_ws = ws',\n                            action_translation = id\\<rparr>))\n                  (Suc n))\n                r' \\<le>hb r'\nA total of 13 subgoals...", "show \"?C 0 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. committed\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       0) =\n    {}", "by simp"], ["proof (state)\nthis:\n  committed\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0) =\n  {}\n\ngoal (12 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             action_translation\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              (justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r')\n                             \\<in> committed_n \\<and>\n                             ws r \\<in> committed_n\nA total of 12 subgoals...", "from assms"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>", "have C_0: \"committed (J 0) = {}\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. committed (J 0) = {}", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  committed (J 0) = {}\n\ngoal (12 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             action_translation\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              (justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r')\n                             \\<in> committed_n \\<and>\n                             ws r \\<in> committed_n\nA total of 12 subgoals...", "hence \"(\\<Union>n. ?\\<phi> n ` ?C n) = (\\<Union>n. action_translation (J n) ` committed (J n))\""], ["proof (prove)\nusing this:\n  committed (J 0) = {}\n\ngoal (1 subgoal):\n 1. (\\<Union>n.\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)) =\n    (\\<Union>n. action_translation (J n) ` committed (J n))", "by -(rule SUP_cong, simp_all)"], ["proof (state)\nthis:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (12 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             action_translation\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              (justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r')\n                             \\<in> committed_n \\<and>\n                             ws r \\<in> committed_n\nA total of 12 subgoals...", "also"], ["proof (state)\nthis:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (12 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             action_translation\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              (justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r')\n                             \\<in> committed_n \\<and>\n                             ws r \\<in> committed_n\nA total of 12 subgoals...", "have \"\\<dots> = actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E", "using assms"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E\n\ngoal (12 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 happens_before P (justifying_exec (J n)) |`\n                 committed (J n) =\n                 inv_imageP (happens_before P E)\n                  (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 sync_order P (justifying_exec (J n)) |` committed (J n) =\n                 inv_imageP (sync_order P E) (action_translation (J n)) |`\n                 committed (J n)) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r')\n                       \\<in> committed_n \\<and>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n.\n                 \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                    \\<forall>a'\\<in>committed (J n).\n                       P,justifying_exec\n                          (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                       a \\<in> committed (J n)) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             action_translation\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              (justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r')\n                             \\<in> committed_n \\<and>\n                             ws r \\<in> committed_n\nA total of 12 subgoals...", "finally"], ["proof (chain)\npicking this:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  actions E", "show \"actions E = (\\<Union>n. ?\\<phi> n ` ?C n)\""], ["proof (prove)\nusing this:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  actions E\n\ngoal (1 subgoal):\n 1. actions E =\n    (\\<Union>n.\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n))", ".."], ["proof (state)\nthis:\n  actions E =\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n))\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         a \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n         a' \\<in> committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n);\n         P,justifying_exec\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\nA total of 11 subgoals...", "fix n"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         a \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n         a' \\<in> committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n);\n         P,justifying_exec\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\nA total of 11 subgoals...", "{"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         a \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n         a' \\<in> committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n);\n         P,justifying_exec\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\nA total of 11 subgoals...", "fix r'"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         a \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n         a' \\<in> committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n);\n         P,justifying_exec\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\nA total of 11 subgoals...", "assume \"r' \\<in> read_actions (?E (Suc n))\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n\ngoal (11 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 10. \\<And>n a a'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         a \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n         a' \\<in> committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n);\n         P,justifying_exec\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n        \\<Longrightarrow> a \\<in> committed\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\nA total of 11 subgoals...", "thus \"?\\<phi> (Suc n) r' \\<in> ?\\<phi> n ` ?C n \\<or> P,?E (Suc n) \\<turnstile> ?ws (Suc n) r' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n\ngoal (1 subgoal):\n 1. action_translation\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n))\n     r'\n    \\<in> action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<or>\n    P,justifying_exec\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         (Suc n)) \\<turnstile> justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r' \\<le>hb r'", "using assms"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n))\n     r'\n    \\<in> action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<or>\n    P,justifying_exec\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         (Suc n)) \\<turnstile> justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r' \\<le>hb r'", "by(auto dest!: bspec simp add: uncommitted_reads_see_hb_def is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   r'\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              r' \\<le>hb r'\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "}"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<Longrightarrow>\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   ?r'2\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "{"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<Longrightarrow>\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   ?r'2\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "fix r'"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "assume r': \"r' \\<in> read_actions (?E (Suc n)) \\<inter> ?C (Suc n)\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)", "using r'"], ["proof (prove)\nusing this:\n  n = 0\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)", "by simp"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"action_translation (J 1) r' \\<in> action_translation (J 0) ` committed (J 0) \\<or> \n             ws (action_translation (J 1) r') \\<in> action_translation (J 0) ` committed (J 0)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n\ngoal (1 subgoal):\n 1. action_translation (J 1) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J 1) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "using assms"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation (J 1) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J 1) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "unfolding One_nat_def is_justified_by.simps Let_def committed_reads_see_committed_writes_def"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J (Suc 0))) \\<inter>\n           committed (J (Suc 0))\n  is_commit_sequence E J \\<and>\n  justification_well_formed P J \\<and>\n  committed_subset_actions J \\<and>\n  happens_before_committed P E J \\<and>\n  sync_order_committed P E J \\<and>\n  value_written_committed P E J \\<and>\n  write_seen_committed ws J \\<and>\n  uncommitted_reads_see_hb P J \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n) \\<and>\n         ws (action_translation (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n)) \\<and>\n  external_actions_committed P J \\<and> wf_action_translations E J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc 0)) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J (Suc 0)) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "by(metis (lifting))"], ["proof (state)\nthis:\n  action_translation (J 1) r'\n  \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n  ws (action_translation (J 1) r')\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  action_translation (J 1) r'\n  \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n  ws (action_translation (J 1) r')\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. False", "unfolding C_0"], ["proof (prove)\nusing this:\n  action_translation (J 1) r' \\<in> action_translation (J 0) ` {} \\<or>\n  ws (action_translation (J 1) r') \\<in> action_translation (J 0) ` {}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or>\n                            action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r')\n                            \\<in> committed_n \\<and>\n                            ws r \\<in> committed_n\n 9. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     happens_before P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (happens_before P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     sync_order P (justifying_exec (J n)) |`\n                     committed (J n) =\n                     inv_imageP (sync_order P E)\n                      (action_translation (J n)) |`\n                     committed (J n)) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r')\n                           \\<in> committed_n \\<and>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n.\n                     \\<forall>a\\<in>external_actions\n                                     (justifying_exec (J n)).\n                        \\<forall>a'\\<in>committed (J n).\n                           P,justifying_exec\n                              (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                           a \\<in> committed (J n)) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "thus \"let r = ?\\<phi> (Suc n) r'; committed_n = ?\\<phi> n ` ?C n\n       in r \\<in> committed_n \\<or>\n          (?\\<phi> (Suc n) (?ws (Suc n) r') \\<in> committed_n \\<and> ws r \\<in> committed_n)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. let r = action_translation\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               (Suc n))\n             r';\n        committed_n =\n          action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)\n    in r \\<in> committed_n \\<or>\n       action_translation\n        ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                    justifying_ws = ws', action_translation = id\\<rparr>))\n          (Suc n))\n        (justifying_ws\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            (Suc n))\n          r')\n       \\<in> committed_n \\<and>\n       ws r \\<in> committed_n", "using assms r'"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (1 subgoal):\n 1. let r = action_translation\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               (Suc n))\n             r';\n        committed_n =\n          action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)\n    in r \\<in> committed_n \\<or>\n       action_translation\n        ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                    justifying_ws = ws', action_translation = id\\<rparr>))\n          (Suc n))\n        (justifying_ws\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            (Suc n))\n          r')\n       \\<in> committed_n \\<and>\n       ws r \\<in> committed_n", "by(simp add: committed_reads_see_committed_writes_def)"], ["proof (state)\nthis:\n  let r = action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))\n           r';\n      committed_n =\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n  in r \\<in> committed_n \\<or>\n     action_translation\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        (Suc n))\n      (justifying_ws\n        ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                    justifying_ws = ws', action_translation = id\\<rparr>))\n          (Suc n))\n        r')\n     \\<in> committed_n \\<and>\n     ws r \\<in> committed_n\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "}"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<inter>\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           (Suc n)) \\<Longrightarrow>\n  let r = action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))\n           ?r'2;\n      committed_n =\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n  in r \\<in> committed_n \\<or>\n     action_translation\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        (Suc n))\n      (justifying_ws\n        ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                    justifying_ws = ws', action_translation = id\\<rparr>))\n          (Suc n))\n        ?r'2)\n     \\<in> committed_n \\<and>\n     ws r \\<in> committed_n\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "{"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<inter>\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           (Suc n)) \\<Longrightarrow>\n  let r = action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))\n           ?r'2;\n      committed_n =\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n  in r \\<in> committed_n \\<or>\n     action_translation\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        (Suc n))\n      (justifying_ws\n        ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                    justifying_ws = ws', action_translation = id\\<rparr>))\n          (Suc n))\n        ?r'2)\n     \\<in> committed_n \\<and>\n     ws r \\<in> committed_n\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "fix a a'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "assume \"a \\<in> external_actions (?E n)\" \n      and \"a' \\<in> ?C n\" \"P,?E n \\<turnstile> a \\<le>hb a'\""], ["proof (state)\nthis:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "moreover"], ["proof (state)\nthis:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "hence \"n > 0\""], ["proof (prove)\nusing this:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. 0 < n", "by(simp split: if_split_asm)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n a a'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        a \\<in> external_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n));\n        a' \\<in> committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n);\n        P,justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<turnstile> a \\<le>hb a'\\<rbrakk>\n       \\<Longrightarrow> a \\<in> committed\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n  0 < n", "show \"a \\<in> ?C n\""], ["proof (prove)\nusing this:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n  0 < n\n\ngoal (1 subgoal):\n 1. a \\<in> committed\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n)", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> external_actions\n           (justifying_exec\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n))\n  a' \\<in> committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              n)\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n) \\<turnstile> a \\<le>hb a'\n  0 < n\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. a \\<in> committed\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               n)", "by(simp add: external_actions_committed_def) blast"], ["proof (state)\nthis:\n  a \\<in> committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2\n           \\<in> external_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n));\n   ?a'2\n   \\<in> committed\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n);\n   P,justifying_exec\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        n) \\<turnstile> ?a2 \\<le>hb ?a'2\\<rbrakk>\n  \\<Longrightarrow> ?a2\n                    \\<in> committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "from assms"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>", "have \"wf_action_translation E (?J 0)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       0)", "by(simp add: wf_action_translations_def wf_action_translation_on_def)"], ["proof (state)\nthis:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "thus \"wf_action_translation E (?J n)\""], ["proof (prove)\nusing this:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n)", "using assms"], ["proof (prove)\nusing this:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n)", "by(simp add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     n)\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> happens_before P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (happens_before P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> sync_order P\n                          (justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) =\n                         inv_imageP (sync_order P E)\n                          (action_translation\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              n)) |`\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    happens_before P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (happens_before P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    sync_order P (justifying_exec (J n)) |`\n                    committed (J n) =\n                    inv_imageP (sync_order P E)\n                     (action_translation (J n)) |`\n                    committed (J n)) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r')\n                          \\<in> committed_n \\<and>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n.\n                    \\<forall>a\\<in>external_actions (justifying_exec (J n)).\n                       \\<forall>a'\\<in>committed (J n).\n                          P,justifying_exec\n                             (J n) \\<turnstile> a \\<le>hb a' \\<longrightarrow>\n                          a \\<in> committed (J n)) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r", "qed auto"], ["", "lemma drop_0th_weakly_justifying_exec:\n  assumes \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and wf: \"P \\<turnstile> (E', ws') \\<surd>\"\n  shows \"P \\<turnstile> (E, ws) weakly_justified_by (J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\"\n  (is \"_ \\<turnstile> _ weakly_justified_by ?J\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) weakly_justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>)", "using assms"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) weakly_justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>)", "unfolding is_weakly_justified_by.simps is_commit_sequence_def\n  justification_well_formed_def committed_subset_actions_def happens_before_committed_weak_def\n  value_written_committed_def write_seen_committed_def uncommitted_reads_see_hb_def\n  committed_reads_see_committed_writes_weak_def external_actions_committed_def wf_action_translations_def"], ["proof (prove)\nusing this:\n  (committed (J 0) = {} \\<and>\n   (\\<forall>n.\n       action_translation (J n) ` committed (J n)\n       \\<subseteq> action_translation (J (Suc n)) `\n                   committed (J (Suc n))) \\<and>\n   actions E =\n   (\\<Union>n. action_translation (J n) ` committed (J n))) \\<and>\n  (\\<forall>n.\n      P \\<turnstile> (justifying_exec (J n),\n                      justifying_ws (J n)) \\<surd>) \\<and>\n  (\\<forall>n.\n      committed (J n) \\<subseteq> actions (justifying_exec (J n))) \\<and>\n  (\\<forall>n.\n      \\<forall>r\\<in>read_actions (justifying_exec (J n)) \\<inter>\n                     committed (J n).\n         let r' = action_translation (J n) r; w' = ws r';\n             w = inv_into (actions (justifying_exec (J n)))\n                  (action_translation (J n)) w'\n         in (P,E \\<turnstile> w' \\<le>hb r') =\n            (P,justifying_exec (J n) \\<turnstile> w \\<le>hb r) \\<and>\n            \\<not> P,justifying_exec (J n) \\<turnstile> r \\<le>hb w) \\<and>\n  (\\<forall>n.\n      \\<forall>w\\<in>write_actions (justifying_exec (J n)) \\<inter>\n                     committed (J n).\n         let w' = action_translation (J n) w\n         in \\<forall>adal\\<in>action_loc P E w'.\n               value_written P (justifying_exec (J n)) w adal =\n               value_written P E w' adal) \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J n)) \\<inter>\n                      committed (J n).\n         let r = action_translation (J n) r';\n             r'' =\n               inv_into (actions (justifying_exec (J (Suc n))))\n                (action_translation (J (Suc n))) r\n         in action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r'') =\n            ws r) \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         P,justifying_exec\n            (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\nr' \\<le>hb r') \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         let r = action_translation (J (Suc n)) r';\n             committed_n = action_translation (J n) ` committed (J n)\n         in r \\<in> committed_n \\<or> ws r \\<in> committed_n) \\<and>\n  (\\<forall>n. wf_action_translation E (J n))\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. (committed\n      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                  justifying_ws = ws', action_translation = id\\<rparr>))\n        0) =\n     {} \\<and>\n     (\\<forall>n.\n         action_translation\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n) `\n         committed\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n)\n         \\<subseteq> action_translation\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n)) `\n                     committed\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n))) \\<and>\n     actions E =\n     (\\<Union>n.\n         action_translation\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n) `\n         committed\n          ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                      justifying_ws = ws', action_translation = id\\<rparr>))\n            n))) \\<and>\n    (\\<forall>n.\n        P \\<turnstile> (justifying_exec\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n),\n                        justifying_ws\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n)) \\<surd>) \\<and>\n    (\\<forall>n.\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n        \\<subseteq> actions\n                     (justifying_exec\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         n))) \\<and>\n    (\\<forall>n.\n        \\<forall>r\\<in>read_actions\n                        (justifying_exec\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)) \\<inter>\n                       committed\n                        ((J(0 := \\<lparr>committed = {},\n                                    justifying_exec = E',\n                                    justifying_ws = ws',\n                                    action_translation = id\\<rparr>))\n                          n).\n           let r' = action_translation\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       n)\n                     r;\n               w' = ws r';\n               w = inv_into\n                    (actions\n                      (justifying_exec\n                        ((J(0 := \\<lparr>committed = {},\n                                    justifying_exec = E',\n                                    justifying_ws = ws',\n                                    action_translation = id\\<rparr>))\n                          n)))\n                    (action_translation\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        n))\n                    w'\n           in (P,E \\<turnstile> w' \\<le>hb r') =\n              (P,justifying_exec\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) \\<turnstile> w \\<le>hb r) \\<and>\n              \\<not> P,justifying_exec\n                        ((J(0 := \\<lparr>committed = {},\n                                    justifying_exec = E',\n                                    justifying_ws = ws',\n                                    action_translation = id\\<rparr>))\n                          n) \\<turnstile> r \\<le>hb w) \\<and>\n    (\\<forall>n.\n        \\<forall>w\\<in>write_actions\n                        (justifying_exec\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)) \\<inter>\n                       committed\n                        ((J(0 := \\<lparr>committed = {},\n                                    justifying_exec = E',\n                                    justifying_ws = ws',\n                                    action_translation = id\\<rparr>))\n                          n).\n           let w' = action_translation\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       n)\n                     w\n           in \\<forall>adal\\<in>action_loc P E w'.\n                 value_written P\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n))\n                  w adal =\n                 value_written P E w' adal) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)) \\<inter>\n                        committed\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           n).\n           let r = action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)\n                    r';\n               r'' =\n                 inv_into\n                  (actions\n                    (justifying_exec\n                      ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                  justifying_ws = ws',\n                                  action_translation = id\\<rparr>))\n                        (Suc n))))\n                  (action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\n                  r\n           in action_translation\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               (justifying_ws\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   (Suc n))\n                 r'') =\n              ws r) \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))).\n           action_translation\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n            r'\n           \\<in> action_translation\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) `\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) \\<or>\n           P,justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)) \\<turnstile> justifying_ws\n ((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n             action_translation = id\\<rparr>))\n   (Suc n))\n r' \\<le>hb r') \\<and>\n    (\\<forall>n.\n        \\<forall>r'\\<in>read_actions\n                         (justifying_exec\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             (Suc n))) \\<inter>\n                        committed\n                         ((J(0 := \\<lparr>committed = {},\n                                     justifying_exec = E',\n                                     justifying_ws = ws',\n                                     action_translation = id\\<rparr>))\n                           (Suc n)).\n           let r = action_translation\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))\n                    r';\n               committed_n =\n                 action_translation\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n) `\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\n           in r \\<in> committed_n \\<or> ws r \\<in> committed_n) \\<and>\n    (\\<forall>n.\n        wf_action_translation E\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n))", "proof(intro conjI strip)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> committed\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         0) =\n                      {}\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 3. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 6. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             ws r \\<in> committed_n\nA total of 11 subgoals...", "let ?E = \"\\<lambda>n. justifying_exec (?J n)\"\n    and ?\\<phi> = \"\\<lambda>n. action_translation (?J n)\"\n    and ?C = \"\\<lambda>n. committed (?J n)\"\n    and ?ws = \"\\<lambda>n. justifying_ws (?J n)\""], ["proof (state)\ngoal (11 subgoals):\n 1. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> committed\n                       ((J(0 := \\<lparr>committed = {},\n                                   justifying_exec = E',\n                                   justifying_ws = ws',\n                                   action_translation = id\\<rparr>))\n                         0) =\n                      {}\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 3. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 5. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 6. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 7. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 10. \\<And>n r'.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>;\n         r' \\<in> read_actions\n                   (justifying_exec\n                     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                 justifying_ws = ws',\n                                 action_translation = id\\<rparr>))\n                       (Suc n))) \\<inter>\n                  committed\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     (Suc n))\\<rbrakk>\n        \\<Longrightarrow> let r = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     (Suc n))\n                                   r';\n                              committed_n =\n                                action_translation\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n) `\n                                committed\n                                 ((J(0 :=\n \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                   n)\n                          in r \\<in> committed_n \\<or>\n                             ws r \\<in> committed_n\nA total of 11 subgoals...", "show \"?C 0 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. committed\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       0) =\n    {}", "by simp"], ["proof (state)\nthis:\n  committed\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0) =\n  {}\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "from assms"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>", "have C_0: \"committed (J 0) = {}\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. committed (J 0) = {}", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  committed (J 0) = {}\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "hence \"(\\<Union>n. ?\\<phi> n ` ?C n) = (\\<Union>n. action_translation (J n) ` committed (J n))\""], ["proof (prove)\nusing this:\n  committed (J 0) = {}\n\ngoal (1 subgoal):\n 1. (\\<Union>n.\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)) =\n    (\\<Union>n. action_translation (J n) ` committed (J n))", "by -(rule SUP_cong, simp_all)"], ["proof (state)\nthis:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "also"], ["proof (state)\nthis:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "have \"\\<dots> = actions E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E", "using assms"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  (\\<Union>n. action_translation (J n) ` committed (J n)) = actions E\n\ngoal (10 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<lbrakk>(committed (J 0) = {} \\<and>\n              (\\<forall>n.\n                  action_translation (J n) ` committed (J n)\n                  \\<subseteq> action_translation (J (Suc n)) `\n                              committed (J (Suc n))) \\<and>\n              actions E =\n              (\\<Union>n.\n                  action_translation (J n) ` committed (J n))) \\<and>\n             (\\<forall>n.\n                 P \\<turnstile> (justifying_exec (J n),\n                                 justifying_ws (J n)) \\<surd>) \\<and>\n             (\\<forall>n.\n                 committed (J n)\n                 \\<subseteq> actions (justifying_exec (J n))) \\<and>\n             (\\<forall>n.\n                 \\<forall>r\\<in>read_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let r' = action_translation (J n) r; w' = ws r';\n                        w = inv_into (actions (justifying_exec (J n)))\n                             (action_translation (J n)) w'\n                    in (P,E \\<turnstile> w' \\<le>hb r') =\n                       (P,justifying_exec\n                           (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                       \\<not> P,justifying_exec\n                                 (J n) \\<turnstile> r \\<le>hb w) \\<and>\n             (\\<forall>n.\n                 \\<forall>w\\<in>write_actions\n                                 (justifying_exec (J n)) \\<inter>\n                                committed (J n).\n                    let w' = action_translation (J n) w\n                    in \\<forall>adal\\<in>action_loc P E w'.\n                          value_written P (justifying_exec (J n)) w adal =\n                          value_written P E w' adal) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J n)) \\<inter>\n                                 committed (J n).\n                    let r = action_translation (J n) r';\n                        r'' =\n                          inv_into (actions (justifying_exec (J (Suc n))))\n                           (action_translation (J (Suc n))) r\n                    in action_translation (J (Suc n))\n                        (justifying_ws (J (Suc n)) r'') =\n                       ws r) \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))).\n                    action_translation (J (Suc n)) r'\n                    \\<in> action_translation (J n) ` committed (J n) \\<or>\n                    P,justifying_exec\n                       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n           r' \\<le>hb r') \\<and>\n             (\\<forall>n.\n                 \\<forall>r'\\<in>read_actions\n                                  (justifying_exec (J (Suc n))) \\<inter>\n                                 committed (J (Suc n)).\n                    let r = action_translation (J (Suc n)) r';\n                        committed_n =\n                          action_translation (J n) ` committed (J n)\n                    in r \\<in> committed_n \\<or>\n                       ws r \\<in> committed_n) \\<and>\n             (\\<forall>n. wf_action_translation E (J n));\n     P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> actions E =\n                      (\\<Union>n.\n                          action_translation\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n) `\n                          committed\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n))\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 4. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 5. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 6. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 9. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 10. \\<And>n.\n        \\<lbrakk>(committed (J 0) = {} \\<and>\n                  (\\<forall>n.\n                      action_translation (J n) ` committed (J n)\n                      \\<subseteq> action_translation (J (Suc n)) `\n                                  committed (J (Suc n))) \\<and>\n                  actions E =\n                  (\\<Union>n.\n                      action_translation (J n) ` committed (J n))) \\<and>\n                 (\\<forall>n.\n                     P \\<turnstile> (justifying_exec (J n),\n                                     justifying_ws (J n)) \\<surd>) \\<and>\n                 (\\<forall>n.\n                     committed (J n)\n                     \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let r' = action_translation (J n) r; w' = ws r';\n                            w = inv_into (actions (justifying_exec (J n)))\n                                 (action_translation (J n)) w'\n                        in (P,E \\<turnstile> w' \\<le>hb r') =\n                           (P,justifying_exec\n                               (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                           \\<not> P,justifying_exec\n                                     (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                 (\\<forall>n.\n                     \\<forall>w\\<in>write_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                        let w' = action_translation (J n) w\n                        in \\<forall>adal\\<in>action_loc P E w'.\n                              value_written P (justifying_exec (J n)) w\n                               adal =\n                              value_written P E w' adal) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J n)) \\<inter>\n                                     committed (J n).\n                        let r = action_translation (J n) r';\n                            r'' =\n                              inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n))) r\n                        in action_translation (J (Suc n))\n                            (justifying_ws (J (Suc n)) r'') =\n                           ws r) \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))).\n                        action_translation (J (Suc n)) r'\n                        \\<in> action_translation (J n) `\n                              committed (J n) \\<or>\n                        P,justifying_exec\n                           (J (Suc n)) \\<turnstile> justifying_ws\n               (J (Suc n)) r' \\<le>hb r') \\<and>\n                 (\\<forall>n.\n                     \\<forall>r'\\<in>read_actions\n(justifying_exec (J (Suc n))) \\<inter>\n                                     committed (J (Suc n)).\n                        let r = action_translation (J (Suc n)) r';\n                            committed_n =\n                              action_translation (J n) ` committed (J n)\n                        in r \\<in> committed_n \\<or>\n                           ws r \\<in> committed_n) \\<and>\n                 (\\<forall>n. wf_action_translation E (J n));\n         P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n        \\<Longrightarrow> wf_action_translation E\n                           ((J(0 := \\<lparr>committed = {},\n justifying_exec = E', justifying_ws = ws',\n action_translation = id\\<rparr>))\n                             n)", "finally"], ["proof (chain)\npicking this:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  actions E", "show \"actions E = (\\<Union>n. ?\\<phi> n ` ?C n)\""], ["proof (prove)\nusing this:\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n)) =\n  actions E\n\ngoal (1 subgoal):\n 1. actions E =\n    (\\<Union>n.\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n))", ".."], ["proof (state)\nthis:\n  actions E =\n  (\\<Union>n.\n      action_translation\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n) `\n      committed\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         n))\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "fix n"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "{"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "fix r'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "assume \"r' \\<in> read_actions (?E (Suc n))\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n\ngoal (9 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            (Suc n))\n                          r'\n                         \\<in> action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<or>\n                         P,justifying_exec\n                            ((J(0 := \\<lparr>committed = {},\n  justifying_exec = E', justifying_ws = ws',\n  action_translation = id\\<rparr>))\n                              (Suc n)) \\<turnstile> justifying_ws\n               ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                           justifying_ws = ws',\n                           action_translation = id\\<rparr>))\n                 (Suc n))\n               r' \\<le>hb r'\n 8. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 9. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "thus \"?\\<phi> (Suc n) r' \\<in> ?\\<phi> n ` ?C n \\<or> P,?E (Suc n) \\<turnstile> ?ws (Suc n) r' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n\ngoal (1 subgoal):\n 1. action_translation\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n))\n     r'\n    \\<in> action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<or>\n    P,justifying_exec\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         (Suc n)) \\<turnstile> justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r' \\<le>hb r'", "using assms"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n)))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n))\n     r'\n    \\<in> action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) \\<or>\n    P,justifying_exec\n       ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                   justifying_ws = ws', action_translation = id\\<rparr>))\n         (Suc n)) \\<turnstile> justifying_ws\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  (Suc n))\n                                r' \\<le>hb r'", "by(auto dest!: bspec simp add: uncommitted_reads_see_hb_def is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   r'\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              r' \\<le>hb r'\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "}"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<Longrightarrow>\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   ?r'2\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "{"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<Longrightarrow>\n  action_translation\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     (Suc n))\n   ?r'2\n  \\<in> action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) \\<or>\n  P,justifying_exec\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       (Suc n)) \\<turnstile> justifying_ws\n                              ((J(0 := \\<lparr>committed = {},\n    justifying_exec = E', justifying_ws = ws',\n    action_translation = id\\<rparr>))\n                                (Suc n))\n                              ?r'2 \\<le>hb ?r'2\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "fix r'"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "assume r': \"r' \\<in> read_actions (?E (Suc n)) \\<inter> ?C (Suc n)\""], ["proof (state)\nthis:\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)", "using r'"], ["proof (prove)\nusing this:\n  n = 0\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)", "by simp"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"action_translation (J 1) r' \\<in> action_translation (J 0) ` committed (J 0) \\<or> \n             ws (action_translation (J 1) r') \\<in> action_translation (J 0) ` committed (J 0)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n\ngoal (1 subgoal):\n 1. action_translation (J 1) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J 1) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "using assms"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J 1)) \\<inter> committed (J 1)\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation (J 1) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J 1) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "unfolding One_nat_def is_weakly_justified_by.simps Let_def committed_reads_see_committed_writes_weak_def"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J (Suc 0))) \\<inter>\n           committed (J (Suc 0))\n  is_commit_sequence E J \\<and>\n  justification_well_formed P J \\<and>\n  committed_subset_actions J \\<and>\n  happens_before_committed_weak P E ws J \\<and>\n  value_written_committed P E J \\<and>\n  write_seen_committed ws J \\<and>\n  uncommitted_reads_see_hb P J \\<and>\n  (\\<forall>n.\n      \\<forall>r'\\<in>read_actions (justifying_exec (J (Suc n))) \\<inter>\n                      committed (J (Suc n)).\n         action_translation (J (Suc n)) r'\n         \\<in> action_translation (J n) ` committed (J n) \\<or>\n         ws (action_translation (J (Suc n)) r')\n         \\<in> action_translation (J n) ` committed (J n)) \\<and>\n  wf_action_translations E J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc 0)) r'\n    \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n    ws (action_translation (J (Suc 0)) r')\n    \\<in> action_translation (J 0) ` committed (J 0)", "by(metis (lifting))"], ["proof (state)\nthis:\n  action_translation (J 1) r'\n  \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n  ws (action_translation (J 1) r')\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  action_translation (J 1) r'\n  \\<in> action_translation (J 0) ` committed (J 0) \\<or>\n  ws (action_translation (J 1) r')\n  \\<in> action_translation (J 0) ` committed (J 0)\n\ngoal (1 subgoal):\n 1. False", "unfolding C_0"], ["proof (prove)\nusing this:\n  action_translation (J 1) r' \\<in> action_translation (J 0) ` {} \\<or>\n  ws (action_translation (J 1) r') \\<in> action_translation (J 0) ` {}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      (Suc n))) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    (Suc n))\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n))\n                                  r';\n                             committed_n =\n                               action_translation\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) `\n                               committed\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n)\n                         in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n 8. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "thus \"let r = ?\\<phi> (Suc n) r'; committed_n = ?\\<phi> n ` ?C n\n       in r \\<in> committed_n \\<or> ws r \\<in> committed_n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. let r = action_translation\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               (Suc n))\n             r';\n        committed_n =\n          action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)\n    in r \\<in> committed_n \\<or> ws r \\<in> committed_n", "using assms r'"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n  r' \\<in> read_actions\n            (justifying_exec\n              ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                          justifying_ws = ws',\n                          action_translation = id\\<rparr>))\n                (Suc n))) \\<inter>\n           committed\n            ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                        justifying_ws = ws',\n                        action_translation = id\\<rparr>))\n              (Suc n))\n\ngoal (1 subgoal):\n 1. let r = action_translation\n             ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                         justifying_ws = ws',\n                         action_translation = id\\<rparr>))\n               (Suc n))\n             r';\n        committed_n =\n          action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n) `\n          committed\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             n)\n    in r \\<in> committed_n \\<or> ws r \\<in> committed_n", "by(simp add: committed_reads_see_committed_writes_weak_def)"], ["proof (state)\nthis:\n  let r = action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))\n           r';\n      committed_n =\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n  in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "}"], ["proof (state)\nthis:\n  ?r'2\n  \\<in> read_actions\n         (justifying_exec\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))) \\<inter>\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           (Suc n)) \\<Longrightarrow>\n  let r = action_translation\n           ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                       justifying_ws = ws',\n                       action_translation = id\\<rparr>))\n             (Suc n))\n           ?r'2;\n      committed_n =\n        action_translation\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n) `\n        committed\n         ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                     justifying_ws = ws', action_translation = id\\<rparr>))\n           n)\n  in r \\<in> committed_n \\<or> ws r \\<in> committed_n\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "from assms"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>", "have \"wf_action_translation E (?J 0)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       0)", "by(simp add: wf_action_translations_def wf_action_translation_on_def)"], ["proof (state)\nthis:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r\n 7. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> wf_action_translation E\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)", "thus \"wf_action_translation E (?J n)\""], ["proof (prove)\nusing this:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n)", "using assms"], ["proof (prove)\nusing this:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     0)\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. wf_action_translation E\n     ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                 justifying_ws = ws', action_translation = id\\<rparr>))\n       n)", "by(simp add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n               justifying_ws = ws', action_translation = id\\<rparr>))\n     n)\n\ngoal (6 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> action_translation\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n) `\n                         committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> action_translation\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n)) `\n                                     committed\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  (Suc n))\n 2. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (justifying_exec\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n),\n   justifying_ws\n    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                justifying_ws = ws', action_translation = id\\<rparr>))\n      n)) \\<surd>\n 3. \\<And>n.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>\\<rbrakk>\n       \\<Longrightarrow> committed\n                          ((J(0 := \\<lparr>committed = {},\njustifying_exec = E', justifying_ws = ws', action_translation = id\\<rparr>))\n                            n)\n                         \\<subseteq> actions\n(justifying_exec\n  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n              justifying_ws = ws', action_translation = id\\<rparr>))\n    n))\n 4. \\<And>n r.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r \\<in> read_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let r' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   r;\n                             w' = ws r';\n                             w = inv_into\n                                  (actions\n                                    (justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n)))\n                                  (action_translation\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\nn))\n                                  w'\n                         in (P,E \\<turnstile> w' \\<le>hb r') =\n                            (P,justifying_exec\n                                ((J(0 :=\n\\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                                  n) \\<turnstile> w \\<le>hb r) \\<and>\n                            \\<not> P,justifying_exec\n((J(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n            action_translation = id\\<rparr>))\n  n) \\<turnstile> r \\<le>hb w\n 5. \\<And>n w.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        w \\<in> write_actions\n                 (justifying_exec\n                   ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                               justifying_ws = ws',\n                               action_translation = id\\<rparr>))\n                     n)) \\<inter>\n                committed\n                 ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                             justifying_ws = ws',\n                             action_translation = id\\<rparr>))\n                   n)\\<rbrakk>\n       \\<Longrightarrow> let w' = action_translation\n                                   ((J(0 :=\n   \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n      action_translation = id\\<rparr>))\n                                     n)\n                                   w\n                         in \\<forall>adal\\<in>action_loc P E w'.\n                               value_written P\n                                (justifying_exec\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n))\n                                w adal =\n                               value_written P E w' adal\n 6. \\<And>n r'.\n       \\<lbrakk>(committed (J 0) = {} \\<and>\n                 (\\<forall>n.\n                     action_translation (J n) ` committed (J n)\n                     \\<subseteq> action_translation (J (Suc n)) `\n                                 committed (J (Suc n))) \\<and>\n                 actions E =\n                 (\\<Union>n.\n                     action_translation (J n) ` committed (J n))) \\<and>\n                (\\<forall>n.\n                    P \\<turnstile> (justifying_exec (J n),\n                                    justifying_ws (J n)) \\<surd>) \\<and>\n                (\\<forall>n.\n                    committed (J n)\n                    \\<subseteq> actions (justifying_exec (J n))) \\<and>\n                (\\<forall>n.\n                    \\<forall>r\\<in>read_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let r' = action_translation (J n) r; w' = ws r';\n                           w = inv_into (actions (justifying_exec (J n)))\n                                (action_translation (J n)) w'\n                       in (P,E \\<turnstile> w' \\<le>hb r') =\n                          (P,justifying_exec\n                              (J n) \\<turnstile> w \\<le>hb r) \\<and>\n                          \\<not> P,justifying_exec\n                                    (J n) \\<turnstile> r \\<le>hb w) \\<and>\n                (\\<forall>n.\n                    \\<forall>w\\<in>write_actions\n                                    (justifying_exec (J n)) \\<inter>\n                                   committed (J n).\n                       let w' = action_translation (J n) w\n                       in \\<forall>adal\\<in>action_loc P E w'.\n                             value_written P (justifying_exec (J n)) w\n                              adal =\n                             value_written P E w' adal) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J n)) \\<inter>\n                                    committed (J n).\n                       let r = action_translation (J n) r';\n                           r'' =\n                             inv_into\n                              (actions (justifying_exec (J (Suc n))))\n                              (action_translation (J (Suc n))) r\n                       in action_translation (J (Suc n))\n                           (justifying_ws (J (Suc n)) r'') =\n                          ws r) \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))).\n                       action_translation (J (Suc n)) r'\n                       \\<in> action_translation (J n) `\n                             committed (J n) \\<or>\n                       P,justifying_exec\n                          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n              r' \\<le>hb r') \\<and>\n                (\\<forall>n.\n                    \\<forall>r'\\<in>read_actions\n                                     (justifying_exec (J (Suc n))) \\<inter>\n                                    committed (J (Suc n)).\n                       let r = action_translation (J (Suc n)) r';\n                           committed_n =\n                             action_translation (J n) ` committed (J n)\n                       in r \\<in> committed_n \\<or>\n                          ws r \\<in> committed_n) \\<and>\n                (\\<forall>n. wf_action_translation E (J n));\n        P \\<turnstile> (E', ws') \\<surd>;\n        r' \\<in> read_actions\n                  (justifying_exec\n                    ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                                justifying_ws = ws',\n                                action_translation = id\\<rparr>))\n                      n)) \\<inter>\n                 committed\n                  ((J(0 := \\<lparr>committed = {}, justifying_exec = E',\n                              justifying_ws = ws',\n                              action_translation = id\\<rparr>))\n                    n)\\<rbrakk>\n       \\<Longrightarrow> let r = action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    n)\n                                  r';\n                             r'' =\n                               inv_into\n                                (actions\n                                  (justifying_exec\n                                    ((J\n(0 := \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n         action_translation = id\\<rparr>))\n(Suc n))))\n                                (action_translation\n                                  ((J(0 :=\n  \\<lparr>committed = {}, justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                    (Suc n)))\n                                r\n                         in action_translation\n                             ((J(0 := \\<lparr>committed = {},\n   justifying_exec = E', justifying_ws = ws',\n   action_translation = id\\<rparr>))\n                               (Suc n))\n                             (justifying_ws\n                               ((J(0 := \\<lparr>committed = {},\n     justifying_exec = E', justifying_ws = ws',\n     action_translation = id\\<rparr>))\n                                 (Suc n))\n                               r'') =\n                            ws r", "qed auto"], ["", "subsection \\<open>Executions with common prefix\\<close>"], ["", "lemma actions_change_prefix:\n  assumes read: \"a \\<in> actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"a \\<in> actions E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> actions E'", "using llist_all2_llengthD[OF prefix[unfolded sim_actions_def]] read rn"], ["proof (prove)\nusing this:\n  llength (ltake n E) = llength (ltake n E')\n  a \\<in> actions E\n  enat a < n\n\ngoal (1 subgoal):\n 1. a \\<in> actions E'", "by(simp add: actions_def min_def split: if_split_asm)"], ["", "lemma action_obs_change_prefix:\n  assumes prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"action_obs E a \\<approx> action_obs E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "from rn"], ["proof (chain)\npicking this:\n  enat a < n", "have \"action_obs E a = action_obs (ltake n E) a\""], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs (ltake n E) a", "by(simp add: action_obs_def lnth_ltake)"], ["proof (state)\nthis:\n  action_obs E a = action_obs (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "also"], ["proof (state)\nthis:\n  action_obs E a = action_obs (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "from prefix"], ["proof (chain)\npicking this:\n  ltake n E [\\<approx>] ltake n E'", "have \"\\<dots> \\<approx> action_obs (ltake n E') a\""], ["proof (prove)\nusing this:\n  ltake n E [\\<approx>] ltake n E'\n\ngoal (1 subgoal):\n 1. action_obs (ltake n E) a \\<approx> action_obs (ltake n E') a", "by(rule sim_actions_action_obsD)"], ["proof (state)\nthis:\n  action_obs (ltake n E) a \\<approx> action_obs (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "also"], ["proof (state)\nthis:\n  action_obs (ltake n E) a \\<approx> action_obs (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "have \"\\<dots> = action_obs E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_obs (ltake n E') a = action_obs E' a", "using rn"], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_obs (ltake n E') a = action_obs E' a", "by(simp add: action_obs_def lnth_ltake)"], ["proof (state)\nthis:\n  action_obs (ltake n E') a = action_obs E' a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "finally"], ["proof (chain)\npicking this:\n  action_obs E a \\<approx> action_obs E' a", "show ?thesis"], ["proof (prove)\nusing this:\n  action_obs E a \\<approx> action_obs E' a\n\ngoal (1 subgoal):\n 1. action_obs E a \\<approx> action_obs E' a", "."], ["proof (state)\nthis:\n  action_obs E a \\<approx> action_obs E' a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_obs_change_prefix_eq:\n  assumes prefix: \"ltake n E = ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"action_obs E a = action_obs E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "from rn"], ["proof (chain)\npicking this:\n  enat a < n", "have \"action_obs E a = action_obs (ltake n E) a\""], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs (ltake n E) a", "by(simp add: action_obs_def lnth_ltake)"], ["proof (state)\nthis:\n  action_obs E a = action_obs (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "also"], ["proof (state)\nthis:\n  action_obs E a = action_obs (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "from prefix"], ["proof (chain)\npicking this:\n  ltake n E = ltake n E'", "have \"\\<dots> = action_obs (ltake n E') a\""], ["proof (prove)\nusing this:\n  ltake n E = ltake n E'\n\ngoal (1 subgoal):\n 1. action_obs (ltake n E) a = action_obs (ltake n E') a", "by(simp add: action_obs_def)"], ["proof (state)\nthis:\n  action_obs (ltake n E) a = action_obs (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "also"], ["proof (state)\nthis:\n  action_obs (ltake n E) a = action_obs (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "have \"\\<dots> = action_obs E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_obs (ltake n E') a = action_obs E' a", "using rn"], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_obs (ltake n E') a = action_obs E' a", "by(simp add: action_obs_def lnth_ltake)"], ["proof (state)\nthis:\n  action_obs (ltake n E') a = action_obs E' a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "finally"], ["proof (chain)\npicking this:\n  action_obs E a = action_obs E' a", "show ?thesis"], ["proof (prove)\nusing this:\n  action_obs E a = action_obs E' a\n\ngoal (1 subgoal):\n 1. action_obs E a = action_obs E' a", "."], ["proof (state)\nthis:\n  action_obs E a = action_obs E' a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma read_actions_change_prefix:\n  assumes read: \"r \\<in> read_actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \"enat r < n\"\n  shows \"r \\<in> read_actions E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> read_actions E'", "using read action_obs_change_prefix[OF prefix] actions_change_prefix[OF _ prefix]"], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  action_obs E r \\<approx> action_obs E' r\n  r \\<in> actions E \\<Longrightarrow> r \\<in> actions E'\n\ngoal (1 subgoal):\n 1. r \\<in> read_actions E'", "by(cases)(auto intro: read_actions.intros)"], ["", "lemma sim_action_is_write_action_eq:\n  assumes \"obs \\<approx> obs'\"\n  shows \"is_write_action obs \\<longleftrightarrow> is_write_action obs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_write_action obs = is_write_action obs'", "using assms"], ["proof (prove)\nusing this:\n  obs \\<approx> obs'\n\ngoal (1 subgoal):\n 1. is_write_action obs = is_write_action obs'", "by cases simp_all"], ["", "lemma write_actions_change_prefix:\n  assumes \"write\": \"w \\<in> write_actions E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \"enat w < n\"\n  shows \"w \\<in> write_actions E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> write_actions E'", "using \"write\" action_obs_change_prefix[OF prefix] actions_change_prefix[OF _ prefix]"], ["proof (prove)\nusing this:\n  w \\<in> write_actions E\n  action_obs E w \\<approx> action_obs E' w\n  w \\<in> actions E \\<Longrightarrow> w \\<in> actions E'\n\ngoal (1 subgoal):\n 1. w \\<in> write_actions E'", "by(cases)(auto intro: write_actions.intros dest: sim_action_is_write_action_eq)"], ["", "lemma action_loc_change_prefix:\n  assumes \"ltake n E [\\<approx>] ltake n E'\" \"enat a < n\"\n  shows \"action_loc P E a = action_loc P E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_loc P E a = action_loc P E' a", "using action_obs_change_prefix[OF assms]"], ["proof (prove)\nusing this:\n  action_obs E a \\<approx> action_obs E' a\n\ngoal (1 subgoal):\n 1. action_loc P E a = action_loc P E' a", "by(fastforce elim!: action_loc_aux_cases intro: action_loc_aux_intros)"], ["", "lemma sim_action_is_new_action_eq:\n  assumes \"obs \\<approx> obs'\"\n  shows \"is_new_action obs = is_new_action obs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_new_action obs = is_new_action obs'", "using assms"], ["proof (prove)\nusing this:\n  obs \\<approx> obs'\n\ngoal (1 subgoal):\n 1. is_new_action obs = is_new_action obs'", "by cases auto"], ["", "lemma action_order_change_prefix:\n  assumes ao: \"E \\<turnstile> a \\<le>a a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\" \n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"E' \\<turnstile> a \\<le>a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<turnstile> a \\<le>a a'", "using ao actions_change_prefix[OF _ prefix an] actions_change_prefix[OF _ prefix a'n] action_obs_change_prefix[OF prefix an] action_obs_change_prefix[OF prefix a'n]"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a a'\n  a \\<in> actions E \\<Longrightarrow> a \\<in> actions E'\n  a' \\<in> actions E \\<Longrightarrow> a' \\<in> actions E'\n  action_obs E a \\<approx> action_obs E' a\n  action_obs E a' \\<approx> action_obs E' a'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> a \\<le>a a'", "by(auto simp add: action_order_def split: if_split_asm dest: sim_action_is_new_action_eq)"], ["", "lemma value_written_change_prefix:\n  assumes eq: \"ltake n E = ltake n E'\"\n  and an: \"enat a < n\"\n  shows \"value_written P E a = value_written P E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_written P E a = value_written P E' a", "using action_obs_change_prefix_eq[OF eq an]"], ["proof (prove)\nusing this:\n  action_obs E a = action_obs E' a\n\ngoal (1 subgoal):\n 1. value_written P E a = value_written P E' a", "by(simp add: value_written_def fun_eq_iff)"], ["", "lemma action_tid_change_prefix:\n  assumes prefix: \"ltake n E [\\<approx>] ltake n E'\" \n  and an: \"enat a < n\"\n  shows \"action_tid E a = action_tid E' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "from an"], ["proof (chain)\npicking this:\n  enat a < n", "have \"action_tid E a = action_tid (ltake n E) a\""], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid (ltake n E) a", "by(simp add: action_tid_def lnth_ltake)"], ["proof (state)\nthis:\n  action_tid E a = action_tid (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "also"], ["proof (state)\nthis:\n  action_tid E a = action_tid (ltake n E) a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "from prefix"], ["proof (chain)\npicking this:\n  ltake n E [\\<approx>] ltake n E'", "have \"\\<dots> = action_tid (ltake n E') a\""], ["proof (prove)\nusing this:\n  ltake n E [\\<approx>] ltake n E'\n\ngoal (1 subgoal):\n 1. action_tid (ltake n E) a = action_tid (ltake n E') a", "by(rule sim_actions_action_tidD)"], ["proof (state)\nthis:\n  action_tid (ltake n E) a = action_tid (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "also"], ["proof (state)\nthis:\n  action_tid (ltake n E) a = action_tid (ltake n E') a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "from an"], ["proof (chain)\npicking this:\n  enat a < n", "have \"\\<dots> = action_tid E' a\""], ["proof (prove)\nusing this:\n  enat a < n\n\ngoal (1 subgoal):\n 1. action_tid (ltake n E') a = action_tid E' a", "by(simp add: action_tid_def lnth_ltake)"], ["proof (state)\nthis:\n  action_tid (ltake n E') a = action_tid E' a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "finally"], ["proof (chain)\npicking this:\n  action_tid E a = action_tid E' a", "show ?thesis"], ["proof (prove)\nusing this:\n  action_tid E a = action_tid E' a\n\ngoal (1 subgoal):\n 1. action_tid E a = action_tid E' a", "."], ["proof (state)\nthis:\n  action_tid E a = action_tid E' a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma program_order_change_prefix:\n  assumes po: \"E \\<turnstile> a \\<le>po a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"E' \\<turnstile> a \\<le>po a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<turnstile> a \\<le>po a'", "using po action_order_change_prefix[OF _ prefix an a'n]\n  action_tid_change_prefix[OF prefix an] action_tid_change_prefix[OF prefix a'n]"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>po a'\n  E \\<turnstile> a \\<le>a a' \\<Longrightarrow> E' \\<turnstile> a \\<le>a a'\n  action_tid E a = action_tid E' a\n  action_tid E a' = action_tid E' a'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> a \\<le>po a'", "by(auto elim!: program_orderE intro: program_orderI)"], ["", "lemma sim_action_sactionD:\n  assumes \"obs \\<approx> obs'\"\n  shows \"saction P obs \\<longleftrightarrow> saction P obs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saction P obs = saction P obs'", "using assms"], ["proof (prove)\nusing this:\n  obs \\<approx> obs'\n\ngoal (1 subgoal):\n 1. saction P obs = saction P obs'", "by cases simp_all"], ["", "lemma sactions_change_prefix:\n  assumes sync: \"a \\<in> sactions P E\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and rn: \"enat a < n\"\n  shows \"a \\<in> sactions P E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> sactions P E'", "using sync action_obs_change_prefix[OF prefix rn] actions_change_prefix[OF _ prefix rn]"], ["proof (prove)\nusing this:\n  a \\<in> sactions P E\n  action_obs E a \\<approx> action_obs E' a\n  a \\<in> actions E \\<Longrightarrow> a \\<in> actions E'\n\ngoal (1 subgoal):\n 1. a \\<in> sactions P E'", "unfolding sactions_def"], ["proof (prove)\nusing this:\n  a \\<in> {a \\<in> actions E. saction P (action_obs E a)}\n  action_obs E a \\<approx> action_obs E' a\n  a \\<in> actions E \\<Longrightarrow> a \\<in> actions E'\n\ngoal (1 subgoal):\n 1. a \\<in> {a \\<in> actions E'. saction P (action_obs E' a)}", "by(simp add: sim_action_sactionD)"], ["", "lemma sync_order_change_prefix:\n  assumes so: \"P,E \\<turnstile> a \\<le>so a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>so a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>so a'", "using so action_order_change_prefix[OF _ prefix an a'n] sactions_change_prefix[OF _ prefix an, of P] sactions_change_prefix[OF _ prefix a'n, of P]"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so a'\n  E \\<turnstile> a \\<le>a a' \\<Longrightarrow> E' \\<turnstile> a \\<le>a a'\n  a \\<in> sactions P E \\<Longrightarrow> a \\<in> sactions P E'\n  a' \\<in> sactions P E \\<Longrightarrow> a' \\<in> sactions P E'\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>so a'", "by(simp add: sync_order_def)"], ["", "lemma sim_action_synchronizes_withD:\n  assumes \"obs \\<approx> obs'\" \"obs'' \\<approx> obs'''\"\n  shows \"P \\<turnstile> (t, obs) \\<leadsto>sw (t', obs'') \\<longleftrightarrow> P \\<turnstile> (t, obs') \\<leadsto>sw (t', obs''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile> (t, obs) \\<leadsto>sw (t', obs'')) =\n    (P \\<turnstile> (t, obs') \\<leadsto>sw (t', obs'''))", "using assms"], ["proof (prove)\nusing this:\n  obs \\<approx> obs'\n  obs'' \\<approx> obs'''\n\ngoal (1 subgoal):\n 1. (P \\<turnstile> (t, obs) \\<leadsto>sw (t', obs'')) =\n    (P \\<turnstile> (t, obs') \\<leadsto>sw (t', obs'''))", "by(auto elim!: sim_action.cases synchronizes_with.cases intro: synchronizes_with.intros)"], ["", "lemma sync_with_change_prefix:\n  assumes sw: \"P,E \\<turnstile> a \\<le>sw a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>sw a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>sw a'", "using sw sync_order_change_prefix[OF _ prefix an a'n, of P] \n  action_tid_change_prefix[OF prefix an] action_tid_change_prefix[OF prefix a'n]\n  action_obs_change_prefix[OF prefix an] action_obs_change_prefix[OF prefix a'n]"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>sw a'\n  P,E \\<turnstile> a \\<le>so a' \\<Longrightarrow>\n  P,E' \\<turnstile> a \\<le>so a'\n  action_tid E a = action_tid E' a\n  action_tid E a' = action_tid E' a'\n  action_obs E a \\<approx> action_obs E' a\n  action_obs E a' \\<approx> action_obs E' a'\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>sw a'", "by(auto simp add: sync_with_def dest: sim_action_synchronizes_withD)"], ["", "lemma po_sw_change_prefix:\n  assumes posw: \"po_sw P E a a'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"po_sw P E' a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. po_sw P E' a a'", "using posw sync_with_change_prefix[OF _ prefix an a'n, of P] program_order_change_prefix[OF _ prefix an a'n]"], ["proof (prove)\nusing this:\n  po_sw P E a a'\n  P,E \\<turnstile> a \\<le>sw a' \\<Longrightarrow>\n  P,E' \\<turnstile> a \\<le>sw a'\n  E \\<turnstile> a \\<le>po a' \\<Longrightarrow> E' \\<turnstile> a \\<le>po a'\n\ngoal (1 subgoal):\n 1. po_sw P E' a a'", "by(auto simp add: po_sw_def)"], ["", "lemma happens_before_new_not_new:\n  assumes tsa_ok: \"thread_start_actions_ok E\"\n  and a: \"a \\<in> actions E\" \n  and a': \"a' \\<in> actions E\"\n  and new_a: \"is_new_action (action_obs E a)\"\n  and new_a': \"\\<not> is_new_action (action_obs E a')\"\n  shows \"P,E \\<turnstile> a \\<le>hb a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from thread_start_actions_okD[OF tsa_ok a' new_a']"], ["proof (chain)\npicking this:\n  \\<exists>i\\<le>a'.\n     action_obs E i = InitialThreadAction \\<and>\n     action_tid E i = action_tid E a'", "obtain i where \"i \\<le> a'\"\n    and obs_i: \"action_obs E i = InitialThreadAction\" \n    and \"action_tid E i = action_tid E a'\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<le>a'.\n     action_obs E i = InitialThreadAction \\<and>\n     action_tid E i = action_tid E a'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> a'; action_obs E i = InitialThreadAction;\n         action_tid E i = action_tid E a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<le> a'\n  action_obs E i = InitialThreadAction\n  action_tid E i = action_tid E a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from \\<open>i \\<le> a'\\<close> a'"], ["proof (chain)\npicking this:\n  i \\<le> a'\n  a' \\<in> actions E", "have \"i \\<in> actions E\""], ["proof (prove)\nusing this:\n  i \\<le> a'\n  a' \\<in> actions E\n\ngoal (1 subgoal):\n 1. i \\<in> actions E", "by(auto simp add: actions_def le_less_trans[where y=\"enat a'\"])"], ["proof (state)\nthis:\n  i \\<in> actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "with \\<open>i \\<le> a'\\<close> obs_i a' new_a'"], ["proof (chain)\npicking this:\n  i \\<le> a'\n  action_obs E i = InitialThreadAction\n  a' \\<in> actions E\n  \\<not> is_new_action (action_obs E a')\n  i \\<in> actions E", "have \"E \\<turnstile> i \\<le>a a'\""], ["proof (prove)\nusing this:\n  i \\<le> a'\n  action_obs E i = InitialThreadAction\n  a' \\<in> actions E\n  \\<not> is_new_action (action_obs E a')\n  i \\<in> actions E\n\ngoal (1 subgoal):\n 1. E \\<turnstile> i \\<le>a a'", "by(simp add: action_order_def)"], ["proof (state)\nthis:\n  E \\<turnstile> i \\<le>a a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "hence \"E \\<turnstile> i \\<le>po a'\""], ["proof (prove)\nusing this:\n  E \\<turnstile> i \\<le>a a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> i \\<le>po a'", "using \\<open>action_tid E i = action_tid E a'\\<close>"], ["proof (prove)\nusing this:\n  E \\<turnstile> i \\<le>a a'\n  action_tid E i = action_tid E a'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> i \\<le>po a'", "by(rule program_orderI)"], ["proof (state)\nthis:\n  E \\<turnstile> i \\<le>po a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "moreover"], ["proof (state)\nthis:\n  E \\<turnstile> i \\<le>po a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "{"], ["proof (state)\nthis:\n  E \\<turnstile> i \\<le>po a'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from \\<open>i \\<in> actions E\\<close> obs_i"], ["proof (chain)\npicking this:\n  i \\<in> actions E\n  action_obs E i = InitialThreadAction", "have \"i \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  i \\<in> actions E\n  action_obs E i = InitialThreadAction\n\ngoal (1 subgoal):\n 1. i \\<in> sactions P E", "by(auto intro: sactionsI)"], ["proof (state)\nthis:\n  i \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from a \\<open>i \\<in> actions E\\<close> new_a obs_i"], ["proof (chain)\npicking this:\n  a \\<in> actions E\n  i \\<in> actions E\n  is_new_action (action_obs E a)\n  action_obs E i = InitialThreadAction", "have \"E \\<turnstile> a \\<le>a i\""], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  i \\<in> actions E\n  is_new_action (action_obs E a)\n  action_obs E i = InitialThreadAction\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a \\<le>a i", "by(simp add: action_order_def)"], ["proof (state)\nthis:\n  E \\<turnstile> a \\<le>a i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "moreover"], ["proof (state)\nthis:\n  E \\<turnstile> a \\<le>a i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from a new_a"], ["proof (chain)\npicking this:\n  a \\<in> actions E\n  is_new_action (action_obs E a)", "have \"a \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. a \\<in> sactions P E", "by(auto intro: sactionsI)"], ["proof (state)\nthis:\n  a \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "ultimately"], ["proof (chain)\npicking this:\n  E \\<turnstile> a \\<le>a i\n  a \\<in> sactions P E", "have \"P,E \\<turnstile> a \\<le>so i\""], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a i\n  a \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>so i", "using \\<open>i \\<in> sactions P E\\<close>"], ["proof (prove)\nusing this:\n  E \\<turnstile> a \\<le>a i\n  a \\<in> sactions P E\n  i \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>so i", "by(rule sync_orderI)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>so i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>so i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "from new_a obs_i"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a)\n  action_obs E i = InitialThreadAction", "have \"P \\<turnstile> (action_tid E a, action_obs E a) \\<leadsto>sw (action_tid E i, action_obs E i)\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a)\n  action_obs E i = InitialThreadAction\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (action_tid E a,\n                    action_obs E\n                     a) \\<leadsto>sw (action_tid E i, action_obs E i)", "by cases(auto intro: synchronizes_with.intros)"], ["proof (state)\nthis:\n  P \\<turnstile> (action_tid E a,\n                  action_obs E\n                   a) \\<leadsto>sw (action_tid E i, action_obs E i)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> a \\<le>so i\n  P \\<turnstile> (action_tid E a,\n                  action_obs E\n                   a) \\<leadsto>sw (action_tid E i, action_obs E i)", "have \"P,E \\<turnstile> a \\<le>sw i\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>so i\n  P \\<turnstile> (action_tid E a,\n                  action_obs E\n                   a) \\<leadsto>sw (action_tid E i, action_obs E i)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>sw i", "by(rule sync_withI)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>sw i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "}"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>sw i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "ultimately"], ["proof (chain)\npicking this:\n  E \\<turnstile> i \\<le>po a'\n  P,E \\<turnstile> a \\<le>sw i", "show ?thesis"], ["proof (prove)\nusing this:\n  E \\<turnstile> i \\<le>po a'\n  P,E \\<turnstile> a \\<le>sw i\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<le>hb a'", "unfolding po_sw_def [abs_def]"], ["proof (prove)\nusing this:\n  E \\<turnstile> i \\<le>po a'\n  P,E \\<turnstile> a \\<le>sw i\n\ngoal (1 subgoal):\n 1. (\\<lambda>a a'.\n        E \\<turnstile> a \\<le>po a' \\<or>\n        P,E \\<turnstile> a \\<le>sw a')\\<^sup>+\\<^sup>+\n     a a'", "by(blast intro: tranclp.r_into_trancl tranclp_trans)"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb a'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma happens_before_change_prefix:\n  assumes hb: \"P,E \\<turnstile> a \\<le>hb a'\"\n  and tsa_ok: \"thread_start_actions_ok E'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat a < n\"\n  and a'n: \"enat a' < n\"\n  shows \"P,E' \\<turnstile> a \\<le>hb a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a'", "using hb an a'n"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a'\n  enat a < n\n  enat a' < n\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a'", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>po_sw P E a y; enat a < n; enat y < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y\n 2. \\<And>y z.\n       \\<lbrakk>P,E \\<turnstile> a \\<le>hb y; po_sw P E y z;\n        \\<lbrakk>enat a < n; enat y < n\\<rbrakk>\n        \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y;\n        enat a < n; enat z < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb z", "case (base a')"], ["proof (state)\nthis:\n  po_sw P E a a'\n  enat a < n\n  enat a' < n\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>po_sw P E a y; enat a < n; enat y < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y\n 2. \\<And>y z.\n       \\<lbrakk>P,E \\<turnstile> a \\<le>hb y; po_sw P E y z;\n        \\<lbrakk>enat a < n; enat y < n\\<rbrakk>\n        \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y;\n        enat a < n; enat z < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb z", "thus ?case"], ["proof (prove)\nusing this:\n  po_sw P E a a'\n  enat a < n\n  enat a' < n\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a'", "by(rule tranclp.r_into_trancl[where r=\"po_sw P E'\", OF po_sw_change_prefix[OF _ prefix]])"], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,E \\<turnstile> a \\<le>hb y; po_sw P E y z;\n        \\<lbrakk>enat a < n; enat y < n\\<rbrakk>\n        \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y;\n        enat a < n; enat z < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,E \\<turnstile> a \\<le>hb y; po_sw P E y z;\n        \\<lbrakk>enat a < n; enat y < n\\<rbrakk>\n        \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y;\n        enat a < n; enat z < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb z", "case (step a' a'')"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<le>hb a'\n  po_sw P E a' a''\n  \\<lbrakk>enat a < n; enat a' < n\\<rbrakk>\n  \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb a'\n  enat a < n\n  enat a'' < n\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,E \\<turnstile> a \\<le>hb y; po_sw P E y z;\n        \\<lbrakk>enat a < n; enat y < n\\<rbrakk>\n        \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb y;\n        enat a < n; enat z < n\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> a \\<le>hb z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a''", "proof(cases \"is_new_action (action_obs E a') \\<and> \\<not> is_new_action (action_obs E a'')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "case False"], ["proof (state)\nthis:\n  \\<not> (is_new_action (action_obs E a') \\<and>\n          \\<not> is_new_action (action_obs E a''))\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from \\<open>po_sw P E a' a''\\<close>"], ["proof (chain)\npicking this:\n  po_sw P E a' a''", "have \"E \\<turnstile> a' \\<le>a a''\""], ["proof (prove)\nusing this:\n  po_sw P E a' a''\n\ngoal (1 subgoal):\n 1. E \\<turnstile> a' \\<le>a a''", "by(rule po_sw_into_action_order)"], ["proof (state)\nthis:\n  E \\<turnstile> a' \\<le>a a''\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "with \\<open>enat a'' < n\\<close> False"], ["proof (chain)\npicking this:\n  enat a'' < n\n  \\<not> (is_new_action (action_obs E a') \\<and>\n          \\<not> is_new_action (action_obs E a''))\n  E \\<turnstile> a' \\<le>a a''", "have \"enat a' < n\""], ["proof (prove)\nusing this:\n  enat a'' < n\n  \\<not> (is_new_action (action_obs E a') \\<and>\n          \\<not> is_new_action (action_obs E a''))\n  E \\<turnstile> a' \\<le>a a''\n\ngoal (1 subgoal):\n 1. enat a' < n", "by(safe elim!: action_orderE)(metis Suc_leI Suc_n_not_le_n enat_ord_simps(2) le_trans nat_neq_iff xtrans(10))+"], ["proof (state)\nthis:\n  enat a' < n\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "with \\<open>enat a < n\\<close>"], ["proof (chain)\npicking this:\n  enat a < n\n  enat a' < n", "have \"P,E' \\<turnstile> a \\<le>hb a'\""], ["proof (prove)\nusing this:\n  enat a < n\n  enat a' < n\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a'", "by(rule step)"], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "moreover"], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from \\<open>po_sw P E a' a''\\<close> prefix \\<open>enat a' < n\\<close> \\<open>enat a'' < n\\<close>"], ["proof (chain)\npicking this:\n  po_sw P E a' a''\n  ltake n E [\\<approx>] ltake n E'\n  enat a' < n\n  enat a'' < n", "have \"po_sw P E' a' a''\""], ["proof (prove)\nusing this:\n  po_sw P E a' a''\n  ltake n E [\\<approx>] ltake n E'\n  enat a' < n\n  enat a'' < n\n\ngoal (1 subgoal):\n 1. po_sw P E' a' a''", "by(rule po_sw_change_prefix)"], ["proof (state)\nthis:\n  po_sw P E' a' a''\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''\n 2. \\<not> (is_new_action (action_obs E a') \\<and>\n            \\<not> is_new_action (action_obs E a'')) \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "ultimately"], ["proof (chain)\npicking this:\n  P,E' \\<turnstile> a \\<le>hb a'\n  po_sw P E' a' a''", "show ?thesis"], ["proof (prove)\nusing this:\n  P,E' \\<turnstile> a \\<le>hb a'\n  po_sw P E' a' a''\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a''", ".."], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a''\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E a') \\<and>\n  \\<not> is_new_action (action_obs E a'')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "then"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a') \\<and>\n  \\<not> is_new_action (action_obs E a'')", "obtain new_a': \"is_new_action (action_obs E a')\"\n      and \"\\<not> is_new_action (action_obs E a'')\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a') \\<and>\n  \\<not> is_new_action (action_obs E a'')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_new_action (action_obs E a');\n      \\<not> is_new_action (action_obs E a'')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  is_new_action (action_obs E a')\n  \\<not> is_new_action (action_obs E a'')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from \\<open>P,E \\<turnstile> a \\<le>hb a'\\<close> new_a'"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> a \\<le>hb a'\n  is_new_action (action_obs E a')", "have new_a: \"is_new_action (action_obs E a)\"\n      and tid: \"action_tid E a = action_tid E a'\"\n      and \"a \\<le> a'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> a \\<le>hb a'\n  is_new_action (action_obs E a')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a) &&&\n    action_tid E a = action_tid E a' &&& a \\<le> a'", "by(rule happens_before_new_actionD)+"], ["proof (state)\nthis:\n  is_new_action (action_obs E a)\n  action_tid E a = action_tid E a'\n  a \\<le> a'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "note tsa_ok"], ["proof (state)\nthis:\n  thread_start_actions_ok E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "moreover"], ["proof (state)\nthis:\n  thread_start_actions_ok E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from porder_happens_before[of E P]"], ["proof (chain)\npicking this:\n  porder_on (actions E) (happens_before P E)", "have \"a \\<in> actions E\""], ["proof (prove)\nusing this:\n  porder_on (actions E) (happens_before P E)\n\ngoal (1 subgoal):\n 1. a \\<in> actions E", "by(rule porder_onE)(erule refl_onPD1, rule \\<open>P,E \\<turnstile> a \\<le>hb a'\\<close>)"], ["proof (state)\nthis:\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "hence \"a \\<in> actions E'\""], ["proof (prove)\nusing this:\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. a \\<in> actions E'", "using an"], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  enat a < n\n\ngoal (1 subgoal):\n 1. a \\<in> actions E'", "by(rule actions_change_prefix[OF _ prefix])"], ["proof (state)\nthis:\n  a \\<in> actions E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "moreover"], ["proof (state)\nthis:\n  a \\<in> actions E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from \\<open>po_sw P E a' a''\\<close> refl_on_program_order[of E] refl_on_sync_order[of P E]"], ["proof (chain)\npicking this:\n  po_sw P E a' a''\n  refl_onP (actions E) (program_order E)\n  refl_onP (sactions P E) (sync_order P E)", "have \"a'' \\<in> actions E\""], ["proof (prove)\nusing this:\n  po_sw P E a' a''\n  refl_onP (actions E) (program_order E)\n  refl_onP (sactions P E) (sync_order P E)\n\ngoal (1 subgoal):\n 1. a'' \\<in> actions E", "unfolding po_sw_def"], ["proof (prove)\nusing this:\n  E \\<turnstile> a' \\<le>po a'' \\<or> P,E \\<turnstile> a' \\<le>sw a''\n  refl_onP (actions E) (program_order E)\n  refl_onP (sactions P E) (sync_order P E)\n\ngoal (1 subgoal):\n 1. a'' \\<in> actions E", "by(auto dest: refl_onPD2 elim!: sync_withE)"], ["proof (state)\nthis:\n  a'' \\<in> actions E\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "hence \"a'' \\<in> actions E'\""], ["proof (prove)\nusing this:\n  a'' \\<in> actions E\n\ngoal (1 subgoal):\n 1. a'' \\<in> actions E'", "using \\<open>enat a'' < n\\<close>"], ["proof (prove)\nusing this:\n  a'' \\<in> actions E\n  enat a'' < n\n\ngoal (1 subgoal):\n 1. a'' \\<in> actions E'", "by(rule actions_change_prefix[OF _ prefix])"], ["proof (state)\nthis:\n  a'' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "moreover"], ["proof (state)\nthis:\n  a'' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from new_a action_obs_change_prefix[OF prefix an]"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E a)\n  action_obs E a \\<approx> action_obs E' a", "have \"is_new_action (action_obs E' a)\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E a)\n  action_obs E a \\<approx> action_obs E' a\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E' a)", "by(cases) auto"], ["proof (state)\nthis:\n  is_new_action (action_obs E' a)\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "moreover"], ["proof (state)\nthis:\n  is_new_action (action_obs E' a)\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "from \\<open>\\<not> is_new_action (action_obs E a'')\\<close> action_obs_change_prefix[OF prefix \\<open>enat a'' < n\\<close>]"], ["proof (chain)\npicking this:\n  \\<not> is_new_action (action_obs E a'')\n  action_obs E a'' \\<approx> action_obs E' a''", "have \"\\<not> is_new_action (action_obs E' a'')\""], ["proof (prove)\nusing this:\n  \\<not> is_new_action (action_obs E a'')\n  action_obs E a'' \\<approx> action_obs E' a''\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E' a'')", "by(auto elim: is_new_action.cases)"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E' a'')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E a') \\<and>\n    \\<not> is_new_action (action_obs E a'') \\<Longrightarrow>\n    P,E' \\<turnstile> a \\<le>hb a''", "ultimately"], ["proof (chain)\npicking this:\n  thread_start_actions_ok E'\n  a \\<in> actions E'\n  a'' \\<in> actions E'\n  is_new_action (action_obs E' a)\n  \\<not> is_new_action (action_obs E' a'')", "show \"P,E' \\<turnstile> a \\<le>hb a''\""], ["proof (prove)\nusing this:\n  thread_start_actions_ok E'\n  a \\<in> actions E'\n  a'' \\<in> actions E'\n  is_new_action (action_obs E' a)\n  \\<not> is_new_action (action_obs E' a'')\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> a \\<le>hb a''", "by(rule happens_before_new_not_new)"], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E' \\<turnstile> a \\<le>hb a''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma thread_start_actions_ok_change:\n  assumes tsa: \"thread_start_actions_ok E\"\n  and sim: \"E [\\<approx>] E'\"\n  shows \"thread_start_actions_ok E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thread_start_actions_ok E'", "proof(rule thread_start_actions_okI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "assume \"a \\<in> actions E'\" \"\\<not> is_new_action (action_obs E' a)\""], ["proof (state)\nthis:\n  a \\<in> actions E'\n  \\<not> is_new_action (action_obs E' a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "from sim"], ["proof (chain)\npicking this:\n  E [\\<approx>] E'", "have len_eq: \"llength E = llength E'\""], ["proof (prove)\nusing this:\n  E [\\<approx>] E'\n\ngoal (1 subgoal):\n 1. llength E = llength E'", "by(simp add: sim_actions_def)(rule llist_all2_llengthD)"], ["proof (state)\nthis:\n  llength E = llength E'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "with sim"], ["proof (chain)\npicking this:\n  E [\\<approx>] E'\n  llength E = llength E'", "have sim': \"ltake (llength E) E [\\<approx>] ltake (llength E) E'\""], ["proof (prove)\nusing this:\n  E [\\<approx>] E'\n  llength E = llength E'\n\ngoal (1 subgoal):\n 1. ltake (llength E) E [\\<approx>] ltake (llength E) E'", "by(simp add: ltake_all)"], ["proof (state)\nthis:\n  ltake (llength E) E [\\<approx>] ltake (llength E) E'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "from \\<open>a \\<in> actions E'\\<close> len_eq"], ["proof (chain)\npicking this:\n  a \\<in> actions E'\n  llength E = llength E'", "have \"enat a < llength E\""], ["proof (prove)\nusing this:\n  a \\<in> actions E'\n  llength E = llength E'\n\ngoal (1 subgoal):\n 1. enat a < llength E", "by(simp add: actions_def)"], ["proof (state)\nthis:\n  enat a < llength E\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "with \\<open>a \\<in> actions E'\\<close> sim'[symmetric]"], ["proof (chain)\npicking this:\n  a \\<in> actions E'\n  ltake (llength E) E' [\\<approx>] ltake (llength E) E\n  enat a < llength E", "have \"a \\<in> actions E\""], ["proof (prove)\nusing this:\n  a \\<in> actions E'\n  ltake (llength E) E' [\\<approx>] ltake (llength E) E\n  enat a < llength E\n\ngoal (1 subgoal):\n 1. a \\<in> actions E", "by(rule actions_change_prefix)"], ["proof (state)\nthis:\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "moreover"], ["proof (state)\nthis:\n  a \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "have \"\\<not> is_new_action (action_obs E a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E a)", "using action_obs_change_prefix[OF sim' \\<open>enat a < llength E\\<close>] \\<open>\\<not> is_new_action (action_obs E' a)\\<close>"], ["proof (prove)\nusing this:\n  action_obs E a \\<approx> action_obs E' a\n  \\<not> is_new_action (action_obs E' a)\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E a)", "by(auto elim!: is_new_action.cases)"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> actions E\n  \\<not> is_new_action (action_obs E a)", "obtain i where \"i \\<le> a\" \"action_obs E i = InitialThreadAction\" \"action_tid E i = action_tid E a\""], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  \\<not> is_new_action (action_obs E a)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> a; action_obs E i = InitialThreadAction;\n         action_tid E i = action_tid E a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: thread_start_actions_okD[OF tsa])"], ["proof (state)\nthis:\n  i \\<le> a\n  action_obs E i = InitialThreadAction\n  action_tid E i = action_tid E a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> actions E';\n        \\<not> is_new_action (action_obs E' a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<le>a.\n                            action_obs E' i = InitialThreadAction \\<and>\n                            action_tid E' i = action_tid E' a", "thus \"\\<exists>i \\<le> a. action_obs E' i = InitialThreadAction \\<and> action_tid E' i = action_tid E' a\""], ["proof (prove)\nusing this:\n  i \\<le> a\n  action_obs E i = InitialThreadAction\n  action_tid E i = action_tid E a\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<le>a.\n       action_obs E' i = InitialThreadAction \\<and>\n       action_tid E' i = action_tid E' a", "using action_tid_change_prefix[OF sim', of i] action_tid_change_prefix[OF sim', of a] \\<open>enat a < llength E\\<close>\n      action_obs_change_prefix[OF sim', of i]"], ["proof (prove)\nusing this:\n  i \\<le> a\n  action_obs E i = InitialThreadAction\n  action_tid E i = action_tid E a\n  enat i < llength E \\<Longrightarrow> action_tid E i = action_tid E' i\n  enat a < llength E \\<Longrightarrow> action_tid E a = action_tid E' a\n  enat a < llength E\n  enat i < llength E \\<Longrightarrow>\n  action_obs E i \\<approx> action_obs E' i\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<le>a.\n       action_obs E' i = InitialThreadAction \\<and>\n       action_tid E' i = action_tid E' a", "by(cases \"llength E\")(auto intro!: exI[where x=i])"], ["proof (state)\nthis:\n  \\<exists>i\\<le>a.\n     action_obs E' i = InitialThreadAction \\<and>\n     action_tid E' i = action_tid E' a\n\ngoal:\nNo subgoals!", "qed"], ["", "context executions_aux begin"], ["", "lemma \\<E>_new_same_addr_singleton:\n  assumes E: \"E \\<in> \\<E>\"\n  shows \"\\<exists>a. new_actions_for P E adal \\<subseteq> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. new_actions_for P E adal \\<subseteq> {a}", "by(blast dest: \\<E>_new_actions_for_fun[OF E])"], ["", "lemma new_action_before_read:\n  assumes E: \"E \\<in> \\<E>\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and ra: \"ra \\<in> read_actions E\"\n  and adal: \"adal \\<in> action_loc P E ra\"\n  and new: \"wa \\<in> new_actions_for P E adal\"\n  and sc: \"\\<And>a. \\<lbrakk> a < ra; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"wa < ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wa < ra", "using \\<E>_new_same_addr_singleton[OF E, of adal] init_before_read[OF E wf ra adal sc] new"], ["proof (prove)\nusing this:\n  \\<exists>a. new_actions_for P E adal \\<subseteq> {a}\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < ra; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < ra;\n   \\<And>a.\n      \\<lbrakk>a < ra; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i<ra. i \\<in> new_actions_for P E adal\n  wa \\<in> new_actions_for P E adal\n\ngoal (1 subgoal):\n 1. wa < ra", "by auto"], ["", "lemma mrw_before:\n  assumes E: \"E \\<in> \\<E>\"\n  and wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and sc: \"\\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"w < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w < r", "using mrw read_actions_not_write_actions[of r E]"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> r \\<leadsto>mrw w\n  \\<lbrakk>r \\<in> read_actions E; r \\<in> write_actions E\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. w < r", "apply cases"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(erule action_orderE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(erule (1) new_action_before_read[OF E wf])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w \\<in> new_actions_for P E adal\n 2. \\<And>adal a.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r; a < r;\n        a \\<in> read_actions E\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\n 3. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(simp add: new_actions_for_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal a.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        adal \\<in> action_loc P E r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        is_new_action (action_obs E w);\n        is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r; a < r;\n        a \\<in> read_actions E\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(erule (1) sc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply(cases \"w = r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r; w = r\\<rbrakk>\n       \\<Longrightarrow> w < r\n 2. \\<And>adal.\n       \\<lbrakk>\\<lbrakk>r \\<in> read_actions E;\n                 r \\<in> write_actions E\\<rbrakk>\n                \\<Longrightarrow> False;\n        r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        w \\<in> write_actions E; adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa';\n        w \\<in> actions E; r \\<in> actions E;\n        \\<not> is_new_action (action_obs E w);\n        \\<not> is_new_action (action_obs E r); w \\<le> r;\n        w \\<noteq> r\\<rbrakk>\n       \\<Longrightarrow> w < r", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mrw_change_prefix:\n  assumes E': \"E' \\<in> \\<E>\"\n  and mrw: \"P,E \\<turnstile> r \\<leadsto>mrw w\"\n  and tsa_ok: \"thread_start_actions_ok E'\"\n  and prefix: \"ltake n E [\\<approx>] ltake n E'\"\n  and an: \"enat r < n\"\n  and a'n: \"enat w < n\"\n  shows \"P,E' \\<turnstile> r \\<leadsto>mrw w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> r \\<leadsto>mrw w", "using mrw"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> r \\<leadsto>mrw w\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> r \\<leadsto>mrw w", "proof cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> r \\<leadsto>mrw w", "fix adal"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> r \\<leadsto>mrw w", "assume r: \"r \\<in> read_actions E\"\n    and adal_r: \"adal \\<in> action_loc P E r\"\n    and war: \"E \\<turnstile> w \\<le>a r\"\n    and w: \"w \\<in> write_actions E\"\n    and adal_w: \"adal \\<in> action_loc P E w\"\n    and mrw: \"\\<And>wa'. \\<lbrakk>wa' \\<in> write_actions E; adal \\<in> action_loc P E wa'\\<rbrakk>\n              \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or> E \\<turnstile> r \\<le>a wa'\""], ["proof (state)\nthis:\n  r \\<in> read_actions E\n  adal \\<in> action_loc P E r\n  E \\<turnstile> w \\<le>a r\n  w \\<in> write_actions E\n  adal \\<in> action_loc P E w\n  \\<lbrakk>?wa' \\<in> write_actions E;\n   adal \\<in> action_loc P E ?wa'\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ?wa' \\<le>a w \\<or>\n                    E \\<turnstile> r \\<le>a ?wa'\n\ngoal (1 subgoal):\n 1. \\<And>adal.\n       \\<lbrakk>r \\<in> read_actions E; adal \\<in> action_loc P E r;\n        E \\<turnstile> w \\<le>a r; w \\<in> write_actions E;\n        adal \\<in> action_loc P E w;\n        \\<And>wa'.\n           \\<lbrakk>wa' \\<in> write_actions E;\n            adal \\<in> action_loc P E wa'\\<rbrakk>\n           \\<Longrightarrow> E \\<turnstile> wa' \\<le>a w \\<or>\n                             E \\<turnstile> r \\<le>a wa'\\<rbrakk>\n       \\<Longrightarrow> P,E' \\<turnstile> r \\<leadsto>mrw w", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> r \\<leadsto>mrw w", "proof(rule most_recent_write_for.intros)"], ["proof (state)\ngoal (6 subgoals):\n 1. r \\<in> read_actions E'\n 2. ?adal \\<in> action_loc P E' r\n 3. E' \\<turnstile> w \\<le>a r\n 4. w \\<in> write_actions E'\n 5. ?adal \\<in> action_loc P E' w\n 6. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        ?adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "from r prefix an"], ["proof (chain)\npicking this:\n  r \\<in> read_actions E\n  ltake n E [\\<approx>] ltake n E'\n  enat r < n", "show r': \"r \\<in> read_actions E'\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  ltake n E [\\<approx>] ltake n E'\n  enat r < n\n\ngoal (1 subgoal):\n 1. r \\<in> read_actions E'", "by(rule read_actions_change_prefix)"], ["proof (state)\nthis:\n  r \\<in> read_actions E'\n\ngoal (5 subgoals):\n 1. ?adal \\<in> action_loc P E' r\n 2. E' \\<turnstile> w \\<le>a r\n 3. w \\<in> write_actions E'\n 4. ?adal \\<in> action_loc P E' w\n 5. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        ?adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "from adal_r"], ["proof (chain)\npicking this:\n  adal \\<in> action_loc P E r", "show \"adal \\<in> action_loc P E' r\""], ["proof (prove)\nusing this:\n  adal \\<in> action_loc P E r\n\ngoal (1 subgoal):\n 1. adal \\<in> action_loc P E' r", "by(simp add: action_loc_change_prefix[OF prefix[symmetric] an])"], ["proof (state)\nthis:\n  adal \\<in> action_loc P E' r\n\ngoal (4 subgoals):\n 1. E' \\<turnstile> w \\<le>a r\n 2. w \\<in> write_actions E'\n 3. adal \\<in> action_loc P E' w\n 4. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "from war prefix a'n an"], ["proof (chain)\npicking this:\n  E \\<turnstile> w \\<le>a r\n  ltake n E [\\<approx>] ltake n E'\n  enat w < n\n  enat r < n", "show \"E' \\<turnstile> w \\<le>a r\""], ["proof (prove)\nusing this:\n  E \\<turnstile> w \\<le>a r\n  ltake n E [\\<approx>] ltake n E'\n  enat w < n\n  enat r < n\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> w \\<le>a r", "by(rule action_order_change_prefix)"], ["proof (state)\nthis:\n  E' \\<turnstile> w \\<le>a r\n\ngoal (3 subgoals):\n 1. w \\<in> write_actions E'\n 2. adal \\<in> action_loc P E' w\n 3. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "from w prefix a'n"], ["proof (chain)\npicking this:\n  w \\<in> write_actions E\n  ltake n E [\\<approx>] ltake n E'\n  enat w < n", "show w': \"w \\<in> write_actions E'\""], ["proof (prove)\nusing this:\n  w \\<in> write_actions E\n  ltake n E [\\<approx>] ltake n E'\n  enat w < n\n\ngoal (1 subgoal):\n 1. w \\<in> write_actions E'", "by(rule write_actions_change_prefix)"], ["proof (state)\nthis:\n  w \\<in> write_actions E'\n\ngoal (2 subgoals):\n 1. adal \\<in> action_loc P E' w\n 2. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "from adal_w"], ["proof (chain)\npicking this:\n  adal \\<in> action_loc P E w", "show adal_w': \"adal \\<in> action_loc P E' w\""], ["proof (prove)\nusing this:\n  adal \\<in> action_loc P E w\n\ngoal (1 subgoal):\n 1. adal \\<in> action_loc P E' w", "by(simp add: action_loc_change_prefix[OF prefix[symmetric] a'n])"], ["proof (state)\nthis:\n  adal \\<in> action_loc P E' w\n\ngoal (1 subgoal):\n 1. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "fix wa'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "assume wa': \"wa' \\<in> write_actions E'\" \n      and adal_wa': \"adal \\<in> action_loc P E' wa'\""], ["proof (state)\nthis:\n  wa' \\<in> write_actions E'\n  adal \\<in> action_loc P E' wa'\n\ngoal (1 subgoal):\n 1. \\<And>wa'.\n       \\<lbrakk>wa' \\<in> write_actions E';\n        adal \\<in> action_loc P E' wa'\\<rbrakk>\n       \\<Longrightarrow> E' \\<turnstile> wa' \\<le>a w \\<or>\n                         E' \\<turnstile> r \\<le>a wa'", "show \"E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "proof(cases \"enat wa' < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case True"], ["proof (state)\nthis:\n  enat wa' < n\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "note wa'n = this"], ["proof (state)\nthis:\n  enat wa' < n\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "with wa' prefix[symmetric]"], ["proof (chain)\npicking this:\n  wa' \\<in> write_actions E'\n  ltake n E' [\\<approx>] ltake n E\n  enat wa' < n", "have \"wa' \\<in> write_actions E\""], ["proof (prove)\nusing this:\n  wa' \\<in> write_actions E'\n  ltake n E' [\\<approx>] ltake n E\n  enat wa' < n\n\ngoal (1 subgoal):\n 1. wa' \\<in> write_actions E", "by(rule write_actions_change_prefix)"], ["proof (state)\nthis:\n  wa' \\<in> write_actions E\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "moreover"], ["proof (state)\nthis:\n  wa' \\<in> write_actions E\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "from adal_wa'"], ["proof (chain)\npicking this:\n  adal \\<in> action_loc P E' wa'", "have \"adal \\<in> action_loc P E wa'\""], ["proof (prove)\nusing this:\n  adal \\<in> action_loc P E' wa'\n\ngoal (1 subgoal):\n 1. adal \\<in> action_loc P E wa'", "by(simp add: action_loc_change_prefix[OF prefix wa'n])"], ["proof (state)\nthis:\n  adal \\<in> action_loc P E wa'\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "ultimately"], ["proof (chain)\npicking this:\n  wa' \\<in> write_actions E\n  adal \\<in> action_loc P E wa'", "have \"E \\<turnstile> wa' \\<le>a w \\<or> E \\<turnstile> r \\<le>a wa'\""], ["proof (prove)\nusing this:\n  wa' \\<in> write_actions E\n  adal \\<in> action_loc P E wa'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> wa' \\<le>a w \\<or> E \\<turnstile> r \\<le>a wa'", "by(rule mrw)"], ["proof (state)\nthis:\n  E \\<turnstile> wa' \\<le>a w \\<or> E \\<turnstile> r \\<le>a wa'\n\ngoal (2 subgoals):\n 1. enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "thus ?thesis"], ["proof (prove)\nusing this:\n  E \\<turnstile> wa' \\<le>a w \\<or> E \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. E \\<turnstile> wa' \\<le>a w \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "assume \"E \\<turnstile> wa' \\<le>a w\""], ["proof (state)\nthis:\n  E \\<turnstile> wa' \\<le>a w\n\ngoal (2 subgoals):\n 1. E \\<turnstile> wa' \\<le>a w \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "hence \"E' \\<turnstile> wa' \\<le>a w\""], ["proof (prove)\nusing this:\n  E \\<turnstile> wa' \\<le>a w\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w", "using prefix wa'n a'n"], ["proof (prove)\nusing this:\n  E \\<turnstile> wa' \\<le>a w\n  ltake n E [\\<approx>] ltake n E'\n  enat wa' < n\n  enat w < n\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w", "by(rule action_order_change_prefix)"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w\n\ngoal (2 subgoals):\n 1. E \\<turnstile> wa' \\<le>a w \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "thus ?thesis"], ["proof (prove)\nusing this:\n  E' \\<turnstile> wa' \\<le>a w\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", ".."], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "assume \"E \\<turnstile> r \\<le>a wa'\""], ["proof (state)\nthis:\n  E \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "hence \"E' \\<turnstile> r \\<le>a wa'\""], ["proof (prove)\nusing this:\n  E \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> r \\<le>a wa'", "using prefix an wa'n"], ["proof (prove)\nusing this:\n  E \\<turnstile> r \\<le>a wa'\n  ltake n E [\\<approx>] ltake n E'\n  enat r < n\n  enat wa' < n\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> r \\<le>a wa'", "by(rule action_order_change_prefix)"], ["proof (state)\nthis:\n  E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> r \\<le>a wa' \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "thus ?thesis"], ["proof (prove)\nusing this:\n  E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", ".."], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case False"], ["proof (state)\nthis:\n  \\<not> enat wa' < n\n\ngoal (1 subgoal):\n 1. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "note wa'n = this"], ["proof (state)\nthis:\n  \\<not> enat wa' < n\n\ngoal (1 subgoal):\n 1. \\<not> enat wa' < n \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "proof(cases \"is_new_action (action_obs E' wa')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case False"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E' wa')\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "hence \"E' \\<turnstile> r \\<le>a wa'\""], ["proof (prove)\nusing this:\n  \\<not> is_new_action (action_obs E' wa')\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> r \\<le>a wa'", "using wa'n r' wa' an"], ["proof (prove)\nusing this:\n  \\<not> is_new_action (action_obs E' wa')\n  \\<not> enat wa' < n\n  r \\<in> read_actions E'\n  wa' \\<in> write_actions E'\n  enat r < n\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> r \\<le>a wa'", "by(auto intro!: action_orderI) (metis enat_ord_code(1) linorder_le_cases order_le_less_trans)"], ["proof (state)\nthis:\n  E' \\<turnstile> r \\<le>a wa'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "thus ?thesis"], ["proof (prove)\nusing this:\n  E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", ".."], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E' wa')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "with wa' adal_wa'"], ["proof (chain)\npicking this:\n  wa' \\<in> write_actions E'\n  adal \\<in> action_loc P E' wa'\n  is_new_action (action_obs E' wa')", "have new: \"wa' \\<in> new_actions_for P E' adal\""], ["proof (prove)\nusing this:\n  wa' \\<in> write_actions E'\n  adal \\<in> action_loc P E' wa'\n  is_new_action (action_obs E' wa')\n\ngoal (1 subgoal):\n 1. wa' \\<in> new_actions_for P E' adal", "by(simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  wa' \\<in> new_actions_for P E' adal\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E' wa') \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "proof(cases \"is_new_action (action_obs E' w)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E' w)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "with adal_w' a'n w'"], ["proof (chain)\npicking this:\n  adal \\<in> action_loc P E' w\n  enat w < n\n  w \\<in> write_actions E'\n  is_new_action (action_obs E' w)", "have \"w \\<in> new_actions_for P E' adal\""], ["proof (prove)\nusing this:\n  adal \\<in> action_loc P E' w\n  enat w < n\n  w \\<in> write_actions E'\n  is_new_action (action_obs E' w)\n\ngoal (1 subgoal):\n 1. w \\<in> new_actions_for P E' adal", "by(simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  w \\<in> new_actions_for P E' adal\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "with E' new"], ["proof (chain)\npicking this:\n  E' \\<in> \\<E>\n  wa' \\<in> new_actions_for P E' adal\n  w \\<in> new_actions_for P E' adal", "have \"wa' = w\""], ["proof (prove)\nusing this:\n  E' \\<in> \\<E>\n  wa' \\<in> new_actions_for P E' adal\n  w \\<in> new_actions_for P E' adal\n\ngoal (1 subgoal):\n 1. wa' = w", "by(rule \\<E>_new_actions_for_fun)"], ["proof (state)\nthis:\n  wa' = w\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n 2. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "thus ?thesis"], ["proof (prove)\nusing this:\n  wa' = w\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "using w'"], ["proof (prove)\nusing this:\n  wa' = w\n  w \\<in> write_actions E'\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "by(auto intro: refl_onPD[OF refl_action_order])"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "case False"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E' w)\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E' w) \\<Longrightarrow>\n    E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "with True wa' w'"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E' wa')\n  wa' \\<in> write_actions E'\n  w \\<in> write_actions E'\n  \\<not> is_new_action (action_obs E' w)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_new_action (action_obs E' wa')\n  wa' \\<in> write_actions E'\n  w \\<in> write_actions E'\n  \\<not> is_new_action (action_obs E' w)\n\ngoal (1 subgoal):\n 1. E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'", "by(auto intro!: action_orderI)"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E' \\<turnstile> wa' \\<le>a w \\<or> E' \\<turnstile> r \\<le>a wa'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E' \\<turnstile> r \\<leadsto>mrw w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_order_read_before_write:\n  assumes E: \"E \\<in> \\<E>\" \"P \\<turnstile> (E, ws) \\<surd>\"\n  and ao: \"E \\<turnstile> w \\<le>a r\"\n  and r: \"r \\<in> read_actions E\"\n  and w: \"w \\<in> write_actions E\"\n  and adal: \"adal \\<in> action_loc P E r\" \"adal \\<in> action_loc P E w\"\n  and sc: \"\\<And>a. \\<lbrakk> a < r; a \\<in> read_actions E \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> a \\<leadsto>mrw ws a\"\n  shows \"w < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w < r", "using ao"], ["proof (prove)\nusing this:\n  E \\<turnstile> w \\<le>a r\n\ngoal (1 subgoal):\n 1. w < r", "proof(cases rule: action_orderE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     is_new_action (action_obs E w);\n     is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r\n 2. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "case 1"], ["proof (state)\nthis:\n  w \\<in> actions E\n  r \\<in> actions E\n  is_new_action (action_obs E w)\n  is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     is_new_action (action_obs E w);\n     is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r\n 2. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "from init_before_read[OF E r adal(1) sc]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < r; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < r;\n   \\<And>a.\n      \\<lbrakk>a < r; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i<r. i \\<in> new_actions_for P E adal", "obtain i where \"i < r\" \"i \\<in> new_actions_for P E adal\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < r; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < r;\n   \\<And>a.\n      \\<lbrakk>a < r; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i<r. i \\<in> new_actions_for P E adal\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < r; i \\<in> new_actions_for P E adal\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < r\n  i \\<in> new_actions_for P E adal\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     is_new_action (action_obs E w);\n     is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r\n 2. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "moreover"], ["proof (state)\nthis:\n  i < r\n  i \\<in> new_actions_for P E adal\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     is_new_action (action_obs E w);\n     is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r\n 2. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "from \\<open>is_new_action (action_obs E w)\\<close> adal(2) \\<open>w \\<in> actions E\\<close>"], ["proof (chain)\npicking this:\n  is_new_action (action_obs E w)\n  adal \\<in> action_loc P E w\n  w \\<in> actions E", "have \"w \\<in> new_actions_for P E adal\""], ["proof (prove)\nusing this:\n  is_new_action (action_obs E w)\n  adal \\<in> action_loc P E w\n  w \\<in> actions E\n\ngoal (1 subgoal):\n 1. w \\<in> new_actions_for P E adal", "by(simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  w \\<in> new_actions_for P E adal\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     is_new_action (action_obs E w);\n     is_new_action (action_obs E r) \\<longrightarrow> w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r\n 2. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "ultimately"], ["proof (chain)\npicking this:\n  i < r\n  i \\<in> new_actions_for P E adal\n  w \\<in> new_actions_for P E adal", "show \"w < r\""], ["proof (prove)\nusing this:\n  i < r\n  i \\<in> new_actions_for P E adal\n  w \\<in> new_actions_for P E adal\n\ngoal (1 subgoal):\n 1. w < r", "using E"], ["proof (prove)\nusing this:\n  i < r\n  i \\<in> new_actions_for P E adal\n  w \\<in> new_actions_for P E adal\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. w < r", "by(auto dest: \\<E>_new_actions_for_fun)"], ["proof (state)\nthis:\n  w < r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "case 2"], ["proof (state)\nthis:\n  w \\<in> actions E\n  r \\<in> actions E\n  \\<not> is_new_action (action_obs E w)\n  \\<not> is_new_action (action_obs E r)\n  w \\<le> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<in> actions E; r \\<in> actions E;\n     \\<not> is_new_action (action_obs E w);\n     \\<not> is_new_action (action_obs E r); w \\<le> r\\<rbrakk>\n    \\<Longrightarrow> w < r", "with r w"], ["proof (chain)\npicking this:\n  r \\<in> read_actions E\n  w \\<in> write_actions E\n  w \\<in> actions E\n  r \\<in> actions E\n  \\<not> is_new_action (action_obs E w)\n  \\<not> is_new_action (action_obs E r)\n  w \\<le> r", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  w \\<in> write_actions E\n  w \\<in> actions E\n  r \\<in> actions E\n  \\<not> is_new_action (action_obs E w)\n  \\<not> is_new_action (action_obs E r)\n  w \\<le> r\n\ngoal (1 subgoal):\n 1. w < r", "by(cases \"w = r\")(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  w < r\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}