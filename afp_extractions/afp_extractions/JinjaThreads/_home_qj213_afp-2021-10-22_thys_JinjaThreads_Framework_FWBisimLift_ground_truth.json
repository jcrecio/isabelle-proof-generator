{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWBisimLift.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma init_fin_bisim_iff:\n  \"t \\<turnstile> ((s1, x1), m1) \\<approx>i ((s2, x2), m2) \\<longleftrightarrow> \n   s1 = s2 \\<and> t \\<turnstile> (x1, m1) \\<approx> (x2, m2) \\<and> (s2 = Finished \\<longrightarrow> final1 x1 \\<and> final2 x2)\"", "lemma nta_bisim_init_fin_bisim [simp]:\n  \"nta_bisim init_fin_bisim (convert_new_thread_action (Pair PreStart) nt1)\n      (convert_new_thread_action (Pair PreStart) nt2) =\n   nta_bisim bisim nt1 nt2\"", "lemma ta_bisim_init_fin_bisim_convert [simp]:\n  \"ta_bisim init_fin_bisim (convert_TA_initial (convert_obs_initial ta1)) (convert_TA_initial (convert_obs_initial ta2)) \\<longleftrightarrow> ta1 \\<sim>m ta2\"", "lemma ta_bisim_init_fin_bisim_InitialThreadAction [simp]:\n  \"ta_bisim init_fin_bisim \\<lbrace>InitialThreadAction\\<rbrace> \\<lbrace>InitialThreadAction\\<rbrace>\"", "lemma ta_bisim_init_fin_bisim_ThreadFinishAction [simp]:\n  \"ta_bisim init_fin_bisim \\<lbrace>ThreadFinishAction\\<rbrace> \\<lbrace>ThreadFinishAction\\<rbrace>\"", "lemma init_fin_bisim_wait_simps [simp]:\n  \"(status1, x1) \\<approx>iw (status2, x2) \\<longleftrightarrow> status1 = Running \\<and> status2 = Running \\<and> x1 \\<approx>w x2\"", "lemma init_fin_lift_state_mbisimI:\n  \"s \\<approx>m s' \\<Longrightarrow>\n  FWbisimulation_base.mbisim init_fin_bisim init_fin_bisim_wait (init_fin_lift_state Running s) (init_fin_lift_state Running s')\"", "lemma init_fin_delay_bisimulation_final_base:\n  \"delay_bisimulation_final_base (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) \n     r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move (\\<lambda>(x1, m). r1.init_fin_final x1) (\\<lambda>(x2, m). r2.init_fin_final x2)\"", "lemma init_fin_bisim_flip [flip_simps]:\n  \"FWbisimulation_base.init_fin_bisim final2 final1 (\\<lambda>t. flip (bisim t)) =\n   (\\<lambda>t. flip (FWbisimulation_base.init_fin_bisim final1 final2 bisim t))\"", "lemma init_fin_bisim_wait_flip [flip_simps]:\n  \"FWbisimulation_base.init_fin_bisim_wait (flip bisim_wait) =\n   flip (FWbisimulation_base.init_fin_bisim_wait bisim_wait)\"", "lemma init_fin_FWdelay_bisimulation_lift_aux:\n  \"FWdelay_bisimulation_lift_aux r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_FWdelay_bisimulation_final_base:\n  \"FWdelay_bisimulation_final_base \n     r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin \n     init_fin_bisim r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_simulation1:\n  assumes bisim: \"t \\<turnstile> s1 \\<approx>i s2\"\n    and red1: \"r1.init_fin t s1 tl1 s1'\"\n    and \\<tau>1: \"\\<not> r1.init_fin_\\<tau>move s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. (\\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>* s2 s2' \\<and>\n             r2.init_fin t s2' tl2 s2'' \\<and> \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n             t \\<turnstile> s1' \\<approx>i s2'' \\<and> ta_bisim init_fin_bisim tl1 tl2\"", "lemma init_fin_simulation2:\n  \"\\<lbrakk> t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2'; \\<not> r2.init_fin_\\<tau>move s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. (\\<tau>trsys.silent_move (r1.init_fin t) r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>* s1 s1' \\<and>\n             r1.init_fin t s1' tl1 s1'' \\<and> \\<not> r1.init_fin_\\<tau>move s1' tl1 s1'' \\<and>\n             t \\<turnstile> s1'' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\"", "lemma init_fin_simulation_Wakeup1:\n  assumes bisim: \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\"\n  and wait: \"sx1 \\<approx>iw sx2\"\n  and red1: \"r1.init_fin t (sx1, m1) ta1 (sx1', m1')\"\n  and wakeup: \"Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\"\n  shows \"\\<exists>ta2 sx2' m2'. r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                        ta_bisim init_fin_bisim ta1 ta2\"", "lemma init_fin_simulation_Wakeup2:\n  \"\\<lbrakk> t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2); sx1 \\<approx>iw sx2; r2.init_fin t (sx2, m2) ta2 (sx2', m2');\n    Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta1 sx1' m1'. r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                     ta_bisim init_fin_bisim ta1 ta2\"", "lemma init_fin_delay_bisimulation_obs:\n  \"delay_bisimulation_obs (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) (ta_bisim init_fin_bisim)\n         r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_FWdelay_bisimulation_obs:\n  \"FWdelay_bisimulation_obs r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim init_fin_bisim_wait r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_simulation_silent1:\n  \"\\<lbrakk> t \\<turnstile> sxm1 \\<approx>i sxm2; \\<tau>trsys.silent_move (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 sxm1' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm2'. \\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move sxm2 sxm2' \\<and> t \\<turnstile> sxm1' \\<approx>i sxm2'\"", "lemma init_fin_simulation_silent2:\n  \"\\<lbrakk> t \\<turnstile> sxm1 \\<approx>i sxm2; \\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move sxm2 sxm2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm1'. \\<tau>trsys.silent_moves (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 sxm1' \\<and> t \\<turnstile> sxm1' \\<approx>i sxm2'\"", "lemma init_fin_\\<tau>diverge_bisim_inv:\n  \"t \\<turnstile> sxm1 \\<approx>i sxm2 \n  \\<Longrightarrow> \\<tau>trsys.\\<tau>diverge (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 =\n      \\<tau>trsys.\\<tau>diverge (r2.init_fin t) r2.init_fin_\\<tau>move sxm2\"", "lemma init_fin_delay_bisimulation_diverge:\n  \"delay_bisimulation_diverge (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) (ta_bisim init_fin_bisim)\n         r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_FWdelay_bisimulation_diverge:\n  \"FWdelay_bisimulation_diverge r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim init_fin_bisim_wait r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\"", "lemma init_fin_simulation1:\n  assumes \"t \\<turnstile> s1 \\<approx>i s2\" and \"r1.init_fin t s1 tl1 s1'\"\n  shows \"\\<exists>s2' tl2. r2.init_fin t s2 tl2 s2' \\<and> t \\<turnstile> s1' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\"", "lemma init_fin_simulation2:\n  \"\\<lbrakk> t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' tl1. r1.init_fin t s1 tl1 s1' \\<and> t \\<turnstile> s1' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\"", "lemma init_fin_bisimulation: \n  \"bisimulation (r1.init_fin t) (r2.init_fin t)  (init_fin_bisim t) (ta_bisim init_fin_bisim)\"", "lemma init_fin_FWbisimulation:\n  \"FWbisimulation r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim\""], "translations": [["", "lemma init_fin_bisim_iff:\n  \"t \\<turnstile> ((s1, x1), m1) \\<approx>i ((s2, x2), m2) \\<longleftrightarrow> \n   s1 = s2 \\<and> t \\<turnstile> (x1, m1) \\<approx> (x2, m2) \\<and> (s2 = Finished \\<longrightarrow> final1 x1 \\<and> final2 x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<turnstile> ((s1, x1), m1) \\<approx>i ((s2, x2), m2) =\n    (s1 = s2 \\<and>\n     t \\<turnstile> (x1, m1) \\<approx> (x2, m2) \\<and>\n     (s2 = Finished \\<longrightarrow> final1 x1 \\<and> final2 x2))", "by(cases s1) auto"], ["", "lemma nta_bisim_init_fin_bisim [simp]:\n  \"nta_bisim init_fin_bisim (convert_new_thread_action (Pair PreStart) nt1)\n      (convert_new_thread_action (Pair PreStart) nt2) =\n   nta_bisim bisim nt1 nt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nta_bisim init_fin_bisim (convert_new_thread_action (Pair PreStart) nt1)\n     (convert_new_thread_action (Pair PreStart) nt2) =\n    nta_bisim bisim nt1 nt2", "by(cases nt1) simp_all"], ["", "lemma ta_bisim_init_fin_bisim_convert [simp]:\n  \"ta_bisim init_fin_bisim (convert_TA_initial (convert_obs_initial ta1)) (convert_TA_initial (convert_obs_initial ta2)) \\<longleftrightarrow> ta1 \\<sim>m ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim init_fin_bisim (convert_TA_initial (convert_obs_initial ta1))\n     (convert_TA_initial (convert_obs_initial ta2)) =\n    ta1 \\<sim>m ta2", "by(auto simp add: ta_bisim_def list_all2_map1 list_all2_map2)"], ["", "lemma ta_bisim_init_fin_bisim_InitialThreadAction [simp]:\n  \"ta_bisim init_fin_bisim \\<lbrace>InitialThreadAction\\<rbrace> \\<lbrace>InitialThreadAction\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim init_fin_bisim \\<lbrace>InitialThreadAction\\<rbrace>\n     \\<lbrace>InitialThreadAction\\<rbrace>", "by(simp add: ta_bisim_def)"], ["", "lemma ta_bisim_init_fin_bisim_ThreadFinishAction [simp]:\n  \"ta_bisim init_fin_bisim \\<lbrace>ThreadFinishAction\\<rbrace> \\<lbrace>ThreadFinishAction\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim init_fin_bisim \\<lbrace>ThreadFinishAction\\<rbrace>\n     \\<lbrace>ThreadFinishAction\\<rbrace>", "by(simp add: ta_bisim_def)"], ["", "lemma init_fin_bisim_wait_simps [simp]:\n  \"(status1, x1) \\<approx>iw (status2, x2) \\<longleftrightarrow> status1 = Running \\<and> status2 = Running \\<and> x1 \\<approx>w x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (status1, x1) \\<approx>iw (status2, x2) =\n    (status1 = Running \\<and> status2 = Running \\<and> x1 \\<approx>w x2)", "by(simp add: init_fin_bisim_wait_def)"], ["", "lemma init_fin_lift_state_mbisimI:\n  \"s \\<approx>m s' \\<Longrightarrow>\n  FWbisimulation_base.mbisim init_fin_bisim init_fin_bisim_wait (init_fin_lift_state Running s) (init_fin_lift_state Running s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    FWbisimulation_base.mbisim init_fin_bisim init_fin_bisim_wait\n     (init_fin_lift_state Running s) (init_fin_lift_state Running s')", "apply(rule FWbisimulation_base.mbisimI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    finite (dom (thr (init_fin_lift_state Running s)))\n 2. s \\<approx>m s' \\<Longrightarrow>\n    locks (init_fin_lift_state Running s) =\n    locks (init_fin_lift_state Running s')\n 3. s \\<approx>m s' \\<Longrightarrow>\n    wset (init_fin_lift_state Running s) =\n    wset (init_fin_lift_state Running s')\n 4. s \\<approx>m s' \\<Longrightarrow>\n    interrupts (init_fin_lift_state Running s) =\n    interrupts (init_fin_lift_state Running s')\n 5. s \\<approx>m s' \\<Longrightarrow>\n    wset_thread_ok (wset (init_fin_lift_state Running s))\n     (thr (init_fin_lift_state Running s))\n 6. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 7. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(simp add: thr_init_fin_list_state' o_def dom_map_option mbisim_finite1)"], ["proof (prove)\ngoal (6 subgoals):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    locks (init_fin_lift_state Running s) =\n    locks (init_fin_lift_state Running s')\n 2. s \\<approx>m s' \\<Longrightarrow>\n    wset (init_fin_lift_state Running s) =\n    wset (init_fin_lift_state Running s')\n 3. s \\<approx>m s' \\<Longrightarrow>\n    interrupts (init_fin_lift_state Running s) =\n    interrupts (init_fin_lift_state Running s')\n 4. s \\<approx>m s' \\<Longrightarrow>\n    wset_thread_ok (wset (init_fin_lift_state Running s))\n     (thr (init_fin_lift_state Running s))\n 5. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 6. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(simp add: locks_init_fin_lift_state mbisim_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    wset (init_fin_lift_state Running s) =\n    wset (init_fin_lift_state Running s')\n 2. s \\<approx>m s' \\<Longrightarrow>\n    interrupts (init_fin_lift_state Running s) =\n    interrupts (init_fin_lift_state Running s')\n 3. s \\<approx>m s' \\<Longrightarrow>\n    wset_thread_ok (wset (init_fin_lift_state Running s))\n     (thr (init_fin_lift_state Running s))\n 4. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 5. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(simp add: wset_init_fin_lift_state mbisim_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    interrupts (init_fin_lift_state Running s) =\n    interrupts (init_fin_lift_state Running s')\n 2. s \\<approx>m s' \\<Longrightarrow>\n    wset_thread_ok (wset (init_fin_lift_state Running s))\n     (thr (init_fin_lift_state Running s))\n 3. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 4. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(simp add: interrupts_init_fin_lift_stae mbisim_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. s \\<approx>m s' \\<Longrightarrow>\n    wset_thread_ok (wset (init_fin_lift_state Running s))\n     (thr (init_fin_lift_state Running s))\n 2. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 3. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(clarsimp simp add: wset_init_fin_lift_state mbisim_def thr_init_fin_list_state' o_def wset_thread_ok_conv_dom dom_map_option del: subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t = None\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 2. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(drule_tac t=t in mbisim_thrNone_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>thr (init_fin_lift_state Running s) t = None;\n        (thr s t = None) = (thr s' t = None)\\<rbrakk>\n       \\<Longrightarrow> thr (init_fin_lift_state Running s') t = None\n 2. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(simp add: thr_init_fin_list_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x1 ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr (init_fin_lift_state Running s) t =\n        \\<lfloor>(x1, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr (init_fin_lift_state Running s') t =\n                            \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x1,\n      shr (init_fin_lift_state Running\n            s)) \\<approx>i (x2, shr (init_fin_lift_state Running s')) \\<and>\n                            (wset (init_fin_lift_state Running s') t =\n                             None \\<or>\n                             x1 \\<approx>iw x2)", "apply(clarsimp simp add: thr_init_fin_list_state shr_init_fin_lift_state wset_init_fin_lift_state init_fin_bisim_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t b ln.\n       \\<lbrakk>s \\<approx>m s';\n        thr s t = \\<lfloor>(b, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ba.\n                            thr s' t = \\<lfloor>(ba, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (b, shr s)\n                            \\<approx> (ba, shr s') \\<and>\n                            (wset s' t = None \\<or> b \\<approx>w ba)", "apply(frule (1) mbisim_thrD1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t b ln.\n       \\<lbrakk>s \\<approx>m s'; thr s t = \\<lfloor>(b, ln)\\<rfloor>;\n        \\<exists>x'.\n           thr s' t = \\<lfloor>(x', ln)\\<rfloor> \\<and>\n           t \\<turnstile> (b, shr s) \\<approx> (x', shr s') \\<and>\n           (wset s t = None \\<or> b \\<approx>w x')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ba.\n                            thr s' t = \\<lfloor>(ba, ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (b, shr s)\n                            \\<approx> (ba, shr s') \\<and>\n                            (wset s' t = None \\<or> b \\<approx>w ba)", "apply(simp add: mbisim_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context FWdelay_bisimulation_base begin"], ["", "lemma init_fin_delay_bisimulation_final_base:\n  \"delay_bisimulation_final_base (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) \n     r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move (\\<lambda>(x1, m). r1.init_fin_final x1) (\\<lambda>(x2, m). r2.init_fin_final x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_final_base (r1.init_fin t) (r2.init_fin t)\n     (init_fin_bisim t) r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\n     (\\<lambda>(x1, m). r1.init_fin_final x1)\n     (\\<lambda>(x2, m). r2.init_fin_final x2)", "by(unfold_locales)(auto 4 3)"], ["", "end"], ["", "lemma init_fin_bisim_flip [flip_simps]:\n  \"FWbisimulation_base.init_fin_bisim final2 final1 (\\<lambda>t. flip (bisim t)) =\n   (\\<lambda>t. flip (FWbisimulation_base.init_fin_bisim final1 final2 bisim t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.init_fin_bisim final2 final1\n     (\\<lambda>t. flip (bisim t)) =\n    (\\<lambda>t.\n        flip (FWbisimulation_base.init_fin_bisim final1 final2 bisim t))", "by(auto simp only: FWbisimulation_base.init_fin_bisim_iff flip_simps fun_eq_iff split_paired_Ex)"], ["", "lemma init_fin_bisim_wait_flip [flip_simps]:\n  \"FWbisimulation_base.init_fin_bisim_wait (flip bisim_wait) =\n   flip (FWbisimulation_base.init_fin_bisim_wait bisim_wait)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.init_fin_bisim_wait (flip bisim_wait) =\n    flip (FWbisimulation_base.init_fin_bisim_wait bisim_wait)", "by(auto simp add: fun_eq_iff FWbisimulation_base.init_fin_bisim_wait_simps flip_simps)"], ["", "context FWdelay_bisimulation_lift_aux begin"], ["", "lemma init_fin_FWdelay_bisimulation_lift_aux:\n  \"FWdelay_bisimulation_lift_aux r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift_aux r1.init_fin_final r1.init_fin\n     r2.init_fin_final r2.init_fin r1.init_fin_\\<tau>move\n     r2.init_fin_\\<tau>move", "by(intro FWdelay_bisimulation_lift_aux.intro r1.\\<tau>multithreaded_wf_init_fin r2.\\<tau>multithreaded_wf_init_fin)"], ["", "lemma init_fin_FWdelay_bisimulation_final_base:\n  \"FWdelay_bisimulation_final_base \n     r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin \n     init_fin_bisim r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_final_base r1.init_fin_final r1.init_fin\n     r2.init_fin_final r2.init_fin init_fin_bisim r1.init_fin_\\<tau>move\n     r2.init_fin_\\<tau>move", "by(intro FWdelay_bisimulation_final_base.intro init_fin_FWdelay_bisimulation_lift_aux FWdelay_bisimulation_final_base_axioms.intro init_fin_delay_bisimulation_final_base)"], ["", "end"], ["", "context FWdelay_bisimulation_obs begin"], ["", "lemma init_fin_simulation1:\n  assumes bisim: \"t \\<turnstile> s1 \\<approx>i s2\"\n    and red1: \"r1.init_fin t s1 tl1 s1'\"\n    and \\<tau>1: \"\\<not> r1.init_fin_\\<tau>move s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. (\\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>* s2 s2' \\<and>\n             r2.init_fin t s2' tl2 s2'' \\<and> \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n             t \\<turnstile> s1' \\<approx>i s2'' \\<and> ta_bisim init_fin_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "from bisim"], ["proof (chain)\npicking this:\n  t \\<turnstile> s1 \\<approx>i s2", "obtain status x1 m1 x2 m2 \n    where s1: \"s1 = ((status, x1), m1)\"\n    and s2: \"s2 = ((status, x2), m2)\"\n    and bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\"\n    and finished: \"status = Finished \\<Longrightarrow> final1 x1 \\<and> final2 x2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 \\<approx>i s2\n\ngoal (1 subgoal):\n 1. (\\<And>status x1 m1 x2 m2.\n        \\<lbrakk>s1 = ((status, x1), m1); s2 = ((status, x2), m2);\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n         status = Finished \\<Longrightarrow>\n         final1 x1 \\<and> final2 x2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases s1)(cases s2, fastforce simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  s1 = ((status, x1), m1)\n  s2 = ((status, x2), m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  status = Finished \\<Longrightarrow> final1 x1 \\<and> final2 x2\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "from red1"], ["proof (chain)\npicking this:\n  r1.init_fin t s1 tl1 s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  r1.init_fin t s1 tl1 s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "unfolding s1"], ["proof (prove)\nusing this:\n  r1.init_fin t ((status, x1), m1) tl1 s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "proof(cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "case (NormalAction ta1 x1' m1')"], ["proof (state)\nthis:\n  status = Running\n  tl1 = convert_TA_initial (convert_obs_initial ta1)\n  s1' = ((Running, x1'), m1')\n  r1.r_syntax t x1 m1 ta1 x1' m1'\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "with \\<tau>1 s1"], ["proof (chain)\npicking this:\n  \\<not> r1.init_fin_\\<tau>move s1 tl1 s1'\n  s1 = ((status, x1), m1)\n  status = Running\n  tl1 = convert_TA_initial (convert_obs_initial ta1)\n  s1' = ((Running, x1'), m1')\n  r1.r_syntax t x1 m1 ta1 x1' m1'", "have \"\\<not> \\<tau>move1 (x1, m1) ta1 (x1', m1')\""], ["proof (prove)\nusing this:\n  \\<not> r1.init_fin_\\<tau>move s1 tl1 s1'\n  s1 = ((status, x1), m1)\n  status = Running\n  tl1 = convert_TA_initial (convert_obs_initial ta1)\n  s1' = ((Running, x1'), m1')\n  r1.r_syntax t x1 m1 ta1 x1' m1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1, m1) ta1 (x1', m1')", "by(simp)"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', m1')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from simulation1[OF bisim \\<open>t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1')\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> s2'' \\<and> ta1 \\<sim>m tl2", "obtain x2' m2' x2'' m2'' ta2\n      where red2: \"r2.silent_moves t (x2, m2) (x2', m2')\"\n      and red2': \"t \\<turnstile> (x2', m2') -2-ta2\\<rightarrow> (x2'', m2'')\"\n      and \\<tau>2: \"\\<not> \\<tau>move2 (x2', m2') ta2 (x2'', m2'')\"\n      and bisim': \"t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'')\"\n      and tasim: \"ta1 \\<sim>m ta2\""], ["proof (prove)\nusing this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> s2'' \\<and> ta1 \\<sim>m tl2\n\ngoal (1 subgoal):\n 1. (\\<And>x2' m2' ta2 x2'' m2''.\n        \\<lbrakk>r2.silent_moves t (x2, m2) (x2', m2');\n         r2.r_syntax t x2' m2' ta2 x2'' m2'';\n         \\<not> \\<tau>move2 (x2', m2') ta2 (x2'', m2'');\n         t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'');\n         ta1 \\<sim>m ta2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  r2.r_syntax t x2' m2' ta2 x2'' m2''\n  \\<not> \\<tau>move2 (x2', m2') ta2 (x2'', m2'')\n  t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'')\n  ta1 \\<sim>m ta2\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "let ?s2' = \"((Running, x2'), m2')\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "let ?s2'' = \"((Running, x2''), m2'')\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "let ?ta2 = \"(convert_TA_initial (convert_obs_initial ta2))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from red2"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', m2')", "have \"\\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move s2 ?s2'\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n\ngoal (1 subgoal):\n 1. (\\<tau>trsys.silent_move (r2.init_fin t)\n      r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n     s2 ((Running, x2'), m2')", "unfolding s2 \\<open>status = Running\\<close>"], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n\ngoal (1 subgoal):\n 1. (\\<tau>trsys.silent_move (r2.init_fin t)\n      r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n     ((Running, x2), m2) ((Running, x2'), m2')", "by(rule r2.init_fin_silent_moves_RunningI)"], ["proof (state)\nthis:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from red2'"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2' m2' ta2 x2'' m2''", "have \"r2.init_fin t ?s2' ?ta2 ?s2''\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2' m2' ta2 x2'' m2''\n\ngoal (1 subgoal):\n 1. r2.init_fin t ((Running, x2'), m2')\n     (convert_TA_initial (convert_obs_initial ta2)) ((Running, x2''), m2'')", "by(rule r2.init_fin.NormalAction)"], ["proof (state)\nthis:\n  r2.init_fin t ((Running, x2'), m2')\n   (convert_TA_initial (convert_obs_initial ta2)) ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  r2.init_fin t ((Running, x2'), m2')\n   (convert_TA_initial (convert_obs_initial ta2)) ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from \\<tau>2"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move2 (x2', m2') ta2 (x2'', m2'')", "have \"\\<not> r2.init_fin_\\<tau>move ?s2' ?ta2 ?s2''\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move2 (x2', m2') ta2 (x2'', m2'')\n\ngoal (1 subgoal):\n 1. \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n            (convert_TA_initial (convert_obs_initial ta2))\n            ((Running, x2''), m2'')", "by simp"], ["proof (state)\nthis:\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          (convert_TA_initial (convert_obs_initial ta2))\n          ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          (convert_TA_initial (convert_obs_initial ta2))\n          ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from bisim'"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'')", "have \"t \\<turnstile> s1' \\<approx>i ?s2''\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'')\n\ngoal (1 subgoal):\n 1. t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')", "using \\<open>s1' = ((Running, x1'), m1')\\<close>"], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1', m1') \\<approx> (x2'', m2'')\n  s1' = ((Running, x1'), m1')\n\ngoal (1 subgoal):\n 1. t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')", "by simp"], ["proof (state)\nthis:\n  t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from tasim \\<open>tl1 = convert_TA_initial (convert_obs_initial ta1)\\<close>"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  tl1 = convert_TA_initial (convert_obs_initial ta1)", "have \"ta_bisim init_fin_bisim tl1 ?ta2\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  tl1 = convert_TA_initial (convert_obs_initial ta1)\n\ngoal (1 subgoal):\n 1. ta_bisim init_fin_bisim tl1\n     (convert_TA_initial (convert_obs_initial ta2))", "by simp"], ["proof (state)\nthis:\n  ta_bisim init_fin_bisim tl1 (convert_TA_initial (convert_obs_initial ta2))\n\ngoal (3 subgoals):\n 1. \\<And>ta x' m'.\n       \\<lbrakk>status = Running;\n        tl1 = convert_TA_initial (convert_obs_initial ta);\n        s1' = ((Running, x'), m'); r1.r_syntax t x1 m1 ta x' m'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            (\\<tau>trsys.silent_move (r2.init_fin t)\n                              r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                             s2 s2' \\<and>\n                            r2.init_fin t s2' tl2 s2'' \\<and>\n                            \\<not> r2.init_fin_\\<tau>move s2' tl2\n                                    s2'' \\<and>\n                            t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                            ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 3. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "ultimately"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n  r2.init_fin t ((Running, x2'), m2')\n   (convert_TA_initial (convert_obs_initial ta2)) ((Running, x2''), m2'')\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          (convert_TA_initial (convert_obs_initial ta2))\n          ((Running, x2''), m2'')\n  t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')\n  ta_bisim init_fin_bisim tl1 (convert_TA_initial (convert_obs_initial ta2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n  r2.init_fin t ((Running, x2'), m2')\n   (convert_TA_initial (convert_obs_initial ta2)) ((Running, x2''), m2'')\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          (convert_TA_initial (convert_obs_initial ta2))\n          ((Running, x2''), m2'')\n  t \\<turnstile> s1' \\<approx>i ((Running, x2''), m2'')\n  ta_bisim init_fin_bisim tl1 (convert_TA_initial (convert_obs_initial ta2))\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     (\\<tau>trsys.silent_move (r2.init_fin t)\n       r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n      s2 s2' \\<and>\n     r2.init_fin t s2' tl2 s2'' \\<and>\n     \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n     ta_bisim init_fin_bisim tl1 tl2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "case InitialThreadAction"], ["proof (state)\nthis:\n  status = PreStart\n  tl1 = \\<lbrace>InitialThreadAction\\<rbrace>\n  s1' = ((Running, x1), m1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>status = PreStart; tl1 = \\<lbrace>InitialThreadAction\\<rbrace>;\n     s1' = ((Running, x1), m1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2\n 2. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "with s1 s2 bisim"], ["proof (chain)\npicking this:\n  s1 = ((status, x1), m1)\n  s2 = ((status, x2), m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  status = PreStart\n  tl1 = \\<lbrace>InitialThreadAction\\<rbrace>\n  s1' = ((Running, x1), m1)", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = ((status, x1), m1)\n  s2 = ((status, x2), m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  status = PreStart\n  tl1 = \\<lbrace>InitialThreadAction\\<rbrace>\n  s1' = ((Running, x1), m1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "by(auto simp del: split_paired_Ex)"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     (\\<tau>trsys.silent_move (r2.init_fin t)\n       r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n      s2 s2' \\<and>\n     r2.init_fin t s2' tl2 s2'' \\<and>\n     \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n     ta_bisim init_fin_bisim tl1 tl2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "case ThreadFinishAction"], ["proof (state)\nthis:\n  status = Running\n  tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>\n  s1' = ((Finished, x1), m1)\n  final1 x1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from final1_simulation[OF bisim] \\<open>final1 x1\\<close>"], ["proof (chain)\npicking this:\n  case (x1, m1) of (x1, m) \\<Rightarrow> final1 x1 \\<Longrightarrow>\n  \\<exists>s2'.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> (x1, m1) \\<approx> s2' \\<and>\n     (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n  final1 x1", "obtain x2' m2' where red2: \"r2.silent_moves t (x2, m2) (x2', m2')\"\n      and bisim': \"t \\<turnstile> (x1, m1) \\<approx> (x2', m2')\"\n      and fin2: \"final2 x2'\""], ["proof (prove)\nusing this:\n  case (x1, m1) of (x1, m) \\<Rightarrow> final1 x1 \\<Longrightarrow>\n  \\<exists>s2'.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> (x1, m1) \\<approx> s2' \\<and>\n     (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n  final1 x1\n\ngoal (1 subgoal):\n 1. (\\<And>x2' m2'.\n        \\<lbrakk>r2.silent_moves t (x2, m2) (x2', m2');\n         t \\<turnstile> (x1, m1) \\<approx> (x2', m2'); final2 x2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2', m2')\n  final2 x2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "let ?s2' = \"((Running, x2'), m2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "let ?s2'' = \"((Finished, x2'), m2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from red2"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', m2')", "have \"\\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move s2 ?s2'\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n\ngoal (1 subgoal):\n 1. (\\<tau>trsys.silent_move (r2.init_fin t)\n      r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n     s2 ((Running, x2'), m2')", "unfolding s2 \\<open>status = Running\\<close>"], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n\ngoal (1 subgoal):\n 1. (\\<tau>trsys.silent_move (r2.init_fin t)\n      r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n     ((Running, x2), m2) ((Running, x2'), m2')", "by(rule r2.init_fin_silent_moves_RunningI)"], ["proof (state)\nthis:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "from fin2"], ["proof (chain)\npicking this:\n  final2 x2'", "have \"r2.init_fin t ?s2' \\<lbrace>ThreadFinishAction\\<rbrace> ?s2''\""], ["proof (prove)\nusing this:\n  final2 x2'\n\ngoal (1 subgoal):\n 1. r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n     ((Finished, x2'), m2')", ".."], ["proof (state)\nthis:\n  r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n   ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n   ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "have \"\\<not> r2.init_fin_\\<tau>move ?s2' \\<lbrace>ThreadFinishAction\\<rbrace> ?s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n            \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')", "by simp"], ["proof (state)\nthis:\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "have \"t \\<turnstile> s1' \\<approx>i ?s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')", "using \\<open>s1' = ((Finished, x1), m1)\\<close> fin2 \\<open>final1 x1\\<close> bisim'"], ["proof (prove)\nusing this:\n  s1' = ((Finished, x1), m1)\n  final2 x2'\n  final1 x1\n  t \\<turnstile> (x1, m1) \\<approx> (x2', m2')\n\ngoal (1 subgoal):\n 1. t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')", "by simp"], ["proof (state)\nthis:\n  t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>status = Running; tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>;\n     s1' = ((Finished, x1), m1); final1 x1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s2 s2' \\<and>\n                         r2.init_fin t s2' tl2 s2'' \\<and>\n                         \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "ultimately"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n  r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n   ((Finished, x2'), m2')\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')\n  t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n  r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n   ((Finished, x2'), m2')\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')\n  t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "unfolding \\<open>tl1 = \\<lbrace>ThreadFinishAction\\<rbrace>\\<close>"], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   s2 ((Running, x2'), m2')\n  r2.init_fin t ((Running, x2'), m2') \\<lbrace>ThreadFinishAction\\<rbrace>\n   ((Finished, x2'), m2')\n  \\<not> r2.init_fin_\\<tau>move ((Running, x2'), m2')\n          \\<lbrace>ThreadFinishAction\\<rbrace> ((Finished, x2'), m2')\n  t \\<turnstile> s1' \\<approx>i ((Finished, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       (\\<tau>trsys.silent_move (r2.init_fin t)\n         r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n        s2 s2' \\<and>\n       r2.init_fin t s2' tl2 s2'' \\<and>\n       \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n       ta_bisim init_fin_bisim \\<lbrace>ThreadFinishAction\\<rbrace> tl2", "by(blast intro: ta_bisim_init_fin_bisim_ThreadFinishAction)"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     (\\<tau>trsys.silent_move (r2.init_fin t)\n       r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n      s2 s2' \\<and>\n     r2.init_fin t s2' tl2 s2'' \\<and>\n     \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n     ta_bisim init_fin_bisim tl1 tl2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     (\\<tau>trsys.silent_move (r2.init_fin t)\n       r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n      s2 s2' \\<and>\n     r2.init_fin t s2' tl2 s2'' \\<and>\n     \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n     ta_bisim init_fin_bisim tl1 tl2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_fin_simulation2:\n  \"\\<lbrakk> t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2'; \\<not> r2.init_fin_\\<tau>move s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. (\\<tau>trsys.silent_move (r1.init_fin t) r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>* s1 s1' \\<and>\n             r1.init_fin t s1' tl1 s1'' \\<and> \\<not> r1.init_fin_\\<tau>move s1' tl1 s1'' \\<and>\n             t \\<turnstile> s1'' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2';\n     \\<not> r2.init_fin_\\<tau>move s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s1 s1' \\<and>\n                         r1.init_fin t s1' tl1 s1'' \\<and>\n                         \\<not> r1.init_fin_\\<tau>move s1' tl1 s1'' \\<and>\n                         t \\<turnstile> s1'' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "using FWdelay_bisimulation_obs.init_fin_simulation1[OF FWdelay_bisimulation_obs_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.init_fin_bisim final2 final1\n            (\\<lambda>t. flip (bisim t)) ?t ?s1.0 ?s2.0;\n   r2.init_fin ?t ?s1.0 ?tl1.0 ?s1';\n   \\<not> r2.init_fin_\\<tau>move ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move (r1.init_fin ?t)\n                         r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       r1.init_fin ?t s2' tl2 s2'' \\<and>\n                       \\<not> r1.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                       FWbisimulation_base.init_fin_bisim final2 final1\n                        (\\<lambda>t. flip (bisim t)) ?t ?s1' s2'' \\<and>\n                       ta_bisim\n                        (FWbisimulation_base.init_fin_bisim final2 final1\n                          (\\<lambda>t. flip (bisim t)))\n                        ?tl1.0 tl2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2';\n     \\<not> r2.init_fin_\\<tau>move s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s1 s1' \\<and>\n                         r1.init_fin t s1' tl1 s1'' \\<and>\n                         \\<not> r1.init_fin_\\<tau>move s1' tl1 s1'' \\<and>\n                         t \\<turnstile> s1'' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<turnstile> ?s2.0 \\<approx>i ?s1.0;\n   r2.init_fin ?t ?s1.0 ?tl1.0 ?s1';\n   \\<not> r2.init_fin_\\<tau>move ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move (r1.init_fin ?t)\n                         r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       r1.init_fin ?t s2' tl2 s2'' \\<and>\n                       \\<not> r1.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n                       ?t \\<turnstile> s2'' \\<approx>i ?s1' \\<and>\n                       ta_bisim init_fin_bisim tl2 ?tl1.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2';\n     \\<not> r2.init_fin_\\<tau>move s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          s1 s1' \\<and>\n                         r1.init_fin t s1' tl1 s1'' \\<and>\n                         \\<not> r1.init_fin_\\<tau>move s1' tl1 s1'' \\<and>\n                         t \\<turnstile> s1'' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "."], ["", "lemma init_fin_simulation_Wakeup1:\n  assumes bisim: \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\"\n  and wait: \"sx1 \\<approx>iw sx2\"\n  and red1: \"r1.init_fin t (sx1, m1) ta1 (sx1', m1')\"\n  and wakeup: \"Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\"\n  shows \"\\<exists>ta2 sx2' m2'. r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                        ta_bisim init_fin_bisim ta1 ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from bisim wait"], ["proof (chain)\npicking this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2", "obtain status x1 x2 \n    where sx1: \"sx1 = (status, x1)\"\n    and sx2: \"sx2 = (status, x2)\"\n    and Bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\"\n    and Wait: \"x1 \\<approx>w x2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2\n\ngoal (1 subgoal):\n 1. (\\<And>status x1 x2.\n        \\<lbrakk>sx1 = (status, x1); sx2 = (status, x2);\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n         x1 \\<approx>w x2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  sx1 = (status, x1)\n  sx2 = (status, x2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  x1 \\<approx>w x2\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from red1 wakeup sx1"], ["proof (chain)\npicking this:\n  r1.init_fin t (sx1, m1) ta1 (sx1', m1')\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  sx1 = (status, x1)", "obtain x1' ta1' \n    where sx1': \"sx1' = (Running, x1')\"\n    and status: \"status = Running\"\n    and Red1: \"t \\<turnstile> (x1, m1) -1-ta1'\\<rightarrow> (x1', m1')\"\n    and ta1: \"ta1 = convert_TA_initial (convert_obs_initial ta1')\"\n    and Wakeup: \"Notified \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.init_fin t (sx1, m1) ta1 (sx1', m1')\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  sx1 = (status, x1)\n\ngoal (1 subgoal):\n 1. (\\<And>x1' ta1'.\n        \\<lbrakk>sx1' = (Running, x1'); status = Running;\n         r1.r_syntax t x1 m1 ta1' x1' m1';\n         ta1 = convert_TA_initial (convert_obs_initial ta1');\n         Notified \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n         WokenUp \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  sx1' = (Running, x1')\n  status = Running\n  r1.r_syntax t x1 m1 ta1' x1' m1'\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  Notified \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from simulation_Wakeup1[OF Bisim Wait Red1 Wakeup]"], ["proof (chain)\npicking this:\n  \\<exists>ta2 x2' m2'.\n     r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1' \\<sim>m ta2", "obtain ta2' x2' m2'\n    where red2: \"t \\<turnstile> (x2, m2) -2-ta2'\\<rightarrow> (x2', m2')\"\n    and bisim': \"t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\" \n    and tasim: \"ta1' \\<sim>m ta2'\""], ["proof (prove)\nusing this:\n  \\<exists>ta2 x2' m2'.\n     r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1' \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. (\\<And>ta2' x2' m2'.\n        \\<lbrakk>r2.r_syntax t x2 m2 ta2' x2' m2';\n         t \\<turnstile> (x1', m1') \\<approx> (x2', m2');\n         ta1' \\<sim>m ta2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r2.r_syntax t x2 m2 ta2' x2' m2'\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1' \\<sim>m ta2'\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "let ?sx2' = \"(Running, x2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "let ?ta2 = \"convert_TA_initial (convert_obs_initial ta2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from red2"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2 m2 ta2' x2' m2'", "have \"r2.init_fin t (sx2, m2) ?ta2 (?sx2', m2')\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2 m2 ta2' x2' m2'\n\ngoal (1 subgoal):\n 1. r2.init_fin t (sx2, m2) (convert_TA_initial (convert_obs_initial ta2'))\n     ((Running, x2'), m2')", "unfolding sx2 status"], ["proof (prove)\nusing this:\n  r2.r_syntax t x2 m2 ta2' x2' m2'\n\ngoal (1 subgoal):\n 1. r2.init_fin t ((Running, x2), m2)\n     (convert_TA_initial (convert_obs_initial ta2')) ((Running, x2'), m2')", ".."], ["proof (state)\nthis:\n  r2.init_fin t (sx2, m2) (convert_TA_initial (convert_obs_initial ta2'))\n   ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "moreover"], ["proof (state)\nthis:\n  r2.init_fin t (sx2, m2) (convert_TA_initial (convert_obs_initial ta2'))\n   ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from bisim' sx1'"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  sx1' = (Running, x1')", "have \"t \\<turnstile> (sx1', m1') \\<approx>i (?sx2', m2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  sx1' = (Running, x1')\n\ngoal (1 subgoal):\n 1. t \\<turnstile> (sx1', m1') \\<approx>i ((Running, x2'), m2')", "by simp"], ["proof (state)\nthis:\n  t \\<turnstile> (sx1', m1') \\<approx>i ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> (sx1', m1') \\<approx>i ((Running, x2'), m2')\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "from tasim ta1"], ["proof (chain)\npicking this:\n  ta1' \\<sim>m ta2'\n  ta1 = convert_TA_initial (convert_obs_initial ta1')", "have \"ta_bisim init_fin_bisim ta1 ?ta2\""], ["proof (prove)\nusing this:\n  ta1' \\<sim>m ta2'\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n\ngoal (1 subgoal):\n 1. ta_bisim init_fin_bisim ta1\n     (convert_TA_initial (convert_obs_initial ta2'))", "by simp"], ["proof (state)\nthis:\n  ta_bisim init_fin_bisim ta1\n   (convert_TA_initial (convert_obs_initial ta2'))\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "ultimately"], ["proof (chain)\npicking this:\n  r2.init_fin t (sx2, m2) (convert_TA_initial (convert_obs_initial ta2'))\n   ((Running, x2'), m2')\n  t \\<turnstile> (sx1', m1') \\<approx>i ((Running, x2'), m2')\n  ta_bisim init_fin_bisim ta1\n   (convert_TA_initial (convert_obs_initial ta2'))", "show ?thesis"], ["proof (prove)\nusing this:\n  r2.init_fin t (sx2, m2) (convert_TA_initial (convert_obs_initial ta2'))\n   ((Running, x2'), m2')\n  t \\<turnstile> (sx1', m1') \\<approx>i ((Running, x2'), m2')\n  ta_bisim init_fin_bisim ta1\n   (convert_TA_initial (convert_obs_initial ta2'))\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "by blast"], ["proof (state)\nthis:\n  \\<exists>ta2 sx2' m2'.\n     r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n     t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n     ta_bisim init_fin_bisim ta1 ta2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_fin_simulation_Wakeup2:\n  \"\\<lbrakk> t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2); sx1 \\<approx>iw sx2; r2.init_fin t (sx2, m2) ta2 (sx2', m2');\n    Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta1 sx1' m1'. r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                     ta_bisim init_fin_bisim ta1 ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2);\n     sx1 \\<approx>iw sx2; r2.init_fin t (sx2, m2) ta2 (sx2', m2');\n     Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n     WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta1 sx1' m1'.\n                         r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and>\n                         t \\<turnstile> (sx1',\n   m1') \\<approx>i (sx2', m2') \\<and>\n                         ta_bisim init_fin_bisim ta1 ta2", "using FWdelay_bisimulation_obs.init_fin_simulation_Wakeup1[OF FWdelay_bisimulation_obs_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.init_fin_bisim final2 final1\n            (\\<lambda>t. flip (bisim t)) ?t (?sx1.0, ?m1.0) (?sx2.0, ?m2.0);\n   FWbisimulation_base.init_fin_bisim_wait (flip bisim_wait) ?sx1.0 ?sx2.0;\n   r2.init_fin ?t (?sx1.0, ?m1.0) ?ta1.0 (?sx1', ?m1');\n   Notified \\<in> set \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n   WokenUp \\<in> set \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta2 sx2' m2'.\n                       r1.init_fin ?t (?sx2.0, ?m2.0) ta2 (sx2', m2') \\<and>\n                       FWbisimulation_base.init_fin_bisim final2 final1\n                        (\\<lambda>t. flip (bisim t)) ?t (?sx1', ?m1')\n                        (sx2', m2') \\<and>\n                       ta_bisim\n                        (FWbisimulation_base.init_fin_bisim final2 final1\n                          (\\<lambda>t. flip (bisim t)))\n                        ?ta1.0 ta2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2);\n     sx1 \\<approx>iw sx2; r2.init_fin t (sx2, m2) ta2 (sx2', m2');\n     Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n     WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta1 sx1' m1'.\n                         r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and>\n                         t \\<turnstile> (sx1',\n   m1') \\<approx>i (sx2', m2') \\<and>\n                         ta_bisim init_fin_bisim ta1 ta2", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<turnstile> (?sx2.0, ?m2.0) \\<approx>i (?sx1.0, ?m1.0);\n   ?sx2.0 \\<approx>iw ?sx1.0;\n   r2.init_fin ?t (?sx1.0, ?m1.0) ?ta1.0 (?sx1', ?m1');\n   Notified \\<in> set \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n   WokenUp \\<in> set \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta2 sx2' m2'.\n                       r1.init_fin ?t (?sx2.0, ?m2.0) ta2 (sx2', m2') \\<and>\n                       ?t \\<turnstile> (sx2',\n  m2') \\<approx>i (?sx1', ?m1') \\<and>\n                       ta_bisim init_fin_bisim ta2 ?ta1.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2);\n     sx1 \\<approx>iw sx2; r2.init_fin t (sx2, m2) ta2 (sx2', m2');\n     Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n     WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta1 sx1' m1'.\n                         r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and>\n                         t \\<turnstile> (sx1',\n   m1') \\<approx>i (sx2', m2') \\<and>\n                         ta_bisim init_fin_bisim ta1 ta2", "."], ["", "lemma init_fin_delay_bisimulation_obs:\n  \"delay_bisimulation_obs (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) (ta_bisim init_fin_bisim)\n         r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_obs (r1.init_fin t) (r2.init_fin t)\n     (init_fin_bisim t) (ta_bisim init_fin_bisim) r1.init_fin_\\<tau>move\n     r2.init_fin_\\<tau>move", "by(unfold_locales)(erule (2) init_fin_simulation1 init_fin_simulation2)+"], ["", "lemma init_fin_FWdelay_bisimulation_obs:\n  \"FWdelay_bisimulation_obs r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim init_fin_bisim_wait r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_obs r1.init_fin_final r1.init_fin r2.init_fin_final\n     r2.init_fin init_fin_bisim init_fin_bisim_wait r1.init_fin_\\<tau>move\n     r2.init_fin_\\<tau>move", "proof(intro FWdelay_bisimulation_obs.intro init_fin_FWdelay_bisimulation_final_base FWdelay_bisimulation_obs_axioms.intro init_fin_delay_bisimulation_obs)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t' sx m1 sxx m2 t sx1 sx2 sx1' ta1 sx1'' m1' sx2' ta2 sx2'' m2'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume bisim: \"t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\" \n    and bisim1: \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\"\n    and red1: \"\\<tau>trsys.silent_moves (r1.init_fin t) r1.init_fin_\\<tau>move (sx1, m1) (sx1', m1)\"\n    and red1': \"r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\"\n    and \\<tau>1: \"\\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\"\n    and red2: \"\\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move (sx2, m2) (sx2', m2)\"\n    and red2':\"r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\"\n    and \\<tau>2: \"\\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\"\n    and bisim1': \"t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\"\n    and tasim: \"ta_bisim init_fin_bisim ta1 ta2\""], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\n  ta_bisim init_fin_bisim ta1 ta2\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "from bisim"], ["proof (chain)\npicking this:\n  t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)", "obtain status x xx \n    where sx:\"sx = (status, x)\"\n    and sxx: \"sxx = (status, xx)\"\n    and Bisim: \"t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\"\n    and Finish: \"status = Finished \\<Longrightarrow> final1 x \\<and> final2 xx\""], ["proof (prove)\nusing this:\n  t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\n\ngoal (1 subgoal):\n 1. (\\<And>status x xx.\n        \\<lbrakk>sx = (status, x); sxx = (status, xx);\n         t' \\<turnstile> (x, m1) \\<approx> (xx, m2);\n         status = Finished \\<Longrightarrow>\n         final1 x \\<and> final2 xx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx)(cases sxx, auto simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  sx = (status, x)\n  sxx = (status, xx)\n  t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\n  status = Finished \\<Longrightarrow> final1 x \\<and> final2 xx\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "from bisim1"], ["proof (chain)\npicking this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)", "obtain status1 x1 x2\n    where sx1: \"sx1 = (status1, x1)\"\n    and sx2: \"sx2 = (status1, x2)\"\n    and Bisim1: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n\ngoal (1 subgoal):\n 1. (\\<And>status1 x1 x2.\n        \\<lbrakk>sx1 = (status1, x1); sx2 = (status1, x2);\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1)(cases sx2, auto simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  sx1 = (status1, x1)\n  sx2 = (status1, x2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "from bisim1'"], ["proof (chain)\npicking this:\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')", "obtain status1' x1'' x2''\n    where sx1'': \"sx1'' = (status1', x1'')\"\n    and sx2'': \"sx2'' = (status1', x2'')\"\n    and Bisim1': \"t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\n\ngoal (1 subgoal):\n 1. (\\<And>status1' x1'' x2''.\n        \\<lbrakk>sx1'' = (status1', x1''); sx2'' = (status1', x2'');\n         t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1'')(cases sx2'', auto simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  sx1'' = (status1', x1'')\n  sx2'' = (status1', x2'')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red1 sx1"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  sx1 = (status1, x1)", "obtain x1' where sx1': \"sx1' = (status1, x1')\"\n    and Red1: \"r1.silent_moves t (x1, m1) (x1', m1)\""], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  sx1 = (status1, x1)\n\ngoal (1 subgoal):\n 1. (\\<And>x1'.\n        \\<lbrakk>sx1' = (status1, x1');\n         r1.silent_moves t (x1, m1) (x1', m1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1')(auto dest: r1.init_fin_silent_movesD)"], ["proof (state)\nthis:\n  sx1' = (status1, x1')\n  r1.silent_moves t (x1, m1) (x1', m1)\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red2 sx2"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  sx2 = (status1, x2)", "obtain x2' where sx2': \"sx2' = (status1, x2')\"\n    and Red2: \"r2.silent_moves t (x2, m2) (x2', m2)\""], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  sx2 = (status1, x2)\n\ngoal (1 subgoal):\n 1. (\\<And>x2'.\n        \\<lbrakk>sx2' = (status1, x2');\n         r2.silent_moves t (x2, m2) (x2', m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx2')(auto dest: r2.init_fin_silent_movesD)"], ["proof (state)\nthis:\n  sx2' = (status1, x2')\n  r2.silent_moves t (x2, m2) (x2', m2)\n\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 5. Ex r1.init_fin_final = Ex r2.init_fin_final", "show \"t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "proof(cases \"status1 = Running \\<and> status1' = Running\")"], ["proof (state)\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "case True"], ["proof (state)\nthis:\n  status1 = Running \\<and> status1' = Running\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "with red1' sx1' sx1''"], ["proof (chain)\npicking this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  status1 = Running \\<and> status1' = Running", "obtain ta1'\n      where Red1': \"t \\<turnstile> (x1', m1) -1-ta1'\\<rightarrow> (x1'', m1')\"\n      and ta1: \"ta1 = convert_TA_initial (convert_obs_initial ta1')\""], ["proof (prove)\nusing this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  status1 = Running \\<and> status1' = Running\n\ngoal (1 subgoal):\n 1. (\\<And>ta1'.\n        \\<lbrakk>r1.r_syntax t x1' m1 ta1' x1'' m1';\n         ta1 = convert_TA_initial (convert_obs_initial ta1')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "from red2' sx2' sx2'' True"], ["proof (chain)\npicking this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  status1 = Running \\<and> status1' = Running", "obtain ta2'\n      where Red2': \"t \\<turnstile> (x2', m2) -2-ta2'\\<rightarrow> (x2'', m2')\"\n      and ta2: \"ta2 = convert_TA_initial (convert_obs_initial ta2')\""], ["proof (prove)\nusing this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  status1 = Running \\<and> status1' = Running\n\ngoal (1 subgoal):\n 1. (\\<And>ta2'.\n        \\<lbrakk>r2.r_syntax t x2' m2 ta2' x2'' m2';\n         ta2 = convert_TA_initial (convert_obs_initial ta2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "from \\<tau>1 sx1' sx1'' ta1 True"], ["proof (chain)\npicking this:\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  status1 = Running \\<and> status1' = Running", "have \\<tau>1':\"\\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\""], ["proof (prove)\nusing this:\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  status1 = Running \\<and> status1' = Running\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "from \\<tau>2 sx2' sx2'' ta2 True"], ["proof (chain)\npicking this:\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n  status1 = Running \\<and> status1' = Running", "have \\<tau>2':\"\\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\""], ["proof (prove)\nusing this:\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n  status1 = Running \\<and> status1' = Running\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "from tasim ta1 ta2"], ["proof (chain)\npicking this:\n  ta_bisim init_fin_bisim ta1 ta2\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')", "have \"ta1' \\<sim>m ta2'\""], ["proof (prove)\nusing this:\n  ta_bisim init_fin_bisim ta1 ta2\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n\ngoal (1 subgoal):\n 1. ta1' \\<sim>m ta2'", "by simp"], ["proof (state)\nthis:\n  ta1' \\<sim>m ta2'\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "with Bisim Bisim1 Red1 Red1' \\<tau>1' Red2 Red2' \\<tau>2' Bisim1'"], ["proof (chain)\npicking this:\n  t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n  r2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1' \\<sim>m ta2'", "have \"t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\""], ["proof (prove)\nusing this:\n  t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n  r2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1' \\<sim>m ta2'\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (x, m1') \\<approx> (xx, m2')", "by(rule bisim_inv_red_other)"], ["proof (state)\nthis:\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n\ngoal (2 subgoals):\n 1. status1 = Running \\<and> status1' = Running \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n 2. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "with True Finish"], ["proof (chain)\npicking this:\n  status1 = Running \\<and> status1' = Running\n  status = Finished \\<Longrightarrow> final1 x \\<and> final2 xx\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')", "show ?thesis"], ["proof (prove)\nusing this:\n  status1 = Running \\<and> status1' = Running\n  status = Finished \\<Longrightarrow> final1 x \\<and> final2 xx\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "unfolding sx sxx"], ["proof (prove)\nusing this:\n  status1 = Running \\<and> status1' = Running\n  status = Finished \\<Longrightarrow> final1 x \\<and> final2 xx\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> ((status, x), m1') \\<approx>i ((status, xx), m2')", "by(simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "case False"], ["proof (state)\nthis:\n  \\<not> (status1 = Running \\<and> status1' = Running)\n\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "with red1' sx1' sx1''"], ["proof (chain)\npicking this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  \\<not> (status1 = Running \\<and> status1' = Running)", "have \"m1' = m1\""], ["proof (prove)\nusing this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status1, x1')\n  sx1'' = (status1', x1'')\n  \\<not> (status1 = Running \\<and> status1' = Running)\n\ngoal (1 subgoal):\n 1. m1' = m1", "by cases auto"], ["proof (state)\nthis:\n  m1' = m1\n\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "moreover"], ["proof (state)\nthis:\n  m1' = m1\n\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "from red2' sx2' sx2'' False"], ["proof (chain)\npicking this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  \\<not> (status1 = Running \\<and> status1' = Running)", "have \"m2' = m2\""], ["proof (prove)\nusing this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status1, x2')\n  sx2'' = (status1', x2'')\n  \\<not> (status1 = Running \\<and> status1' = Running)\n\ngoal (1 subgoal):\n 1. m2' = m2", "by cases auto"], ["proof (state)\nthis:\n  m2' = m2\n\ngoal (1 subgoal):\n 1. \\<not> (status1 = Running \\<and> status1' = Running) \\<Longrightarrow>\n    t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "ultimately"], ["proof (chain)\npicking this:\n  m1' = m1\n  m2' = m2", "show ?thesis"], ["proof (prove)\nusing this:\n  m1' = m1\n  m2' = m2\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "using bisim"], ["proof (prove)\nusing this:\n  m1' = m1\n  m2' = m2\n  t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "by simp"], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t sx1 m1 sx2 m2 sx1' ta1 sx1'' m1' sx2' ta2 sx2'' m2' w"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume bisim: \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\"\n    and red1: \"\\<tau>trsys.silent_moves (r1.init_fin t) r1.init_fin_\\<tau>move (sx1, m1) (sx1', m1)\"\n    and red1': \"r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\"\n    and \\<tau>1: \"\\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\"\n    and red2: \"\\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move (sx2, m2) (sx2', m2)\"\n    and red2': \"r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\"\n    and \\<tau>2: \"\\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\"\n    and bisim': \"t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\"\n    and tasim: \"ta_bisim init_fin_bisim ta1 ta2\"\n    and suspend1: \"Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\"\n    and suspend2: \"Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (state)\nthis:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\n  ta_bisim init_fin_bisim ta1 ta2\n  Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from bisim"], ["proof (chain)\npicking this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)", "obtain status x1 x2\n    where sx1: \"sx1 = (status, x1)\"\n    and sx2: \"sx2 = (status, x2)\"\n    and Bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n\ngoal (1 subgoal):\n 1. (\\<And>status x1 x2.\n        \\<lbrakk>sx1 = (status, x1); sx2 = (status, x2);\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1)(cases sx2, auto simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  sx1 = (status, x1)\n  sx2 = (status, x2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from bisim'"], ["proof (chain)\npicking this:\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')", "obtain status' x1'' x2''\n    where sx1'': \"sx1'' = (status', x1'')\"\n    and sx2'': \"sx2'' = (status', x2'')\"\n    and Bisim': \"t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1'', m1') \\<approx>i (sx2'', m2')\n\ngoal (1 subgoal):\n 1. (\\<And>status' x1'' x2''.\n        \\<lbrakk>sx1'' = (status', x1''); sx2'' = (status', x2'');\n         t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1'')(cases sx2'', auto simp add: init_fin_bisim_iff)"], ["proof (state)\nthis:\n  sx1'' = (status', x1'')\n  sx2'' = (status', x2'')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red1 sx1"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  sx1 = (status, x1)", "obtain x1' where sx1': \"sx1' = (status, x1')\"\n    and Red1: \"r1.silent_moves t (x1, m1) (x1', m1)\""], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r1.init_fin t)\n    r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx1, m1) (sx1', m1)\n  sx1 = (status, x1)\n\ngoal (1 subgoal):\n 1. (\\<And>x1'.\n        \\<lbrakk>sx1' = (status, x1');\n         r1.silent_moves t (x1, m1) (x1', m1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx1')(auto dest: r1.init_fin_silent_movesD)"], ["proof (state)\nthis:\n  sx1' = (status, x1')\n  r1.silent_moves t (x1, m1) (x1', m1)\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red2 sx2"], ["proof (chain)\npicking this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  sx2 = (status, x2)", "obtain x2' where sx2': \"sx2' = (status, x2')\"\n    and Red2: \"r2.silent_moves t (x2, m2) (x2', m2)\""], ["proof (prove)\nusing this:\n  (\\<tau>trsys.silent_move (r2.init_fin t)\n    r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n   (sx2, m2) (sx2', m2)\n  sx2 = (status, x2)\n\ngoal (1 subgoal):\n 1. (\\<And>x2'.\n        \\<lbrakk>sx2' = (status, x2');\n         r2.silent_moves t (x2, m2) (x2', m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases sx2')(auto dest: r2.init_fin_silent_movesD)"], ["proof (state)\nthis:\n  sx2' = (status, x2')\n  r2.silent_moves t (x2, m2) (x2', m2)\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red1' sx1' sx1'' suspend1"], ["proof (chain)\npicking this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status, x1')\n  sx1'' = (status', x1'')\n  Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>", "obtain ta1'\n    where Red1': \"t \\<turnstile> (x1', m1) -1-ta1'\\<rightarrow> (x1'', m1')\"\n    and ta1: \"ta1 = convert_TA_initial (convert_obs_initial ta1')\"\n    and Suspend1: \"Suspend w \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\"\n    and status: \"status = Running\" \"status' = Running\""], ["proof (prove)\nusing this:\n  r1.init_fin t (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status, x1')\n  sx1'' = (status', x1'')\n  Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>ta1'.\n        \\<lbrakk>r1.r_syntax t x1' m1 ta1' x1'' m1';\n         ta1 = convert_TA_initial (convert_obs_initial ta1');\n         Suspend w \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>;\n         status = Running; status' = Running\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  Suspend w \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\n  status = Running\n  status' = Running\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from red2' sx2' sx2'' suspend2"], ["proof (chain)\npicking this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status, x2')\n  sx2'' = (status', x2'')\n  Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>", "obtain ta2'\n    where Red2': \"t \\<turnstile> (x2', m2) -2-ta2'\\<rightarrow> (x2'', m2')\"\n    and ta2: \"ta2 = convert_TA_initial (convert_obs_initial ta2')\"\n    and Suspend2: \"Suspend w \\<in> set \\<lbrace>ta2'\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  r2.init_fin t (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status, x2')\n  sx2'' = (status', x2'')\n  Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>ta2'.\n        \\<lbrakk>r2.r_syntax t x2' m2 ta2' x2'' m2';\n         ta2 = convert_TA_initial (convert_obs_initial ta2');\n         Suspend w\n         \\<in> set \\<lbrace>ta2'\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n  Suspend w \\<in> set \\<lbrace>ta2'\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from \\<tau>1 sx1' sx1'' ta1 status"], ["proof (chain)\npicking this:\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status, x1')\n  sx1'' = (status', x1'')\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  status = Running\n  status' = Running", "have \\<tau>1':\"\\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\""], ["proof (prove)\nusing this:\n  \\<not> r1.init_fin_\\<tau>move (sx1', m1) ta1 (sx1'', m1')\n  sx1' = (status, x1')\n  sx1'' = (status', x1'')\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  status = Running\n  status' = Running\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from \\<tau>2 sx2' sx2'' ta2 status"], ["proof (chain)\npicking this:\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status, x2')\n  sx2'' = (status', x2'')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n  status = Running\n  status' = Running", "have \\<tau>2':\"\\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\""], ["proof (prove)\nusing this:\n  \\<not> r2.init_fin_\\<tau>move (sx2', m2) ta2 (sx2'', m2')\n  sx2' = (status, x2')\n  sx2'' = (status', x2'')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n  status = Running\n  status' = Running\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "from tasim ta1 ta2"], ["proof (chain)\npicking this:\n  ta_bisim init_fin_bisim ta1 ta2\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')", "have \"ta1' \\<sim>m ta2'\""], ["proof (prove)\nusing this:\n  ta_bisim init_fin_bisim ta1 ta2\n  ta1 = convert_TA_initial (convert_obs_initial ta1')\n  ta2 = convert_TA_initial (convert_obs_initial ta2')\n\ngoal (1 subgoal):\n 1. ta1' \\<sim>m ta2'", "by simp"], ["proof (state)\nthis:\n  ta1' \\<sim>m ta2'\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "with Bisim Red1 Red1' \\<tau>1' Red2 Red2' \\<tau>2' Bisim'"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n  r2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1' \\<sim>m ta2'", "have \"x1'' \\<approx>w x2''\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n  r2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1' \\<sim>m ta2'\n\ngoal (1 subgoal):\n 1. x1'' \\<approx>w x2''", "using Suspend1 Suspend2"], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1' x1'' m1'\n  \\<not> \\<tau>move1 (x1', m1) ta1' (x1'', m1')\n  r2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2' x2'' m2'\n  \\<not> \\<tau>move2 (x2', m2) ta2' (x2'', m2')\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1' \\<sim>m ta2'\n  Suspend w \\<in> set \\<lbrace>ta1'\\<rbrace>\\<^bsub>w\\<^esub>\n  Suspend w \\<in> set \\<lbrace>ta2'\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. x1'' \\<approx>w x2''", "by(rule bisim_waitI)"], ["proof (state)\nthis:\n  x1'' \\<approx>w x2''\n\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        (\\<tau>trsys.silent_move (r1.init_fin t)\n          r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x1, m1) (x1', m1);\n        r1.init_fin t (x1', m1) ta1 (x1'', m1');\n        \\<not> r1.init_fin_\\<tau>move (x1', m1) ta1 (x1'', m1');\n        (\\<tau>trsys.silent_move (r2.init_fin t)\n          r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n         (x2, m2) (x2', m2);\n        r2.init_fin t (x2', m2) ta2 (x2'', m2');\n        \\<not> r2.init_fin_\\<tau>move (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x1'', m1') \\<approx>i (x2'', m2');\n        ta_bisim init_fin_bisim ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x1'' \\<approx>iw x2''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 4. Ex r1.init_fin_final = Ex r2.init_fin_final", "thus \"sx1'' \\<approx>iw sx2''\""], ["proof (prove)\nusing this:\n  x1'' \\<approx>w x2''\n\ngoal (1 subgoal):\n 1. sx1'' \\<approx>iw sx2''", "using sx1'' sx2'' status"], ["proof (prove)\nusing this:\n  x1'' \\<approx>w x2''\n  sx1'' = (status', x1'')\n  sx2'' = (status', x2'')\n  status = Running\n  status' = Running\n\ngoal (1 subgoal):\n 1. sx1'' \\<approx>iw sx2''", "by simp"], ["proof (state)\nthis:\n  sx1'' \\<approx>iw sx2''\n\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t sx1 m1 sx2 m2 ta1 sx1' m1'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\" and \"sx1 \\<approx>iw sx2\"\n    and \"r1.init_fin t (sx1, m1) ta1 (sx1', m1')\"\n    and \"Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (state)\nthis:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2\n  r1.init_fin t (sx1, m1) ta1 (sx1', m1')\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r1.init_fin t (x1, m1) ta1 (x1', m1');\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.init_fin t (x2, m2) ta2 (x2', m2') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "thus \"\\<exists>ta2 sx2' m2'. r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                       ta_bisim init_fin_bisim ta1 ta2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2\n  r1.init_fin t (sx1, m1) ta1 (sx1', m1')\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 sx2' m2'.\n       r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "by(rule init_fin_simulation_Wakeup1)"], ["proof (state)\nthis:\n  \\<exists>ta2 sx2' m2'.\n     r2.init_fin t (sx2, m2) ta2 (sx2', m2') \\<and>\n     t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n     ta_bisim init_fin_bisim ta1 ta2\n\ngoal (2 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t sx1 m1 sx2 m2 ta2 sx2' m2'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\" and \"sx1 \\<approx>iw sx2\"\n    and \"r2.init_fin t (sx2, m2) ta2 (sx2', m2')\"\n    and \"Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (state)\nthis:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2\n  r2.init_fin t (sx2, m2) ta2 (sx2', m2')\n  Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        x1 \\<approx>iw x2; r2.init_fin t (x2, m2) ta2 (x2', m2');\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.init_fin t (x1, m1) ta1 (x1', m1') \\<and>\n                            t \\<turnstile> (x1',\n      m1') \\<approx>i (x2', m2') \\<and>\n                            ta_bisim init_fin_bisim ta1 ta2\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "thus \"\\<exists>ta1 sx1' m1'. r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and> t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and> \n                       ta_bisim init_fin_bisim ta1 ta2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  sx1 \\<approx>iw sx2\n  r2.init_fin t (sx2, m2) ta2 (sx2', m2')\n  Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>ta1 sx1' m1'.\n       r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and>\n       t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n       ta_bisim init_fin_bisim ta1 ta2", "by(rule init_fin_simulation_Wakeup2)"], ["proof (state)\nthis:\n  \\<exists>ta1 sx1' m1'.\n     r1.init_fin t (sx1, m1) ta1 (sx1', m1') \\<and>\n     t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2') \\<and>\n     ta_bisim init_fin_bisim ta1 ta2\n\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "show \"(\\<exists>sx1. r1.init_fin_final sx1) = (\\<exists>sx2. r2.init_fin_final sx2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "using ex_final1_conv_ex_final2"], ["proof (prove)\nusing this:\n  (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)\n\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "by(auto)"], ["proof (state)\nthis:\n  Ex r1.init_fin_final = Ex r2.init_fin_final\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context FWdelay_bisimulation_diverge begin"], ["", "lemma init_fin_simulation_silent1:\n  \"\\<lbrakk> t \\<turnstile> sxm1 \\<approx>i sxm2; \\<tau>trsys.silent_move (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 sxm1' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm2'. \\<tau>trsys.silent_moves (r2.init_fin t) r2.init_fin_\\<tau>move sxm2 sxm2' \\<and> t \\<turnstile> sxm1' \\<approx>i sxm2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> sxm1 \\<approx>i sxm2;\n     \\<tau>trsys.silent_move (r1.init_fin t) r1.init_fin_\\<tau>move sxm1\n      sxm1'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sxm2'.\n                         (\\<tau>trsys.silent_move (r2.init_fin t)\n                           r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          sxm2 sxm2' \\<and>\n                         t \\<turnstile> sxm1' \\<approx>i sxm2'", "by(cases sxm1')(auto 4 4 elim!: init_fin_bisim.cases dest!: r1.init_fin_silent_moveD dest: simulation_silent1 intro!: r2.init_fin_silent_moves_RunningI)"], ["", "lemma init_fin_simulation_silent2:\n  \"\\<lbrakk> t \\<turnstile> sxm1 \\<approx>i sxm2; \\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move sxm2 sxm2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm1'. \\<tau>trsys.silent_moves (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 sxm1' \\<and> t \\<turnstile> sxm1' \\<approx>i sxm2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> sxm1 \\<approx>i sxm2;\n     \\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move sxm2\n      sxm2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sxm1'.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          sxm1 sxm1' \\<and>\n                         t \\<turnstile> sxm1' \\<approx>i sxm2'", "using FWdelay_bisimulation_diverge.init_fin_simulation_silent1[OF FWdelay_bisimulation_diverge_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.init_fin_bisim final2 final1\n            (\\<lambda>t. flip (bisim t)) ?t ?sxm1.0 ?sxm2.0;\n   \\<tau>trsys.silent_move (r2.init_fin ?t) r2.init_fin_\\<tau>move ?sxm1.0\n    ?sxm1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm2'.\n                       (\\<tau>trsys.silent_move (r1.init_fin ?t)\n                         r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                        ?sxm2.0 sxm2' \\<and>\n                       FWbisimulation_base.init_fin_bisim final2 final1\n                        (\\<lambda>t. flip (bisim t)) ?t ?sxm1' sxm2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> sxm1 \\<approx>i sxm2;\n     \\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move sxm2\n      sxm2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sxm1'.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          sxm1 sxm1' \\<and>\n                         t \\<turnstile> sxm1' \\<approx>i sxm2'", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<turnstile> ?sxm2.0 \\<approx>i ?sxm1.0;\n   \\<tau>trsys.silent_move (r2.init_fin ?t) r2.init_fin_\\<tau>move ?sxm1.0\n    ?sxm1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sxm2'.\n                       (\\<tau>trsys.silent_move (r1.init_fin ?t)\n                         r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                        ?sxm2.0 sxm2' \\<and>\n                       ?t \\<turnstile> sxm2' \\<approx>i ?sxm1'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> sxm1 \\<approx>i sxm2;\n     \\<tau>trsys.silent_move (r2.init_fin t) r2.init_fin_\\<tau>move sxm2\n      sxm2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sxm1'.\n                         (\\<tau>trsys.silent_move (r1.init_fin t)\n                           r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n                          sxm1 sxm1' \\<and>\n                         t \\<turnstile> sxm1' \\<approx>i sxm2'", "."], ["", "lemma init_fin_\\<tau>diverge_bisim_inv:\n  \"t \\<turnstile> sxm1 \\<approx>i sxm2 \n  \\<Longrightarrow> \\<tau>trsys.\\<tau>diverge (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 =\n      \\<tau>trsys.\\<tau>diverge (r2.init_fin t) r2.init_fin_\\<tau>move sxm2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<turnstile> sxm1 \\<approx>i sxm2 \\<Longrightarrow>\n    \\<tau>trsys.\\<tau>diverge (r1.init_fin t) r1.init_fin_\\<tau>move sxm1 =\n    \\<tau>trsys.\\<tau>diverge (r2.init_fin t) r2.init_fin_\\<tau>move sxm2", "by(cases sxm1)(cases sxm2, auto simp add: r1.init_fin_\\<tau>diverge_conv r2.init_fin_\\<tau>diverge_conv init_fin_bisim_iff \\<tau>diverge_bisim_inv)"], ["", "lemma init_fin_delay_bisimulation_diverge:\n  \"delay_bisimulation_diverge (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t) (ta_bisim init_fin_bisim)\n         r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge (r1.init_fin t) (r2.init_fin t)\n     (init_fin_bisim t) (ta_bisim init_fin_bisim) r1.init_fin_\\<tau>move\n     r2.init_fin_\\<tau>move", "by(blast intro: delay_bisimulation_diverge.intro init_fin_delay_bisimulation_obs delay_bisimulation_diverge_axioms.intro init_fin_simulation_silent1 init_fin_simulation_silent2 init_fin_\\<tau>diverge_bisim_inv del: iffI)+"], ["", "lemma init_fin_FWdelay_bisimulation_diverge:\n  \"FWdelay_bisimulation_diverge r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim init_fin_bisim_wait r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge r1.init_fin_final r1.init_fin\n     r2.init_fin_final r2.init_fin init_fin_bisim init_fin_bisim_wait\n     r1.init_fin_\\<tau>move r2.init_fin_\\<tau>move", "by(intro FWdelay_bisimulation_diverge.intro init_fin_FWdelay_bisimulation_obs FWdelay_bisimulation_diverge_axioms.intro init_fin_delay_bisimulation_diverge)"], ["", "end"], ["", "context FWbisimulation begin"], ["", "lemma init_fin_simulation1:\n  assumes \"t \\<turnstile> s1 \\<approx>i s2\" and \"r1.init_fin t s1 tl1 s1'\"\n  shows \"\\<exists>s2' tl2. r2.init_fin t s2 tl2 s2' \\<and> t \\<turnstile> s1' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2' tl2.\n       r2.init_fin t s2 tl2 s2' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "using init_fin_simulation1[OF assms]"], ["proof (prove)\nusing this:\n  \\<not> r1.init_fin_\\<tau>move s1 tl1 s1' \\<Longrightarrow>\n  \\<exists>s2' s2'' tl2.\n     (\\<tau>trsys.silent_move (r2.init_fin t)\n       r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n      s2 s2' \\<and>\n     r2.init_fin t s2' tl2 s2'' \\<and>\n     \\<not> r2.init_fin_\\<tau>move s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx>i s2'' \\<and>\n     ta_bisim init_fin_bisim tl1 tl2\n\ngoal (1 subgoal):\n 1. \\<exists>s2' tl2.\n       r2.init_fin t s2 tl2 s2' \\<and>\n       t \\<turnstile> s1' \\<approx>i s2' \\<and>\n       ta_bisim init_fin_bisim tl1 tl2", "by(auto simp add: \\<tau>moves_False init_fin_\\<tau>moves_False)"], ["", "lemma init_fin_simulation2:\n  \"\\<lbrakk> t \\<turnstile> s1 \\<approx>i s2; r2.init_fin t s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' tl1. r1.init_fin t s1 tl1 s1' \\<and> t \\<turnstile> s1' \\<approx>i s2' \\<and> ta_bisim init_fin_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2;\n     r2.init_fin t s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' tl1.\n                         r1.init_fin t s1 tl1 s1' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "using FWbisimulation.init_fin_simulation1[OF FWbisimulation_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.init_fin_bisim final2 final1\n            (\\<lambda>t. flip (bisim t)) ?t ?s1.0 ?s2.0;\n   r2.init_fin ?t ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' tl2.\n                       r1.init_fin ?t ?s2.0 tl2 s2' \\<and>\n                       FWbisimulation_base.init_fin_bisim final2 final1\n                        (\\<lambda>t. flip (bisim t)) ?t ?s1' s2' \\<and>\n                       ta_bisim\n                        (FWbisimulation_base.init_fin_bisim final2 final1\n                          (\\<lambda>t. flip (bisim t)))\n                        ?tl1.0 tl2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2;\n     r2.init_fin t s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' tl1.\n                         r1.init_fin t s1 tl1 s1' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<turnstile> ?s2.0 \\<approx>i ?s1.0;\n   r2.init_fin ?t ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' tl2.\n                       r1.init_fin ?t ?s2.0 tl2 s2' \\<and>\n                       ?t \\<turnstile> s2' \\<approx>i ?s1' \\<and>\n                       ta_bisim init_fin_bisim tl2 ?tl1.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> s1 \\<approx>i s2;\n     r2.init_fin t s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' tl1.\n                         r1.init_fin t s1 tl1 s1' \\<and>\n                         t \\<turnstile> s1' \\<approx>i s2' \\<and>\n                         ta_bisim init_fin_bisim tl1 tl2", "."], ["", "lemma init_fin_bisimulation: \n  \"bisimulation (r1.init_fin t) (r2.init_fin t)  (init_fin_bisim t) (ta_bisim init_fin_bisim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (r1.init_fin t) (r2.init_fin t) (init_fin_bisim t)\n     (ta_bisim init_fin_bisim)", "by(unfold_locales)(erule (1) init_fin_simulation1 init_fin_simulation2)+"], ["", "lemma init_fin_FWbisimulation:\n  \"FWbisimulation r1.init_fin_final r1.init_fin r2.init_fin_final r2.init_fin init_fin_bisim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation r1.init_fin_final r1.init_fin r2.init_fin_final\n     r2.init_fin init_fin_bisim", "proof(intro FWbisimulation.intro r1.multithreaded_init_fin r2.multithreaded_init_fin FWbisimulation_axioms.intro init_fin_bisimulation)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2.\n       t \\<turnstile> (x1, m1) \\<approx>i (x2, m2) \\<Longrightarrow>\n       r1.init_fin_final x1 = r2.init_fin_final x2\n 2. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t sx1 m1 sx2 m2"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2.\n       t \\<turnstile> (x1, m1) \\<approx>i (x2, m2) \\<Longrightarrow>\n       r1.init_fin_final x1 = r2.init_fin_final x2\n 2. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\""], ["proof (state)\nthis:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2.\n       t \\<turnstile> (x1, m1) \\<approx>i (x2, m2) \\<Longrightarrow>\n       r1.init_fin_final x1 = r2.init_fin_final x2\n 2. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 3. Ex r1.init_fin_final = Ex r2.init_fin_final", "thus \"r1.init_fin_final sx1 = r2.init_fin_final sx2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n\ngoal (1 subgoal):\n 1. r1.init_fin_final sx1 = r2.init_fin_final sx2", "by cases simp_all"], ["proof (state)\nthis:\n  r1.init_fin_final sx1 = r2.init_fin_final sx2\n\ngoal (2 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "fix t' sx m1 sxx m2 t sx1 sx2 ta1 sx1' m1' ta2 sx2' m2'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "assume \"t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\" \"t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\"\n    and \"r1.init_fin t (sx1, m1) ta1 (sx1', m1')\"\n    and \"r2.init_fin t (sx2, m2) ta2 (sx2', m2')\"\n    and \"t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2')\"\n    and \"ta_bisim init_fin_bisim ta1 ta2\""], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1) \\<approx>i (sxx, m2)\n  t \\<turnstile> (sx1, m1) \\<approx>i (sx2, m2)\n  r1.init_fin t (sx1, m1) ta1 (sx1', m1')\n  r2.init_fin t (sx2, m2) ta2 (sx2', m2')\n  t \\<turnstile> (sx1', m1') \\<approx>i (sx2', m2')\n  ta_bisim init_fin_bisim ta1 ta2\n\ngoal (2 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx>i (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx>i (x2, m2);\n        r1.init_fin t (x1, m1) ta1 (x1', m1');\n        r2.init_fin t (x2, m2) ta2 (x2', m2');\n        t \\<turnstile> (x1', m1') \\<approx>i (x2', m2');\n        ta_bisim init_fin_bisim ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx>i (xx, m2')\n 2. Ex r1.init_fin_final = Ex r2.init_fin_final", "from FWdelay_bisimulation_obs.bisim_inv_red_other\n  [OF init_fin_FWdelay_bisimulation_obs, OF this(1-2) _ this(3) _ _ this(4) _ this(5-6)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>(\\<tau>trsys.silent_move (r1.init_fin t)\n             r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n            (sx1, m1) (sx1, m1);\n   \\<not> r1.init_fin_\\<tau>move (sx1, m1) ta1 (sx1', m1');\n   (\\<tau>trsys.silent_move (r2.init_fin t)\n     r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n    (sx2, m2) (sx2, m2);\n   \\<not> r2.init_fin_\\<tau>move (sx2, m2) ta2 (sx2', m2')\\<rbrakk>\n  \\<Longrightarrow> t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "show \"t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(\\<tau>trsys.silent_move (r1.init_fin t)\n             r1.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n            (sx1, m1) (sx1, m1);\n   \\<not> r1.init_fin_\\<tau>move (sx1, m1) ta1 (sx1', m1');\n   (\\<tau>trsys.silent_move (r2.init_fin t)\n     r2.init_fin_\\<tau>move)\\<^sup>*\\<^sup>*\n    (sx2, m2) (sx2, m2);\n   \\<not> r2.init_fin_\\<tau>move (sx2, m2) ta2 (sx2', m2')\\<rbrakk>\n  \\<Longrightarrow> t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')", "by(simp add: init_fin_\\<tau>moves_False)"], ["proof (state)\nthis:\n  t' \\<turnstile> (sx, m1') \\<approx>i (sxx, m2')\n\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "show \"(\\<exists>sx1. r1.init_fin_final sx1) = (\\<exists>sx2. r2.init_fin_final sx2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "using ex_final1_conv_ex_final2"], ["proof (prove)\nusing this:\n  (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)\n\ngoal (1 subgoal):\n 1. Ex r1.init_fin_final = Ex r2.init_fin_final", "by(auto)"], ["proof (state)\nthis:\n  Ex r1.init_fin_final = Ex r2.init_fin_final\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}